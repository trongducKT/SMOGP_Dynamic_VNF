{"1": [{"determining": "( ( Max( Min( CRS ,FirstVNF_RAM_Server ),Max( FirstVNF_RAM_Server,BR ) ) - Min( ( FirstVNF_RAM_Server / MDR ) ,( PN / FirstVNF_CPU_Server ) ) ) / Min( ( Min( CRS ,FirstVNF_RAM ) - ( FirstVNF_Mem / RRS ) ) ,( Max( FirstVNF_RAM,ACS ) - ( Const / FirstVNF_RAM ) ) ) )", "choosing": "( ( MUC + MLU ) - ( Max( ( MUM + MUC ),( MUC * MLU ) ) + ( ( MUR / DS ) + Min( MUM ,MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - DDR ) / ( ARS / FirstVNF_Mem ) )", "choosing": "Max( ( RRSe / CS ),Max( DS,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ,( ( FirstVNF_RAM_Server * PN ) + FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( MLU * RCSe ) / Max( DS,MLU ) ) / ( ( RRSe / RMSe ) * ( DS / RMSe ) ) ) / ( ( ( MLU + MUC ) + ( RRSe + RCSe ) ) * Max( Max( DS,DS ),Min( MUM ,MUM ) ) ) )", "obj1": 0.8102687525070197, "obj2": 0.1615195081254526}, {"determining": "( ( DDR + ( DDR - BR ) ) - ( AMS - Const ) )", "choosing": "Min( Min( ( MUR * MUM ) ,RMSe ) ,( ( MUC * RRSe ) - MUM ) )", "obj1": 0.9370236662655436, "obj2": 0.05109662819921238}, {"determining": "( Min( Min( ( DDR - AMS ) ,( FirstVNF_Mem_Server / ARS ) ) ,( ( MRS / MRS ) + ( FirstVNF_RAM_Server - AMS ) ) ) + Min( ( ( ACS / PN ) - Min( DDR ,BR ) ) ,Min( Min( DDR ,FirstVNF_CPU ) ,( DDR / MDR ) ) ) )", "choosing": "( ( Min( ( RMSe * MUM ) ,DS ) / RMSe ) + ( ( RRSe + RMSe ) * ( ( MUC * CS ) - MLU ) ) )", "obj1": 0.9895707982350581, "obj2": 0.010897897893662467}, {"determining": "( ( ( Min( BR ,CRS ) + ( PN + FirstVNF_CPU_Server ) ) - ( ( RRS - RRS ) * Min( DDR ,FirstVNF_RAM_Server ) ) ) / ( ( ( DDR * RRS ) * Min( FirstVNF_RAM_Server ,PN ) ) - ( ( MRS - ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( ( MUC + MUC ) + RRSe ) / CS ),( MUM + MUR ) )", "obj1": 0.8965102286401926, "obj2": 0.07622433889389708}, {"determining": "( ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) / ( FirstVNF_Mem_Server / ACS ) )", "choosing": "Min( Max( ( MUM - DS ),( CS + MUM ) ) ,( ( RRSe * CS ) + Min( RCSe ,Min( Min( ( RMSe / ( RRSe / MLU ) ) ,MUC ) ,DS ) ) ) )", "obj1": 0.8435619735258725, "obj2": 0.14450284241271935}, {"determining": "( ( ( FirstVNF_Mem + RRS ) / Max( FirstVNF_Mem_Server,ACS ) ) - ( Min( FirstVNF_Mem ,FirstVNF_RAM_Server ) / ( FirstVNF_Mem_Server / DDR ) ) )", "choosing": "Min( Min( Max( RRSe,MUR ) ,Min( MUR ,MUC ) ) ,( Max( DS,RMSe ) - ( MUC - RMSe ) ) )", "obj1": 0.8455675892498997, "obj2": 0.12985841870594764}, {"determining": "( ( FirstVNF_Mem_Server * MRS ) * Max( Const,CRS ) )", "choosing": "( ( MUM * MUM ) - ( MUC * CS ) )", "obj1": 0.8644203770557561, "obj2": 0.09733787914720728}, {"determining": "Max( ( ( MRS - RRS ) / ( FirstVNF_CPU_Server - Const ) ),Min( Min( FirstVNF_CPU ,CRS ) ,( FirstVNF_CPU * DDR ) ) )", "choosing": "( ( RRSe / ( CS * RMSe ) ) / Max( RRSe,( MUC + MUC ) ) )", "obj1": 0.8724428399518652, "obj2": 0.0877402482554055}, {"determining": "( ( ( FirstVNF_RAM - CRS ) + ( ACS - Const ) ) + Max( ( CRS / AMS ),( AMS - ARS ) ) )", "choosing": "( ( ( RCSe / RCSe ) / ( DS - MUR ) ) * ( ( MLU + MUM ) - ( MUR + CS ) ) )", "obj1": 0.838748495788207, "obj2": 0.16089897992063962}, {"determining": "( ( ( ( MDR - DDR ) / ( FirstVNF_CPU - FirstVNF_CPU ) ) * ( ( FirstVNF_CPU / ARS ) + ( BR * FirstVNF_Mem_Server ) ) ) * Max( ( ( DDR - MDR ) - ( MRS / FirstVNF_Mem ) ),( ( DDR * FirstVNF_RAM ) * ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( CS - MLU ) - ( MUC + MUM ) ) / ( ( RCSe - RRSe ) + ( DS - RRSe ) ) ) - ( ( ( RRSe - MUC ) / ( MLU + DS ) ) / ( Max( CS,CS ) - ( RMSe / MUM ) ) ) )", "obj1": 0.8808664259927798, "obj2": 0.08374230668857154}, {"determining": "Max( ( FirstVNF_Mem_Server + AMS ),( ACS + FirstVNF_CPU ) )", "choosing": "( ( RMSe * MUC ) / ( RMSe - RCSe ) )", "obj1": 0.8632170076213398, "obj2": 0.10752369225681505}, {"determining": "Min( Min( DDR ,BR ) ,( FirstVNF_CPU - CRS ) )", "choosing": "Min( Min( ( ( MUM * ( ( MLU / MUC ) * ( MUM / RCSe ) ) ) + MUC ) ,MUC ) ,( DS / CS ) )", "obj1": 0.8908945046129162, "obj2": 0.07833995115160775}, {"determining": "( ( ( CRS - PN ) / ( FirstVNF_RAM_Server / FirstVNF_RAM ) ) / Min( Max( FirstVNF_RAM_Server,MDR ) ,Max( RRS,CRS ) ) )", "choosing": "( ( DS * DS ) / ( RMSe / MUR ) )", "obj1": 0.99117529081428, "obj2": 0.007843097372748074}, {"determining": "Max( ( Max( FirstVNF_CPU,FirstVNF_CPU_Server ) - ( PN + CRS ) ),Max( Max( FirstVNF_Mem_Server,PN ),( MRS / CRS ) ) )", "choosing": "( Min( ( MLU - MUM ) ,( CS * RMSe ) ) - ( ( MUM * MUM ) - Min( CS ,RRSe ) ) )", "obj1": 0.8407541115122342, "obj2": 0.15795240340553576}, {"determining": "( ( FirstVNF_Mem_Server / FirstVNF_CPU_Server ) / Min( RRS ,CRS ) )", "choosing": "Max( Max( RMSe,RRSe ),( MLU + RRSe ) )", "obj1": 0.8511833132771761, "obj2": 0.12167961568265523}, {"determining": "( ( FirstVNF_Mem_Server * BR ) + Min( FirstVNF_Mem_Server ,RRS ) )", "choosing": "( ( DS * MUC ) - Min( MUR ,MLU ) )", "obj1": 0.8588046530284797, "obj2": 0.11715414858631013}, {"determining": "( ( ( Min( PN ,FirstVNF_RAM_Server ) + ( ARS / BR ) ) / ( Min( MRS ,FirstVNF_Mem_Server ) * ( ARS / CRS ) ) ) + ( ( Min( FirstVNF_Mem ,MRS ) + ( DDR - FirstVNF_Mem_Server ) ) / ( ( ACS / PN ) * Min( AMS ,Const ) ) ) )", "choosing": "Min( ( ( Max( MUM,MLU ) + ( RRSe - MUC ) ) * ( Min( RCSe ,MUC ) / ( MLU + MUM ) ) ) ,Min( ( ( RMSe / RRSe ) / Max( DS,CS ) ) ,Max( ( RRSe * RCSe ),( RRSe * MLU ) ) ) )", "obj1": 0.855595667870036, "obj2": 0.11990975432715383}, {"determining": "( ( AMS / BR ) * ( Const * MRS ) )", "choosing": "( Min( MUR ,MLU ) + Min( MUR ,MUC ) )", "obj1": 0.8559967910148416, "obj2": 0.11945458241302218}, {"determining": "( ( Max( Min( Const ,ARS ),( CRS + AMS ) ) + ( Max( FirstVNF_Mem_Server,PN ) / ( FirstVNF_Mem_Server / DDR ) ) ) + ( ( ( MRS * MRS ) + ( AMS + FirstVNF_RAM_Server ) ) * ( ( MDR * MRS ) - Min( FirstVNF_CPU_Server ,DDR ) ) ) )", "choosing": "Max( ( Min( Max( RCSe,RMSe ) ,Max( DS,DS ) ) - ( ( RRSe * RCSe ) - Min( MUC ,CS ) ) ),Max( Min( ( RCSe / MUM ) ,( DS - MUM ) ),( Max( MUC,RCSe ) * ( RRSe - RRSe ) ) ) )", "obj1": 0.8399518652226233, "obj2": 0.16028838048649727}, {"determining": "( Max( ( Const + DDR ),Max( FirstVNF_RAM_Server,RRS ) ) / ( Max( FirstVNF_CPU_Server,ACS ) - ( ARS + ARS ) ) )", "choosing": "Min( ( CS + RCSe ) ,( MUR + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( RRS + FirstVNF_CPU ) ,( RRS - BR ) ) / Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( FirstVNF_Mem + AMS ) ) )", "choosing": "( ( RRSe - MUM ) * Min( RMSe ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_RAM_Server - FirstVNF_Mem_Server ) * ( MDR + FirstVNF_RAM ) ) + Max( ( FirstVNF_Mem_Server + MRS ),( DDR * FirstVNF_RAM_Server ) ) ) / Min( ( ( PN + MRS ) * ( FirstVNF_CPU + ARS ) ) ,( ( DDR * ARS ) - Max( ACS,FirstVNF_RAM ) ) ) )", "choosing": "( ( ( RMSe / ( DS - Max( RCSe,Min( CS ,RCSe ) ) ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ACS ,FirstVNF_Mem ) - ( DDR / PN ) )", "choosing": "Max( Max( Min( ( CS - CS ) ,DS ),CS ),( CS / MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ( Min( FirstVNF_Mem ,FirstVNF_RAM ) / ( BR * FirstVNF_Mem_Server ) ) ,( ( DDR / MDR ) + Max( FirstVNF_CPU_Server,BR ) ) ) ,Min( ( ( DDR + FirstVNF_CPU_Server ) * ( AMS + BR ) ) ,( Min( BR ,CRS ) - ( PN + FirstVNF_CPU ) ) ) )", "choosing": "( ( ( Min( RRSe ,DS ) * ( RRSe / MUR ) ) + ( ( MUR - MUC ) + ( RRSe * RCSe ) ) ) - ( ( Max( MUC,RRSe ) / Min( RMSe ,RRSe ) ) + ( ( RCSe - MUR ) * ( MUR * RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}], "2": [{"determining": "Min( Min( ( Min( FirstVNF_Mem ,FirstVNF_RAM ) / ( BR * FirstVNF_Mem_Server ) ) ,( ( DDR / MDR ) + Max( FirstVNF_CPU_Server,BR ) ) ) ,Min( ( ( DDR + FirstVNF_CPU_Server ) * ( AMS + BR ) ) ,( Min( BR ,CRS ) - ( PN + FirstVNF_CPU ) ) ) )", "choosing": "( ( ( Min( RRSe ,DS ) * ( RRSe / MUR ) ) + ( ( MUR - MUC ) + ( RRSe * RCSe ) ) ) - ( ( Max( MUC,RRSe ) / Min( RMSe ,RRSe ) ) + ( ( RCSe - MUR ) * ( MUR * RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Min( CRS ,FirstVNF_RAM_Server ),Max( FirstVNF_RAM_Server,BR ) ) - Min( ( FirstVNF_RAM_Server / MDR ) ,( PN / FirstVNF_CPU_Server ) ) ) / Min( ( Min( CRS ,FirstVNF_RAM ) - ( FirstVNF_Mem / RRS ) ) ,( Max( FirstVNF_RAM,ACS ) - ( Const / FirstVNF_RAM ) ) ) )", "choosing": "( ( MUC + MLU ) - ( Max( ( MUM + MUC ),( MUC * MLU ) ) + ( ( MUR / DS ) + Min( MUM ,MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( RMSe / ( DS * MUM ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 0.8086642599277978, "obj2": 0.1625182517488754}, {"determining": "( ( DDR + ( DDR - BR ) ) - ( AMS - Const ) )", "choosing": "Min( Min( ( MUR * MUM ) ,RMSe ) ,( ( MUC * RRSe ) - MUM ) )", "obj1": 0.9370236662655436, "obj2": 0.05109662819921238}, {"determining": "( Min( Min( ( DDR - AMS ) ,( FirstVNF_Mem_Server / ARS ) ) ,( ( MRS / MRS ) + ( FirstVNF_RAM_Server - AMS ) ) ) + Min( ( ( ACS / PN ) - Min( DDR ,BR ) ) ,Min( Min( DDR ,FirstVNF_CPU ) ,( DDR / MDR ) ) ) )", "choosing": "( ( Min( ( RMSe * MUM ) ,DS ) / RMSe ) + ( ( RRSe + RMSe ) * ( ( MUC * CS ) - MLU ) ) )", "obj1": 0.9895707982350581, "obj2": 0.010897897893662467}, {"determining": "( ( ( Min( BR ,CRS ) + ( PN + FirstVNF_CPU_Server ) ) - ( ( RRS - RRS ) * Min( DDR ,FirstVNF_RAM_Server ) ) ) / ( ( ( DDR * RRS ) * Min( FirstVNF_RAM_Server ,PN ) ) - ( ( MRS - ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( Min( MLU ,( DS / Max( Min( Min( MLU ,RMSe ) ,MUM ),MUC ) ) ) + RRSe ) / CS ),( MUM + MUR ) )", "obj1": 0.8965102286401926, "obj2": 0.07622433889389708}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( RMSe * MUM ) / ( CS * DS ) ) + Min( ( DS / MLU ) ,Min( MUM ,RMSe ) ) ) + Max( Max( ( RMSe / MUM ),( RRSe * MLU ) ),( ( RRSe / RCSe ) * ( RCSe * RRSe ) ) ) ),Max( ( Max( Max( MUM,DS ),Max( DS,DS ) ) + ( ( RMSe * MUM ) * ( RRSe * MLU ) ) ),Max( ( ( MUR + RRSe ) * Max( RCSe,RRSe ) ),Max( Min( RMSe ,DS ),( RRSe / MUC ) ) ) ) ) - ( Min( ( ( ( CS * DS ) / ( DS + RRSe ) ) / Min( Max( MUR,MUC ) ,( RRSe * RMSe ) ) ) ,Max( ( Min( CS ,DS ) / Min( CS ,MUM ) ),( ( MUM + RMSe ) + ( RRSe + MUM ) ) ) ) * ( ( ( ( RRSe / RMSe ) / ( MLU * RMSe ) ) / ( Min( MUC ,MUM ) / ( MUC / RRSe ) ) ) * Min( ( Max( MUM,CS ) / ( MUC * MLU ) ) ,( ( MUM - DS ) / ( MLU / RCSe ) ) ) ) ) ) / ( ( Min( Max( ( ( RMSe - RMSe ) / ( RMSe / RCSe ) ),( ( CS + RMSe ) * ( RCSe * MUM ) ) ) ,( ( Max( MUR,RMSe ) + ( RCSe * RCSe ) ) + Min( Max( MUR,DS ) ,( DS + RMSe ) ) ) ) + ( ( ( ( MUR - DS ) / Max( DS,CS ) ) * Min( ( MUC + MLU ) ,( MLU / MLU ) ) ) - ( Max( ( RMSe * MUR ),( RMSe - RCSe ) ) / ( Min( MUM ,RMSe ) + ( RMSe + RRSe ) ) ) ) ) - Max( Max( Min( ( Max( MUM,RMSe ) * ( MUC - MUC ) ) ,Min( Min( RMSe ,DS ) ,( RCSe / DS ) ) ),( Max( Min( CS ,RMSe ),Min( RMSe ,MLU ) ) - Max( Min( MUC ,MLU ),( RRSe - RCSe ) ) ) ),Min( ( ( ( DS + MUC ) + Max( MUM,CS ) ) / ( Max( MUM,RCSe ) + ( RMSe / MUC ) ) ) ,( Min( ( RMSe - MUC ) ,( RMSe + MUR ) ) / ( ( RCSe - RMSe ) / ( CS - RCSe ) ) ) ) ) ) ) + Max( Max( ( ( ( Max( Min( MUM ,MLU ),( MLU + MUC ) ) + ( Max( CS,RRSe ) * ( CS * RMSe ) ) ) / ( ( ( MLU + DS ) / Min( CS ,MLU ) ) * ( Min( MUM ,MLU ) * ( MUC * MUC ) ) ) ) / Max( ( ( ( MLU * MUM ) * ( MUM - MUR ) ) + ( ( CS - DS ) * ( MLU / MUC ) ) ),( ( Max( MLU,MLU ) / Min( MUR ,MUR ) ) - ( ( CS / CS ) / Max( MLU,RRSe ) ) ) ) ),Max( ( ( ( Min( MLU ,MUR ) + ( MLU - MLU ) ) + Max( Min( RRSe ,RRSe ),Max( MLU,MUM ) ) ) / ( ( ( MUM * RMSe ) + ( MUR - RMSe ) ) - ( Min( MLU ,MLU ) * ( MUR - MUR ) ) ) ),( Max( ( ( CS - MUR ) - ( DS - RRSe ) ),( Max( RRSe,RMSe ) / ( RRSe / MUM ) ) ) / Min( ( ( DS / MUM ) - ( RRSe / CS ) ) ,Max( ( CS * MUM ),( RCSe / MLU ) ) ) ) ) ),( ( ( Max( ( ( MLU + MLU ) / ( MUR / MUC ) ),Max( ( MUC + CS ),( MLU + MLU ) ) ) * ( ( ( CS + CS ) + ( DS / DS ) ) * Max( ( RMSe - MLU ),( RMSe + MLU ) ) ) ) + ( Max( Max( ( RCSe - RCSe ),( CS * MUC ) ),( ( MUR / CS ) * Min( MLU ,MLU ) ) ) - ( Max( Min( MUR ,MUM ),( RRSe - MUR ) ) + ( ( MLU * MUR ) * ( DS - MUC ) ) ) ) ) / Max( Min( ( ( Max( RCSe,CS ) / ( MUC - CS ) ) - ( ( MLU - MUC ) + ( CS * DS ) ) ) ,( ( ( MUM - RCSe ) * ( RRSe + CS ) ) + ( ( MLU - MUR ) + ( MUM / CS ) ) ) ),Min( ( Max( Min( MLU ,MUR ),Max( DS,RCSe ) ) / ( Max( CS,MUC ) + Max( RRSe,MUR ) ) ) ,Min( Min( ( RRSe * MLU ) ,( RMSe - MUM ) ) ,( ( MUM / MLU ) / ( MUM / MUC ) ) ) ) ) ) ) )", "obj1": 0.8247091857200161, "obj2": 0.14312536938076542}, {"determining": "( ( ( FirstVNF_Mem + RRS ) / Max( FirstVNF_Mem_Server,ACS ) ) - ( Min( FirstVNF_Mem ,FirstVNF_RAM_Server ) / ( FirstVNF_Mem_Server / DDR ) ) )", "choosing": "Min( Min( Max( RRSe,MUR ) ,Min( MUR ,MUC ) ) ,( Max( DS,RMSe ) - ( MUC - RMSe ) ) )", "obj1": 0.8455675892498997, "obj2": 0.12985841870594764}, {"determining": "Const", "choosing": "( ( ( RCSe * DS ) + Max( MUR,MLU ) ) + ( ( MUM + Min( Min( ( MUM * MUR ) ,RMSe ) ,( RMSe - ( CS - ( Min( CS ,MUR ) - Min( RRSe ,MUM ) ) ) ) ) ) + ( ( RCSe + RCSe ) / CS ) ) )", "obj1": 0.8138788608102687, "obj2": 0.15957997226806556}, {"determining": "Max( ( FirstVNF_Mem_Server + AMS ),( ACS + FirstVNF_CPU ) )", "choosing": "( ( RMSe * MUC ) / ( RMSe - RCSe ) )", "obj1": 0.8632170076213398, "obj2": 0.10752369225681505}, {"determining": "Const", "choosing": "( Min( Min( Min( RCSe ,MLU ) ,( RCSe + RCSe ) ) ,( Max( RCSe,DS ) - ( ( ( Max( ( RCSe - CS ),( MLU + MUM ) ) - ( ( DS * CS ) / MUM ) ) * ( MUM + RMSe ) ) * MLU ) ) ) / ( ( Min( DS ,RRSe ) + Max( RCSe,MUC ) ) + ( Max( DS,MUR ) + Max( MUC,DS ) ) ) )", "obj1": 0.855595667870036, "obj2": 0.11658265390739556}, {"determining": "( ( ( ( MDR - DDR ) / ( FirstVNF_CPU - FirstVNF_CPU ) ) * ( ( FirstVNF_CPU / ARS ) + ( BR * FirstVNF_Mem_Server ) ) ) * Max( ( ( DDR - MDR ) - ( MRS / FirstVNF_Mem ) ),( ( DDR * FirstVNF_RAM ) * ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( CS - MLU ) - ( MUC + MUM ) ) / ( ( RCSe - RRSe ) + ( DS - RRSe ) ) ) - ( ( ( RRSe - MUC ) / ( MLU + DS ) ) / ( Max( CS,CS ) - ( RMSe / MUM ) ) ) )", "obj1": 0.8808664259927798, "obj2": 0.08374230668857154}, {"determining": "( ( ( CRS - PN ) / ( FirstVNF_RAM_Server / FirstVNF_RAM ) ) / Min( Max( FirstVNF_RAM_Server,MDR ) ,Max( RRS,CRS ) ) )", "choosing": "( ( DS * DS ) / ( RMSe / MUR ) )", "obj1": 0.99117529081428, "obj2": 0.007843097372748074}, {"determining": "Min( Min( DDR ,BR ) ,( FirstVNF_CPU - CRS ) )", "choosing": "Min( Min( ( ( MUM * ( ( MLU / MUC ) * ( MUM / RCSe ) ) ) + Max( DS,MUC ) ) ,MUC ) ,( RMSe / CS ) )", "obj1": 0.8908945046129162, "obj2": 0.07833995115160775}, {"determining": "( ( FirstVNF_Mem_Server * MRS ) * Max( Const,CRS ) )", "choosing": "( ( MUM * MUM ) - ( MUC * CS ) )", "obj1": 0.8644203770557561, "obj2": 0.09733787914720728}, {"determining": "Const", "choosing": "Max( ( ( MUM + RRSe ) / CS ),( MUM + MUR ) )", "obj1": 0.8684316085038106, "obj2": 0.09409786883453658}, {"determining": "( ( FirstVNF_Mem_Server / FirstVNF_CPU_Server ) / Min( RRS ,CRS ) )", "choosing": "Max( Max( RMSe,RRSe ),( MLU + RRSe ) )", "obj1": 0.8511833132771761, "obj2": 0.12167961568265523}, {"determining": "Max( ( ( MRS - RRS ) / ( FirstVNF_CPU_Server - Const ) ),Min( Min( FirstVNF_CPU ,CRS ) ,( FirstVNF_CPU * DDR ) ) )", "choosing": "( ( RRSe / ( CS * RMSe ) ) / Max( RRSe,( MUC + MUC ) ) )", "obj1": 0.8724428399518652, "obj2": 0.0877402482554055}, {"determining": "Const", "choosing": "( ( RRSe * RCSe ) + ( Min( MUR ,RCSe ) / Min( ( CS - Min( CS ,MLU ) ) ,CS ) ) )", "obj1": 0.8479743281187324, "obj2": 0.1263463750780528}, {"determining": "Const", "choosing": "( ( MUM + MLU ) / ( CS + Min( Min( RRSe ,RCSe ) ,CS ) ) )", "obj1": 0.8764540713999198, "obj2": 0.08671084538710801}, {"determining": "Min( ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ,( ( FirstVNF_RAM_Server * PN ) + FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( MLU * RCSe ) / Max( DS,MLU ) ) / ( ( RRSe / RMSe ) * ( DS / RMSe ) ) ) / ( ( ( MLU + MUC ) + ( RRSe + RCSe ) ) * Max( Max( DS,DS ),Min( MUM ,MUM ) ) ) )", "obj1": 0.8102687525070197, "obj2": 0.1615195081254526}, {"determining": "Const", "choosing": "( ( ( RMSe / ( DS - Max( RCSe,Min( CS ,RCSe ) ) ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 0.8953068592057761, "obj2": 0.07784029037888494}, {"determining": "Const", "choosing": "( ( MUM + MLU ) / ( CS + Min( Min( RRSe ,RCSe ) ,CS ) ) )", "obj1": 0.8760529482551144, "obj2": 0.08715926006538036}, {"determining": "( ( RRS - DDR ) / ( ARS / FirstVNF_Mem ) )", "choosing": "Max( ( RRSe / CS ),Max( DS,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( Const + DDR ),Max( FirstVNF_RAM_Server,RRS ) ) / ( Max( FirstVNF_CPU_Server,ACS ) - ( ARS + ARS ) ) )", "choosing": "Min( ( CS + RCSe ) ,( MUR + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( RRS + FirstVNF_CPU ) ,( RRS - BR ) ) / Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( FirstVNF_Mem + AMS ) ) )", "choosing": "( ( RRSe - Max( DS,Max( MLU,CS ) ) ) * Min( RMSe ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_RAM_Server - FirstVNF_Mem_Server ) * ( MDR + FirstVNF_RAM ) ) + Max( ( FirstVNF_Mem_Server + MRS ),( DDR * FirstVNF_RAM_Server ) ) ) / Min( ( ( PN + MRS ) * ( FirstVNF_CPU + ARS ) ) ,( ( DDR * ARS ) - Max( ACS,FirstVNF_RAM ) ) ) )", "choosing": "( ( ( RMSe / ( DS - Max( RCSe,Min( CS ,RCSe ) ) ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ACS ,FirstVNF_Mem ) - ( DDR / PN ) )", "choosing": "Max( Max( Min( ( CS - CS ) ,DS ),CS ),( CS / MLU ) )", "obj1": 1.0, "obj2": 0.0}], "3": [{"determining": "( Min( ACS ,FirstVNF_Mem ) - ( DDR / PN ) )", "choosing": "Max( Max( Min( ( CS - CS ) ,DS ),CS ),( CS / MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ( Min( FirstVNF_Mem ,FirstVNF_RAM ) / ( BR * FirstVNF_Mem_Server ) ) ,( ( DDR / MDR ) + Max( FirstVNF_CPU_Server,BR ) ) ) ,Min( ( ( DDR + FirstVNF_CPU_Server ) * ( AMS + BR ) ) ,( Min( BR ,CRS ) - ( PN + FirstVNF_CPU ) ) ) )", "choosing": "( ( ( Min( RRSe ,DS ) * ( RRSe / MUR ) ) + ( ( MUR - MUC ) + ( RRSe * RCSe ) ) ) - ( ( Max( MUC,RRSe ) / Min( RMSe ,RRSe ) ) + ( ( RCSe - MUR ) * ( MUR * RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( RMSe / ( DS * MUM ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 0.8086642599277978, "obj2": 0.1625182517488754}, {"determining": "( ( DDR + ( DDR - BR ) ) - ( AMS - Const ) )", "choosing": "Min( Min( ( MUR * MUM ) ,RMSe ) ,( ( MUC * RRSe ) - MUM ) )", "obj1": 0.9370236662655436, "obj2": 0.05109662819921238}, {"determining": "( Min( Min( ( DDR - AMS ) ,( FirstVNF_Mem_Server / ARS ) ) ,( ( MRS / MRS ) + ( FirstVNF_RAM_Server - AMS ) ) ) + Min( ( ( ACS / PN ) - Min( DDR ,BR ) ) ,Min( Min( DDR ,FirstVNF_CPU ) ,( DDR / MDR ) ) ) )", "choosing": "( ( Min( ( RMSe * MUM ) ,DS ) / RMSe ) + ( ( RRSe + RMSe ) * ( ( MUC * CS ) - MLU ) ) )", "obj1": 0.9895707982350581, "obj2": 0.010897897893662467}, {"determining": "( ( ( Min( BR ,CRS ) + ( PN + FirstVNF_CPU_Server ) ) - ( ( RRS - RRS ) * Min( DDR ,FirstVNF_RAM_Server ) ) ) / ( ( ( DDR * RRS ) * Min( FirstVNF_RAM_Server ,PN ) ) - ( ( MRS - ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( Min( MLU ,( DS / Max( Min( Min( MLU ,RMSe ) ,MUM ),MUC ) ) ) + RRSe ) / CS ),( MUM + MUR ) )", "obj1": 0.8965102286401926, "obj2": 0.07622433889389708}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( RMSe * MUM ) / ( CS * DS ) ) + Min( ( DS / MLU ) ,Min( MUM ,RMSe ) ) ) + Max( Max( ( RMSe / MUM ),( RRSe * MLU ) ),( ( RRSe / RCSe ) * ( RCSe * RRSe ) ) ) ),Max( ( Max( Max( MUM,DS ),Max( DS,DS ) ) + ( ( RMSe * MUM ) * ( RRSe * MLU ) ) ),Max( ( ( MUR + RRSe ) * Max( RCSe,RRSe ) ),Max( Min( RMSe ,DS ),( RRSe / MUC ) ) ) ) ) - ( Min( ( ( ( CS * DS ) / ( DS + RRSe ) ) / Min( Max( MUR,MUC ) ,( RRSe * RMSe ) ) ) ,Max( ( Min( CS ,DS ) / Min( CS ,MUM ) ),( ( MUM + RMSe ) + ( RRSe + MUM ) ) ) ) * ( ( ( ( RRSe / RMSe ) / ( MLU * RMSe ) ) / ( Min( MUC ,MUM ) / ( MUC / RRSe ) ) ) * Min( ( Max( MUM,CS ) / ( MUC * MLU ) ) ,( ( MUM - DS ) / ( MLU / RCSe ) ) ) ) ) ) / ( ( Min( Max( ( ( RMSe - RMSe ) / ( RMSe / RCSe ) ),( ( CS + RMSe ) * ( RCSe * MUM ) ) ) ,( ( Max( MUR,RMSe ) + ( RCSe * RCSe ) ) + Min( Max( MUR,DS ) ,( DS + RMSe ) ) ) ) + ( ( ( ( MUR - DS ) / Max( DS,CS ) ) * Min( ( MUC + MLU ) ,( MLU / MLU ) ) ) - ( Max( ( RMSe * MUR ),( RMSe - RCSe ) ) / ( Min( MUM ,RMSe ) + ( RMSe + RRSe ) ) ) ) ) - Max( Max( Min( ( Max( MUM,RMSe ) * ( MUC - MUC ) ) ,Min( Min( RMSe ,DS ) ,( RCSe / DS ) ) ),( Max( Min( CS ,RMSe ),Min( RMSe ,MLU ) ) - Max( Min( MUC ,MLU ),( RRSe - RCSe ) ) ) ),Min( ( ( ( DS + MUC ) + Max( MUM,CS ) ) / ( Max( MUM,RCSe ) + ( RMSe / MUC ) ) ) ,( Min( ( RMSe - MUC ) ,( RMSe + MUR ) ) / ( ( RCSe - RMSe ) / ( CS - RCSe ) ) ) ) ) ) ) + Max( Max( ( ( ( Max( Min( MUM ,MLU ),( MLU + MUC ) ) + ( Max( CS,RRSe ) * ( CS * RMSe ) ) ) / ( ( ( MLU + DS ) / Min( CS ,MLU ) ) * ( Min( MUM ,MLU ) * ( MUC * MUC ) ) ) ) / Max( ( ( ( MLU * MUM ) * ( MUM - MUR ) ) + ( ( CS - DS ) * ( MLU / MUC ) ) ),( ( Max( MLU,MLU ) / Min( MUR ,MUR ) ) - ( ( CS / CS ) / Max( MLU,RRSe ) ) ) ) ),Max( ( ( ( Min( MLU ,MUR ) + ( MLU - MLU ) ) + Max( Min( RRSe ,RRSe ),Max( MLU,MUM ) ) ) / ( ( ( MUM * RMSe ) + ( MUR - RMSe ) ) - ( Min( MLU ,MLU ) * ( MUR - MUR ) ) ) ),( Max( ( ( CS - MUR ) - ( DS - RRSe ) ),( Max( RRSe,RMSe ) / ( RRSe / MUM ) ) ) / Min( ( ( DS / MUM ) - ( RRSe / CS ) ) ,Max( ( CS * MUM ),( RCSe / MLU ) ) ) ) ) ),( ( ( Max( ( ( MLU + MLU ) / ( MUR / MUC ) ),Max( ( MUC + CS ),( MLU + MLU ) ) ) * ( ( ( CS + CS ) + ( DS / DS ) ) * Max( ( RMSe - MLU ),( RMSe + MLU ) ) ) ) + ( Max( Max( ( RCSe - RCSe ),( CS * MUC ) ),( ( MUR / CS ) * Min( MLU ,MLU ) ) ) - ( Max( Min( MUR ,MUM ),( RRSe - MUR ) ) + ( ( MLU * MUR ) * ( DS - MUC ) ) ) ) ) / Max( Min( ( ( Max( RCSe,CS ) / ( MUC - CS ) ) - ( ( MLU - MUC ) + ( CS * DS ) ) ) ,( ( ( MUM - RCSe ) * ( RRSe + CS ) ) + ( ( MLU - MUR ) + ( MUM / CS ) ) ) ),Min( ( Max( Min( MLU ,MUR ),Max( DS,RCSe ) ) / ( Max( CS,MUC ) + Max( RRSe,MUR ) ) ) ,Min( Min( ( RRSe * MLU ) ,( RMSe - MUM ) ) ,( ( MUM / MLU ) / ( MUM / MUC ) ) ) ) ) ) ) )", "obj1": 0.8247091857200161, "obj2": 0.14312536938076542}, {"determining": "( ( ( FirstVNF_Mem + RRS ) / Max( FirstVNF_Mem_Server,ACS ) ) - ( Min( FirstVNF_Mem ,FirstVNF_RAM_Server ) / ( FirstVNF_Mem_Server / DDR ) ) )", "choosing": "Min( Min( Max( RRSe,MUR ) ,Min( MUR ,MUC ) ) ,( Max( DS,RMSe ) - ( MUC - RMSe ) ) )", "obj1": 0.8455675892498997, "obj2": 0.12985841870594764}, {"determining": "Const", "choosing": "( ( ( RCSe / DS ) + Max( MUR,MLU ) ) + ( ( MUM + Min( Min( ( MUM * MUR ) ,RMSe ) ,( RMSe - ( CS - ( Min( CS ,MUR ) - Min( RRSe ,MUM ) ) ) ) ) ) + RRSe ) )", "obj1": 0.8138788608102687, "obj2": 0.158800654283322}, {"determining": "Max( ( FirstVNF_Mem_Server + AMS ),( ACS + FirstVNF_CPU ) )", "choosing": "( ( RMSe * MUC ) / ( RMSe - RCSe ) )", "obj1": 0.8632170076213398, "obj2": 0.10752369225681505}, {"determining": "Const", "choosing": "( Min( Max( Min( RCSe ,MLU ),( RCSe + RCSe ) ) ,( Max( RCSe,DS ) - ( RCSe * MLU ) ) ) / ( ( Min( DS ,RRSe ) + Max( RCSe,MUC ) ) + ( Max( DS,MUR ) + Max( MUC,DS ) ) ) )", "obj1": 0.8551945447252306, "obj2": 0.1159239172772121}, {"determining": "( ( ( ( MDR - DDR ) / ( FirstVNF_CPU - FirstVNF_CPU ) ) * ( ( FirstVNF_CPU / ARS ) + ( BR * FirstVNF_Mem_Server ) ) ) * Max( ( ( DDR - MDR ) - ( MRS / FirstVNF_Mem ) ),( ( DDR * FirstVNF_RAM ) * ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( CS - MLU ) - ( MUC + MUM ) ) / ( ( RCSe - RRSe ) + ( DS - RRSe ) ) ) - ( ( ( RRSe - MUC ) / ( MLU + DS ) ) / ( Max( CS,CS ) - ( RMSe / MUM ) ) ) )", "obj1": 0.8808664259927798, "obj2": 0.08374230668857154}, {"determining": "( ( ( CRS - PN ) / ( FirstVNF_RAM_Server / FirstVNF_RAM ) ) / Min( Max( FirstVNF_RAM_Server,MDR ) ,Max( RRS,CRS ) ) )", "choosing": "( ( DS * DS ) / ( RMSe / MUR ) )", "obj1": 0.99117529081428, "obj2": 0.007843097372748074}, {"determining": "Min( Min( DDR ,BR ) ,( FirstVNF_CPU - CRS ) )", "choosing": "Min( Min( ( ( MUM * ( ( MLU / MUC ) * ( MUM / RCSe ) ) ) + Max( DS,MUC ) ) ,MUC ) ,( RMSe / CS ) )", "obj1": 0.8908945046129162, "obj2": 0.07833995115160775}, {"determining": "Const", "choosing": "Max( ( ( MUM + RRSe ) / CS ),( MUM + MUR ) )", "obj1": 0.8684316085038106, "obj2": 0.09409786883453658}, {"determining": "Max( ( ( MRS - RRS ) / ( FirstVNF_CPU_Server - Const ) ),Min( Min( FirstVNF_CPU ,CRS ) ,( FirstVNF_CPU * DDR ) ) )", "choosing": "( ( RRSe / ( CS * RMSe ) ) / Max( RRSe,( MUC + MUC ) ) )", "obj1": 0.8724428399518652, "obj2": 0.0877402482554055}, {"determining": "( ( FirstVNF_Mem_Server / FirstVNF_CPU_Server ) / Min( RRS ,CRS ) )", "choosing": "Max( Max( RMSe,RRSe ),( MLU + RRSe ) )", "obj1": 0.8511833132771761, "obj2": 0.12167961568265523}, {"determining": "( ( FirstVNF_Mem_Server * MRS ) * Max( Const,CRS ) )", "choosing": "( ( MUM * MUM ) - ( MUC * CS ) )", "obj1": 0.8644203770557561, "obj2": 0.09733787914720728}, {"determining": "Const", "choosing": "( ( RRSe * RCSe ) + ( Min( MUR ,RCSe ) / Min( ( CS - Min( CS ,MLU ) ) ,CS ) ) )", "obj1": 0.8479743281187324, "obj2": 0.1263463750780528}, {"determining": "Const", "choosing": "( ( MUM + MLU ) / ( CS + Min( Min( RRSe ,RCSe ) ,CS ) ) )", "obj1": 0.8764540713999198, "obj2": 0.08671084538710801}, {"determining": "Const", "choosing": "( ( RRSe - Max( DS,Max( MLU,CS ) ) ) / Min( RMSe ,MUC ) )", "obj1": 0.8487765744083433, "obj2": 0.12242948482120052}, {"determining": "Const", "choosing": "( ( ( RMSe / ( DS - Max( RCSe,Min( CS ,RCSe ) ) ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 0.8953068592057761, "obj2": 0.07784029037888494}, {"determining": "Const", "choosing": "Max( ( ( ( MUC + MUC ) + RRSe ) / CS ),( MUM + MUR ) )", "obj1": 0.8648215002005616, "obj2": 0.09705771395516949}, {"determining": "Const", "choosing": "( ( MUM + MLU ) / ( CS + Min( Min( RRSe ,RCSe ) ,CS ) ) )", "obj1": 0.8760529482551144, "obj2": 0.08715926006538036}, {"determining": "Min( ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ,( ( FirstVNF_RAM_Server * PN ) + FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( MLU * RCSe ) / Max( DS,MLU ) ) / ( ( RRSe / RMSe ) * ( DS / RMSe ) ) ) / ( ( ( MLU + MUC ) + ( RRSe + RCSe ) ) * Max( Max( DS,DS ),Min( MUM ,MUM ) ) ) )", "obj1": 0.8102687525070197, "obj2": 0.1615195081254526}, {"determining": "Const", "choosing": "( ( ( RCSe / DS ) + RCSe ) - ( RRSe * MUC ) )", "obj1": 0.8122743682310469, "obj2": 0.16048817419340786}, {"determining": "Const", "choosing": "( ( ( RCSe / DS ) + Max( MUR,MLU ) ) + ( ( MUM + Min( Min( ( MUM * MUR ) ,RMSe ) ,( RMSe - ( CS - ( Min( CS ,MUR ) - Min( RRSe ,MUM ) ) ) ) ) ) + RRSe ) )", "obj1": 0.8126754913758524, "obj2": 0.16012213271386913}, {"determining": "Const", "choosing": "( ( ( RMSe / ( DS * MUM ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 0.8094665062174088, "obj2": 0.1615948835783405}, {"determining": "( ( Max( Min( CRS ,FirstVNF_RAM_Server ),Max( FirstVNF_RAM_Server,BR ) ) - Min( ( FirstVNF_RAM_Server / MDR ) ,( PN / FirstVNF_CPU_Server ) ) ) / Min( ( Min( CRS ,FirstVNF_RAM ) - ( FirstVNF_Mem / RRS ) ) ,( Max( FirstVNF_RAM,ACS ) - ( Const / FirstVNF_RAM ) ) ) )", "choosing": "( ( MUC + MLU ) - ( Max( ( MUM + MUC ),( MUC * MLU ) ) + ( ( MUR / DS ) + Min( MUM ,MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - DDR ) / ( ARS / FirstVNF_Mem ) )", "choosing": "Max( ( RRSe / CS ),Max( DS,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( Const + DDR ),Max( FirstVNF_RAM_Server,RRS ) ) / ( Max( FirstVNF_CPU_Server,ACS ) - ( ARS + ARS ) ) )", "choosing": "Min( ( CS + RCSe ) ,( MUR + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( RRS + FirstVNF_CPU ) ,( RRS - BR ) ) / Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( FirstVNF_Mem + AMS ) ) )", "choosing": "( ( RRSe - Max( DS,Max( MLU,CS ) ) ) * Min( RMSe ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_RAM_Server - FirstVNF_Mem_Server ) * ( MDR + FirstVNF_RAM ) ) + Max( ( FirstVNF_Mem_Server + MRS ),( DDR * FirstVNF_RAM_Server ) ) ) / Min( ( ( PN + MRS ) * ( FirstVNF_CPU + ARS ) ) ,( ( DDR * ARS ) - Max( ACS,FirstVNF_RAM ) ) ) )", "choosing": "( ( ( RMSe / ( DS - Max( RCSe,Min( CS ,RCSe ) ) ) ) / ( DS / RCSe ) ) / ( DS * DS ) )", "obj1": 1.0, "obj2": 0.0}]}