{"1": [{"determining": "( Min( MRS ,( ( ( ( BR / MDR ) / ( BR / ACS ) ) - ACS ) + BR ) ) * ( RRS - DDR ) )", "choosing": "( ( MUR / MUC ) * ( MUM - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "Max( ( RRSe / RCSe ),Min( ( RMSe - MUC ) ,DS ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( Const / BR ) * ( FirstVNF_CPU * FirstVNF_Mem ) )", "choosing": "( ( MUC / RMSe ) - ( MUR + DS ) )", "obj1": 0.138, "obj2": 0.693632577908714}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( FirstVNF_RAM_Server,MRS ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ( ACS / AMS ) + Min( ( FirstVNF_RAM + FirstVNF_Mem_Server ) ,FirstVNF_RAM_Server ) ) + Max( MDR,PN ) ) / FirstVNF_RAM ) - ( RRS * PN ) )", "choosing": "( ( MUR - CS ) + ( Max( ( Max( ( DS / RRSe ),CS ) / Max( MUC,( ( Min( MUC ,CS ) - MUM ) - ( RMSe - CS ) ) ) ),MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Max( MUC,RRSe ) * ( RRSe - RRSe ) )", "obj1": 0.236, "obj2": 0.5946516941186584}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "Min( ( FirstVNF_Mem / BR ) ,( FirstVNF_CPU_Server - Const ) )", "choosing": "( Max( MUM,MUM ) / Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) )", "obj1": 0.906, "obj2": 0.08954298001688388}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( Max( MDR,RRS ) / ( MDR - Min( MDR ,CRS ) ) )", "choosing": "Max( Min( Min( MLU ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Max( CS,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( FirstVNF_Mem / ( MRS / MRS ) ) )", "choosing": "( ( ( ( ( Max( MUM,( CS - ( DS + CS ) ) ) / ( RMSe * RMSe ) ) + DS ) * ( Min( RMSe ,RMSe ) - MUR ) ) * MLU ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / DDR ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( Max( DS,MUM ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,( Const - Max( CRS,FirstVNF_CPU_Server ) ) ) ) )", "choosing": "Max( ( ( CS + MLU ) - ( DS + CS ) ),( ( DS - MUC ) - ( MUR / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( CRS,( MRS / FirstVNF_CPU_Server ) ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC + CS ) ) - Min( ( ( MUR * MUM ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.382, "obj2": 0.4516691163185002}, {"determining": "Max( ( ( FirstVNF_RAM_Server * FirstVNF_RAM ) + ( RRS - FirstVNF_CPU_Server ) ),( ( FirstVNF_CPU_Server * FirstVNF_RAM ) + ( RRS / ARS ) ) )", "choosing": "( ( ( RRSe / DS ) / MUR ) / Max( RMSe,( CS / RCSe ) ) )", "obj1": 0.064, "obj2": 0.7434245489355443}, {"determining": "( Max( Min( ARS ,FirstVNF_Mem ),( Max( PN,FirstVNF_CPU ) - FirstVNF_CPU_Server ) ) - ( ( CRS / Const ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( Max( DS,DS ),( MUM + MLU ) ),( RCSe + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN * CRS ) ),( Min( MDR ,MRS ) * Min( BR ,( FirstVNF_RAM_Server * FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.582, "obj2": 0.31513122789150044}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ( Const + DDR ) ,( FirstVNF_RAM / ACS ) ) ,( ( ( FirstVNF_CPU + BR ) / ARS ) / ( FirstVNF_RAM_Server * ACS ) ) )", "choosing": "Max( ( CS * ( Min( RRSe ,( ( RRSe / ( MUM - RCSe ) ) / DS ) ) / ( RCSe * ( ( ( Min( MLU ,DS ) - RMSe ) * RMSe ) * RRSe ) ) ) ),( RMSe / MUC ) )", "obj1": 0.232, "obj2": 0.6086533522116054}, {"determining": "( Max( RRS,PN ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( ( MLU * RRSe ) * MLU ) ) * ( RRSe + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( ( ( Min( MRS ,BR ) * Min( FirstVNF_RAM_Server ,FirstVNF_Mem ) ) / ( ( FirstVNF_RAM / FirstVNF_CPU ) - ( FirstVNF_CPU + CRS ) ) ) * Max( Max( ( FirstVNF_RAM_Server * ARS ),( ARS + FirstVNF_Mem ) ),( Min( FirstVNF_RAM ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU - ACS ) ) ) )", "choosing": "Max( ( Min( RRSe ,Max( RRSe,MUR ) ) - RRSe ),( MUR * ( CS - RRSe ) ) )", "obj1": 0.312, "obj2": 0.5185321606553557}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),Min( FirstVNF_RAM ,Min( ( Const / FirstVNF_Mem ) ,Min( ( ( FirstVNF_Mem_Server - MRS ) + ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ) ,ARS ) ) ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( Min( ( ( MUC - MLU ) / Min( ( CS - MUR ) ,CS ) ) ,CS ) * RCSe ) ) - ( ( CS * RMSe ) * Min( MLU ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.023740494738729453}, {"determining": "Min( ( ( Min( FirstVNF_RAM_Server ,ACS ) + ( FirstVNF_Mem_Server * PN ) ) - ( ( ACS - ACS ) - Min( MRS ,DDR ) ) ) ,Max( ( Max( PN,CRS ) + ( AMS / PN ) ),( Max( CRS,RRS ) + ( FirstVNF_CPU_Server + ARS ) ) ) )", "choosing": "Min( Min( MUR ,DS ) ,( MUR + MUM ) )", "obj1": 0.602, "obj2": 0.29739891876412783}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - ACS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Min( ( ACS * FirstVNF_CPU_Server ) ,CRS ) ) )", "choosing": "Max( ( ( RRSe + MUC ) - Min( ( MLU / RCSe ) ,Min( CS ,RMSe ) ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.814, "obj2": 0.16247340031155985}, {"determining": "( ( Min( FirstVNF_CPU_Server ,Const ) - ( BR / RRS ) ) - Min( ARS ,CRS ) )", "choosing": "Max( ( Min( CS ,MLU ) / ( ( MUR / ( DS - DS ) ) - MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( Max( DS,RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) / ( CRS - FirstVNF_Mem_Server ) ),( ( RRS * MRS ) + ( BR * Const ) ) ) / ( ( Max( MRS,FirstVNF_CPU_Server ) - ( ( RRS * ( MRS - MDR ) ) - FirstVNF_CPU_Server ) ) * ( ( FirstVNF_RAM_Server / ACS ) * ( MDR - CRS ) ) ) )", "choosing": "( ( Max( MLU,DS ) + ( DS / ( ( MUM + MUC ) * ( CS / DS ) ) ) ) + ( RMSe - ( Min( DS ,RCSe ) - RRSe ) ) )", "obj1": 0.13, "obj2": 0.7096264520789051}, {"determining": "( ( PN / FirstVNF_RAM_Server ) + ( MDR / ( FirstVNF_CPU_Server + FirstVNF_Mem ) ) )", "choosing": "( Min( ( MUC - CS ) ,DS ) - Min( ( RRSe + MUC ) ,MLU ) )", "obj1": 0.198, "obj2": 0.6157523266071744}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + ( ACS + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 0.248, "obj2": 0.5380386128419559}, {"determining": "( ( ( ( Const + CRS ) / ( FirstVNF_Mem / Const ) ) - Min( ( FirstVNF_CPU_Server / RRS ) ,( CRS / MRS ) ) ) + ( ( ( FirstVNF_CPU / CRS ) / ( RRS * FirstVNF_RAM_Server ) ) + ( ( FirstVNF_CPU_Server / MDR ) - ( Const * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( ( MUC / RMSe ) + ( MUM / MLU ) ) - ( Max( RRSe,MUM ) + ( CS + RMSe ) ) ) / Min( Max( Max( MLU,DS ),Min( RMSe ,RRSe ) ) ,Min( ( MUR + MUC ) ,( CS * RMSe ) ) ) )", "obj1": 0.14, "obj2": 0.6859249682704731}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( FirstVNF_CPU_Server - Const ),Max( ACS,Min( FirstVNF_CPU_Server ,AMS ) ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( ( Min( Min( MLU ,RMSe ) ,DS ) - RMSe ) / RCSe ) ,( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "( ( MUC * Min( RRSe ,Min( RMSe ,MUC ) ) ) * ( RRSe - RMSe ) )", "obj1": 0.712, "obj2": 0.2419753579262493}], "2": [{"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( FirstVNF_CPU_Server - Const ),Max( ACS,FirstVNF_CPU_Server ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "( ( RRSe * ( MLU / MLU ) ) + ( MUR + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,( ( ( ( BR / MDR ) / ( BR / ACS ) ) - ACS ) + BR ) ) * ( RRS - DDR ) )", "choosing": "( ( MUR / MUC ) * ( MUM - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN / CRS ) - Max( MDR,BR ) )", "choosing": "( ( MUM + CS ) / Min( DS ,Max( ( MLU / Max( Min( CS ,DS ),RCSe ) ),CS ) ) )", "obj1": 0.054, "obj2": 0.7357296279425566}, {"determining": "( ( ( DDR * ACS ) - Min( Min( ( FirstVNF_Mem_Server * FirstVNF_Mem ) ,Max( AMS,DDR ) ) ,( ( MDR / ACS ) + Max( FirstVNF_CPU,FirstVNF_Mem_Server ) ) ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( ( Min( MUC ,CS ) + ( RMSe + RCSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 0.782, "obj2": 0.21758468204007636}, {"determining": "( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) )", "choosing": "Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) )", "obj1": 0.652, "obj2": 0.24054770953566776}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - CS )", "obj1": 0.41, "obj2": 0.4063358559764201}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( ( RRS - FirstVNF_CPU_Server ) - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "( ( MUC * Min( RRSe ,Max( MUC,MLU ) ) ) * ( RRSe - RMSe ) )", "obj1": 0.952, "obj2": 0.04141505827630273}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "Min( ( FirstVNF_Mem / BR ) ,( FirstVNF_CPU_Server - Const ) )", "choosing": "( Max( MUM,MUM ) / Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) )", "obj1": 0.906, "obj2": 0.08954298001688388}, {"determining": "( Max( DDR,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( ( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) ) - ( MLU + CS ) )", "obj1": 0.236, "obj2": 0.5862995987510007}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( ( RMSe + MUM ) / Min( MUC ,RRSe ) ) - Min( ( MUR / RCSe ) ,Min( CS ,RMSe ) ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.808, "obj2": 0.1723855338741068}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.19, "obj2": 0.5997673677239888}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - ACS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Min( ( ACS * FirstVNF_CPU_Server ) ,CRS ) ) )", "choosing": "Max( ( ( RRSe + MUC ) - Min( ( MLU / RCSe ) ,Min( CS ,RMSe ) ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.814, "obj2": 0.16247340031155985}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( Min( ( Min( MDR ,( Max( Max( ( FirstVNF_Mem + PN ),FirstVNF_CPU_Server ),BR ) - BR ) ) + ( ACS - MRS ) ) ,( ( Const / MRS ) + ( FirstVNF_RAM_Server + DDR ) ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( Max( Min( RRSe ,MUM ),MUR ) * ( ( CS + RMSe ) / MUC ) ) / ( ( DS + Max( MUC,( RMSe / MUC ) ) ) - RMSe ) )", "obj1": 0.504, "obj2": 0.36492873401163206}, {"determining": "( Min( MRS ,( MDR + MRS ) ) - Max( CRS,( ( AMS - CRS ) / FirstVNF_RAM_Server ) ) )", "choosing": "( Max( Min( CS ,MUR ),( CS * MUC ) ) - Min( ( CS - MLU ) ,Max( RCSe,MUR ) ) )", "obj1": 0.37, "obj2": 0.46404667106225267}, {"determining": "( Max( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) / ( CRS - FirstVNF_Mem_Server ) ),( ( RRS * MRS ) + ( BR * Const ) ) ) / ( ( Max( MRS,FirstVNF_CPU_Server ) - ( ( RRS * ( MRS - MDR ) ) - FirstVNF_CPU_Server ) ) * ( ( FirstVNF_RAM_Server / ACS ) * ( MDR - CRS ) ) ) )", "choosing": "( ( Max( MLU,DS ) + ( DS / ( ( MUM + MUC ) * ( CS / DS ) ) ) ) + ( RMSe - ( Min( DS ,RCSe ) - RRSe ) ) )", "obj1": 0.13, "obj2": 0.7096264520789051}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "Max( Max( MUM,RMSe ),( RCSe + MUC ) )", "obj1": 0.63, "obj2": 0.271042628016614}, {"determining": "( ( MRS / PN ) * Min( FirstVNF_Mem ,( MDR / Max( AMS,AMS ) ) ) )", "choosing": "Max( ( ( MUC + MUM ) / ( Min( RCSe ,MLU ) * ( DS / RRSe ) ) ),( RMSe + ( RMSe - Min( ( MUM - RMSe ) ,Max( ( RRSe * RCSe ),MLU ) ) ) ) )", "obj1": 0.138, "obj2": 0.6596395431650196}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( MUM * MUR ) ,( ( DS / RMSe ) * MUC ) )", "obj1": 0.874, "obj2": 0.10307989684604539}, {"determining": "Min( Min( CRS ,DDR ) ,( Max( Max( CRS,MDR ),MRS ) * ( ACS + AMS ) ) )", "choosing": "( Min( DS ,RMSe ) / ( MUR + ( ( MUC + DS ) / CS ) ) )", "obj1": 0.482, "obj2": 0.3685838363995036}, {"determining": "( Max( RRS,PN ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( ( MLU * RRSe ) * MLU ) ) * ( RRSe + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "Max( ( Max( CRS,( DDR / FirstVNF_RAM ) ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( CS * MUM ) )", "obj1": 0.292, "obj2": 0.5146992050045329}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( Min( DDR ,MRS ) * Min( BR ,PN ) ) )", "choosing": "( Min( Max( Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) ),RRSe ) ,( DS * MUM ) ) - ( RRSe / RRSe ) )", "obj1": 0.58, "obj2": 0.3136480765377738}, {"determining": "( ( FirstVNF_RAM / FirstVNF_Mem ) + Max( FirstVNF_CPU_Server,AMS ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.542, "obj2": 0.3491614353058473}, {"determining": "( Max( CRS,( MRS / FirstVNF_CPU_Server ) ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC + CS ) ) - Min( ( ( MUR * MUM ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.382, "obj2": 0.4516691163185002}, {"determining": "( ( ( RRS - AMS ) + ( ACS + Const ) ) * Max( ( ( FirstVNF_RAM + AMS ) - ( BR / AMS ) ),( Max( FirstVNF_Mem_Server,ARS ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe * ( MLU / Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) ) ) + ( MUR + MLU ) )", "obj1": 0.1, "obj2": 0.7297300753970906}, {"determining": "( ( MRS + MDR ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "( ( MUC * Min( RRSe ,Min( RMSe ,MUC ) ) ) * ( RRSe - Max( Max( RCSe,CS ),( DS - RMSe ) ) ) )", "obj1": 0.996, "obj2": 0.004654983495039187}, {"determining": "( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + AMS ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "Max( ( RRSe / RCSe ),Min( ( RMSe - MUC ) ,DS ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.062, "obj2": 0.7308108822203601}, {"determining": "Max( ( ( ( ( MRS + FirstVNF_CPU ) - ( ACS / FirstVNF_CPU_Server ) ) + ( Min( Const ,Const ) + ( ARS + ARS ) ) ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - DS ) )", "obj1": 0.278, "obj2": 0.5325158979702599}, {"determining": "( ( DDR - FirstVNF_Mem ) / ( MDR * ( FirstVNF_RAM_Server + MDR ) ) )", "choosing": "( ( RRSe + ( Min( DS ,( MUC * MUC ) ) - MUM ) ) * ( MUM * MUC ) )", "obj1": 0.856, "obj2": 0.1351842175780256}, {"determining": "( ( CRS / Const ) / Max( ARS,MRS ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.304, "obj2": 0.4956651369306269}, {"determining": "( ( DDR - FirstVNF_Mem ) / ( MDR * ( FirstVNF_RAM_Server + MDR ) ) )", "choosing": "( ( RRSe + ( Min( DS ,( MUC * MUC ) ) - MUM ) ) * ( MUM * MUC ) )", "obj1": 0.856, "obj2": 0.1351842175780256}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) - ( Min( FirstVNF_CPU_Server ,MRS ) - FirstVNF_Mem ) )", "choosing": "Min( Min( MUR ,DS ) ,( MUR + MUM ) )", "obj1": 0.616, "obj2": 0.28724478853235386}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) - Min( Const ,MRS ) )", "choosing": "( ( MUM * MUR ) * ( ( MLU * ( ( MUR - MLU ) - ( MUR / RCSe ) ) ) * MUM ) )", "obj1": 0.154, "obj2": 0.6461092904023151}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN * CRS ) ),( Min( MDR ,MRS ) * Min( BR ,( FirstVNF_RAM_Server * FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.556, "obj2": 0.3378278891035282}, {"determining": "( ( Max( MRS,( ( Max( MDR,CRS ) / PN ) + ARS ) ) + FirstVNF_Mem_Server ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.382, "obj2": 0.4516691163185002}, {"determining": "( Max( Min( ( Min( DDR ,( Const / Max( CRS,Min( FirstVNF_Mem ,RRS ) ) ) ) + FirstVNF_CPU ) ,FirstVNF_CPU ),PN ) / Min( ARS ,FirstVNF_RAM_Server ) )", "choosing": "( ( ( MUM - ( RMSe - Max( RRSe,( ( CS + MUR ) / ( ( MLU + DS ) - MUM ) ) ) ) ) - RCSe ) + Max( MUM,RRSe ) )", "obj1": 0.12, "obj2": 0.7255253770397457}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( RRS + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * Max( MUR,RMSe ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.264, "obj2": 0.533945679283324}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN * CRS ) ),( Min( MDR ,MRS ) * Min( BR ,( FirstVNF_RAM_Server * FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.556, "obj2": 0.3378278891035282}, {"determining": "( ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) - ( RRS / BR ) )", "choosing": "Max( ( RMSe - MUR ),Min( ( RCSe / ( ( RRSe - DS ) + DS ) ) ,RMSe ) )", "obj1": 0.902, "obj2": 0.09609996606491587}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( DDR + ( FirstVNF_Mem / MDR ) )", "choosing": "( Min( ( DS * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.308, "obj2": 0.49074333328031927}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( ( ( MUC / RMSe ) + ( MUM / MLU ) ),CS ) - ( MLU + CS ) )", "obj1": 0.152, "obj2": 0.6568892792642461}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.162, "obj2": 0.635372630419032}, {"determining": "Max( Max( Min( FirstVNF_Mem ,( FirstVNF_RAM / FirstVNF_Mem ) ),( PN * CRS ) ),( Min( MDR ,MRS ) * Min( BR ,( FirstVNF_RAM_Server * FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Max( ( MUC + MUR ),RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.55, "obj2": 0.34816502210660216}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( FirstVNF_Mem / ( MRS / MRS ) ) )", "choosing": "( ( ( ( ( Max( MUM,( CS - ( DS + CS ) ) ) / ( RMSe * RMSe ) ) + DS ) * ( Min( RMSe ,RMSe ) - MUR ) ) * MLU ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( Max( CRS,( DDR / FirstVNF_RAM ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.374, "obj2": 0.45888974298889645}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / Min( Max( ( AMS * PN ),Max( FirstVNF_RAM,MRS ) ) ,Min( ( ARS - CRS ) ,( PN * ARS ) ) ) )", "choosing": "Min( ( ( MUM * CS ) - CS ) ,Min( ( ( RRSe + MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.248, "obj2": 0.5380386128419559}, {"determining": "( ( FirstVNF_CPU * ( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) ) ) / Max( FirstVNF_RAM,FirstVNF_CPU ) )", "choosing": "( ( DS + RCSe ) + ( MLU - MUC ) )", "obj1": 0.598, "obj2": 0.2978538027399259}, {"determining": "( Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) ) + ( Min( Const ,Const ) + ( ARS + ARS ) ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( ( MUR + DS ) - Max( RRSe,MUM ) ) ,( RCSe + MUR ) ) )", "obj1": 0.61, "obj2": 0.28956794510893974}, {"determining": "Max( Max( Min( DDR ,( FirstVNF_CPU - AMS ) ),( PN - CRS ) ),Min( Min( MDR ,MRS ) ,Min( BR ,PN ) ) )", "choosing": "( Min( ( ( ( RRSe * ( RRSe + RMSe ) ) - Max( RCSe,( CS - MUR ) ) ) - MUM ) ,( DS * RRSe ) ) - ( RRSe / RRSe ) )", "obj1": 0.59, "obj2": 0.3093959816638618}, {"determining": "( ( Const / Max( CRS,Min( FirstVNF_Mem ,RRS ) ) ) / Min( ( Min( DDR ,( RRS * PN ) ) + FirstVNF_CPU ) ,FirstVNF_CPU ) )", "choosing": "( ( MUR + MUM ) - ( RMSe - Max( ( ( MUM - MUR ) - RCSe ),( ( CS + MUR ) / ( ( MLU + DS ) - MUM ) ) ) ) )", "obj1": 0.126, "obj2": 0.7146123255033571}, {"determining": "( ( RRS - AMS ) + ( ACS + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 0.248, "obj2": 0.5380386128419559}, {"determining": "Min( ( ( Min( FirstVNF_RAM_Server ,ACS ) + ( FirstVNF_Mem_Server * PN ) ) - ( ( ACS - ACS ) - Min( MRS ,DDR ) ) ) ,Max( ( Max( PN,CRS ) + ( AMS / PN ) ),( Max( CRS,RRS ) + ( FirstVNF_CPU_Server + ARS ) ) ) )", "choosing": "Min( Min( MUR ,DS ) ,( MUR + MUM ) )", "obj1": 0.602, "obj2": 0.29739891876412783}, {"determining": "( Max( Min( ( Min( DDR ,( RRS * PN ) ) + FirstVNF_CPU ) ,FirstVNF_CPU ),PN ) / Min( ARS ,FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUM ) - ( RMSe - Max( RRSe,( ( CS + MUR ) / ( ( MLU + DS ) - MUM ) ) ) ) )", "obj1": 0.122, "obj2": 0.7179821001517716}, {"determining": "( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) + ( Max( Min( Const ,FirstVNF_Mem_Server ),Const ) + ( BR + DDR ) ) )", "choosing": "( Min( RCSe ,MLU ) - ( RRSe / RRSe ) )", "obj1": 0.59, "obj2": 0.3093959816638618}, {"determining": "( ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) - ( RRS / BR ) )", "choosing": "Max( ( RMSe - MUR ),Min( ( RCSe / ( ( RRSe - DS ) + DS ) ) ,RMSe ) )", "obj1": 0.902, "obj2": 0.09609996606491587}, {"determining": "( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) )", "choosing": "Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) )", "obj1": 0.138, "obj2": 0.6596395431650196}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "Min( ( ( Min( FirstVNF_RAM_Server ,ACS ) + ( FirstVNF_Mem_Server * PN ) ) - ( ( ACS - ACS ) - Min( MRS ,DDR ) ) ) ,Max( ( Max( PN,CRS ) + ( AMS / PN ) ),( Max( CRS,RRS ) + ( FirstVNF_CPU_Server + ARS ) ) ) )", "choosing": "Min( Min( MUR ,DS ) ,( MUR + MUM ) )", "obj1": 0.602, "obj2": 0.29739891876412783}, {"determining": "( ( Min( MRS ,Min( ACS ,MDR ) ) + ARS ) / ( FirstVNF_Mem_Server / RRS ) )", "choosing": "( ( MUR + MUM ) - ( RMSe - Max( RRSe,( ( ( RMSe * ( MUM - Max( RCSe,MUR ) ) ) + CS ) / ( ( RCSe + DS ) - MUM ) ) ) ) )", "obj1": 0.122, "obj2": 0.7179821001517716}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ( ACS / AMS ) + Min( ( FirstVNF_RAM + FirstVNF_Mem_Server ) ,FirstVNF_RAM_Server ) ) + Max( MDR,PN ) ) / FirstVNF_RAM ) - ( RRS * PN ) )", "choosing": "( ( MUR - CS ) + ( Max( ( Max( ( DS / RRSe ),CS ) / Max( MUC,( ( Min( MUC ,CS ) - MUM ) - ( RMSe - CS ) ) ) ),MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( MDR,RRS ) / ( MDR - Min( MDR ,CRS ) ) )", "choosing": "Max( Min( Min( MLU ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Max( CS,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / DDR ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( Max( DS,MUM ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,( Const - Max( CRS,FirstVNF_CPU_Server ) ) ) ) )", "choosing": "Max( ( ( CS + MLU ) - ( DS + CS ) ),( ( DS - MUC ) - ( MUR / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( ARS ,FirstVNF_Mem ),( Max( PN,FirstVNF_CPU ) - FirstVNF_CPU_Server ) ) - ( ( CRS / Const ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( Max( DS,DS ),( MUM + MLU ) ),( RCSe + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( FirstVNF_CPU_Server ,Const ) - ( BR / RRS ) ) - Min( ARS ,CRS ) )", "choosing": "Max( ( Min( CS ,MLU ) / ( ( MUR / ( DS - DS ) ) - MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( Max( DS,RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( FirstVNF_CPU_Server - Const ),Max( ACS,Min( FirstVNF_CPU_Server ,AMS ) ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( ( Min( Min( MLU ,RMSe ) ,DS ) - RMSe ) / RCSe ) ,( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - Min( Const ,Const ) )", "choosing": "( ( CS - MUR ) + Max( MUR,( RCSe + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( RCSe * MLU ) ,( RCSe + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( ( Max( CRS,FirstVNF_CPU ) + ( FirstVNF_CPU_Server - MRS ) ) ,( ( Const / MDR ) + ( FirstVNF_RAM_Server + DDR ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( Min( Min( RRSe ,MUM ) ,MUC ) - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ( ( ( FirstVNF_Mem - ( ( FirstVNF_Mem - ACS ) - Max( FirstVNF_Mem_Server,DDR ) ) ) - Min( FirstVNF_CPU ,MRS ) ) + FirstVNF_CPU ) ) * ( FirstVNF_CPU_Server + AMS ) ) )", "choosing": "Min( ( ( MLU - CS ) - ( MUM - MUR ) ) ,( ( DS * RMSe ) * Min( DS ,( ( Min( RMSe ,DS ) - Max( MLU,CS ) ) + ( ( ( MLU - CS ) / MUR ) - MLU ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "( ( Min( RMSe ,DS ) - Max( MLU,CS ) ) + ( ( CS + RCSe ) / ( RMSe + MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS / PN ) - FirstVNF_Mem )", "choosing": "Max( ( RMSe - MUR ),Min( ( Max( Min( Max( MUR,MUR ) ,Max( RRSe,RCSe ) ),( Min( MLU ,MLU ) * ( RCSe + MUR ) ) ) - Max( ( ( MLU / RMSe ) * Max( DS,RRSe ) ),( ( MUC * RRSe ) / ( MLU - MUR ) ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - FirstVNF_RAM )", "choosing": "( ( CS - MUR ) + MUM )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( MUR ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) / ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) ) - ( FirstVNF_RAM * FirstVNF_Mem ) )", "choosing": "Max( ( Min( ( RMSe + DS ) ,Min( MUM ,RCSe ) ) * ( ( RCSe / MUR ) + ( MUM - MUC ) ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( Max( DS,RCSe ) - ( Min( MUC ,MLU ) + Max( RCSe,MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) / ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) ) - Max( ( Max( PN,DDR ) * ( MRS / FirstVNF_CPU ) ),Max( ( FirstVNF_Mem * DDR ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Min( ( Min( MUC ,MLU ) + Max( RCSe,MUM ) ) ,( Min( CS ,MUR ) / ( MUM / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * ( Min( MRS ,PN ) + ( FirstVNF_CPU * DDR ) ) ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( RRSe + DS ) + ( RMSe / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( RMSe / MUM ) * Max( RMSe,DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - ( ( RRS * Const ) - ( AMS * CRS ) ) ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUC / MUM ) - ( MUM * RMSe ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( FirstVNF_CPU_Server - Const ),Max( ACS,FirstVNF_CPU_Server ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) ) )", "choosing": "Max( ( ( ( RMSe + MUM ) / Min( MUC ,RRSe ) ) - Min( ( MUR / RCSe ) ,CS ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( ( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) ) ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( FirstVNF_CPU_Server - Const ),Max( ACS,FirstVNF_CPU_Server ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( ( Min( ( MLU * MUM ) ,DS ) - RMSe ) / RCSe ) ,( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( Min( FirstVNF_CPU_Server ,Const ),Min( Const ,ARS ) ) ) - ( Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) / ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) ) )", "choosing": "Min( ( ( Min( Max( RMSe,MUC ) ,DS ) - RMSe ) / RCSe ) ,Max( CS,MUR ) )", "obj1": 1.0, "obj2": 0.0}], "3": [{"determining": "( ( RRS * ( Min( MRS ,PN ) + ( FirstVNF_CPU * DDR ) ) ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( RRSe + DS ) + ( RMSe / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( FirstVNF_CPU_Server - Const ),Max( ACS,FirstVNF_CPU_Server ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "( ( RRSe * ( MLU / MLU ) ) + ( MUR + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS / PN ) - ( RRS / BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.048, "obj2": 0.7366569177887334}, {"determining": "( ( FirstVNF_Mem + AMS ) - ( ( RRS / RRS ) * ( Max( FirstVNF_RAM,FirstVNF_Mem_Server ) * FirstVNF_Mem ) ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( ( ( MUM / ( MLU - MLU ) ) + MUM ) + ( Min( DS ,( ( MUR + MUC ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.762, "obj2": 0.2065376047136315}, {"determining": "( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) )", "choosing": "Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) )", "obj1": 0.652, "obj2": 0.24054770953566776}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( RRS - AMS ) + ( ( PN - ( FirstVNF_Mem_Server / FirstVNF_CPU ) ) / Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + ( Max( ( ( MUM * CS ) + RMSe ),( ( MUR * MUM ) * ( CS * MUR ) ) ) / MUM ) ) ,( RMSe * MUR ) ) ) ,MUC )", "obj1": 0.932, "obj2": 0.037005058815076444}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.372, "obj2": 0.4334453749482348}, {"determining": "( ( PN * Min( Min( CRS ,DDR ) ,( Max( FirstVNF_Mem_Server,ARS ) * Min( ARS ,ACS ) ) ) ) - ( DDR * BR ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( MUR ,DS ) ),Min( ( RCSe * MLU ) ,( DS * ( MLU * RRSe ) ) ) )", "obj1": 0.912, "obj2": 0.06729643183869242}, {"determining": "( ( CRS / Const ) / Max( ARS,MRS ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.344, "obj2": 0.4676592840912267}, {"determining": "( ( FirstVNF_Mem / MDR ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( DS - ( MLU + CS ) )", "obj1": 0.222, "obj2": 0.5835577854393939}, {"determining": "( ( DDR - FirstVNF_Mem ) / ( MDR * ( FirstVNF_RAM_Server + MDR ) ) )", "choosing": "( ( RRSe + ( Min( DS ,( MUC * MUC ) ) - MUM ) ) * ( MUM * MUC ) )", "obj1": 0.85, "obj2": 0.14268577621038084}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - CS )", "obj1": 0.41, "obj2": 0.4063358559764201}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "( Max( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) / Max( CRS,FirstVNF_Mem_Server ) ),( ( BR * Const ) + ( RRS * MRS ) ) ) / ( ( ( AMS / FirstVNF_CPU ) - ( BR + PN ) ) * ( ( FirstVNF_RAM_Server / ACS ) * ( MDR - ( ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) - ( RRS / BR ) ) ) ) ) )", "choosing": "( ( ( Min( ( RCSe / ( ( RRSe - DS ) + DS ) ) ,RMSe ) / ( DS + RRSe ) ) + MLU ) + ( RMSe - ( Min( RCSe ,DS ) * RRSe ) ) )", "obj1": 0.132, "obj2": 0.7091513986094381}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - CS )", "obj1": 0.41, "obj2": 0.4063358559764201}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "Max( Max( MUM,RMSe ),( RCSe + MUC ) )", "obj1": 0.63, "obj2": 0.271042628016614}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * ( Const / Max( CRS,Min( FirstVNF_Mem ,RRS ) ) ) ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( ( CS + MUR ) / ( ( MLU + DS ) - MUM ) ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.116, "obj2": 0.7224894218907434}, {"determining": "( ( Max( ( Max( FirstVNF_RAM,FirstVNF_RAM_Server ) + AMS ),MRS ) * ( AMS / PN ) ) + ( Max( AMS,Const ) + ( DDR + BR ) ) )", "choosing": "( Min( Max( MUM,( ( MLU - ( CS * RCSe ) ) / ( ( CS / CS ) + RRSe ) ) ) ,( ( Min( MUM ,MLU ) * ( ( MUC + ( MUC / ( RCSe * MUR ) ) ) - Max( MUC,MUM ) ) ) * MUM ) ) - ( RRSe / RRSe ) )", "obj1": 0.57, "obj2": 0.3234487424454014}, {"determining": "( ( CRS / PN ) - ( Const - FirstVNF_CPU_Server ) )", "choosing": "( ( MUM + CS ) / ( RRSe * Max( CS,( ( MLU * RMSe ) / Max( ( MUM * CS ),RCSe ) ) ) ) )", "obj1": 0.066, "obj2": 0.7282566896456591}, {"determining": "( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) )", "choosing": "Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) )", "obj1": 0.138, "obj2": 0.6596395431650196}, {"determining": "( Min( Max( ( AMS * PN ),Max( FirstVNF_RAM,MRS ) ) ,Min( ( ARS - CRS ) ,( PN * AMS ) ) ) / Max( ( Max( FirstVNF_RAM,FirstVNF_CPU ) + ( MRS * FirstVNF_CPU ) ),Max( ( FirstVNF_RAM_Server * AMS ),( AMS - DDR ) ) ) )", "choosing": "( Min( DS ,MUC ) / ( MUR + CS ) )", "obj1": 0.538, "obj2": 0.32457407246249875}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( Min( Max( ( AMS * PN ),Max( FirstVNF_RAM,MRS ) ) ,Min( ( ARS - CRS ) ,( PN * AMS ) ) ) / Max( ( Max( FirstVNF_RAM,FirstVNF_CPU ) + ( MRS * FirstVNF_CPU ) ),Max( ( FirstVNF_RAM_Server * AMS ),( AMS - DDR ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 0.236, "obj2": 0.5508174210832686}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.19, "obj2": 0.5997673677239888}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / ( ( FirstVNF_CPU + BR ) * AMS ) ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( MUR + DS ) - Max( RRSe,MUM ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.806, "obj2": 0.16606405153616627}, {"determining": "Max( ( Max( CRS,( DDR / FirstVNF_RAM ) ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( CS * MUM ) )", "obj1": 0.292, "obj2": 0.5146992050045329}, {"determining": "( Max( ACS,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,Max( ( MUR / RCSe ),Min( RRSe ,DS ) ) ) - ( MLU + CS ) )", "obj1": 0.198, "obj2": 0.5857097689507155}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.534, "obj2": 0.3597141452174467}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( DS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.356, "obj2": 0.44288269022181465}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( MRS - ( FirstVNF_CPU_Server / FirstVNF_CPU_Server ) ) ) ),( ( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + AMS ) ) * Min( BR ,PN ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( Min( DS ,( Max( CS,MLU ) * MUR ) ) / ( MUR / CS ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.572, "obj2": 0.29855727739462135}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) )", "obj1": 0.764, "obj2": 0.19065228199887577}, {"determining": "( Min( DDR ,Max( FirstVNF_Mem_Server,Max( FirstVNF_RAM,( FirstVNF_RAM + ( BR - ( Min( ACS ,FirstVNF_RAM ) - FirstVNF_CPU_Server ) ) ) ) ) ) * ( BR - MDR ) )", "choosing": "( ( RRSe * Min( ( ( MUM * MUR ) - ( CS - MLU ) ) ,( ( MLU * RMSe ) - Min( DS ,DS ) ) ) ) - ( ( MUM * MUR ) - Max( ( MUR * MUM ),RMSe ) ) )", "obj1": 0.586, "obj2": 0.2971279006795057}, {"determining": "Max( CRS,( Min( MDR ,MRS ) * Min( BR ,( FirstVNF_RAM_Server * FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,MUM ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.536, "obj2": 0.3479665372088171}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( Min( Max( ( FirstVNF_CPU_Server - RRS ),Min( Const ,MDR ) ) ,( Min( FirstVNF_CPU_Server ,( ( ( ARS + DDR ) * RRS ) * MRS ) ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( Min( RCSe ,CS ) * ( MLU - ( CS * ( MUM * MUR ) ) ) )", "obj1": 0.276, "obj2": 0.5164601289990287}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + MUC ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.262, "obj2": 0.5271607456259803}, {"determining": "( Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) ) + ( Min( Const ,Const ) + ( ARS + ARS ) ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( ( MUR + DS ) - Max( RRSe,MUM ) ) ,( RCSe + MUR ) ) )", "obj1": 0.61, "obj2": 0.28956794510893974}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "Min( Min( CRS ,DDR ) ,( Max( Max( CRS,MDR ),MRS ) * ( ACS + AMS ) ) )", "choosing": "( Min( DS ,RMSe ) / ( MUR + ( ( MUC + DS ) / CS ) ) )", "obj1": 0.482, "obj2": 0.3685838363995036}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_Mem_Server / FirstVNF_CPU ) + ( DDR - FirstVNF_RAM ) ) ) + ( ( ( Max( BR,Max( FirstVNF_RAM,MDR ) ) / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Max( Min( ( MUR / Min( DS ,CS ) ) ,DS ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * Min( RCSe ,RRSe ) ) ) )", "obj1": 0.814, "obj2": 0.16247340031155985}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "Max( ( RRSe / RCSe ),Min( ( RMSe - MUC ) ,DS ) )", "obj1": 0.994, "obj2": 0.0016144419157378762}, {"determining": "Max( Max( Max( Min( FirstVNF_Mem ,DDR ),( ARS - CRS ) ),( MDR + ( DDR - RRS ) ) ),( Min( MDR ,MRS ) * Min( BR ,( FirstVNF_RAM_Server * FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Max( RRSe,MUM ) ,( RRSe * ( RMSe * ( MUR + ( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - CS ) ) ) ) ) - ( RRSe / RRSe ) )", "obj1": 0.506, "obj2": 0.3643973568594683}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "( ( MDR / ( RRS + FirstVNF_Mem_Server ) ) + ( DDR / ( ACS * CRS ) ) )", "choosing": "( Min( DS ,RMSe ) - ( ( Max( ( RMSe / ( Min( MUM ,( CS + CS ) ) - MUR ) ),MLU ) / ( MUC * ( RMSe / MUC ) ) ) - RCSe ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) )", "choosing": "Max( ( ( MUC + MUM ) / MUR ),Max( CS,RMSe ) )", "obj1": 0.868, "obj2": 0.11813405886609113}, {"determining": "( ( FirstVNF_Mem_Server - FirstVNF_CPU ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( ( RCSe * ( ( Min( RCSe ,( MLU / DS ) ) - MUM ) * Max( ( RCSe / MUR ),( DS + ( Max( MUM,RRSe ) / ( MUM - RMSe ) ) ) ) ) ) / MUM ) ,( MUR + MUM ) )", "obj1": 0.62, "obj2": 0.28180511995635144}, {"determining": "( ( Min( FirstVNF_Mem ,( AMS / RRS ) ) - FirstVNF_CPU_Server ) - ( BR / RRS ) )", "choosing": "Max( ( RMSe - MUR ),Min( RMSe ,( RCSe / ( Min( DS ,Min( DS ,Min( ( MUC * MUM ) ,MUC ) ) ) * RRSe ) ) ) )", "obj1": 0.91, "obj2": 0.08708092398395684}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "Max( ( RRSe / RCSe ),Min( ( RMSe - MUC ) ,DS ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "Min( Min( CRS ,DDR ) ,( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + AMS ) ) )", "choosing": "( Min( DS ,MUC ) / ( MUR + CS ) )", "obj1": 0.482, "obj2": 0.3685838363995036}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - ACS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Min( ( ACS * FirstVNF_CPU_Server ) ,CRS ) ) )", "choosing": "Max( ( ( RRSe + MUC ) - Min( ( MLU / RCSe ) ,Min( CS ,RMSe ) ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.814, "obj2": 0.16247340031155985}, {"determining": "( ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) - ( RRS / BR ) )", "choosing": "( ( MUC * Min( RRSe ,Min( RMSe ,MUC ) ) ) * ( RRSe - Max( Max( RCSe,CS ),( DS - RMSe ) ) ) )", "obj1": 0.884, "obj2": 0.10027122306172226}, {"determining": "( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + AMS ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( ( ( MUC / RMSe ) + ( MUM / MLU ) ),CS ) - ( MLU + CS ) )", "obj1": 0.152, "obj2": 0.6568892792642461}, {"determining": "( Max( ARS,MRS ) / ( Min( PN ,FirstVNF_CPU_Server ) / Const ) )", "choosing": "( Min( DS ,RMSe ) - Max( Min( ( MLU - MUM ) ,Min( ( ( CS / Max( MUC,RRSe ) ) / CS ) ,RRSe ) ),Min( Min( RRSe ,MUM ) ,RCSe ) ) )", "obj1": 0.304, "obj2": 0.4956651369306269}, {"determining": "( FirstVNF_CPU / Max( DDR,( ARS + AMS ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.254, "obj2": 0.5348693669703587}, {"determining": "Max( ( RRS * PN ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( RMSe,DS ) ) / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.174, "obj2": 0.6196542535826193}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( MUM * MUR ) ,( ( DS / RMSe ) * MUC ) )", "obj1": 0.872, "obj2": 0.10491524162701749}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( Max( Min( ( Min( DDR ,( Const / Max( CRS,Min( MRS ,RRS ) ) ) ) + FirstVNF_CPU ) ,FirstVNF_CPU ),PN ) / Min( ARS ,FirstVNF_RAM_Server ) )", "choosing": "( ( ( MUM - ( RMSe - Max( RRSe,( MUM / ( ( MLU + DS ) - MUM ) ) ) ) ) - RCSe ) + Max( MUM,RRSe ) )", "obj1": 0.118, "obj2": 0.714526748843744}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - PN ) )", "choosing": "( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ) / Min( MUR ,MUC ) )", "obj1": 0.896, "obj2": 0.09651476205865989}, {"determining": "( Min( ( Min( MDR ,( Max( Max( ( FirstVNF_Mem + PN ),FirstVNF_CPU_Server ),BR ) - BR ) ) + ( ACS - MRS ) ) ,( ( Const / MRS ) + ( FirstVNF_RAM_Server + DDR ) ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( Max( Min( RRSe ,MUM ),MUR ) * ( ( CS + RMSe ) / MUC ) ) / ( ( DS + Max( MUC,( RMSe / MUC ) ) ) - RMSe ) )", "obj1": 0.504, "obj2": 0.36492873401163206}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "Max( ( RRSe / RCSe ),Min( ( RMSe - MUC ) ,DS ) )", "obj1": 0.994, "obj2": 0.0016144419157378762}, {"determining": "Max( ( Const + ACS ),Max( Min( MDR ,MRS ),Max( ACS,DDR ) ) )", "choosing": "( Max( ( CS + RCSe ),CS ) - Min( MLU ,CS ) )", "obj1": 0.16, "obj2": 0.6381980423165654}, {"determining": "( ( CRS / PN ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.058, "obj2": 0.7298163599114977}, {"determining": "Min( ( FirstVNF_Mem / BR ) ,( FirstVNF_CPU_Server - Const ) )", "choosing": "( Max( MUM,MUM ) / Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) )", "obj1": 0.906, "obj2": 0.08954298001688388}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) - ( Min( FirstVNF_CPU_Server ,MRS ) - FirstVNF_Mem ) )", "choosing": "Min( Min( MUR ,DS ) ,( MUR + MUM ) )", "obj1": 0.616, "obj2": 0.28724478853235386}, {"determining": "( Max( CRS,( ( ACS / FirstVNF_Mem_Server ) / FirstVNF_RAM ) ) - Min( CRS ,( MDR + MRS ) ) )", "choosing": "( ( MUM * MUR ) * ( ( MLU + ( ( MUR - Min( MUM ,MLU ) ) - ( MUR / RCSe ) ) ) * MUM ) )", "obj1": 0.154, "obj2": 0.6461092904023151}, {"determining": "( ( DDR - FirstVNF_Mem ) / ( MDR * ( FirstVNF_RAM_Server + MDR ) ) )", "choosing": "( ( RRSe + ( Min( DS ,( MUC * MUC ) ) - MUM ) ) * ( MUM * MUC ) )", "obj1": 0.856, "obj2": 0.1351842175780256}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) )", "choosing": "( ( MUM * MUM ) / Min( MUR ,MUC ) )", "obj1": 0.9, "obj2": 0.09487900648298388}, {"determining": "( ( PN / CRS ) - Max( MDR,BR ) )", "choosing": "( ( MUM + CS ) / Min( DS ,Max( ( MLU / Max( Min( CS ,DS ),RCSe ) ),CS ) ) )", "obj1": 0.054, "obj2": 0.7357296279425566}, {"determining": "( DDR + ( FirstVNF_Mem / MDR ) )", "choosing": "( Min( ( DS * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.308, "obj2": 0.49074333328031927}, {"determining": "( ( CRS / Const ) / Max( ARS,MRS ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.304, "obj2": 0.4956651369306269}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( ( MUR + MUM ) - ( RMSe - Max( ( ( MUM - MUR ) - RCSe ),( ( CS + MUR ) / ( ( MLU + DS ) - MUM ) ) ) ) )", "obj1": 0.128, "obj2": 0.7132801769496269}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( MUM * MUR ) ,( ( DS / RMSe ) * MUC ) )", "obj1": 0.874, "obj2": 0.10307989684604539}, {"determining": "( ( FirstVNF_CPU - AMS ) + ( RRS - MRS ) )", "choosing": "Min( ( ( MLU - MUC ) - Min( ( DS + CS ) ,( RMSe * MUR ) ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 0.248, "obj2": 0.5380386128419559}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( RRS * PN ) )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.14, "obj2": 0.6581628211649014}, {"determining": "( ( Const / Max( CRS,Min( FirstVNF_Mem ,RRS ) ) ) / ( FirstVNF_Mem_Server / RRS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.162, "obj2": 0.635372630419032}, {"determining": "( ( DDR - FirstVNF_Mem ) / ( MDR * ( FirstVNF_RAM_Server + MDR ) ) )", "choosing": "( ( RRSe + ( Min( DS ,( MUC * MUC ) ) - MUM ) ) * ( MUM * MUC ) )", "obj1": 0.856, "obj2": 0.1351842175780256}, {"determining": "( DDR + ( FirstVNF_Mem / MDR ) )", "choosing": "( Min( ( DS * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.308, "obj2": 0.49074333328031927}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / Min( Max( ( AMS * PN ),Max( FirstVNF_RAM,MRS ) ) ,Min( ( ARS - CRS ) ,( PN * ARS ) ) ) )", "choosing": "Min( ( ( MUM * CS ) - CS ) ,Min( ( ( RRSe + MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.248, "obj2": 0.5380386128419559}, {"determining": "( Max( RRS,PN ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( ( MLU * RRSe ) * MLU ) ) * ( RRSe + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) - Min( Const ,MRS ) )", "choosing": "( ( MUM * MUR ) * ( ( MLU * ( ( MUR - MLU ) - ( MUR / RCSe ) ) ) * MUM ) )", "obj1": 0.154, "obj2": 0.6461092904023151}, {"determining": "( Max( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) / ( CRS - FirstVNF_Mem_Server ) ),( ( RRS * MRS ) + ( BR * Const ) ) ) / ( ( Max( MRS,FirstVNF_CPU_Server ) - ( ( RRS * ( MRS - MDR ) ) - FirstVNF_CPU_Server ) ) * ( ( FirstVNF_RAM_Server / ACS ) * ( MDR - CRS ) ) ) )", "choosing": "( ( Max( MLU,DS ) + ( DS / ( ( MUM + MUC ) * ( CS / DS ) ) ) ) + ( RMSe - ( Min( DS ,RCSe ) - RRSe ) ) )", "obj1": 0.13, "obj2": 0.7096264520789051}, {"determining": "( ( ( PN - ( ( RRS * Const ) - ( ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) * CRS ) ) ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + ( Min( DDR ,Min( ACS ,FirstVNF_CPU ) ) - MDR ) ) ) )", "choosing": "Min( ( ( MUM * CS ) - Min( MUC ,RMSe ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 0.998, "obj2": 0.0005795680665435363}, {"determining": "( ( MRS / PN ) * Min( FirstVNF_Mem ,( MDR / Max( AMS,AMS ) ) ) )", "choosing": "Max( ( ( MUC + MUM ) / ( Min( RCSe ,MLU ) * ( DS / RRSe ) ) ),( RMSe + ( RMSe - Min( ( MUM - RMSe ) ,Max( ( RRSe * RCSe ),MLU ) ) ) ) )", "obj1": 0.138, "obj2": 0.6596395431650196}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) + ( Max( AMS,Const ) + ( DDR + BR ) ) )", "choosing": "( ( Max( Min( RRSe ,MUM ),MUR ) * ( DS / MUC ) ) / ( DS / DS ) )", "obj1": 0.504, "obj2": 0.36492873401163206}, {"determining": "( Min( MRS ,( ( ( ( BR / MDR ) / ( BR / ACS ) ) - ACS ) + BR ) ) * ( RRS - DDR ) )", "choosing": "( ( MUR / MUC ) * ( MUM - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ( ACS / AMS ) + Min( ( FirstVNF_RAM + FirstVNF_Mem_Server ) ,FirstVNF_RAM_Server ) ) + Max( MDR,PN ) ) / FirstVNF_RAM ) - ( RRS * PN ) )", "choosing": "( ( MUR - CS ) + ( Max( ( Max( ( DS / RRSe ),CS ) / Max( MUC,( ( Min( MUC ,CS ) - MUM ) - ( RMSe - CS ) ) ) ),MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( MDR,RRS ) / ( MDR - Min( MDR ,CRS ) ) )", "choosing": "Max( Min( Min( MLU ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Max( CS,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / DDR ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( Max( DS,MUM ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,( Const - Max( CRS,FirstVNF_CPU_Server ) ) ) ) )", "choosing": "Max( ( ( CS + MLU ) - ( DS + CS ) ),( ( DS - MUC ) - ( MUR / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( ARS ,FirstVNF_Mem ),( Max( PN,FirstVNF_CPU ) - FirstVNF_CPU_Server ) ) - ( ( CRS / Const ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( Max( DS,DS ),( MUM + MLU ) ),( RCSe + MLU ) )", "obj1": 1.0, "obj2": 0.0}], "4": [{"determining": "( ( ( PN - ( Min( FirstVNF_Mem ,DDR ) - ( ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) * CRS ) ) ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUC / MUM ) - ( MUC * RMSe ) ) ,( MUR + ( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * ( Min( MRS ,PN ) + ( FirstVNF_CPU * DDR ) ) ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( RRSe + DS ) + ( RMSe / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS / CRS ) - Min( ( Min( Const ,( MRS - FirstVNF_Mem_Server ) ) + ( FirstVNF_CPU + AMS ) ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS + Max( CS,( ( MUR * Max( ( RRSe / RCSe ),( MUR - ( RRSe / MLU ) ) ) ) - RCSe ) ) ) )", "obj1": 0.046, "obj2": 0.7410218361223464}, {"determining": "( Min( PN ,PN ) * ( BR - CRS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.668, "obj2": 0.21209977859626258}, {"determining": "( Min( PN ,( ( MRS / PN ) + ( FirstVNF_RAM_Server - ( ( ( ( FirstVNF_RAM / MRS ) * FirstVNF_Mem ) / CRS ) * Const ) ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( CS + MUM ) )", "obj1": 0.516, "obj2": 0.29841610335837404}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.76, "obj2": 0.17825999096136097}, {"determining": "Min( Min( CRS ,DDR ) ,( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + ( ( MRS / PN ) + MRS ) ) ) )", "choosing": "( Min( DS ,MUC ) / ( MUC + CS ) )", "obj1": 0.492, "obj2": 0.35649783570487337}, {"determining": "( ( FirstVNF_Mem + AMS ) - ( ( RRS / RRS ) * ( Max( FirstVNF_RAM,FirstVNF_Mem_Server ) * FirstVNF_Mem ) ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( ( ( MUM / ( MLU - MLU ) ) + MUM ) + ( Min( DS ,( ( MUR + MUC ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.084, "obj2": 0.6861730392692638}, {"determining": "( ( ( PN - Max( ( ( ( FirstVNF_Mem_Server * AMS ) * FirstVNF_RAM ) - ( BR - PN ) ),Min( ( Min( RRS ,DDR ) * FirstVNF_CPU ) ,MRS ) ) ) + Const ) + ( RRS - AMS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( Max( ( MLU - RCSe ),MUM ) - RCSe ) ) ) )", "obj1": 0.83, "obj2": 0.10234854832520066}, {"determining": "( Min( DDR ,Max( FirstVNF_Mem_Server,Max( FirstVNF_RAM,( FirstVNF_RAM + ( BR - ( Min( ACS ,FirstVNF_RAM ) - FirstVNF_CPU_Server ) ) ) ) ) ) * ( BR - MDR ) )", "choosing": "( ( RRSe * Min( ( ( MUM * MUR ) - ( CS - MLU ) ) ,( ( MLU * RMSe ) - Min( DS ,DS ) ) ) ) - ( ( MUM * MUR ) - Max( ( MUR * MUM ),RMSe ) ) )", "obj1": 0.586, "obj2": 0.2971279006795057}, {"determining": "( Min( PN ,MRS ) * ( MDR + Const ) )", "choosing": "( ( ( MUC / MUM ) + ( MUM / CS ) ) - ( ( MUR + ( ( MUR - MUR ) / CS ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.608, "obj2": 0.25842926987358306}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.814, "obj2": 0.138507503511022}, {"determining": "( ( RRS - AMS ) + ( ( PN - ( FirstVNF_Mem_Server / FirstVNF_CPU ) ) / Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + ( Max( ( ( MUM * CS ) + RMSe ),( ( MUR * MUM ) * ( CS * MUR ) ) ) / MUM ) ) ,( RMSe * MUR ) ) ) ,MUC )", "obj1": 0.932, "obj2": 0.037005058815076444}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.16, "obj2": 0.6251623759045607}, {"determining": "( Max( CRS,( ( ACS / FirstVNF_Mem_Server ) / FirstVNF_RAM ) ) - Min( CRS ,( MDR + MRS ) ) )", "choosing": "( ( MUM * MUR ) * ( ( MLU + ( ( MUR - Min( MUM ,MLU ) ) - ( MUR / RCSe ) ) ) * MUM ) )", "obj1": 0.154, "obj2": 0.6461092904023151}, {"determining": "Max( Max( Min( FirstVNF_RAM_Server ,ARS ),FirstVNF_RAM_Server ),( Max( RRS,FirstVNF_CPU ) / ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( CS,MUR ),( ( CS - RCSe ) - ( RRSe * MUC ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.59, "obj2": 0.27898247749295024}, {"determining": "Max( ( Min( MDR ,MRS ) * Max( ACS,DDR ) ),Max( Min( FirstVNF_Mem ,DDR ),( PN * CRS ) ) )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - RMSe ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.224, "obj2": 0.5585658679750155}, {"determining": "( ( RRS - ( Min( FirstVNF_CPU_Server ,ACS ) - PN ) ) + ( ( PN - CRS ) + ( MDR + ARS ) ) )", "choosing": "Min( ( ( DS * MUC ) - Min( ( CS + DS ) ,( RMSe / MUR ) ) ) ,RRSe )", "obj1": 0.17, "obj2": 0.5966433197422957}, {"determining": "( FirstVNF_CPU / ( DDR / ( ( FirstVNF_Mem + FirstVNF_CPU ) + FirstVNF_Mem ) ) )", "choosing": "( ( ( ( ( ( ( RMSe * CS ) / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( ( RCSe - MLU ) + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "( ( Max( Min( Const ,MDR ),Max( FirstVNF_CPU_Server,RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( FirstVNF_Mem * BR ) ) ) + ( ( Min( PN ,MRS ) * ( BR - CRS ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( Min( MUM ,CS ) + ( MLU / ( ( MUC - DS ) * DS ) ) ) - ( ( MUR + RCSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.796, "obj2": 0.1476630226934642}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( Max( FirstVNF_Mem,BR ) * FirstVNF_Mem ) ),( MDR + MRS ) )", "choosing": "( Min( Max( ( Max( MUM,RMSe ) - ( CS - DS ) ),RRSe ) ,( DS * MUM ) ) - Min( MLU ,MUR ) )", "obj1": 0.422, "obj2": 0.392334634085679}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) / Max( PN,MRS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( Min( DS ,DS ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.2, "obj2": 0.5816745362977422}, {"determining": "( ( FirstVNF_CPU_Server - Const ) - ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) )", "choosing": "( ( MUR - Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) ) + ( CS / MUR ) )", "obj1": 0.922, "obj2": 0.05941033798009376}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( ( ( RRSe + MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.406, "obj2": 0.41717943709446953}, {"determining": "( DDR + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( CS * MUM ) )", "obj1": 0.292, "obj2": 0.5043470984590341}, {"determining": "( FirstVNF_CPU / Max( DDR,( ( MRS - FirstVNF_CPU ) + ( ( Const - ( FirstVNF_CPU / RRS ) ) / ( CRS * Min( PN ,FirstVNF_Mem_Server ) ) ) ) ) )", "choosing": "( ( ( MLU + DS ) * ( ( RRSe / MUC ) / CS ) ) - ( MLU + DS ) )", "obj1": 0.106, "obj2": 0.6526838018089173}, {"determining": "( ( DDR * ( FirstVNF_Mem * ACS ) ) / ( Max( FirstVNF_RAM_Server,FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( ( CS / RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( Min( MUC ,RCSe ) ,CS ) )", "obj1": 0.868, "obj2": 0.1008091042748057}, {"determining": "( ( CRS / PN ) - ( Const - FirstVNF_CPU_Server ) )", "choosing": "( ( MUM + CS ) / ( RRSe * Max( CS,( ( MLU * RMSe ) / Max( ( MUM * CS ),RCSe ) ) ) ) )", "obj1": 0.066, "obj2": 0.7282566896456591}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.99, "obj2": 0.00371250632447587}, {"determining": "( ( PN - ( ( CRS * MDR ) - MRS ) ) + ( Max( BR,FirstVNF_CPU_Server ) * ACS ) )", "choosing": "( CS - ( ( DS * Max( ( RMSe + MUC ),( ( MLU - MUM ) / MUM ) ) ) / RMSe ) )", "obj1": 0.376, "obj2": 0.4233282748441564}, {"determining": "( ( MRS * MRS ) + ( Min( ( ACS * FirstVNF_CPU ) ,FirstVNF_CPU_Server ) + AMS ) )", "choosing": "( ( MUM - RMSe ) - Min( ( ( RMSe + MLU ) * CS ) ,( RRSe - MLU ) ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) )", "choosing": "Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) )", "obj1": 0.66, "obj2": 0.2375242483958139}, {"determining": "Min( Min( CRS ,DDR ) ,( Max( Max( CRS,MDR ),MRS ) * ( ACS + AMS ) ) )", "choosing": "( Min( DS ,RMSe ) / ( MUR + ( ( MUC + DS ) / CS ) ) )", "obj1": 0.482, "obj2": 0.3685838363995036}, {"determining": "( ( ( ( FirstVNF_RAM_Server / PN ) + Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) - ( ( DDR / FirstVNF_RAM_Server ) * ( FirstVNF_RAM * ACS ) ) ) * DDR )", "choosing": "( Min( ( Max( ( ( MUC / CS ) + MLU ),( RRSe / MUR ) ) - MLU ) ,RMSe ) - ( MUC + CS ) )", "obj1": 0.344, "obj2": 0.4473178977375228}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "Max( ( ( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) + BR ) * AMS ),( RRS * PN ) )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( ( MUC + MUM ) + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.182, "obj2": 0.5915675932480947}, {"determining": "( Max( DDR,MRS ) / ( ( ( Max( BR,Max( FirstVNF_RAM,MDR ) ) / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - RCSe )", "obj1": 0.79, "obj2": 0.16979504434277218}, {"determining": "( DDR * ( PN + ( Max( BR,FirstVNF_Mem ) + MRS ) ) )", "choosing": "( ( MLU / ( CS * RCSe ) ) * ( RCSe - ( ( RCSe + MUR ) / CS ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( DDR + ( CRS / ( ( FirstVNF_Mem_Server + AMS ) + ( ARS + FirstVNF_CPU ) ) ) )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * ( Min( ( ( DS + Max( MUC,MUC ) ) / RRSe ) ,CS ) * CS ) ) )", "obj1": 0.332, "obj2": 0.4801564196813829}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.372, "obj2": 0.4334453749482348}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + MUC ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.342, "obj2": 0.46844484645622114}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( Max( Min( Min( BR ,PN ) ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( CS,MLU ) * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.242, "obj2": 0.5363672677666633}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( Min( Min( CRS ,DDR ) ,( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + AMS ) ) ) * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( RCSe * MLU ) ,Min( DS ,MUC ) ) )", "obj1": 0.912, "obj2": 0.06729643183869242}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "( ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) - ( RRS / BR ) )", "choosing": "( ( MUC * Min( RRSe ,Min( RMSe ,MUC ) ) ) * ( RRSe - Max( Max( RCSe,CS ),( DS - RMSe ) ) ) )", "obj1": 0.884, "obj2": 0.10027122306172226}, {"determining": "( Max( CRS,( DDR / FirstVNF_RAM ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Min( ( DS * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.28, "obj2": 0.5155021348924356}, {"determining": "Max( ( RRS * PN ),( Max( RRS,Max( ( ( FirstVNF_CPU + BR ) * AMS ),( RRS * PN ) ) ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( ( ( MUM / CS ) + ( CS / MUM ) ),DS ) ) / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.232, "obj2": 0.5458116601761313}, {"determining": "( Max( ACS,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,Max( ( MUR / RCSe ),Min( RRSe ,DS ) ) ) - ( MLU + CS ) )", "obj1": 0.198, "obj2": 0.5857097689507155}, {"determining": "( ( Min( FirstVNF_Mem ,( AMS / RRS ) ) - FirstVNF_CPU_Server ) - ( BR / RRS ) )", "choosing": "Max( ( RMSe - MUR ),Min( RMSe ,( RCSe / ( Min( DS ,Min( DS ,Min( ( MUC * MUM ) ,MUC ) ) ) * RRSe ) ) ) )", "obj1": 0.91, "obj2": 0.08708092398395684}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) ) ) - Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( CS / MUR ) ) - Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) )", "obj1": 0.266, "obj2": 0.523511489138103}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - PN ) )", "choosing": "( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ) / Min( MUR ,MUC ) )", "obj1": 0.896, "obj2": 0.09651476205865989}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( DDR,FirstVNF_CPU ) - ACS ) ) ),( FirstVNF_RAM - CRS ) )", "choosing": "( Min( ( RMSe * ( ( CS * MUR ) + RMSe ) ) ,RCSe ) - CS )", "obj1": 0.41, "obj2": 0.40392807417150906}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + ( BR * ( MRS + ( FirstVNF_Mem - Min( PN ,( FirstVNF_Mem * FirstVNF_CPU ) ) ) ) ) ) )", "choosing": "( ( MLU * MLU ) - MLU )", "obj1": 0.416, "obj2": 0.4038890956034828}, {"determining": "( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) )", "choosing": "Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) )", "obj1": 0.652, "obj2": 0.24054770953566776}, {"determining": "( ( ( ( DDR - FirstVNF_Mem ) / ( MDR * ( FirstVNF_RAM_Server + ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) ) ) ) / PN ) - ( RRS / BR ) )", "choosing": "( ( MUM + CS ) / ( ( ( RRSe - DS ) + DS ) * Max( ( RRSe + ( Min( DS ,( MUC * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.784, "obj2": 0.17029699737923334}, {"determining": "Max( Max( Max( Max( Const,( CRS - BR ) ),Max( FirstVNF_RAM_Server,Max( FirstVNF_Mem,RRS ) ) ),( PN - MRS ) ),( MRS + MDR ) )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( ( Min( DS ,( Max( RRSe,MLU ) * MUR ) ) / ( MUR / CS ) ) * DS ) ) - Min( CS ,RRSe ) )", "obj1": 0.304, "obj2": 0.4820314844669593}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( DS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.356, "obj2": 0.44288269022181465}, {"determining": "( ( CRS - FirstVNF_CPU_Server ) - Min( ( MDR - ARS ) ,( FirstVNF_Mem * FirstVNF_RAM ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( MUC - ( MUM * MUM ) ) ,Min( ( MLU - MUM ) ,( MLU + MUM ) ) ) ) ,RRSe )", "obj1": 0.23, "obj2": 0.5510930909654094}, {"determining": "( FirstVNF_CPU / Max( DDR,( ARS + AMS ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.106, "obj2": 0.6526838018089173}, {"determining": "( ( ( PN * ( ( MRS / PN ) + MRS ) ) * DDR ) / ( ACS + Max( PN,FirstVNF_CPU ) ) )", "choosing": "( Min( DS ,MUC ) / ( MUR + CS ) )", "obj1": 0.482, "obj2": 0.3685838363995036}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + MUC ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.262, "obj2": 0.5271607456259803}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "( ( Min( ( FirstVNF_RAM_Server + DDR ) ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) - ( RRS / BR ) )", "choosing": "Max( ( RMSe - MUR ),Min( ( RCSe / ( ( RRSe - ( CS + RMSe ) ) + DS ) ) ,RMSe ) )", "obj1": 0.898, "obj2": 0.09003699200477229}, {"determining": "( ( CRS / PN ) - ( RRS / BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.066, "obj2": 0.7282566896456591}, {"determining": "( Max( ( FirstVNF_RAM_Server * AMS ),( AMS - DDR ) ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( ( CS / CS ) + Min( ( CS + DS ) ,( RMSe * MUR ) ) ) )", "obj1": 0.258, "obj2": 0.5338687063364467}, {"determining": "( ( MDR / ( RRS + FirstVNF_Mem_Server ) ) + ( DDR / ( ACS * CRS ) ) )", "choosing": "( Min( DS ,RMSe ) - ( ( Max( ( RMSe / ( Min( MUM ,( CS + CS ) ) - MUR ) ),MLU ) / ( MUC * ( RMSe / MUC ) ) ) - RCSe ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + MUC ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.342, "obj2": 0.46844484645622114}, {"determining": "Min( ( FirstVNF_Mem / BR ) ,( FirstVNF_CPU_Server - Const ) )", "choosing": "( Max( MUM,MUM ) / Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) )", "obj1": 0.906, "obj2": 0.08954298001688388}, {"determining": "( ( AMS - MRS ) * FirstVNF_Mem )", "choosing": "( ( Max( ( DS - ( MUM - MUC ) ),MUR ) + DS ) / ( Max( Min( MUC ,CS ),MLU ) * Min( MUR ,CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) - Min( Const ,( AMS * ( Max( BR,Min( ARS ,PN ) ) / ( BR + Const ) ) ) ) )", "choosing": "( ( MUM * MUR ) * ( ( ( ( MUR - MLU ) - ( MUR / RCSe ) ) * ( ( ( ( MLU / DS ) + Min( Max( RMSe,RMSe ) ,RRSe ) ) + ( MUC * MUC ) ) - RRSe ) ) * MUM ) )", "obj1": 0.154, "obj2": 0.6461092904023151}, {"determining": "( ( PN / CRS ) - Max( MDR,BR ) )", "choosing": "( ( MUM + CS ) / Min( DS ,Max( ( MLU / Max( Min( CS ,DS ),RCSe ) ),CS ) ) )", "obj1": 0.054, "obj2": 0.7357296279425566}, {"determining": "( FirstVNF_CPU / Max( DDR,( ARS + AMS ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.254, "obj2": 0.5348693669703587}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.276, "obj2": 0.5164601289990287}, {"determining": "( ( CRS / PN ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.058, "obj2": 0.7298163599114977}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( ( PN * Min( Min( CRS ,DDR ) ,( Max( FirstVNF_Mem_Server,ARS ) * Min( ARS ,ACS ) ) ) ) - ( DDR * BR ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( MUR ,DS ) ),Min( ( RCSe * MLU ) ,( DS * ( MLU * RRSe ) ) ) )", "obj1": 0.912, "obj2": 0.06729643183869242}, {"determining": "( ( CRS / PN ) - ( ( FirstVNF_CPU - MRS ) * DDR ) )", "choosing": "( ( MLU + CS ) / ( DS * Max( ( RMSe / RMSe ),( ( MLU - Max( RRSe,DS ) ) + ( CS * MUC ) ) ) ) )", "obj1": 0.048, "obj2": 0.7366569177887334}, {"determining": "( ( CRS / PN ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.056, "obj2": 0.732234149288805}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( Min( Max( ( FirstVNF_CPU_Server - RRS ),Min( Const ,MDR ) ) ,( Min( FirstVNF_CPU_Server ,( ( ( ARS + DDR ) * RRS ) * MRS ) ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( Min( RCSe ,CS ) * ( MLU - ( CS * ( MUM * MUR ) ) ) )", "obj1": 0.276, "obj2": 0.5164601289990287}, {"determining": "( ( CRS / PN ) - Min( ( MDR + Min( MRS ,RRS ) ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - ( MUM / ( ( MLU + DS ) - MUM ) ) ) ) ) )", "obj1": 0.064, "obj2": 0.7285514291157205}, {"determining": "( ( FirstVNF_CPU * DDR ) / FirstVNF_CPU )", "choosing": "( ( MLU - ( Max( MUR,RMSe ) * ( ( MUR - RCSe ) - ( ( ( MLU * MLU ) + MUR ) * MLU ) ) ) ) - ( MLU + CS ) )", "obj1": 0.254, "obj2": 0.5348693669703587}, {"determining": "( ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) - ( RRS / BR ) )", "choosing": "Max( ( RMSe - MUR ),Min( ( RCSe / ( ( RRSe - DS ) + DS ) ) ,RMSe ) )", "obj1": 0.91, "obj2": 0.08708092398395684}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( Min( ( MDR + ARS ) ,MRS ) * FirstVNF_CPU ) ,DDR ) )", "choosing": "Max( ( RRSe / RCSe ),Min( Max( CS,( ( MUR * MUM ) - RCSe ) ) ,DS ) )", "obj1": 0.994, "obj2": 0.0016144419157378762}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "Max( ( RRSe / RCSe ),Min( ( RMSe - MUC ) ,DS ) )", "obj1": 0.994, "obj2": 0.0016144419157378762}, {"determining": "( ( CRS / PN ) - ( RRS / BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.048, "obj2": 0.7366569177887334}, {"determining": "( ( ( PN - ( ( RRS * Const ) - ( ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) * CRS ) ) ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + ( Min( DDR ,Min( ACS ,FirstVNF_CPU ) ) - MDR ) ) ) )", "choosing": "Min( ( ( MUM * CS ) - Min( MUC ,RMSe ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 0.998, "obj2": 0.0005795680665435363}, {"determining": "( ( ( PN - ( ( RRS * Const ) - ( ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) * CRS ) ) ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUC / MUM ) - ( MUC * RMSe ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 0.998, "obj2": 0.0005795680665435363}, {"determining": "( Min( DDR ,Max( FirstVNF_Mem_Server,Max( FirstVNF_RAM,( FirstVNF_RAM + ( BR - ( Min( ACS ,FirstVNF_RAM ) - FirstVNF_CPU_Server ) ) ) ) ) ) * ( BR - MDR ) )", "choosing": "( ( RRSe * Min( ( ( MUM * MUR ) - ( CS - MLU ) ) ,( ( MLU * RMSe ) - Min( DS ,DS ) ) ) ) - ( ( MUM * MUR ) - Max( ( MUR * MUM ),RMSe ) ) )", "obj1": 0.996, "obj2": 0.0011571815926451868}, {"determining": "( Min( DDR ,Max( FirstVNF_Mem_Server,( FirstVNF_CPU_Server * ( FirstVNF_RAM * FirstVNF_CPU ) ) ) ) * ( BR - MDR ) )", "choosing": "( ( RRSe * Min( ( ( MUM * MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) ) - ( ( DS / MUC ) - MUR ) )", "obj1": 0.996, "obj2": 0.0011571815926451868}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( FirstVNF_CPU_Server - Const ),Max( ACS,FirstVNF_CPU_Server ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "( ( RRSe * ( MLU / MLU ) ) + ( MUR + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,( ( ( ( BR / MDR ) / ( BR / ACS ) ) - ACS ) + BR ) ) * ( RRS - DDR ) )", "choosing": "( ( MUR / MUC ) * ( MUM - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ( ACS / AMS ) + Min( ( FirstVNF_RAM + FirstVNF_Mem_Server ) ,FirstVNF_RAM_Server ) ) + Max( MDR,PN ) ) / FirstVNF_RAM ) - ( RRS * PN ) )", "choosing": "( ( MUR - CS ) + ( Max( ( Max( ( DS / RRSe ),CS ) / Max( MUC,( ( Min( MUC ,CS ) - MUM ) - ( RMSe - CS ) ) ) ),MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( MDR,RRS ) / ( MDR - Min( MDR ,CRS ) ) )", "choosing": "Max( Min( Min( MLU ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Max( CS,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / DDR ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( Max( DS,MUM ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,( Const - Max( CRS,FirstVNF_CPU_Server ) ) ) ) )", "choosing": "Max( ( ( CS + MLU ) - ( DS + CS ) ),( ( DS - MUC ) - ( MUR / CS ) ) )", "obj1": 1.0, "obj2": 0.0}], "5": [{"determining": "( ( RRS / CRS ) - Min( ( Min( Const ,( MRS - FirstVNF_Mem_Server ) ) + ( FirstVNF_CPU + AMS ) ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS + Max( CS,( ( MUR * Max( ( RRSe / RCSe ),( MUR - ( RRSe / MLU ) ) ) ) - RCSe ) ) ) )", "obj1": 0.046, "obj2": 0.7410218361223464}, {"determining": "( ( PN - ( ( MRS / FirstVNF_Mem_Server ) + ( DDR / ( ACS * ( RRS * MDR ) ) ) ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,( CS + Min( DS ,MLU ) ) ) * ( Min( MUM ,( CS + CS ) ) - MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - ( Min( FirstVNF_Mem ,DDR ) - ( ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) * CRS ) ) ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUC / MUM ) - ( MUC * RMSe ) ) ,( MUR + ( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( DDR,MRS ) / FirstVNF_CPU )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( RRSe / RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.046, "obj2": 0.7410218361223464}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.51, "obj2": 0.29353344848235596}, {"determining": "( Min( PN ,PN ) * ( BR - CRS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.668, "obj2": 0.21209977859626258}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / CRS ) + ( FirstVNF_Mem - Const ) ) + ( ( ( Max( Min( MRS ,FirstVNF_Mem_Server ),FirstVNF_RAM_Server ) / CRS ) / PN ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( MUC ,( ( ( Min( Max( RMSe,CS ) ,CS ) * RCSe ) / MLU ) * ( RCSe / MLU ) ) ) )", "obj1": 0.742, "obj2": 0.180406942585088}, {"determining": "Min( ( FirstVNF_Mem_Server - MRS ) ,( CRS - DDR ) )", "choosing": "( Min( DS ,MUC ) / ( RCSe / MUM ) )", "obj1": 0.498, "obj2": 0.3486104667889947}, {"determining": "Max( Max( Min( FirstVNF_RAM_Server ,ARS ),FirstVNF_RAM_Server ),( Max( RRS,FirstVNF_CPU ) / ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( CS,MUR ),( ( CS - RCSe ) - ( RRSe * MUC ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.59, "obj2": 0.27898247749295024}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) ) ,MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.182, "obj2": 0.5723642910438661}, {"determining": "( ( ( PN - Max( ( ( ( FirstVNF_Mem_Server * AMS ) * FirstVNF_RAM ) - ( BR - PN ) ),Min( ( Min( RRS ,DDR ) * FirstVNF_CPU ) ,MRS ) ) ) + Const ) + ( RRS - AMS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( Max( ( MLU - RCSe ),MUM ) - RCSe ) ) ) )", "obj1": 0.83, "obj2": 0.10234854832520066}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "( ( ( MUM - CS ) / ( Min( Min( DS ,DS ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.146, "obj2": 0.6373272789312883}, {"determining": "( ( FirstVNF_Mem + AMS ) - ( ( RRS / RRS ) * ( Max( FirstVNF_RAM,FirstVNF_Mem_Server ) * FirstVNF_Mem ) ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( ( ( MUM / ( MLU - MLU ) ) + MUM ) + ( Min( DS ,( ( MUR + MUC ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.084, "obj2": 0.6861730392692638}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.814, "obj2": 0.138507503511022}, {"determining": "( ( RRS - AMS ) + ( ( MRS / FirstVNF_CPU_Server ) + FirstVNF_CPU_Server ) )", "choosing": "( Max( MUM,CS ) / ( ( DS + MUR ) * DS ) )", "obj1": 0.876, "obj2": 0.07171340384926236}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( MUC ,( DS * MUM ) ) - CS )", "obj1": 0.46, "obj2": 0.3558676824151275}, {"determining": "( ( ( ( MRS / PN ) + MRS ) - PN ) * ( PN - ( FirstVNF_RAM - ( BR / FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( MUM + CS ) / ( DS * Max( ( MUM + RMSe ),( ( MUR * MUM ) - RCSe ) ) ) ) - CS ) / ( Min( CS ,MUR ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.156, "obj2": 0.6001879411188007}, {"determining": "( ( DDR * ( FirstVNF_Mem * ACS ) ) / ( Max( FirstVNF_RAM_Server,FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( ( CS / RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( Min( MUC ,RCSe ) ,CS ) )", "obj1": 0.868, "obj2": 0.1008091042748057}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Max( FirstVNF_RAM,( FirstVNF_RAM + ( BR - ( Min( ACS ,FirstVNF_RAM ) - FirstVNF_CPU_Server ) ) ) ) ) )", "choosing": "( ( MUM + Max( ( MUR * MUM ),RMSe ) ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.072, "obj2": 0.7177298497711403}, {"determining": "( ( Min( Min( CRS ,DDR ) ,( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + AMS ) ) ) * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( RCSe * MLU ) ,Min( DS ,MUC ) ) )", "obj1": 0.912, "obj2": 0.06729643183869242}, {"determining": "( FirstVNF_CPU / ( DDR / ( ( FirstVNF_Mem + FirstVNF_CPU ) + FirstVNF_Mem ) ) )", "choosing": "( ( ( ( ( ( ( RMSe * CS ) / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( ( RCSe - MLU ) + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "( ( Min( PN ,MRS ) * ( BR - CRS ) ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( CS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.65, "obj2": 0.23242951074543342}, {"determining": "( ( Max( Min( Const ,MDR ),Max( FirstVNF_CPU_Server,RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( FirstVNF_Mem * BR ) ) ) + ( ( Min( PN ,MRS ) * ( BR - CRS ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( Min( MUM ,CS ) + ( MLU / ( ( MUC - DS ) * DS ) ) ) - ( ( MUR + RCSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.796, "obj2": 0.1476630226934642}, {"determining": "( ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) / Max( PN,MRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( ( ( RRSe + MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.444, "obj2": 0.3718726129841978}, {"determining": "( ( RRS - ( Min( FirstVNF_CPU_Server ,ACS ) - PN ) ) + ( ( PN - CRS ) + ( MDR + ARS ) ) )", "choosing": "Min( ( ( DS * MUC ) - Min( ( CS + DS ) ,( RMSe / MUR ) ) ) ,RRSe )", "obj1": 0.17, "obj2": 0.5966433197422957}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server - Const ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM * ( ( Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( ( ( RRSe + MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.254, "obj2": 0.5167541188840187}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( Max( Min( Min( BR ,PN ) ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( CS,MLU ) * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.242, "obj2": 0.5363672677666633}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * MRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( ( ( RRSe + MUC ) - ( DS / MLU ) ) ,( Max( CS,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.396, "obj2": 0.4161764602856807}, {"determining": "( ( ( ( BR - CRS ) - Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( ( MRS * Max( FirstVNF_CPU_Server,MRS ) ) ,PN ) ,Max( CRS,ACS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( ( ( ( MLU / MUM ) + ( DS * RRSe ) ) - MLU ),( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * ( DS * RMSe ) )", "obj1": 0.614, "obj2": 0.24664467403809137}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.632, "obj2": 0.23447022285064062}, {"determining": "( ( ( PN - FirstVNF_CPU ) / PN ) - ( RRS / BR ) )", "choosing": "( ( MUM + Min( ( RMSe - MUC ) ,DS ) ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.99, "obj2": 0.003648673012232002}, {"determining": "Max( ( Min( MDR ,MRS ) * Max( ACS,DDR ) ),Max( Min( FirstVNF_Mem ,DDR ),( PN * CRS ) ) )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - RMSe ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.224, "obj2": 0.5585658679750155}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,RRSe )", "obj1": 0.918, "obj2": 0.04338759183144289}, {"determining": "Max( Max( Min( FirstVNF_Mem ,( ( AMS / AMS ) + ARS ) ),( MRS * MRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS * MUM ) / Max( ( ( MUM - RMSe ) - Max( CS,( RRSe / CS ) ) ),RRSe ) ) - CS )", "obj1": 0.436, "obj2": 0.38647073153339573}, {"determining": "( ( ( ( FirstVNF_RAM_Server / PN ) + Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) - ( ( DDR / FirstVNF_RAM_Server ) * ( FirstVNF_RAM * ACS ) ) ) * DDR )", "choosing": "( Min( ( Max( ( ( MUC / CS ) + MLU ),( RRSe / MUR ) ) - MLU ) ,RMSe ) - ( MUC + CS ) )", "obj1": 0.344, "obj2": 0.4473178977375228}, {"determining": "( ( PN - ( ( CRS * MDR ) - MRS ) ) + ( Max( BR,FirstVNF_CPU_Server ) * ACS ) )", "choosing": "( CS - ( ( DS * Max( ( RMSe + MUC ),( ( MLU - MUM ) / MUM ) ) ) / RMSe ) )", "obj1": 0.376, "obj2": 0.4233282748441564}, {"determining": "( ( ( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( PN,FirstVNF_CPU ) ) ) * DDR ) / ( ACS + Max( PN,FirstVNF_CPU ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( Min( MUC ,CS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.284, "obj2": 0.5051154362746006}, {"determining": "( FirstVNF_CPU / ( DDR / ( DDR / ARS ) ) )", "choosing": "( ( ( DS / ( ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUC ) / MUM ) + ( MUC / ( MUC * MUC ) ) ) ) - ( ( ( MUR / MLU ) / ( DS + Min( ( ( RRSe + MLU ) / MUR ) ,MUM ) ) ) / RRSe ) ) - ( MLU + CS ) )", "obj1": 0.116, "obj2": 0.64575000053503}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + MUC ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.342, "obj2": 0.46844484645622114}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( ( CS / MLU ) + RRSe ) )", "obj1": 0.292, "obj2": 0.4891488407455998}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( Max( FirstVNF_Mem,BR ) * FirstVNF_Mem ) ),( MDR + MRS ) )", "choosing": "( Min( Max( ( Max( MUM,RMSe ) - ( CS - DS ) ),RRSe ) ,( DS * MUM ) ) - Min( MLU ,MUR ) )", "obj1": 0.422, "obj2": 0.392334634085679}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( Min( DS ,( Max( CS,MLU ) * MUR ) ) / ( MUR / CS ) ) ) ) - CS )", "obj1": 0.326, "obj2": 0.4727213921800143}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ( ( PN - CRS ) + ( DDR * PN ) ) ) )", "choosing": "( ( ( MUC / MUM ) + Max( DS,RMSe ) ) - ( Max( Max( MUM,RMSe ),( ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) / ( CS - RCSe ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.606, "obj2": 0.265906133283989}, {"determining": "( Max( DDR,MRS ) / ( ( ( Max( BR,Max( FirstVNF_RAM,MDR ) ) / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - RCSe )", "obj1": 0.79, "obj2": 0.16979504434277218}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "( ( MRS - MDR ) * DDR )", "choosing": "( ( RRSe * MUC ) - ( MLU + CS ) )", "obj1": 0.312, "obj2": 0.4736752721526333}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.592, "obj2": 0.27435740384013674}, {"determining": "( Min( PN ,MRS ) * ( MDR + Const ) )", "choosing": "( ( ( MUC / MUM ) + ( MUM / CS ) ) - ( ( MUR + ( ( MUR - MUR ) / CS ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.608, "obj2": 0.25842926987358306}, {"determining": "( ( RRS - AMS ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( Min( Min( DS ,DS ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) ,( RMSe * MUR ) ) ) ,RRSe )", "obj1": 0.944, "obj2": 0.022437407176652352}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.76, "obj2": 0.17825999096136097}, {"determining": "Max( Max( Max( Max( Const,( CRS - BR ) ),Max( FirstVNF_RAM_Server,Max( FirstVNF_Mem,RRS ) ) ),( PN - MRS ) ),( MRS + MDR ) )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( ( Min( DS ,( Max( RRSe,MLU ) * MUR ) ) / ( MUR / CS ) ) * DS ) ) - Min( CS ,RRSe ) )", "obj1": 0.304, "obj2": 0.4820314844669593}, {"determining": "( ( ( ( DDR - FirstVNF_Mem ) / ( MDR * ( FirstVNF_RAM_Server + ( Min( FirstVNF_Mem ,FirstVNF_CPU ) - FirstVNF_CPU_Server ) ) ) ) / PN ) - ( RRS / BR ) )", "choosing": "( ( MUM + CS ) / ( ( ( RRSe - DS ) + DS ) * Max( ( RRSe + ( Min( DS ,( MUC * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.784, "obj2": 0.17029699737923334}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.372, "obj2": 0.4334453749482348}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( DS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.356, "obj2": 0.44288269022181465}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "( ( RRSe + DS ) + ( RMSe / CS ) )", "obj1": 0.942, "obj2": 0.028586112503713665}, {"determining": "Max( ( Min( MDR ,MRS ) * Max( ACS,DDR ) ),Max( Min( FirstVNF_Mem ,DDR ),( PN * CRS ) ) )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - RMSe ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.224, "obj2": 0.5585658679750155}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.276, "obj2": 0.5164601289990287}, {"determining": "( Max( CRS,( DDR / FirstVNF_RAM ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Min( ( DS * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.28, "obj2": 0.5155021348924356}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.924, "obj2": 0.03857500572875643}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + MRS ) )", "choosing": "( Min( MUC ,( DS * MUM ) ) - CS )", "obj1": 0.41, "obj2": 0.40392807417150906}, {"determining": "( FirstVNF_CPU / Max( DDR,( ( MRS - FirstVNF_CPU ) + ( ( Const - ( FirstVNF_CPU / RRS ) ) / ( CRS * Min( PN ,FirstVNF_Mem_Server ) ) ) ) ) )", "choosing": "( ( ( MLU + DS ) * ( ( RRSe / MUC ) / CS ) ) - ( MLU + DS ) )", "obj1": 0.106, "obj2": 0.6526838018089173}, {"determining": "( Max( Max( ( FirstVNF_RAM * RRS ),MDR ),MRS ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Min( ( ( MUM * ( ( Max( ( DS / ( MUC + MUC ) ),DS ) * ( MUC * MUC ) ) * Min( CS ,MUR ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) + MLU ) ) ,( Max( CS,MUM ) + Max( RRSe,MUM ) ) ) )", "obj1": 0.418, "obj2": 0.4015106165200094}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.934, "obj2": 0.033394381052982876}, {"determining": "( FirstVNF_CPU / Max( DDR,( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * ( MUM / CS ) ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.114, "obj2": 0.6472849308066634}, {"determining": "( FirstVNF_CPU / Max( DDR,( ARS + AMS ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.106, "obj2": 0.6526838018089173}, {"determining": "( Max( FirstVNF_RAM,( AMS + Max( FirstVNF_CPU_Server,MRS ) ) ) / FirstVNF_CPU )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( ( ( MUM / CS ) + ( CS / CS ) ),DS ) ) / MUM ) ) - ( ( RMSe / MUC ) - Max( RRSe,MUM ) ) )", "obj1": 0.232, "obj2": 0.5458116601761313}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "Max( ( RRS * PN ),( Max( RRS,Max( ( ( FirstVNF_CPU + BR ) * AMS ),( RRS * PN ) ) ) - ACS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.068, "obj2": 0.7275365113235489}, {"determining": "Max( ( RRS * PN ),( Max( RRS,Max( ( ( FirstVNF_CPU + BR ) * AMS ),( RRS * PN ) ) ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( ( ( MUM / CS ) + ( CS / MUM ) ),DS ) ) / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.232, "obj2": 0.5458116601761313}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( DDR,FirstVNF_CPU ) - ACS ) ) ),( FirstVNF_RAM - CRS ) )", "choosing": "( Min( ( RMSe * ( ( CS * MUR ) + RMSe ) ) ,RCSe ) - CS )", "obj1": 0.41, "obj2": 0.40392807417150906}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.372, "obj2": 0.4334453749482348}, {"determining": "( ( AMS - MRS ) * FirstVNF_Mem )", "choosing": "( ( Max( ( DS - ( MUM - MUC ) ),MUR ) + DS ) / ( Max( Min( MUC ,CS ),MLU ) * Min( MUR ,CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( ( RRS - ( ( Max( MDR,FirstVNF_CPU_Server ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( RRSe * RCSe ) ) * ( ( CS / CS ) + Min( Min( DS ,MUM ) ,Max( DS,MUR ) ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( ( CRS - FirstVNF_CPU_Server ) - Min( ( MDR - ARS ) ,( FirstVNF_Mem * FirstVNF_RAM ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( MUC - ( MUM * MUM ) ) ,Min( ( MLU - MUM ) ,( MLU + MUM ) ) ) ) ,RRSe )", "obj1": 0.23, "obj2": 0.5510930909654094}, {"determining": "( ( CRS / PN ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.058, "obj2": 0.7298163599114977}, {"determining": "( ( RRS - AMS ) + ( ( PN - ( FirstVNF_Mem_Server / FirstVNF_CPU ) ) / Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + ( Max( ( ( MUM * CS ) + RMSe ),( ( MUR * MUM ) * ( CS * MUR ) ) ) / MUM ) ) ,( RMSe * MUR ) ) ) ,MUC )", "obj1": 0.932, "obj2": 0.037005058815076444}, {"determining": "( ( Min( Min( CRS ,DDR ) ,( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + AMS ) ) ) * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( RCSe * MLU ) ,Min( DS ,MUC ) ) )", "obj1": 0.912, "obj2": 0.06729643183869242}, {"determining": "Min( Min( CRS ,DDR ) ,( Max( PN,Max( BR,AMS ) ) * ( ACS + AMS ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,RRSe )", "obj1": 0.23, "obj2": 0.5510930909654094}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + ( BR * ( MRS + ( FirstVNF_Mem - Min( PN ,( FirstVNF_Mem * FirstVNF_CPU ) ) ) ) ) ) )", "choosing": "( ( MLU * MLU ) - MLU )", "obj1": 0.416, "obj2": 0.4038890956034828}, {"determining": "( ( CRS / PN ) - Min( ( ( FirstVNF_RAM_Server - FirstVNF_CPU_Server ) * DDR ) ,MRS ) )", "choosing": "( ( MUM + MLU ) / ( MUM + ( CS + MUR ) ) )", "obj1": 0.052, "obj2": 0.73289035506742}, {"determining": "( ( FirstVNF_CPU_Server - ( FirstVNF_CPU * RRS ) ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS - FirstVNF_Mem ) ) ) )", "choosing": "( ( ( DS - ( MLU + Min( RCSe ,CS ) ) ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( CS,RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.868, "obj2": 0.1008091042748057}, {"determining": "( ( CRS / PN ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.056, "obj2": 0.732234149288805}, {"determining": "( ( CRS / PN ) - Min( ( MDR + ARS ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.05, "obj2": 0.73596877607722}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.76, "obj2": 0.17825999096136097}, {"determining": "( DDR * ( PN + ( Max( BR,FirstVNF_Mem ) + MRS ) ) )", "choosing": "( ( MLU / ( CS * RCSe ) ) * ( RCSe - ( ( RCSe + MUR ) / CS ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( Min( PN ,CRS ) - ( RRS / ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MUR / Min( MUR ,( Min( RRSe ,Max( CS,( MUR * MUC ) ) ) * MLU ) ) ) / ( DS * Max( MUR,CS ) ) )", "obj1": 0.048, "obj2": 0.7366569177887334}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / ( Max( ( ARS / ACS ),CRS ) * CRS ) ) ) ) - Min( ( FirstVNF_Mem / Min( PN ,BR ) ) ,MRS ) )", "choosing": "( ( MUM + RMSe ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + MUC ) ) - RCSe ) ,( CS - RRSe ) ) )", "obj1": 0.342, "obj2": 0.46844484645622114}, {"determining": "( Max( DDR,MRS ) / ( ( ( Max( BR,Max( FirstVNF_RAM,MDR ) ) / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( RMSe * ( MUR + Max( RMSe,CS ) ) ) ) ) - RCSe )", "obj1": 0.79, "obj2": 0.16979504434277218}, {"determining": "( ( CRS / PN ) - Min( ( MDR + Min( MRS ,RRS ) ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - ( MUM / ( ( MLU + DS ) - MUM ) ) ) ) ) )", "obj1": 0.064, "obj2": 0.7285514291157205}, {"determining": "( Min( DDR ,Max( FirstVNF_Mem_Server,( FirstVNF_CPU_Server * ( ( MRS * MRS ) + ( ( Min( ACS ,DDR ) - ( RRS - FirstVNF_RAM_Server ) ) / ( Const - PN ) ) ) ) ) ) * ( FirstVNF_CPU_Server - BR ) )", "choosing": "( Max( ( ( Max( MUC,MUC ) / ( ( RCSe - CS ) - ( MLU * RRSe ) ) ) + MUR ),( RCSe - RCSe ) ) - ( ( DS / MUC ) - MUR ) )", "obj1": 0.996, "obj2": 0.0010352447754736172}, {"determining": "( Min( CRS ,Max( PN,( DDR - RRS ) ) ) - ( RRS / BR ) )", "choosing": "( ( ( ( ( MUR / DS ) + CS ) + ( RCSe / ( RMSe * DS ) ) ) / ( RCSe / Max( Max( DS,( DS * Min( MUM ,MLU ) ) ),MUM ) ) ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.068, "obj2": 0.7275365113235489}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.276, "obj2": 0.5164601289990287}, {"determining": "( ( RRS * AMS ) + ( ( CRS - ( FirstVNF_RAM / Const ) ) + Const ) )", "choosing": "Min( ( ( Min( Max( Max( Min( RCSe ,( MUC * MUC ) ),RRSe ),RMSe ) ,CS ) / ( MUC / RMSe ) ) + MUC ) ,RRSe )", "obj1": 0.932, "obj2": 0.037005058815076444}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ( RRS * FirstVNF_CPU ) ,DDR ) )", "choosing": "( Min( RCSe ,CS ) * ( MLU - ( CS * ( MUM * MUR ) ) ) )", "obj1": 0.992, "obj2": 0.002177276522231001}, {"determining": "( ( CRS / PN ) - Min( ( MDR + Min( MRS ,RRS ) ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - ( MUM / ( ( MLU + DS ) - MUM ) ) ) ) ) )", "obj1": 0.064, "obj2": 0.7285514291157205}, {"determining": "( ( CRS / PN ) - ( Const - FirstVNF_CPU_Server ) )", "choosing": "( ( MUM + CS ) / ( RRSe * Max( CS,( ( MLU * RMSe ) / Max( ( MUM * CS ),RCSe ) ) ) ) )", "obj1": 0.066, "obj2": 0.7282566896456591}, {"determining": "( ( CRS / PN ) - ( ( FirstVNF_CPU - MRS ) * DDR ) )", "choosing": "( ( MLU + CS ) / ( DS * Max( ( RMSe / RMSe ),( ( MLU - Max( RRSe,DS ) ) + ( CS * MUC ) ) ) ) )", "obj1": 0.048, "obj2": 0.7366569177887334}, {"determining": "( ( ( PN - ( ( RRS * Const ) - ( ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) * CRS ) ) ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + ( Min( DDR ,Min( ACS ,FirstVNF_CPU ) ) - MDR ) ) ) )", "choosing": "Min( ( ( MUM * CS ) - Min( MUC ,RMSe ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 0.998, "obj2": 0.0005795680665435363}], "6": [{"determining": "( ( ( ( FirstVNF_Mem_Server * AMS ) - CRS ) + DDR ) + ( RRS - AMS ) )", "choosing": "Min( ( Min( ( DS / RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( Max( CS,RRSe ) + ( Max( ( RCSe - DS ),RMSe ) - MLU ) ) * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - ( ( MRS / FirstVNF_Mem_Server ) + ( DDR / ( ACS * ( RRS * MDR ) ) ) ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,( CS + Min( DS ,MLU ) ) ) * ( Min( MUM ,( CS + CS ) ) - MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_CPU + BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( ( MUR * MUM ) - RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.042, "obj2": 0.7393956666884063}, {"determining": "( ARS * ( PN - ( FirstVNF_RAM - FirstVNF_RAM ) ) )", "choosing": "( Max( ( RRSe + MLU ),CS ) - ( MLU + CS ) )", "obj1": 0.434, "obj2": 0.3454991006630385}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ( ( PN - CRS ) + Const ) ) )", "choosing": "( ( ( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) ) - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.494, "obj2": 0.3412578239683113}, {"determining": "( ( DDR * ( FirstVNF_Mem * ACS ) ) / ( Max( FirstVNF_RAM_Server,FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( ( CS / RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( Min( MUC ,RCSe ) ,CS ) )", "obj1": 0.868, "obj2": 0.1008091042748057}, {"determining": "( ( PN + ( ( AMS / PN ) + FirstVNF_Mem_Server ) ) * ( FirstVNF_CPU_Server * Max( ( FirstVNF_RAM + RRS ),FirstVNF_CPU ) ) )", "choosing": "( ( MUC - ( ( DS * ( ( Max( Min( MUM ,MUM ),( RCSe / RCSe ) ) * MUR ) + DS ) ) * ( RCSe - Max( RCSe,MUR ) ) ) ) - CS )", "obj1": 0.238, "obj2": 0.5149040590783073}, {"determining": "( ( PN - ( CRS / PN ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.526, "obj2": 0.28400735295193824}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.696, "obj2": 0.19229448640367583}, {"determining": "( ( ( PN - Max( ( ( ( FirstVNF_Mem_Server * AMS ) * FirstVNF_RAM ) - ( BR - PN ) ),Min( ( Min( RRS ,DDR ) * FirstVNF_CPU ) ,MRS ) ) ) + Const ) + ( RRS - AMS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( Max( ( MLU - RCSe ),MUM ) - RCSe ) ) ) )", "obj1": 0.83, "obj2": 0.10234854832520066}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( Max( FirstVNF_Mem,BR ) * FirstVNF_Mem ) ),( MDR + MRS ) )", "choosing": "( Min( Max( ( Max( MUM,RMSe ) - ( CS - DS ) ),RRSe ) ,( DS * MUM ) ) - Min( MLU ,MUR ) )", "obj1": 0.422, "obj2": 0.392334634085679}, {"determining": "( Min( FirstVNF_CPU_Server ,ACS ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - ( ( DS * MUC ) - Min( ( CS + DS ) ,( RMSe / MUR ) ) ) ) ),CS ) ) )", "obj1": 0.062, "obj2": 0.706201839004117}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.5, "obj2": 0.2959434810906795}, {"determining": "( Min( PN ,MRS ) * Min( ( Min( Min( MRS ,BR ) ,( Const - ( ( MRS - ( FirstVNF_CPU * MDR ) ) + RRS ) ) ) - ( RRS / BR ) ) ,BR ) )", "choosing": "( ( ( MUM / CS ) + ( DS / Max( ( CS * ( ( Max( RCSe,RCSe ) - RRSe ) + MLU ) ),( MUM * MLU ) ) ) ) - ( ( MUR + CS ) - Max( RCSe,CS ) ) )", "obj1": 0.87, "obj2": 0.054858835117038963}, {"determining": "Max( ( ( BR * Min( FirstVNF_Mem ,RRS ) ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) - ( MUC / MUM ) ) - Min( MLU ,Max( Max( MUM,DS ),MUR ) ) )", "obj1": 0.586, "obj2": 0.28135665204933413}, {"determining": "( ( PN - ( Max( FirstVNF_CPU_Server,MDR ) + ( ( MRS / PN ) + MRS ) ) ) * FirstVNF_RAM )", "choosing": "( ( ( MUM / CS ) + ( MUM / CS ) ) - Min( RCSe ,Max( ( RMSe - DS ),Min( DS ,CS ) ) ) )", "obj1": 0.364, "obj2": 0.41514796943250754}, {"determining": "( Min( PN ,PN ) * ( BR - CRS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.668, "obj2": 0.21209977859626258}, {"determining": "Max( Max( ( FirstVNF_Mem / FirstVNF_Mem_Server ),( PN - MRS ) ),( MDR + MRS ) )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( DS * ( Min( DS ,( Max( CS,MLU ) * MUR ) ) / ( MUR / CS ) ) ) ) - CS )", "obj1": 0.226, "obj2": 0.5438382010849345}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.822, "obj2": 0.1343444816985272}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.262, "obj2": 0.49949508393432773}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / CRS ) + ( FirstVNF_Mem - Const ) ) + ( ( ( Max( Min( MRS ,FirstVNF_Mem_Server ),FirstVNF_RAM_Server ) / CRS ) / PN ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( MUC ,( ( ( Min( Max( RMSe,CS ) ,CS ) * RCSe ) / MLU ) * ( RCSe / MLU ) ) ) )", "obj1": 0.742, "obj2": 0.180406942585088}, {"determining": "( FirstVNF_CPU / ( DDR / ( ( FirstVNF_Mem + FirstVNF_CPU ) + FirstVNF_Mem ) ) )", "choosing": "( ( ( ( ( ( ( RMSe * CS ) / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( ( RCSe - MLU ) + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "Max( ( DDR * Max( ACS,DDR ) ),Max( Min( FirstVNF_Mem ,DDR ),( PN * CRS ) ) )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - CS ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.218, "obj2": 0.5639966137776491}, {"determining": "( ( FirstVNF_Mem + AMS ) - ( ( RRS / RRS ) * ( Max( FirstVNF_RAM,FirstVNF_Mem_Server ) * FirstVNF_Mem ) ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( ( ( MUM / ( MLU - MLU ) ) + MUM ) + ( Min( DS ,( ( MUR + MUC ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.084, "obj2": 0.6861730392692638}, {"determining": "( ( PN - CRS ) * ( DDR - ( ( ( ( DDR + Min( FirstVNF_CPU ,ACS ) ) - ( ( MRS - BR ) - Min( ARS ,FirstVNF_RAM ) ) ) / PN ) + MRS ) ) )", "choosing": "( ( ( ( MUM + CS ) / ( DS * Max( CS,( ( ( DS / DS ) + CS ) - RCSe ) ) ) ) - CS ) / ( ( CS - MUR ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.156, "obj2": 0.6001879411188007}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.986, "obj2": 0.004591901312724384}, {"determining": "( Max( DDR,MRS ) / ( ( CRS / RRS ) - Min( ( Min( Const ,Max( MRS,FirstVNF_Mem_Server ) ) + ARS ) ,MRS ) ) )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( ( ( MUM / CS ) + ( CS / ( MUM + CS ) ) ),DS ) ) / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.192, "obj2": 0.5711897201407958}, {"determining": "( Max( FirstVNF_Mem_Server,ACS ) + ( ( CRS - PN ) + Const ) )", "choosing": "( ( MLU - ( CS * Max( MUR,RMSe ) ) ) - ( MLU + Min( MUR ,Max( ( MUR - MUC ),( MUC - ( Max( Max( CS,DS ),( RMSe + DS ) ) + ( Max( DS,MLU ) * ( RCSe * RMSe ) ) ) ) ) ) ) )", "obj1": 0.908, "obj2": 0.04888004261524413}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( Min( ( ARS / FirstVNF_RAM_Server ) ,( Min( Const ,Const ) / ( ARS * MRS ) ) ),FirstVNF_CPU ) - ACS ) ) ),( MDR + MRS ) )", "choosing": "( Min( RCSe ,Max( Max( ( DS * Max( MUC,MUM ) ),RCSe ),DS ) ) - ( CS + MLU ) )", "obj1": 0.136, "obj2": 0.6343413916165989}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.882, "obj2": 0.05172650635329361}, {"determining": "( ( ( ( BR - CRS ) - Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( ( MRS * Max( FirstVNF_CPU_Server,MRS ) ) ,PN ) ,Max( CRS,ACS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( ( ( ( MLU / MUM ) + ( DS * RRSe ) ) - MLU ),( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * ( DS * RMSe ) )", "obj1": 0.69, "obj2": 0.21045174689709453}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.782, "obj2": 0.16105057014003002}, {"determining": "( ( Min( PN ,MRS ) * ( BR - CRS ) ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( CS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.65, "obj2": 0.23242951074543342}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.172, "obj2": 0.5808033558692627}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( ( Min( DS ,( Max( RRSe,MLU ) * MUR ) ) / ( MUR / CS ) ) * DS ) ) - Min( CS ,RRSe ) )", "obj1": 0.276, "obj2": 0.4970563135397011}, {"determining": "( Max( CRS,( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / PN ) - MRS ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.336, "obj2": 0.46828493512500424}, {"determining": "( ( CRS + AMS ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.086, "obj2": 0.6856905127846081}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.51, "obj2": 0.29353344848235596}, {"determining": "( ( Max( Min( Const ,MDR ),Max( FirstVNF_CPU_Server,RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( FirstVNF_Mem * BR ) ) ) + ( ( Min( PN ,MRS ) * ( BR - CRS ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( Min( MUM ,CS ) + ( MLU / ( ( MUC - DS ) * DS ) ) ) - ( ( MUR + RCSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.796, "obj2": 0.1476630226934642}, {"determining": "( FirstVNF_CPU / ( DDR / ( DDR / ARS ) ) )", "choosing": "( ( ( DS / ( ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUC ) / MUM ) + ( MUC / ( MUC * MUC ) ) ) ) - ( ( ( MUR / MLU ) / ( DS + Min( ( ( RRSe + MLU ) / MUR ) ,MUM ) ) ) / RRSe ) ) - ( MLU + CS ) )", "obj1": 0.116, "obj2": 0.64575000053503}, {"determining": "Max( Max( Min( FirstVNF_Mem ,( ( AMS / AMS ) + ARS ) ),( MRS * MRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS * MUM ) / Max( ( ( MUM - RMSe ) - Max( CS,( RRSe / CS ) ) ),RRSe ) ) - CS )", "obj1": 0.396, "obj2": 0.41417214464015906}, {"determining": "( ( PN - ( ( MRS / PN ) + ( Min( MRS ,PN ) + Min( Const ,( Min( FirstVNF_Mem ,ACS ) + Max( BR,AMS ) ) ) ) ) ) * DDR )", "choosing": "( ( MUM - Max( RMSe,( Min( ( MUM * CS ) ,( MUR + Max( MUM,Min( MUR ,MUM ) ) ) ) / MUM ) ) ) / Min( Min( RRSe ,CS ) ,MUM ) )", "obj1": 0.942, "obj2": 0.0164146073706438}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.138, "obj2": 0.6269340860484653}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / ( ( PN - CRS ) + Const ) ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( Min( ( CS + DS ) ,( RMSe * MUR ) ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.752, "obj2": 0.1720633609345941}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( MUM - Min( MUC ,CS ) )", "obj1": 0.342, "obj2": 0.4531367291980193}, {"determining": "( ( RRS - ( Min( FirstVNF_CPU_Server ,ACS ) - PN ) ) + ( ( PN - CRS ) + ( MDR + ARS ) ) )", "choosing": "Min( ( ( DS * MUC ) - Min( ( CS + DS ) ,( RMSe / MUR ) ) ) ,RRSe )", "obj1": 0.17, "obj2": 0.5966433197422957}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( Min( PN ,MRS ) * ( BR - CRS ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - Max( Const,( FirstVNF_Mem_Server - DDR ) ) ) ) )", "choosing": "( ( ( MUM - RMSe ) - Max( CS,CS ) ) - ( ( MUR + RCSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.224, "obj2": 0.554955783852322}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( MDR / PN ) / Max( ARS,MRS ) ) )", "choosing": "( ( MLU - ( CS * ( ( ( CS + RRSe ) - RRSe ) * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.628, "obj2": 0.24097732938975944}, {"determining": "( Min( CRS ,Max( PN,( DDR - RRS ) ) ) - ( RRS / BR ) )", "choosing": "( ( ( ( ( MUR / DS ) + CS ) + ( RCSe / ( RMSe * DS ) ) ) / ( RCSe / Max( Max( DS,( DS * Min( MUM ,MLU ) ) ),MUM ) ) ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7287277020734084}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) ) ,MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.182, "obj2": 0.5723642910438661}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( ( CS / MLU ) + RRSe ) )", "obj1": 0.292, "obj2": 0.4891488407455998}, {"determining": "( Min( PN ,MRS ) * ( MDR + Const ) )", "choosing": "( ( ( MUC / MUM ) + ( MUM / CS ) ) - ( ( MUR + ( ( MUR - MUR ) / CS ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.608, "obj2": 0.25842926987358306}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( PN - ( ( MRS / PN ) + MRS ) ) )", "choosing": "( ( MLU - ( CS * CS ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.324, "obj2": 0.4720325651405169}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + MUC ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.938, "obj2": 0.030599429743447825}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,RRSe )", "obj1": 0.918, "obj2": 0.04338759183144289}, {"determining": "( ( Min( ACS ,FirstVNF_Mem ) + ( Max( Min( Min( BR ,PN ) ,MDR ),( Const - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - ( ARS / FirstVNF_RAM ) ) ) ) ) * ( Min( FirstVNF_CPU_Server ,Const ) / Max( ARS,MRS ) ) )", "choosing": "( ( ( MUM - MUR ) - ( CS * ( MUR * Max( DS,( MUM / MUM ) ) ) ) ) * ( ( CS / RRSe ) + RRSe ) )", "obj1": 0.614, "obj2": 0.24664467403809137}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( ( ( ( ( ACS * MDR ) / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,MDR ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - Min( CS ,MUR ) )", "obj1": 0.138, "obj2": 0.6269340860484653}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.632, "obj2": 0.23447022285064062}, {"determining": "Max( Max( ( Const + ( FirstVNF_RAM_Server * FirstVNF_RAM ) ),AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC * MUM ) ) - ( ( ( ( MLU - ( ( ( RMSe - MUM ) + ( CS + RMSe ) ) + RMSe ) ) / Max( RRSe,RMSe ) ) * RMSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.598, "obj2": 0.267926468182185}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / PN ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.742, "obj2": 0.180406942585088}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( DS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.356, "obj2": 0.44288269022181465}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.814, "obj2": 0.138507503511022}, {"determining": "( ( AMS - MRS ) * FirstVNF_Mem )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.1, "obj2": 0.653059305391571}, {"determining": "( ( ( ( MRS / PN ) + MRS ) - PN ) * ( PN - ( FirstVNF_RAM - ( BR / FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( MUM + CS ) / ( DS * Max( ( MUM + RMSe ),( ( MUR * MUM ) - RCSe ) ) ) ) - CS ) / ( Min( CS ,MUR ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.156, "obj2": 0.6001879411188007}, {"determining": "Max( Max( Min( FirstVNF_Mem ,( Min( Max( Const,( FirstVNF_Mem_Server - DDR ) ) ,ACS ) + ARS ) ),( MRS * MRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS * MUM ) / Max( ( ( MUM - RMSe ) - Max( CS,CS ) ),RRSe ) ) - CS )", "obj1": 0.4, "obj2": 0.4096825949183347}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.592, "obj2": 0.27435740384013674}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.604, "obj2": 0.26333640193964986}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.924, "obj2": 0.03857500572875643}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,RRSe )", "obj1": 0.304, "obj2": 0.47449129399867895}, {"determining": "( ( Min( PN ,MRS ) * ( BR - CRS ) ) / ( ACS + Max( ( ( ( ( CRS / PN ) - ( ( FirstVNF_CPU - MRS ) * DDR ) ) / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( CS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - DS ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.65, "obj2": 0.23242951074543342}, {"determining": "( ( Max( Min( PN ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.79, "obj2": 0.1549992290957141}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.814, "obj2": 0.138507503511022}, {"determining": "( ( Min( FirstVNF_Mem_Server ,( FirstVNF_RAM - RRS ) ) - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( ( ( RCSe * Min( RMSe ,DS ) ) * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.344, "obj2": 0.4473178977375228}, {"determining": "( ( MRS - MDR ) * DDR )", "choosing": "( ( RRSe * MUC ) - ( MLU + CS ) )", "obj1": 0.312, "obj2": 0.4736752721526333}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "Max( Max( Min( FirstVNF_Mem ,( Min( Max( Const,( FirstVNF_Mem_Server - DDR ) ) ,ACS ) + ARS ) ),( MRS * MRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS * MUM ) / Max( ( ( ( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + RCSe ) - Max( RRSe,MUM ) ) ) - RMSe ) - Max( CS,CS ) ),RRSe ) ) - CS )", "obj1": 0.408, "obj2": 0.4061937627257277}, {"determining": "( Min( CRS ,Max( PN,( DDR - RRS ) ) ) - ( RRS / BR ) )", "choosing": "( ( ( ( ( MUR / DS ) + CS ) + ( RCSe / ( RMSe * DS ) ) ) / ( RCSe / Max( Max( DS,( DS * Min( MUM ,MLU ) ) ),MUM ) ) ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.048, "obj2": 0.7325587200351164}, {"determining": "( ( RRS - ( ( Max( MDR,FirstVNF_CPU_Server ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( RRSe * RCSe ) ) * ( ( CS / CS ) + Min( Min( DS ,MUM ) ,Max( DS,MUR ) ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( Min( PN ,MRS ) * ( BR - CRS ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( Min( DS ,( Max( CS,MLU ) * MUR ) ) / ( MUR / CS ) ) ) ) - CS )", "obj1": 0.792, "obj2": 0.15326036618191408}, {"determining": "Max( Max( Min( FirstVNF_RAM_Server ,ARS ),FirstVNF_RAM_Server ),( Max( RRS,FirstVNF_CPU ) / ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( CS,MUR ),( ( CS - RCSe ) - ( RRSe * MUC ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.59, "obj2": 0.27898247749295024}, {"determining": "( FirstVNF_CPU / ( DDR / FirstVNF_RAM ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.11, "obj2": 0.6487357615915629}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.934, "obj2": 0.033394381052982876}, {"determining": "( Max( Max( ( FirstVNF_RAM * RRS ),MDR ),MRS ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Min( ( ( MUM * ( ( Max( ( DS / ( MUC + MUC ) ),DS ) * ( MUC * MUC ) ) * Min( CS ,MUR ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) + MLU ) ) ,( Max( CS,MUM ) + Max( RRSe,MUM ) ) ) )", "obj1": 0.418, "obj2": 0.4015106165200094}, {"determining": "( ( ( ( BR - CRS ) - Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( ( MRS * Max( FirstVNF_CPU_Server,MRS ) ) ,PN ) ,Max( CRS,ACS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( ( ( ( MLU / MUM ) + ( DS * RRSe ) ) - MLU ),( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * ( DS * RMSe ) )", "obj1": 0.614, "obj2": 0.24664467403809137}, {"determining": "( ( ( RRS - ARS ) - ARS ) * DDR )", "choosing": "( ( MLU - ( CS / Max( ( MUR / RRSe ),RMSe ) ) ) - ( MLU + CS ) )", "obj1": 0.294, "obj2": 0.4863650004683679}, {"determining": "( ( RRS - AMS ) + ( ( PN - ( FirstVNF_Mem_Server / FirstVNF_CPU ) ) / Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + ( Max( ( ( MUM * CS ) + RMSe ),( ( MUR * MUM ) * ( CS * MUR ) ) ) / MUM ) ) ,( RMSe * MUR ) ) ) ,MUC )", "obj1": 0.932, "obj2": 0.037005058815076444}, {"determining": "( ( RRS - AMS ) + ( ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) + FirstVNF_CPU_Server ) )", "choosing": "( Max( MUM,CS ) / ( ( DS + CS ) * DS ) )", "obj1": 0.054, "obj2": 0.7289939673809087}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + ( BR * ( MRS + ( FirstVNF_Mem - Min( PN ,( FirstVNF_Mem * FirstVNF_CPU ) ) ) ) ) ) )", "choosing": "( ( MLU * MLU ) - MLU )", "obj1": 0.416, "obj2": 0.4038890956034828}, {"determining": "( FirstVNF_CPU / Max( DDR,( ( MRS - FirstVNF_CPU ) + ( ( Const - ( FirstVNF_CPU / RRS ) ) / ( CRS * Min( PN ,FirstVNF_Mem_Server ) ) ) ) ) )", "choosing": "( ( ( MLU + DS ) * ( ( RRSe / MUC ) / CS ) ) - ( MLU + DS ) )", "obj1": 0.106, "obj2": 0.6526838018089173}, {"determining": "( ( CRS / PN ) - MRS )", "choosing": "( ( MUM + CS ) / ( DS * Max( DS,CS ) ) )", "obj1": 0.05, "obj2": 0.7321668608077928}, {"determining": "( ( PN - ( ( ( MRS / ( RRS / BR ) ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( MLU * RCSe ) ) * Min( MUR ,( RCSe - RRSe ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( ( PN - ( ( MRS / PN ) + CRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * RCSe ) ) - ( MLU + CS ) )", "obj1": 0.308, "obj2": 0.47432783954644}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / ( Max( ( ARS / ACS ),CRS ) * CRS ) ) ) ) - Min( ( FirstVNF_Mem / Min( PN ,BR ) ) ,MRS ) )", "choosing": "( Min( MUC ,( DS * MUM ) ) - CS )", "obj1": 0.41, "obj2": 0.40392807417150906}, {"determining": "( ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( BR ,PN ) ,Max( ACS,CRS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( CS,( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * ( DS * RMSe ) )", "obj1": 0.69, "obj2": 0.21045174689709453}, {"determining": "( ( ( ( FirstVNF_RAM_Server / PN ) + Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) - ( ( DDR / FirstVNF_RAM_Server ) * ( FirstVNF_RAM * ACS ) ) ) * DDR )", "choosing": "( Min( ( Max( ( ( MUC / CS ) + MLU ),( RRSe / MUR ) ) - MLU ) ,RMSe ) - ( MUC + CS ) )", "obj1": 0.344, "obj2": 0.4473178977375228}, {"determining": "( Max( CRS,( MRS / ( ( BR + Max( MDR,PN ) ) / FirstVNF_RAM ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.418, "obj2": 0.4015106165200094}], "7": [{"determining": "( ( ( RRS - ARS ) - ARS ) * DDR )", "choosing": "( ( MLU - ( CS / Max( ( MUR / RRSe ),RMSe ) ) ) - ( MLU + CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_Mem_Server * AMS ) - CRS ) + DDR ) + ( RRS - AMS ) )", "choosing": "Min( ( Min( ( DS / RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( Max( CS,RRSe ) + ( Max( ( RCSe - DS ),RMSe ) - MLU ) ) * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_CPU + BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( ( MUR * MUM ) - RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.042, "obj2": 0.7393956666884063}, {"determining": "( ARS * ( PN - ( FirstVNF_RAM - FirstVNF_RAM ) ) )", "choosing": "( Max( ( RRSe + MLU ),CS ) - ( MLU + CS ) )", "obj1": 0.434, "obj2": 0.3454991006630385}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.49, "obj2": 0.3146143370730279}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.854, "obj2": 0.06382721800686338}, {"determining": "( ( Max( ( FirstVNF_CPU - ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) ),DDR ) - ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) ) * DDR )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( ( ( RCSe - ( RCSe * ( Max( MLU,RCSe ) + RMSe ) ) ) / RCSe ) / Max( ( ( MUC * Max( ( MUR / MLU ),CS ) ) / RRSe ),( CS + MUM ) ) ) - RRSe ) )", "obj1": 0.904, "obj2": 0.02924038333246454}, {"determining": "( ( PN - ( CRS / PN ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.526, "obj2": 0.28400735295193824}, {"determining": "( ( PN - ( ( MRS / PN ) + Max( Min( AMS ,FirstVNF_Mem_Server ),MRS ) ) ) * DDR )", "choosing": "( ( RCSe + Min( RMSe ,CS ) ) - ( CS + MLU ) )", "obj1": 0.416, "obj2": 0.38122422186210747}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.21, "obj2": 0.5373909778434596}, {"determining": "( ( PN - ( Max( FirstVNF_CPU_Server,MDR ) + ( ( MRS / PN ) + MRS ) ) ) * FirstVNF_RAM )", "choosing": "( ( ( MUM / CS ) + ( MUM / CS ) ) - Min( RCSe ,Max( ( RMSe - DS ),Min( DS ,CS ) ) ) )", "obj1": 0.364, "obj2": 0.41514796943250754}, {"determining": "( ( ( PN - Max( ( ( ( FirstVNF_Mem_Server * AMS ) * FirstVNF_RAM ) - ( BR - PN ) ),Min( ( Min( RRS ,DDR ) * FirstVNF_CPU ) ,MRS ) ) ) + Const ) + ( RRS - AMS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( Max( ( MLU - RCSe ),MUM ) - RCSe ) ) ) )", "obj1": 0.83, "obj2": 0.10234854832520066}, {"determining": "( ( PN - ( ( PN / MRS ) + ( ( MRS / PN ) + Min( FirstVNF_Mem_Server ,( ( ( FirstVNF_RAM_Server * ACS ) * BR ) + DDR ) ) ) ) ) * DDR )", "choosing": "( ( ( MUM / CS ) + ( CS / RRSe ) ) - ( ( MUR + ( ( ( RMSe / MUM ) / DS ) / ( MUC - MUR ) ) ) - Max( CS,MUM ) ) )", "obj1": 0.388, "obj2": 0.4002742325813007}, {"determining": "Max( ( ( BR * Min( FirstVNF_Mem ,RRS ) ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) - ( MUC / MUM ) ) - Min( MLU ,Max( Max( MUM,DS ),MUR ) ) )", "obj1": 0.586, "obj2": 0.28135665204933413}, {"determining": "( Max( DDR,MRS ) / ( ( CRS / RRS ) - Min( ( Min( Const ,Max( MRS,FirstVNF_Mem_Server ) ) + ARS ) ,MRS ) ) )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( ( ( MUM / CS ) + ( CS / ( MUM + CS ) ) ),DS ) ) / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.206, "obj2": 0.5618817164983388}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( Min( MUC ,( DS * MUM ) ) - CS )", "obj1": 0.704, "obj2": 0.18760015510363579}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.262, "obj2": 0.49949508393432773}, {"determining": "( ( PN - ( ( Max( DDR,( Const * FirstVNF_CPU ) ) / PN ) + MRS ) ) * ( Max( DDR,Const ) / FirstVNF_CPU ) )", "choosing": "( Min( MUC ,( DS * Max( MUR,Max( DS,( MUM / Max( Max( RCSe,MLU ),DS ) ) ) ) ) ) - CS )", "obj1": 0.232, "obj2": 0.5182903903700748}, {"determining": "( ( ( PN - Max( ( RRS * BR ),Min( ( Min( RRS ,DDR ) * FirstVNF_CPU ) ,MRS ) ) ) + Const ) + ( RRS - AMS ) )", "choosing": "( ( MUM + CS ) / ( DS * Min( DS ,( ( MUC + MUR ) * MUC ) ) ) )", "obj1": 0.82, "obj2": 0.11850956704733265}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * Min( Const ,Const ) )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MLU ) ) )", "obj1": 0.398, "obj2": 0.3853818077748152}, {"determining": "( Min( PN ,MRS ) * ( BR - ( ( CRS / PN ) - ( RRS / BR ) ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.89, "obj2": 0.04771196134673233}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / CRS ) + ( FirstVNF_Mem - Const ) ) + ( ( ( Max( Min( MRS ,FirstVNF_Mem_Server ),FirstVNF_RAM_Server ) / CRS ) / PN ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( MUC ,( ( ( Min( Max( RMSe,CS ) ,CS ) * RCSe ) / MLU ) * ( RCSe / MLU ) ) ) )", "obj1": 0.742, "obj2": 0.180406942585088}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.146, "obj2": 0.5980424082439421}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - BR ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + MUR ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.13, "obj2": 0.6317994378617163}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( ( PN - AMS ) + ( ( PN - CRS ) + ( ARS * ( ( FirstVNF_RAM_Server / Const ) - FirstVNF_Mem_Server ) ) ) ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( Min( DS ,( ( MUC / ( MUC * MUC ) ) + ( RRSe + RRSe ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.14, "obj2": 0.622434867040049}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * ( MUR * ( DS / ( MUM / MUM ) ) ) ) ) * ( ( RRSe / CS ) + RRSe ) )", "obj1": 0.98, "obj2": 0.007463807538508357}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.696, "obj2": 0.19229448640367583}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.172, "obj2": 0.5808033558692627}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.814, "obj2": 0.138507503511022}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.51, "obj2": 0.29353344848235596}, {"determining": "( Min( FirstVNF_CPU_Server ,ACS ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - ( ( DS * MUC ) - Min( ( CS + DS ) ,( RMSe / MUR ) ) ) ) ),CS ) ) )", "obj1": 0.062, "obj2": 0.706201839004117}, {"determining": "( ( PN - ( ( MRS / PN ) + ( Min( MRS ,PN ) + Min( Const ,( Min( FirstVNF_Mem ,ACS ) + Max( BR,AMS ) ) ) ) ) ) * DDR )", "choosing": "( ( MUM - Max( RMSe,( Min( ( MUM * CS ) ,( MUR + Max( MUM,Min( MUR ,MUM ) ) ) ) / MUM ) ) ) / Min( Min( RRSe ,CS ) ,MUM ) )", "obj1": 0.942, "obj2": 0.0164146073706438}, {"determining": "( ( RRS - ( Min( FirstVNF_CPU_Server ,ACS ) - PN ) ) + ( ( PN - CRS ) + ( MDR + ARS ) ) )", "choosing": "Min( ( ( DS * MUC ) - Min( ( CS + DS ) ,( RMSe / MUR ) ) ) ,RRSe )", "obj1": 0.17, "obj2": 0.5966433197422957}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.782, "obj2": 0.16105057014003002}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.632, "obj2": 0.23447022285064062}, {"determining": "( Max( DDR,MRS ) / ( ( CRS / RRS ) - Min( ( Min( Const ,Max( MRS,FirstVNF_Mem_Server ) ) + ARS ) ,MRS ) ) )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( ( ( MUM / CS ) + ( CS / ( MUM + CS ) ) ),DS ) ) / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.192, "obj2": 0.5711897201407958}, {"determining": "( Min( CRS ,Max( PN,( DDR - RRS ) ) ) - ( RRS / BR ) )", "choosing": "( ( ( ( ( MUR / DS ) + CS ) + ( RCSe / ( RMSe * DS ) ) ) / ( RCSe / Max( Max( DS,( DS * Min( MUM ,MLU ) ) ),MUM ) ) ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7287277020734084}, {"determining": "( ( CRS + AMS ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.07, "obj2": 0.6915637290798813}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "( ( CRS + AMS ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.086, "obj2": 0.6856905127846081}, {"determining": "( ( ( ( BR - CRS ) - Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( ( MRS * Max( FirstVNF_CPU_Server,MRS ) ) ,PN ) ,Max( CRS,ACS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( ( ( ( MLU / MUM ) + ( DS * RRSe ) ) - MLU ),( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * ( DS * RMSe ) )", "obj1": 0.69, "obj2": 0.21045174689709453}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.5, "obj2": 0.2959434810906795}, {"determining": "( ( ( BR - CRS ) / Const ) * DDR )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) / ( Min( RRSe ,CS ) * MUM ) )", "obj1": 0.62, "obj2": 0.23961454086586742}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( ( Min( DS ,( Max( RRSe,MLU ) * MUR ) ) / ( MUR / CS ) ) * DS ) ) - Min( CS ,RRSe ) )", "obj1": 0.276, "obj2": 0.4970563135397011}, {"determining": "( ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( BR ,PN ) ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( CS,( ( RRSe * RCSe ) - ( CS - RCSe ) ) ) * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.602, "obj2": 0.25039237257767927}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * MUM ) )", "obj1": 0.942, "obj2": 0.0164146073706438}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( ( BR - CRS ) / Min( Max( FirstVNF_Mem,MRS ) ,BR ) ) / Max( ARS,PN ) ) )", "choosing": "( ( MUM - ( CS * Min( ( MLU + MUM ) ,DS ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.644, "obj2": 0.22906305080366332}, {"determining": "( ( RRS - ( Min( FirstVNF_CPU_Server ,ACS ) - PN ) ) + ( ( PN - CRS ) + ( BR + FirstVNF_Mem ) ) )", "choosing": "Min( ( ( DS * MUC ) - Min( ( CS + DS ) ,( ( Max( RMSe,CS ) / RMSe ) / MUR ) ) ) ,RRSe )", "obj1": 0.798, "obj2": 0.1422663764023293}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.882, "obj2": 0.05172650635329361}, {"determining": "( ( RRS - AMS ) + ( ( PN - CRS ) + Const ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.826, "obj2": 0.10648715963797961}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( ACS * CRS ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.238, "obj2": 0.5149040590783073}, {"determining": "( ( Min( PN ,MRS ) * ( BR - CRS ) ) / ( ACS + Max( ( ( ( ( CRS / PN ) - ( ( FirstVNF_CPU - MRS ) * DDR ) ) / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.648, "obj2": 0.2233412187585957}, {"determining": "( ( DDR - Max( FirstVNF_RAM_Server,DDR ) ) - AMS )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + Max( ( ( ( RMSe + RCSe ) + DS ) * MUC ),CS ) ),CS ) ) )", "obj1": 0.068, "obj2": 0.7057862396761582}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( PN - ( ( MRS / PN ) + MRS ) ) )", "choosing": "( ( MLU - ( CS * CS ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.324, "obj2": 0.4720325651405169}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "( ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( ( ( CRS / PN ) - ( RRS / BR ) ) ,PN ) ,Max( ACS,CRS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( CS,( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * CS )", "obj1": 0.6, "obj2": 0.25966182007407507}, {"determining": "( ( PN + ( ( AMS / PN ) + FirstVNF_Mem_Server ) ) * ( FirstVNF_CPU_Server * Max( ( FirstVNF_RAM + RRS ),FirstVNF_CPU ) ) )", "choosing": "( ( MUC - ( ( DS * ( ( Max( Min( MUM ,MUM ),( RCSe / RCSe ) ) * MUR ) + DS ) ) * ( RCSe - Max( RCSe,MUR ) ) ) ) - CS )", "obj1": 0.238, "obj2": 0.5149040590783073}, {"determining": "( FirstVNF_CPU / ( DDR / ( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( MLU + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.154, "obj2": 0.5969943258557947}, {"determining": "( ( ACS - ( ( MRS / ( FirstVNF_Mem_Server - BR ) ) + CRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * Min( ( RRSe * ( ( ( MLU / MUM ) / MLU ) / ( ( RCSe - MLU ) / MUC ) ) ) ,RRSe ) ) ) - ( MLU + CS ) )", "obj1": 0.28, "obj2": 0.48802989881253006}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( DS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.356, "obj2": 0.44288269022181465}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / ( ( PN - CRS ) + Const ) ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( Min( ( CS + DS ) ,( RMSe * MUR ) ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.752, "obj2": 0.1720633609345941}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( CS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - DS ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.678, "obj2": 0.21119999315428048}, {"determining": "( FirstVNF_CPU / ( DDR / ( DDR / ARS ) ) )", "choosing": "( ( ( DS / ( ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUC ) / MUM ) + ( MUC / ( MUC * MUC ) ) ) ) - ( ( ( MUR / MLU ) / ( DS + Min( ( ( RRSe + MLU ) / MUR ) ,MUM ) ) ) / RRSe ) ) - ( MLU + CS ) )", "obj1": 0.116, "obj2": 0.64575000053503}, {"determining": "( Min( PN ,PN ) * ( BR - CRS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.656, "obj2": 0.2164703327517314}, {"determining": "( Min( PN ,MRS ) * ( BR - ( ( CRS / PN ) - ( RRS / BR ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( CS,CS ) ) )", "obj1": 0.87, "obj2": 0.054858835117038963}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,RRSe )", "obj1": 0.304, "obj2": 0.47449129399867895}, {"determining": "( Max( CRS,( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / PN ) - MRS ) ) ) - Min( ( Min( PN ,BR ) + FirstVNF_Mem ) ,MRS ) )", "choosing": "( ( ( MUR - CS ) + ( MUR / MUR ) ) - Min( ( ( MUM * ( Min( MUC ,MLU ) + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) - RCSe ) ,( CS - MLU ) ) )", "obj1": 0.336, "obj2": 0.46828493512500424}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( MUM - Min( MUC ,CS ) )", "obj1": 0.342, "obj2": 0.4531367291980193}, {"determining": "( ( Min( ACS ,FirstVNF_Mem ) + ( Max( Min( Min( BR ,PN ) ,MDR ),( Const - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - ( ARS / FirstVNF_RAM ) ) ) ) ) * ( Min( FirstVNF_CPU_Server ,Const ) / Max( ARS,MRS ) ) )", "choosing": "( ( ( MUM - MUR ) - ( CS * ( MUR * Max( DS,( MUM / MUM ) ) ) ) ) * ( ( CS / RRSe ) + RRSe ) )", "obj1": 0.614, "obj2": 0.24664467403809137}, {"determining": "( ( CRS + AMS ) - ( Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MLU + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.08, "obj2": 0.686204485235201}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) ) ,MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.182, "obj2": 0.5723642910438661}, {"determining": "( Min( PN ,MRS ) * Min( ( Min( Min( MRS ,BR ) ,( Const - ( ( MRS - ( FirstVNF_CPU * MDR ) ) + RRS ) ) ) - ( RRS / BR ) ) ,BR ) )", "choosing": "( ( ( MUM / CS ) + ( DS / Max( ( CS * ( ( Max( RCSe,RCSe ) - RRSe ) + MLU ) ),( MUM * MLU ) ) ) ) - ( ( MUR + CS ) - Max( RCSe,CS ) ) )", "obj1": 0.87, "obj2": 0.054858835117038963}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( PN - CRS ) )", "choosing": "( Min( ( DS * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.344, "obj2": 0.4473178977375228}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / PN ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( ( DS - MLU ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.742, "obj2": 0.180406942585088}, {"determining": "( ( FirstVNF_Mem + AMS ) - ( ( RRS / RRS ) * ( Max( FirstVNF_RAM,FirstVNF_Mem_Server ) * FirstVNF_Mem ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( Min( DS ,( Max( CS,MLU ) * MUR ) ) / ( MUR / CS ) ) ) ) - CS )", "obj1": 0.312, "obj2": 0.47306373846966515}, {"determining": "( FirstVNF_CPU / ( DDR / FirstVNF_RAM ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.116, "obj2": 0.64575000053503}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( Min( PN ,MRS ) * ( BR - CRS ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( ( MLU / ( ( MUC - DS ) * DS ) ) / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.662, "obj2": 0.21577309841119113}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "( ( PN - FirstVNF_Mem ) * DDR )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( RRSe ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.994, "obj2": 0.0016910962475989036}, {"determining": "Max( Max( Min( FirstVNF_RAM_Server ,ARS ),FirstVNF_RAM_Server ),( Max( RRS,FirstVNF_CPU ) / ACS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.334, "obj2": 0.4692984862895712}, {"determining": "Max( Max( ( Const + ( FirstVNF_RAM_Server * FirstVNF_RAM ) ),AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC * MUM ) ) - ( ( ( ( MLU - ( ( ( RMSe - MUM ) + ( CS + RMSe ) ) + RMSe ) ) / Max( RRSe,RMSe ) ) * RMSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.598, "obj2": 0.267926468182185}, {"determining": "( Max( Min( Const ,FirstVNF_RAM_Server ),ACS ) * ( MDR + Const ) )", "choosing": "( ( ( DS / ( ( MUC / ( ( DS * MLU ) * RCSe ) ) + ( ( ( Max( MUR,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.094, "obj2": 0.653973417331835}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( ( CS / MLU ) + RRSe ) )", "obj1": 0.288, "obj2": 0.48650328835615103}, {"determining": "( ( RRS - ( ( Max( MDR,FirstVNF_CPU_Server ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( RRSe * RCSe ) ) * ( ( CS / CS ) + Min( Min( DS ,MUM ) ,Max( DS,MUR ) ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( Min( PN ,MRS ) * ( BR - CRS ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + RCSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.784, "obj2": 0.1551396381524096}, {"determining": "Max( Max( Min( FirstVNF_RAM_Server ,ARS ),FirstVNF_RAM_Server ),( Max( RRS,FirstVNF_CPU ) / ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( CS,MUR ),( ( CS - RCSe ) - ( RRSe * MUC ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.59, "obj2": 0.27898247749295024}, {"determining": "( Min( PN ,PN ) * ( BR - CRS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.668, "obj2": 0.21209977859626258}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.138, "obj2": 0.6269340860484653}, {"determining": "( ( ( RRS - ARS ) - ARS ) * DDR )", "choosing": "( ( MLU - ( CS / Max( ( MUR / RRSe ),RMSe ) ) ) - ( MLU + CS ) )", "obj1": 0.294, "obj2": 0.4863650004683679}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( MUM - Min( MUC ,CS ) )", "obj1": 0.342, "obj2": 0.4531367291980193}, {"determining": "( FirstVNF_CPU / ( DDR / ( ( FirstVNF_Mem + FirstVNF_CPU ) + FirstVNF_Mem ) ) )", "choosing": "( ( ( ( ( ( ( RMSe * CS ) / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( ( RCSe - MLU ) + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.5, "obj2": 0.2959434810906795}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.592, "obj2": 0.27435740384013674}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * ( Max( CS,( ( RRSe * RCSe ) - ( CS - RCSe ) ) ) * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.988, "obj2": 0.004077768382454302}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) ) ,MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.182, "obj2": 0.5723642910438661}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / ( ( PN - CRS ) + Const ) ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( Min( ( CS + DS ) ,( RMSe * MUR ) ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.752, "obj2": 0.1720633609345941}, {"determining": "( FirstVNF_CPU / ( DDR / FirstVNF_RAM ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.11, "obj2": 0.6487357615915629}], "8": [{"determining": "( Max( DDR,MRS ) / ( FirstVNF_CPU + BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( ( MUR * MUM ) - RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.042, "obj2": 0.7393956666884063}, {"determining": "( ( RRS - ( ( Max( MDR,FirstVNF_CPU_Server ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( RRSe * RCSe ) ) * ( ( CS / CS ) + Min( Min( DS ,MUM ) ,Max( DS,MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( RRS - ARS ) - ARS ) * DDR )", "choosing": "( ( MLU - ( CS / Max( ( MUR / RRSe ),RMSe ) ) ) - ( MLU + CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_CPU + BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( ( MUR * MUM ) - RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.042, "obj2": 0.7393956666884063}, {"determining": "Max( ( ( BR * Min( FirstVNF_Mem ,RRS ) ) * ( BR - CRS ) ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) - ( MUC / MUM ) ) - Min( MLU ,Max( Max( MUM,DS ),MUR ) ) )", "obj1": 0.586, "obj2": 0.28135665204933413}, {"determining": "( ( PN - ( ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Min( RCSe ,Max( Max( ( DS * Max( ( CS / CS ),MUM ) ),RCSe ),DS ) ) - ( CS + MLU ) )", "obj1": 0.588, "obj2": 0.23189456746806178}, {"determining": "( ( ( PN - Max( ( ( ( FirstVNF_Mem_Server * AMS ) * FirstVNF_RAM ) - ( BR - PN ) ),Min( ( Min( RRS ,DDR ) * FirstVNF_CPU ) ,MRS ) ) ) + Const ) + ( RRS - AMS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( Max( ( MLU - RCSe ),MUM ) - RCSe ) ) ) )", "obj1": 0.83, "obj2": 0.10234854832520066}, {"determining": "( ( Max( ( FirstVNF_CPU - ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) ),DDR ) - ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) ) * DDR )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( ( ( RCSe - ( RCSe * ( Max( MLU,RCSe ) + RMSe ) ) ) / RCSe ) / Max( ( ( MUC * Max( ( MUR / MLU ),CS ) ) / RRSe ),( CS + MUM ) ) ) - RRSe ) )", "obj1": 0.904, "obj2": 0.02924038333246454}, {"determining": "( ( Max( Max( DDR,FirstVNF_RAM_Server ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( Const - FirstVNF_Mem ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / AMS ) ) ) )", "choosing": "( ( ( MUM - CS ) / ( Min( RMSe ,MUR ) * ( MUR + DS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.778, "obj2": 0.15975367754684475}, {"determining": "( ( PN - ( ( ( MRS / PN ) - MRS ) / PN ) ) * PN )", "choosing": "( MLU / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.782, "obj2": 0.11054278762777016}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.3, "obj2": 0.466655065341537}, {"determining": "( FirstVNF_CPU / ( ( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR ) / ( BR + FirstVNF_Mem ) ) )", "choosing": "( ( ( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( MLU + CS ) )", "obj1": 0.844, "obj2": 0.0721121503047696}, {"determining": "( ( PN - ( CRS / PN ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.526, "obj2": 0.28400735295193824}, {"determining": "( ( PN - ( ( MRS / ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( MUM - CS )", "obj1": 0.642, "obj2": 0.22849098634236792}, {"determining": "( ( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - BR ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) ) * ( BR - CRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,( ( ( Max( CS,RRSe ) + MUR ) * MUR ) / MUM ) ) ) ) )", "obj1": 0.724, "obj2": 0.17805165090518052}, {"determining": "( ( PN - ( ( MRS / ( ( FirstVNF_Mem / ( Const - DDR ) ) / Max( Const,FirstVNF_Mem_Server ) ) ) + ( MRS + ( MRS / PN ) ) ) ) * DDR )", "choosing": "( Min( RCSe ,Max( Max( ( MUC * Max( MUC,MUM ) ),RMSe ),Min( DS ,( MLU * ( MUM + RCSe ) ) ) ) ) - ( CS + MLU ) )", "obj1": 0.428, "obj2": 0.37539143006182435}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.454, "obj2": 0.3281710197257054}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + RCSe ) - Max( RRSe,MUM ) ) )", "obj1": 0.338, "obj2": 0.454755891446285}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - RMSe ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.434, "obj2": 0.3454991006630385}, {"determining": "( ( Min( PN ,MRS ) * ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) ) / ( ACS + Max( ( ( ( ( CRS / PN ) - ( ( FirstVNF_CPU - MRS ) * DDR ) ) / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( MUM - CS ) / ( Min( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.784, "obj2": 0.10332438267981868}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.364, "obj2": 0.41514796943250754}, {"determining": "( ACS - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) - MUM ) ),CS ) ) )", "obj1": 0.056, "obj2": 0.706691632235952}, {"determining": "( ( PN - ( ( PN / MRS ) + ( ( MRS / PN ) + Min( FirstVNF_Mem_Server ,( ( ( FirstVNF_RAM_Server * ACS ) * BR ) + DDR ) ) ) ) ) * DDR )", "choosing": "( ( ( MUM / CS ) + ( CS / RRSe ) ) - ( ( MUR + ( ( ( RMSe / MUM ) / DS ) / ( MUC - MUR ) ) ) - Max( CS,MUM ) ) )", "obj1": 0.388, "obj2": 0.4002742325813007}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RCSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.392, "obj2": 0.3829266158695308}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( ACS * CRS ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.22, "obj2": 0.5279641518714261}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( Min( MUC ,( DS * MUM ) ) - CS )", "obj1": 0.704, "obj2": 0.18760015510363579}, {"determining": "( ( CRS + Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.086, "obj2": 0.6843076025485293}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.21, "obj2": 0.5373909778434596}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( ( PN - AMS ) + ( ( PN - CRS ) + ( ARS * ( ( FirstVNF_RAM_Server / Const ) - FirstVNF_Mem_Server ) ) ) ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( Min( DS ,( ( MUC / ( MUC * MUC ) ) + ( RRSe + RRSe ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.14, "obj2": 0.622434867040049}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.146, "obj2": 0.5980424082439421}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.102, "obj2": 0.6483299649710758}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.052, "obj2": 0.7351734961250227}, {"determining": "( ( ( ( BR - CRS ) - Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( ( MRS * Max( FirstVNF_CPU_Server,MRS ) ) ,PN ) ,Max( CRS,ACS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( ( ( ( MLU / MUM ) + ( DS * RRSe ) ) - MLU ),( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * ( DS * RMSe ) )", "obj1": 0.69, "obj2": 0.21045174689709453}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - ( ( MRS / PN ) + MRS ) ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,CS ) + MUR ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.116, "obj2": 0.6370412411643777}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) ) ,MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.17, "obj2": 0.5876399615714523}, {"determining": "( ( PN - ( ( MRS / PN ) + ( Min( MRS ,PN ) + Min( Const ,( Min( FirstVNF_Mem ,ACS ) + Max( BR,AMS ) ) ) ) ) ) * DDR )", "choosing": "( ( MUM - Max( RMSe,( Min( ( MUM * CS ) ,( MUR + Max( MUM,Min( MUR ,MUM ) ) ) ) / MUM ) ) ) / Min( Min( RRSe ,CS ) ,MUM ) )", "obj1": 0.942, "obj2": 0.0164146073706438}, {"determining": "( ( PN - ( CRS / PN ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.468, "obj2": 0.32523520345279244}, {"determining": "( Max( DDR,MRS ) / ( ( CRS / RRS ) - Min( ( Min( Const ,Max( MRS,FirstVNF_Mem_Server ) ) + ARS ) ,MRS ) ) )", "choosing": "( ( ( MUM / CS ) + ( ( ( RMSe / MUM ) * Max( ( ( MUM / CS ) + ( CS / ( MUM + CS ) ) ),DS ) ) / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.192, "obj2": 0.5711897201407958}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.202, "obj2": 0.5582346067346317}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( ( ( ( ( Max( RMSe,CS ) / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( MLU + CS ) )", "obj1": 0.892, "obj2": 0.04450441822915335}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( ( PN - CRS ),MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.148, "obj2": 0.5937204630355645}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.36, "obj2": 0.4405073921844022}, {"determining": "( Max( ( ( MRS + FirstVNF_CPU_Server ) * PN ),( PN / FirstVNF_Mem_Server ) ) * PN )", "choosing": "Min( ( ( DS * DS ) - Min( ( CS + Min( DS ,MLU ) ) ,( ( RMSe / Max( RMSe,Max( CS,( MLU / CS ) ) ) ) / MUR ) ) ) ,RRSe )", "obj1": 0.482, "obj2": 0.32011672335394836}, {"determining": "( Max( Min( FirstVNF_RAM_Server ,ARS ),FirstVNF_RAM_Server ) / ( DDR / ( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( MLU + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - Min( MUR ,CS ) )", "obj1": 0.204, "obj2": 0.5509501618213336}, {"determining": "( ( PN - ( ( Max( DDR,( Const * FirstVNF_CPU ) ) / PN ) + MRS ) ) * ( Max( DDR,Const ) / FirstVNF_CPU ) )", "choosing": "( Min( MUC ,( DS * Max( MUR,Max( DS,( MUM / Max( Max( RCSe,MLU ),DS ) ) ) ) ) ) - CS )", "obj1": 0.232, "obj2": 0.5182903903700748}, {"determining": "( ( PN - Max( DDR,RRS ) ) * ( DDR * ( ARS + Max( AMS,MRS ) ) ) )", "choosing": "( ( MUM / CS ) / ( MUR * Max( ( RRSe + ( Max( RRSe,( ( RCSe * RCSe ) + DS ) ) - MUM ) ),CS ) ) )", "obj1": 0.962, "obj2": 0.013140278741893444}, {"determining": "( ( PN - ( ( PN / MRS ) + ( ( MRS / ( FirstVNF_RAM_Server * ( AMS / FirstVNF_Mem_Server ) ) ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) + ( MUC - RCSe ) ) )", "obj1": 0.496, "obj2": 0.3120614017383516}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.262, "obj2": 0.49949508393432773}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "Max( Max( ( ( Min( DDR ,( ( FirstVNF_CPU_Server * Max( ARS,FirstVNF_CPU_Server ) ) / FirstVNF_Mem ) ) - FirstVNF_Mem ) - ( ( MRS - PN ) / ( CRS - ARS ) ) ),( PN - FirstVNF_Mem_Server ) ),( MDR + MRS ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + Max( ( ( ( RMSe + RCSe ) + DS ) * MUC ),( CS / DS ) ) ),CS ) ) )", "obj1": 0.06, "obj2": 0.7029071662147492}, {"determining": "( ( RRS - ( ( Max( MDR,FirstVNF_CPU_Server ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( RRSe * RCSe ) ) * ( ( CS / CS ) + Min( Min( DS ,MUM ) ,Max( DS,MUR ) ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( ( Min( DS ,( Max( RRSe,MLU ) * MUR ) ) / ( MUR / CS ) ) * DS ) ) - Min( CS ,RRSe ) )", "obj1": 0.276, "obj2": 0.4970563135397011}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.854, "obj2": 0.06382721800686338}, {"determining": "( ( PN - ( ( MRS / PN ) + Max( Min( AMS ,FirstVNF_Mem_Server ),MRS ) ) ) * DDR )", "choosing": "( ( RCSe + Min( RMSe ,CS ) ) - ( CS + MLU ) )", "obj1": 0.416, "obj2": 0.38122422186210747}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.696, "obj2": 0.19229448640367583}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.5, "obj2": 0.2959434810906795}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * MUM ) )", "obj1": 0.942, "obj2": 0.0164146073706438}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / ( ( PN - CRS ) + Const ) ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( Min( ( CS + DS ) ,( RMSe * MUR ) ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.752, "obj2": 0.1720633609345941}, {"determining": "( ARS * ( PN - ( FirstVNF_RAM - FirstVNF_RAM ) ) )", "choosing": "( Max( ( RRSe + MLU ),CS ) - ( MLU + CS ) )", "obj1": 0.434, "obj2": 0.3454991006630385}, {"determining": "( ( PN + ( ( AMS / PN ) + FirstVNF_Mem_Server ) ) * ( FirstVNF_CPU_Server * Max( ( FirstVNF_RAM + RRS ),FirstVNF_CPU ) ) )", "choosing": "( ( MUC - ( ( DS * ( ( Max( Min( MUM ,MUM ),( RCSe / RCSe ) ) * MUR ) + DS ) ) * ( RCSe - Max( RCSe,MUR ) ) ) ) - CS )", "obj1": 0.238, "obj2": 0.5149040590783073}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( PN - CRS ) )", "choosing": "( Min( ( DS * Max( CS,CS ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.344, "obj2": 0.4473178977375228}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.262, "obj2": 0.49949508393432773}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( Min( PN ,MRS ) * ( BR - CRS ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( Max( Max( MUM,RMSe ),( ( RRSe * RCSe ) - ( CS - RCSe ) ) ) - Max( RRSe,MUM ) ) )", "obj1": 0.772, "obj2": 0.16828201397842205}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.39, "obj2": 0.39745925395563686}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( ACS * CRS ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.238, "obj2": 0.5149040590783073}, {"determining": "( ( ACS - ( ( MRS / ( FirstVNF_Mem_Server - BR ) ) + CRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * Min( ( RRSe * ( ( ( MLU / MUM ) / MLU ) / ( ( RCSe - MLU ) / MUC ) ) ) ,RRSe ) ) ) - ( MLU + CS ) )", "obj1": 0.28, "obj2": 0.48802989881253006}, {"determining": "( ( CRS + AMS ) - ( Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MLU + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.08, "obj2": 0.686204485235201}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( DS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - MLU ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.356, "obj2": 0.44288269022181465}, {"determining": "( ( CRS + AMS ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.07, "obj2": 0.6915637290798813}, {"determining": "( Max( Min( Const ,FirstVNF_RAM_Server ),ACS ) * ( MDR + Const ) )", "choosing": "( ( ( DS / ( ( MUC / ( ( DS * MLU ) * RCSe ) ) + ( ( ( Max( MUR,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.094, "obj2": 0.653973417331835}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( CS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - DS ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.678, "obj2": 0.21119999315428048}, {"determining": "( ( Min( PN ,MRS ) * ( BR - CRS ) ) / ( ACS + Max( ( ( ( ( CRS / PN ) - ( ( FirstVNF_CPU - MRS ) * DDR ) ) / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.648, "obj2": 0.2233412187585957}, {"determining": "( ( PN - ( Max( FirstVNF_CPU_Server,MDR ) + ( ( MRS / PN ) + MRS ) ) ) * FirstVNF_RAM )", "choosing": "( ( ( MUM / CS ) + ( MUM / CS ) ) - Min( RCSe ,Max( ( RMSe - DS ),Min( DS ,CS ) ) ) )", "obj1": 0.364, "obj2": 0.41514796943250754}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.51, "obj2": 0.29353344848235596}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.138, "obj2": 0.6269340860484653}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( MRS / ( ( PN - CRS ) + Const ) ) - MRS ) ) )", "choosing": "( ( ( DS - MUM ) - ( ( DS / ( MLU + ( ( DS / DS ) + Min( Max( DS,RMSe ) ,CS ) ) ) ) * Max( Min( ( CS + DS ) ,( RMSe * MUR ) ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.752, "obj2": 0.1720633609345941}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MRS + FirstVNF_RAM_Server ) ) ) ) ,MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( CS / CS ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.176, "obj2": 0.578771675296068}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * ( MUR * ( DS / ( MUM / MUM ) ) ) ) ) * ( ( RRSe / CS ) + RRSe ) )", "obj1": 0.98, "obj2": 0.007463807538508357}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( MUM - Min( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) ,CS ) )", "obj1": 0.862, "obj2": 0.061014272155826}, {"determining": "( ( PN - ( CRS / PN ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.526, "obj2": 0.28400735295193824}, {"determining": "( Min( PN ,MRS ) * ( BR - ( ( CRS / PN ) - ( RRS / BR ) ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.89, "obj2": 0.04771196134673233}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.51, "obj2": 0.29353344848235596}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( Min( DS ,( Max( CS,MLU ) * MUR ) ) / ( MUR / CS ) ) ) ) - CS )", "obj1": 0.656, "obj2": 0.21494244147241526}, {"determining": "( Min( FirstVNF_CPU ,FirstVNF_Mem ) * ( ( ( BR - CRS ) / Const ) / Max( ARS,DDR ) ) )", "choosing": "( ( MLU - ( CS * Min( DS ,MUC ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.654, "obj2": 0.2193828186944418}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( PN - ( ( MRS / PN ) + MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.182, "obj2": 0.5723642910438661}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.766, "obj2": 0.1709318531077892}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "( ( CRS + AMS ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.07, "obj2": 0.6915637290798813}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.88, "obj2": 0.05237896919679172}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.882, "obj2": 0.05172650635329361}, {"determining": "( Min( PN ,MRS ) * ( BR - ( ( CRS / PN ) - ( RRS / BR ) ) ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.866, "obj2": 0.058024278462695}, {"determining": "( ( ( BR - CRS ) / Const ) * DDR )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.664, "obj2": 0.21242226431138786}, {"determining": "( Min( PN ,PN ) * ( BR - CRS ) )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.668, "obj2": 0.21209977859626258}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( Max( ( MLU - RCSe ),MUM ) - RCSe ) ) ) )", "obj1": 0.05, "obj2": 0.7359225317377196}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( ( CS / MLU ) + RRSe ) )", "obj1": 0.288, "obj2": 0.48650328835615103}, {"determining": "( ( PN - ( ( AMS / Min( Min( ARS ,Const ) ,ACS ) ) + ( MRS / PN ) ) ) * DDR )", "choosing": "( Min( RCSe ,Max( Max( ( MUM * Max( ( RMSe * ( RCSe / MUR ) ),MUM ) ),RCSe ),DS ) ) - ( CS + MLU ) )", "obj1": 0.416, "obj2": 0.38122422186210747}, {"determining": "( Min( PN ,MRS ) * Min( ( Min( Min( MRS ,BR ) ,( Const - ( ( MRS - ( FirstVNF_CPU * MDR ) ) + RRS ) ) ) - ( RRS / BR ) ) ,BR ) )", "choosing": "( ( ( MUM / CS ) + ( DS / Max( ( CS * ( ( Max( RCSe,RCSe ) - RRSe ) + MLU ) ),( MUM * MLU ) ) ) ) - ( ( MUR + CS ) - Max( RCSe,CS ) ) )", "obj1": 0.87, "obj2": 0.054858835117038963}, {"determining": "( ( PN - ( ( ( ( ( Min( PN ,MRS ) * ( BR - CRS ) ) / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( DS / DS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.292, "obj2": 0.48631997322971243}, {"determining": "( ( CRS + AMS ) - ( RRS * BR ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.126, "obj2": 0.6344333879341669}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}], "9": [{"determining": "( Max( DDR,MRS ) / ( FirstVNF_CPU + BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( ( MUR * MUM ) - RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.042, "obj2": 0.7393956666884063}, {"determining": "( ( PN - ( ( MRS / PN ) + Max( Min( AMS ,FirstVNF_Mem_Server ),MRS ) ) ) * DDR )", "choosing": "( ( RCSe + Min( RMSe ,CS ) ) - ( CS + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - ( ( Max( MDR,FirstVNF_CPU_Server ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( RRSe * RCSe ) ) * ( ( CS / CS ) + Min( Min( DS ,MUM ) ,Max( DS,MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_CPU + BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( ( MUR * MUM ) - RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.042, "obj2": 0.7393956666884063}, {"determining": "( ( PN - ( ( ( MRS / PN ) - MRS ) / PN ) ) * PN )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.72, "obj2": 0.14440283792611672}, {"determining": "( ( PN - ( ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Min( RCSe ,Max( Max( ( DS * Max( ( CS / CS ),MUM ) ),RCSe ),DS ) ) - ( CS + MLU ) )", "obj1": 0.588, "obj2": 0.23189456746806178}, {"determining": "( ( PN - ( ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.47, "obj2": 0.28725019583077716}, {"determining": "( ( ( FirstVNF_RAM_Server * ACS ) * BR ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( ( ( MUM / CS ) + ( CS / RRSe ) ) - CS )", "obj1": 0.586, "obj2": 0.27384209702844126}, {"determining": "( ( PN - ( ( ( MRS / PN ) - MRS ) / PN ) ) * PN )", "choosing": "( ( RCSe + Min( RMSe ,CS ) ) - ( CS + MLU ) )", "obj1": 0.758, "obj2": 0.1374435776321023}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) )", "choosing": "( ( ( MUM / CS ) + ( CS / ( ( CS / CS ) + RRSe ) ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.376, "obj2": 0.39871733778827567}, {"determining": "( ( PN - ( ( MRS / ( PN - ( ( MRS / PN ) + MRS ) ) ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,RRSe ),CS ) ) )", "obj1": 0.546, "obj2": 0.28277088123538285}, {"determining": "( ( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR ) * DDR )", "choosing": "( ( ( MUM / CS ) + ( CS / MLU ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.354, "obj2": 0.42479694778046145}, {"determining": "( ( PN - ( ( MRS / PN ) / PN ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( ( DS / MUR ) ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.766, "obj2": 0.11687878546766697}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.388, "obj2": 0.3707083513026973}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.32, "obj2": 0.43678251985742883}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * MUM ) - RCSe ) ) ) )", "obj1": 0.3, "obj2": 0.466655065341537}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( Min( MUC ,( DS * MUM ) ) - CS )", "obj1": 0.704, "obj2": 0.18760015510363579}, {"determining": "( ( PN - ( CRS / PN ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.468, "obj2": 0.32523520345279244}, {"determining": "( ( PN - ( ( MRS / ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( MUM - CS )", "obj1": 0.642, "obj2": 0.22849098634236792}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + Max( ( ( ( RMSe + RCSe ) + DS ) * MUC ),CS ) ),CS ) ) )", "obj1": 0.312, "obj2": 0.44478704011563097}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) ) * DDR )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( CS / CS ) + RRSe ) )", "obj1": 0.904, "obj2": 0.02924038333246454}, {"determining": "( ( PN - ( CRS / PN ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.526, "obj2": 0.28400735295193824}, {"determining": "( ( ( FirstVNF_Mem_Server * ACS ) * DDR ) / ( ACS + Max( ( ( PN / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( CS + MLU ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.05, "obj2": 0.7300805950757494}, {"determining": "( ( PN - ( ( ( MRS / PN ) - MRS ) / PN ) ) * PN )", "choosing": "( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.84, "obj2": 0.08205616543922145}, {"determining": "( Max( Min( Const ,FirstVNF_RAM_Server ),ACS ) * ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( ( DS * Max( CS,RRSe ) ) * RCSe ) ) + ( ( ( Max( MUR,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.782, "obj2": 0.10149115013819578}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.4, "obj2": 0.36308225157911583}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "Min( ( ( MUM * ( ( RMSe * RMSe ) * Min( DS ,DS ) ) ) - CS ) ,Min( Min( MUR ,( ( RCSe - RCSe ) / MLU ) ) ,( Max( RRSe,MUM ) + Max( CS,MUM ) ) ) )", "obj1": 0.696, "obj2": 0.19229448640367583}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - RMSe ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.434, "obj2": 0.3454991006630385}, {"determining": "( ( ( ( BR - CRS ) - Const ) / Max( ARS,MRS ) ) * ( ( Max( Min( Min( ( MRS * Max( FirstVNF_CPU_Server,MRS ) ) ,PN ) ,Max( CRS,ACS ) ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + Min( RRS ,FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( CS * ( Max( ( ( ( MLU / MUM ) + ( DS * RRSe ) ) - MLU ),( ( RRSe * RCSe ) - ( CS - RRSe ) ) ) * MUR ) ) ) * ( DS * RMSe ) )", "obj1": 0.69, "obj2": 0.21045174689709453}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.446, "obj2": 0.3381632345669703}, {"determining": "( ( CRS + Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) ) - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.086, "obj2": 0.6843076025485293}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( MLU / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.81, "obj2": 0.08367287594566777}, {"determining": "( ( PN - ( ( MRS / PN ) + ( Min( MRS ,PN ) + Min( Const ,( Min( FirstVNF_Mem ,ACS ) + Max( BR,AMS ) ) ) ) ) ) * DDR )", "choosing": "( ( MUM - Max( RMSe,( Min( ( MUM * CS ) ,( MUR + Max( MUM,Min( MUR ,MUM ) ) ) ) / MUM ) ) ) / Min( Min( RRSe ,CS ) ,MUM ) )", "obj1": 0.942, "obj2": 0.0164146073706438}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.454, "obj2": 0.3281710197257054}, {"determining": "( ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) * ( ACS * CRS ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,( MUM / CS ) ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.186, "obj2": 0.5681661394276487}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.79, "obj2": 0.09875086472270983}, {"determining": "( FirstVNF_CPU / ( ( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR ) / ( BR + FirstVNF_Mem ) ) )", "choosing": "( ( ( Min( ( DS * ( DS * Max( CS,CS ) ) ) ,RMSe ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( MLU + CS ) )", "obj1": 0.844, "obj2": 0.0721121503047696}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.21, "obj2": 0.5373909778434596}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.102, "obj2": 0.6483299649710758}, {"determining": "( ( CRS + AMS ) - ( RRS * BR ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.126, "obj2": 0.6344333879341669}, {"determining": "( Max( Min( FirstVNF_RAM_Server ,ARS ),FirstVNF_RAM_Server ) / ( DDR / ( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( MLU + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - Min( MUR ,CS ) )", "obj1": 0.204, "obj2": 0.5509501618213336}, {"determining": "( ( PN - ( ( MRS / ( ( FirstVNF_Mem / ( Const - DDR ) ) / Max( Const,FirstVNF_Mem_Server ) ) ) + ( MRS + ( MRS / PN ) ) ) ) * DDR )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( Min( DS ,( ( MUC + MUR ) * MUC ) ) - MUM ) ),CS ) ) )", "obj1": 0.14, "obj2": 0.6158145776851955}, {"determining": "( ( PN - ( ( Max( DDR,( Const * FirstVNF_CPU ) ) / PN ) + MRS ) ) * ( Max( DDR,Const ) / FirstVNF_CPU ) )", "choosing": "( Min( MUC ,( DS * Max( MUR,Max( DS,( MUM / Max( Max( RCSe,MLU ),DS ) ) ) ) ) ) - CS )", "obj1": 0.232, "obj2": 0.5182903903700748}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - RMSe ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.434, "obj2": 0.3454991006630385}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.4, "obj2": 0.36308225157911583}, {"determining": "( ACS - ( RRS * BR ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) - MUM ) ),CS ) ) )", "obj1": 0.056, "obj2": 0.706691632235952}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "( ( RRS - ( ( Max( MDR,FirstVNF_CPU_Server ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MLU - ( RRSe * RCSe ) ) * ( ( CS / CS ) + Min( Min( DS ,MUM ) ,Max( DS,MUR ) ) ) )", "obj1": 0.298, "obj2": 0.48375175833883083}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.364, "obj2": 0.41514796943250754}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * MUM ) )", "obj1": 0.942, "obj2": 0.0164146073706438}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.156, "obj2": 0.5934314967384994}, {"determining": "( ( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / MUM ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.802, "obj2": 0.0877565031882573}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( ( Min( DS ,( Max( RRSe,MLU ) * MUR ) ) / ( MUR / CS ) ) * DS ) ) - Min( CS ,RRSe ) )", "obj1": 0.276, "obj2": 0.4970563135397011}, {"determining": "( ( PN - ( ( MRS / ( ( PN - ( ( MRS / PN ) + MRS ) ) * ( PN - ( ( MRS / PN ) + MRS ) ) ) ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ) ),CS ) ) )", "obj1": 0.878, "obj2": 0.04925340276702248}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( ( PN - CRS ),MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.142, "obj2": 0.6030087301622947}, {"determining": "( ( PN - ( ( ( ( ( MRS / PN ) + MRS ) / PN ) - MRS ) / PN ) ) * PN )", "choosing": "( MLU / ( Min( Min( MUR ,( RCSe * Min( Min( MUC ,CS ) ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.962, "obj2": 0.012181553475122345}, {"determining": "( ( Max( ( FirstVNF_CPU - ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) ),DDR ) - ( ( MRS / PN ) + ( ( MRS / PN ) + Min( Const ,MDR ) ) ) ) * DDR )", "choosing": "( ( MLU - ( CS * ( MUM * MUR ) ) ) * ( ( ( ( RCSe - ( RCSe * ( Max( MLU,RCSe ) + RMSe ) ) ) / RCSe ) / Max( ( ( MUC * Max( ( MUR / MLU ),CS ) ) / RRSe ),( CS + MUM ) ) ) - RRSe ) )", "obj1": 0.904, "obj2": 0.02924038333246454}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( PN - ( ( MRS / Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) ) + MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( MLU,Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.238, "obj2": 0.5149040590783073}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.138, "obj2": 0.6269340860484653}, {"determining": "( ( PN + ( ( AMS / PN ) + FirstVNF_Mem_Server ) ) * ( FirstVNF_CPU_Server * Max( ( FirstVNF_RAM + RRS ),FirstVNF_CPU ) ) )", "choosing": "( ( MUC - ( ( DS * ( ( Max( Min( MUM ,MUM ),( RCSe / RCSe ) ) * MUR ) + DS ) ) * ( RCSe - Max( RCSe,MUR ) ) ) ) - CS )", "obj1": 0.238, "obj2": 0.5149040590783073}, {"determining": "( ( ACS - ( ( MRS / ( FirstVNF_Mem_Server - BR ) ) + CRS ) ) * DDR )", "choosing": "( ( MLU - ( CS * Min( ( RRSe * ( ( ( MLU / MUM ) / MLU ) / ( ( RCSe - MLU ) / MUC ) ) ) ,RRSe ) ) ) - ( MLU + CS ) )", "obj1": 0.28, "obj2": 0.48802989881253006}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.262, "obj2": 0.49949508393432773}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.202, "obj2": 0.5582346067346317}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.854, "obj2": 0.06382721800686338}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( ( MRS / PN ) + MRS ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + Max( ( ( ( RMSe + RCSe ) + DS ) * MUC ),Max( Min( MUC ,CS ),CS ) ) ),CS ) ) )", "obj1": 0.068, "obj2": 0.6974026019472321}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - ( ( MRS / PN ) + MRS ) ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,CS ) + MUR ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.116, "obj2": 0.6370412411643777}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) * DDR )", "choosing": "( ( ( MUM / CS ) + ( CS / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.364, "obj2": 0.41514796943250754}, {"determining": "( ( PN - ( CRS / PN ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.526, "obj2": 0.28400735295193824}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( Min( MUM ,MUR ) - Min( ( CS / ( MLU + ( ( DS / DS ) + Min( Min( MUR ,RCSe ) ,CS ) ) ) ) ,Max( ( DS - DS ),CS ) ) ) - Min( ( ( MUC * RCSe ) + RRSe ) ,CS ) )", "obj1": 0.678, "obj2": 0.21119999315428048}, {"determining": "( ( PN - Max( DDR,RRS ) ) * ( DDR * ( ARS + Max( AMS,MRS ) ) ) )", "choosing": "( ( MUM / CS ) / ( MUR * Max( ( RRSe + ( Max( RRSe,( ( RCSe * RCSe ) + DS ) ) - MUM ) ),CS ) ) )", "obj1": 0.976, "obj2": 0.008940166521558844}, {"determining": "Max( Max( ( ( Min( DDR ,( ( FirstVNF_CPU_Server * Max( ARS,FirstVNF_CPU_Server ) ) / FirstVNF_Mem ) ) - FirstVNF_Mem ) - ( ( MRS - PN ) / ( CRS - ARS ) ) ),( PN - FirstVNF_Mem_Server ) ),( MDR + MRS ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + Max( ( ( ( RMSe + RCSe ) + DS ) * MUC ),( CS / DS ) ) ),CS ) ) )", "obj1": 0.06, "obj2": 0.7029071662147492}, {"determining": "( ( Min( PN ,MRS ) * ( BR - CRS ) ) / ( ACS + Max( ( ( ( ( CRS / PN ) - ( ( FirstVNF_CPU - MRS ) * DDR ) ) / FirstVNF_Mem ) / BR ),( FirstVNF_RAM_Server / ( FirstVNF_CPU_Server + MRS ) ) ) ) )", "choosing": "( ( MUM - CS ) / ( Min( RRSe ,CS ) * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.648, "obj2": 0.2233412187585957}, {"determining": "( Min( PN ,MRS ) * Min( ( Min( Min( MRS ,BR ) ,( Const - ( ( MRS - ( FirstVNF_CPU * MDR ) ) + RRS ) ) ) - ( RRS / BR ) ) ,BR ) )", "choosing": "( ( ( MUM / CS ) + ( DS / Max( ( CS * ( ( Max( RCSe,RCSe ) - RRSe ) + MLU ) ),( MUM * MLU ) ) ) ) - ( ( MUR + CS ) - Max( RCSe,CS ) ) )", "obj1": 0.87, "obj2": 0.054858835117038963}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.218, "obj2": 0.5335403933853177}, {"determining": "( Min( ARS ,MRS ) * ( BR - CRS ) )", "choosing": "( Min( MLU ,( DS * MUM ) ) - CS )", "obj1": 0.704, "obj2": 0.18760015510363579}, {"determining": "( ( PN - ( ( MRS / PN ) + ( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR ) ) ) * DDR )", "choosing": "( ( CS / CS ) - CS )", "obj1": 0.262, "obj2": 0.49949508393432773}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( ( ( ( ( Max( RMSe,CS ) / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( MLU + CS ) )", "obj1": 0.892, "obj2": 0.04450441822915335}, {"determining": "( Min( PN ,MRS ) * ( BR - ( ( CRS / PN ) - ( RRS / BR ) ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + RCSe ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.89, "obj2": 0.04771196134673233}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_CPU + BR ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,( ( MUR * Max( ( ( MUR * MUM ) - RCSe ),Min( ( RMSe - MUC ) ,DS ) ) ) - RCSe ) ) ) )", "obj1": 0.046, "obj2": 0.7371371659485028}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( ACS * CRS ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.22, "obj2": 0.5279641518714261}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( ( BR - CRS ) / Const ) / Max( ARS,MRS ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * ( Min( DS ,( Max( CS,MLU ) * MUR ) ) / ( MUR / CS ) ) ) ) - CS )", "obj1": 0.656, "obj2": 0.21494244147241526}, {"determining": "( ( PN - Max( DDR,RRS ) ) * DDR )", "choosing": "( ( MUM + CS ) / ( DS * Max( Min( MUC ,CS ),CS ) ) )", "obj1": 0.956, "obj2": 0.015639849511795985}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Max( RRS,FirstVNF_CPU ) - ACS ) ) ),( MDR + Min( ( MDR + ( ( PN / MRS ) * Min( FirstVNF_Mem ,( MDR + FirstVNF_RAM_Server ) ) ) ) ,MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.17, "obj2": 0.5876399615714523}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( DDR,MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.146, "obj2": 0.5980424082439421}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( Min( FirstVNF_CPU ,FirstVNF_Mem ) * ( ( ( BR - CRS ) / Const ) / Max( ARS,DDR ) ) ) ) ),( MDR + MRS ) )", "choosing": "( ( MLU - ( CS * Min( DS ,MUC ) ) ) - ( MLU + CS ) )", "obj1": 0.172, "obj2": 0.5842557273135557}, {"determining": "( ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - ( ( MRS / PN ) + MRS ) ) ) + Max( FirstVNF_CPU,AMS ) ) * Min( FirstVNF_Mem ,( ARS + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,CS ) + MUR ) * MUR ) / MUM ) ) ) - ( ( ( DS / MUR ) + ( MUM - RRSe ) ) * DS ) ) - ( CS + MLU ) )", "obj1": 0.116, "obj2": 0.6370412411643777}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * DDR )", "choosing": "( Min( Min( MUC ,( DS - DS ) ) ,( ( Min( DS ,( Max( RRSe,MLU ) * MUR ) ) / ( MUR / CS ) ) * DS ) ) - Min( CS ,RRSe ) )", "obj1": 0.264, "obj2": 0.49836001981782213}, {"determining": "( Max( Min( Const ,FirstVNF_RAM_Server ),ACS ) * ( MDR + Const ) )", "choosing": "( ( ( DS / ( ( MUC / ( ( DS * MLU ) * RCSe ) ) + ( ( ( Max( MUR,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.094, "obj2": 0.653973417331835}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - ( PN - ( ( MRS / PN ) + ( ( MRS / PN ) + MRS ) ) ) ) ),( MDR + MRS ) )", "choosing": "( ( MUM / CS ) / ( DS * Max( ( RRSe + Max( ( ( ( RMSe + RCSe ) + CS ) * MUC ),CS ) ),CS ) ) )", "obj1": 0.074, "obj2": 0.6864790641505278}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( ( ( ( ( Max( RMSe,CS ) / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) - ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( DS + MUM ) ) * MUR ) / MUM ) ) ) ) - ( MLU + CS ) )", "obj1": 0.892, "obj2": 0.04450441822915335}, {"determining": "( ( ( BR - CRS ) / Const ) * DDR )", "choosing": "( ( ( MUM - CS ) / ( Min( MUR ,CS ) * Max( Min( MUC ,CS ),CS ) ) ) - Min( MUC ,CS ) )", "obj1": 0.664, "obj2": 0.21242226431138786}, {"determining": "( Min( PN ,MRS ) * ( MDR + Const ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.1, "obj2": 0.6526350124942979}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.202, "obj2": 0.5582346067346317}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( ACS * CRS ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( MUC + MUM ) / Min( Min( RCSe ,CS ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.22, "obj2": 0.5279641518714261}, {"determining": "( ( PN - ( CRS / ( ( MRS / PN ) + MRS ) ) ) * PN )", "choosing": "( ( MUM - CS ) / ( Min( Min( MUR ,( RCSe * CS ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.986, "obj2": 0.0041387143300275495}, {"determining": "( ( PN - ( ( MRS / PN ) + MRS ) ) * ( Max( ( PN - CRS ),MRS ) / FirstVNF_CPU ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUR - MLU ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.148, "obj2": 0.5937204630355645}, {"determining": "( ( PN - ( ( ( ( ( Min( PN ,MRS ) * ( BR - CRS ) ) / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( ( DS / DS ) / ( Min( Min( MUR ,( RCSe * Min( MUR ,MUM ) ) ) ,CS ) * Max( Min( MUC ,MUM ),CS ) ) )", "obj1": 0.292, "obj2": 0.48631997322971243}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( MDR + MRS ) )", "choosing": "( ( ( DS / ( ( MUC / ( MUC * MUC ) ) + ( ( ( Max( CS,RRSe ) + ( MUC + MUM ) ) * MUR ) / MUM ) ) ) - ( ( ( ( CS / RMSe ) + ( MUM * RRSe ) ) + DS ) * DS ) ) - ( MLU + CS ) )", "obj1": 0.092, "obj2": 0.6596710511960198}, {"determining": "( ( PN - ( ( ( ( MRS / PN ) + MRS ) / PN ) + MRS ) ) * DDR )", "choosing": "( Max( ( ( RMSe / MUC ) + ( ( MLU - RMSe ) / MUM ) ),CS ) - ( MLU + CS ) )", "obj1": 0.804, "obj2": 0.08653683124450309}, {"determining": "( ARS * ( PN - ( FirstVNF_RAM - FirstVNF_RAM ) ) )", "choosing": "( Min( MUC ,( DS * Min( Max( ( ( CS / CS ) / Min( Min( RCSe ,MLU ) ,( RRSe / DS ) ) ),Max( CS,RMSe ) ) ,( CS - MLU ) ) ) ) - CS )", "obj1": 0.176, "obj2": 0.578771675296068}]}