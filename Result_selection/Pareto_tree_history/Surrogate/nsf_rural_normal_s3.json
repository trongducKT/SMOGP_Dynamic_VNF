{"1": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RMSe,RMSe ) ),( Max( RRSe,RMSe ) - Max( MUR,CS ) ) ) + ( MLU + ( DS + MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( CS + RCSe ) / Max( MUR,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( ( ( CS / RCSe ) / MLU ) * ( MUC / MLU ) ) ) * CS ) / ( ( MUC / RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6155378486055777, "obj2": 0.3777801244951679}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Max( RCSe,RCSe ),Max( DS,( RMSe - CS ) ) )", "obj1": 0.7749003984063745, "obj2": 0.19097179013898496}, {"determining": "( ( Const * BR ) / ( FirstVNF_RAM_Server - DDR ) )", "choosing": "( ( CS * DS ) * Min( RRSe ,MUC ) )", "obj1": 0.4641434262948207, "obj2": 0.48944036594447426}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.9083665338645418, "obj2": 0.06740752879873581}, {"determining": "( ( Min( ( FirstVNF_Mem_Server / DDR ) ,Min( MDR ,FirstVNF_RAM_Server ) ) * Max( ( BR / FirstVNF_RAM_Server ),( MRS / DDR ) ) ) * ( Min( ( RRS / DDR ) ,Min( Const ,MRS ) ) / ( ( DDR + PN ) * ( AMS * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( ( RCSe * ( ( ( ( MUR + RMSe ) - DS ) - MUR ) / MUC ) ) + ( RMSe + Max( ( Min( Max( MUM,MUC ) ,CS ) + ( ( CS - RMSe ) / ( RCSe - MUC ) ) ),MUR ) ) ) + ( ( DS * DS ) / ( MUM / CS ) ) ) * ( ( ( RRSe * RMSe ) / Max( CS,MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.3804780876494024, "obj2": 0.5375142083788539}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "Max( ( Max( MDR,PN ) - ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) ),( Min( RRS ,FirstVNF_Mem_Server ) * ( FirstVNF_RAM + FirstVNF_Mem_Server ) ) )", "choosing": "( Max( Max( RRSe,Max( ( MUC * RMSe ),MUM ) ),( CS - MUC ) ) / Max( Min( MLU ,RCSe ),( MUR + DS ) ) )", "obj1": 0.250996015936255, "obj2": 0.734393478169007}, {"determining": "Min( Min( ( ( ACS - PN ) / Min( CRS ,RRS ) ) ,Max( ( FirstVNF_RAM_Server + CRS ),( MRS * FirstVNF_Mem_Server ) ) ) ,Max( ( ( FirstVNF_CPU_Server / Const ) * Min( BR ,FirstVNF_CPU_Server ) ),( Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) - ( MRS * FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( ( MUM + RCSe ) * ( MUM * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.2549800796812749, "obj2": 0.6953454137557016}, {"determining": "Max( Max( ( ( ARS - MDR ) * Min( ARS ,FirstVNF_RAM_Server ) ),( ( MRS + Const ) / ( FirstVNF_RAM - AMS ) ) ),( ( ( MDR / ACS ) - Min( FirstVNF_RAM_Server ,FirstVNF_Mem ) ) - Max( ( FirstVNF_CPU_Server - BR ),Min( MDR ,MRS ) ) ) )", "choosing": "( Max( ( Min( CS ,MUR ) - ( CS / MUR ) ),Max( ( MUC * CS ),Min( RMSe ,RCSe ) ) ) - ( Min( ( RRSe * CS ) ,Max( CS,MLU ) ) * Max( Max( MUC,RMSe ),Min( MUM ,RCSe ) ) ) )", "obj1": 0.30677290836653387, "obj2": 0.5894321103750612}, {"determining": "( Max( FirstVNF_CPU_Server,ARS ) + ( FirstVNF_CPU_Server * CRS ) )", "choosing": "( Max( Max( MUM,Min( Max( ( ( DS + MUM ) / ( ( RCSe + MUC ) * RMSe ) ),Max( CS,( DS * RCSe ) ) ) ,MUC ) ),MUM ) - ( MUC * RMSe ) )", "obj1": 0.2788844621513944, "obj2": 0.6307847219602466}, {"determining": "Max( Min( DDR ,AMS ),( FirstVNF_RAM_Server - AMS ) )", "choosing": "( Min( RMSe ,RMSe ) * ( RCSe + CS ) )", "obj1": 0.36254980079681276, "obj2": 0.583404178697332}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),Max( PN,FirstVNF_CPU ) )", "choosing": "( ( DS / RMSe ) / Min( RRSe ,DS ) )", "obj1": 0.2948207171314741, "obj2": 0.6270835919678117}, {"determining": "( ( ( BR * MDR ) - ( RRS - FirstVNF_CPU_Server ) ) / ( CRS - RRS ) )", "choosing": "Min( ( Min( RMSe ,( ( RCSe / CS ) / CS ) ) + ( MLU / ( CS + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.37250996015936255, "obj2": 0.5678288427362532}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "( ( Min( RMSe ,CS ) * DS ) + ( MUR + RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe + RRSe ) ,( DS - MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( ( RRSe - ( Max( DS,DS ) / Min( ( DS - DS ) ,Min( MUC ,( MLU * CS ) ) ) ) ),( ( MLU / MUR ) * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( AMS ,Const ) ,Min( ARS ,FirstVNF_Mem_Server ) ) * ( ( AMS - AMS ) - Min( CRS ,FirstVNF_Mem ) ) )", "choosing": "( ( Min( MLU ,DS ) + Min( CS ,MUC ) ) - ( ( DS + MUC ) - ( MUM * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}], "2": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - Max( MUR,CS ) ) ) + ( ( ( DS - RCSe ) * ( DS + DS ) ) / Max( Min( CS ,RCSe ),( MLU - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RMSe,RMSe ) ),( Max( RRSe,RMSe ) - Max( MUR,CS ) ) ) + ( MLU + ( DS + MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Max( RCSe,RCSe ),Max( DS,( RMSe - CS ) ) )", "obj1": 0.7749003984063745, "obj2": 0.19097179013898496}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * RCSe ) * CS ) / ( Max( MUC,RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6254980079681275, "obj2": 0.36515595757488684}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( ( ( MLU + DS ) + CS ) - DS ) ,( MUC * RRSe ) ) )", "obj1": 0.4641434262948207, "obj2": 0.45933461271541787}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.9083665338645418, "obj2": 0.06740752879873581}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( ( ( CS / RCSe ) / MLU ) * ( MUC / MLU ) ) ) * CS ) / ( ( MUC / RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6155378486055777, "obj2": 0.3777801244951679}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6220999931430775}, {"determining": "Max( ( Max( MDR,PN ) - ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) ),( Min( RRS ,FirstVNF_Mem_Server ) * ( FirstVNF_RAM + FirstVNF_Mem_Server ) ) )", "choosing": "( Max( Max( RRSe,Max( ( MUC * RMSe ),MUM ) ),( CS - MUC ) ) / Max( Min( MLU ,RCSe ),( MUR + DS ) ) )", "obj1": 0.250996015936255, "obj2": 0.734393478169007}, {"determining": "Min( Min( ( ( ACS - PN ) / Min( CRS ,RRS ) ) ,Max( ( FirstVNF_RAM_Server + CRS ),( MRS * FirstVNF_Mem_Server ) ) ) ,Max( ( ( FirstVNF_CPU_Server / Const ) * Min( BR ,FirstVNF_CPU_Server ) ),( Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) - ( MRS * FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( ( MUM + RCSe ) * ( MUM * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.2549800796812749, "obj2": 0.6953454137557016}, {"determining": "Max( Max( ( ( ARS - MDR ) * Min( ARS ,FirstVNF_RAM_Server ) ),( ( MRS + Const ) / ( FirstVNF_RAM - AMS ) ) ),( ( ( MDR / ACS ) - Min( FirstVNF_RAM_Server ,FirstVNF_Mem ) ) - Max( ( FirstVNF_CPU_Server - BR ),Min( MDR ,MRS ) ) ) )", "choosing": "( Max( ( Min( CS ,MUR ) - ( CS / MUR ) ),Max( ( MUC * CS ),Min( RMSe ,RCSe ) ) ) - ( Min( ( RRSe * CS ) ,Max( CS,MLU ) ) * Max( Max( MUC,RMSe ),Min( MUM ,RCSe ) ) ) )", "obj1": 0.30677290836653387, "obj2": 0.5894321103750612}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "Const", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUC / RCSe ) ) ) + ( Max( Min( CS ,RCSe ),( MLU / MUM ) ) / ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 0.4302788844621514, "obj2": 0.5098448363919945}, {"determining": "( ( BR + FirstVNF_Mem ) / Max( FirstVNF_RAM_Server,FirstVNF_Mem ) )", "choosing": "Min( Min( RRSe ,MLU ) ,( DS + MLU ) )", "obj1": 0.350597609561753, "obj2": 0.5659971754089638}, {"determining": "Const", "choosing": "Min( Min( Min( Min( Max( ( ( Min( MUR ,MUC ) - Min( RRSe ,MUC ) ) - Max( ( RMSe + DS ),( MUC - MUM ) ) ),( ( ( CS + MLU ) - Min( RCSe ,MUM ) ) + Max( Max( RMSe,MLU ),Max( RMSe,MUM ) ) ) ) ,( ( ( Min( RMSe ,MUC ) + ( MUR * RRSe ) ) / Max( ( MLU * MUM ),Min( MUC ,RMSe ) ) ) * ( ( ( RMSe - DS ) + ( RRSe * RMSe ) ) + ( ( DS * MLU ) + ( RMSe - RRSe ) ) ) ) ) ,( ( Min( ( ( RRSe * RRSe ) + ( RRSe + MUM ) ) ,( ( MUM * MLU ) - Min( CS ,DS ) ) ) - ( Min( ( RCSe / CS ) ,( RRSe / MLU ) ) - ( ( RMSe - RRSe ) * Max( CS,MLU ) ) ) ) + ( Max( Min( ( MUC * RCSe ) ,( MUM * MUM ) ),( ( RRSe + MUR ) * ( MUM - RRSe ) ) ) / ( ( Min( CS ,RCSe ) + ( MUC * MLU ) ) - ( ( MUM / MUM ) / Max( MUM,MUR ) ) ) ) ) ) ,( ( ( ( ( ( MLU / RRSe ) + ( MUC * MUC ) ) + ( Min( CS ,MUR ) / ( MUR * RMSe ) ) ) / ( ( ( MUR * RMSe ) + Min( MUR ,MUM ) ) * Max( ( MUM - MUR ),( CS / RCSe ) ) ) ) + ( ( ( ( RMSe * RCSe ) - ( CS + RCSe ) ) / ( Max( MUC,MUC ) / Min( MUC ,MUR ) ) ) + Min( ( ( MUR - MUR ) / Max( DS,MLU ) ) ,( ( MUM - RRSe ) * ( DS / MLU ) ) ) ) ) - ( Max( ( ( ( MUC * RRSe ) * ( MLU * RRSe ) ) * ( ( DS * MUC ) * Min( MLU ,MUC ) ) ),( ( ( CS + MUR ) / Max( MUR,RMSe ) ) / Min( ( RMSe - RMSe ) ,( MUR + RMSe ) ) ) ) / ( Max( ( Max( CS,DS ) * ( RCSe + DS ) ),( ( CS * CS ) / ( RCSe / DS ) ) ) + ( ( ( MLU * RMSe ) + ( RCSe + RMSe ) ) * ( ( DS - CS ) / ( MLU - DS ) ) ) ) ) ) ) ,Min( ( Max( Max( Min( ( ( DS - RMSe ) * ( MUC - RCSe ) ) ,( ( RCSe + MLU ) - Min( RRSe ,DS ) ) ),( Max( ( DS + CS ),Min( MUR ,CS ) ) + ( ( MUM / CS ) - ( MLU - MUM ) ) ) ),( ( Max( ( DS * RCSe ),Max( RRSe,MLU ) ) / Min( ( CS * MLU ) ,( RRSe * MUC ) ) ) / ( Max( ( MUR * DS ),( MUC - MLU ) ) / ( ( RRSe * DS ) + ( RRSe / MLU ) ) ) ) ) * ( ( ( Min( ( MUM / RMSe ) ,( CS * RRSe ) ) * ( ( DS * RMSe ) * Max( RMSe,CS ) ) ) * ( Min( ( RMSe * RRSe ) ,Min( MUC ,CS ) ) + ( ( MLU * MUR ) / ( RMSe + RMSe ) ) ) ) / ( Max( ( ( MUC / CS ) + ( MUM - RRSe ) ),( ( DS * MUM ) + ( MUM - MUC ) ) ) - ( ( ( RMSe * MLU ) + Max( RMSe,MUR ) ) - ( ( CS / DS ) + ( MUM - MLU ) ) ) ) ) ) ,( Max( Min( ( Min( ( MUM * CS ) ,( CS * MUM ) ) - Max( ( CS - RCSe ),( CS + DS ) ) ) ,( ( ( RCSe * MUC ) / ( MUM / CS ) ) - Max( Min( MUC ,RMSe ),( MUC * MUR ) ) ) ),( Max( ( ( DS / RRSe ) / Max( RMSe,RRSe ) ),( Min( RCSe ,MUR ) / ( MUR * MLU ) ) ) * ( ( ( MUR + DS ) - ( MUR * RRSe ) ) + ( ( RRSe * MUR ) / Max( RRSe,RCSe ) ) ) ) ) - Max( Max( ( ( Max( MUM,DS ) / ( DS - RMSe ) ) - ( ( MUC * RCSe ) - ( RMSe - MUM ) ) ),Min( Max( Max( MUR,MUR ),( RCSe * MUC ) ) ,( ( DS + MUM ) + ( MUM * MUM ) ) ) ),( ( Min( ( RRSe / DS ) ,( RRSe + DS ) ) - Max( Max( MUR,DS ),( MLU * MUM ) ) ) - ( ( ( CS + RRSe ) - ( RRSe - RCSe ) ) - ( Min( MUM ,MLU ) / Max( MUM,CS ) ) ) ) ) ) ) )", "obj1": 0.45617529880478086, "obj2": 0.500792510659684}, {"determining": "( ( ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) / Min( FirstVNF_CPU_Server ,BR ) ) / Min( ( FirstVNF_Mem * BR ) ,( FirstVNF_CPU * ARS ) ) ) - ( Min( Min( Const ,ACS ) ,Min( FirstVNF_RAM_Server ,ACS ) ) / ( ( FirstVNF_Mem - FirstVNF_CPU_Server ) / ( BR * ARS ) ) ) )", "choosing": "( ( ( ( DS + CS ) / ( DS / DS ) ) + ( ( DS + DS ) / ( MUM / RRSe ) ) ) * ( ( RMSe - RCSe ) / ( RCSe / CS ) ) )", "obj1": 0.38645418326693226, "obj2": 0.5259067560096429}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( MLU,MLU ) ,( RCSe + Min( MUC ,Min( RRSe ,RRSe ) ) ) )", "obj1": 0.9223107569721115, "obj2": 0.05817834142612967}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( ( Min( ( FirstVNF_Mem_Server / DDR ) ,Min( MDR ,FirstVNF_RAM_Server ) ) * Max( ( BR / FirstVNF_RAM_Server ),( MRS / DDR ) ) ) * ( Min( ( RRS / DDR ) ,Min( Const ,MRS ) ) / ( ( DDR + PN ) * ( AMS * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( ( RCSe * ( ( ( ( MUR + RMSe ) - DS ) - MUR ) / MUC ) ) + ( RMSe + Max( ( Min( Max( MUM,MUC ) ,CS ) + ( ( CS - RMSe ) / ( RCSe - MUC ) ) ),MUR ) ) ) + ( ( DS * DS ) / ( MUM / CS ) ) ) * ( ( ( RRSe * RMSe ) / Max( CS,MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.3804780876494024, "obj2": 0.5375142083788539}, {"determining": "Const", "choosing": "( ( ( ( DS / DS ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / CS ) ) ) * ( ( ( RRSe * RMSe ) / ( CS / MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.36852589641434264, "obj2": 0.551299074268548}, {"determining": "Const", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 0.3665338645418327, "obj2": 0.560180498847347}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( CS + RCSe ) / Max( MUR,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "( ( Min( RMSe ,CS ) * DS ) + ( MUR + RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe + RRSe ) ,( DS - MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( ( RRSe - ( Max( DS,DS ) / Min( ( DS - DS ) ,Min( MUC ,( MLU * CS ) ) ) ) ),( ( MLU / MUR ) * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( AMS ,Const ) ,Min( ARS ,FirstVNF_Mem_Server ) ) * ( ( AMS - AMS ) - Min( CRS ,FirstVNF_Mem ) ) )", "choosing": "( ( Min( MLU ,DS ) + Min( CS ,MUC ) ) - ( ( DS + MUC ) - ( MUM * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( MUR + ( ( Max( Min( MUR ,( MUC / Min( MLU ,DS ) ) ),MLU ) - ( MUR * Max( ( MLU - ( RMSe + CS ) ),( MUM + RRSe ) ) ) ) + DS ) ) + ( MLU * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "Max( ( ( MUC - MLU ) * MLU ),( MUC / ( MUR + Min( RRSe ,( MLU + ( RRSe - MUR ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( ( MUM + RMSe ) - Max( MUR,CS ) ),( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ) ) + ( RMSe + Max( Max( DS,( ( RRSe - MUC ) / RMSe ) ),( ( MUC + ( RMSe + RCSe ) ) - CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUC / RCSe ) ) ) + ( Max( Min( CS ,RCSe ),( MLU / MUM ) ) / ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe + RRSe ) + ( ( MUR / ( MUM - ( MLU - ( RCSe + Max( ( DS / MUM ),CS ) ) ) ) ) - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RMSe - ( RRSe + MLU ) ) / Max( RRSe,( MLU / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( Max( RCSe,RRSe ),( Min( ( ( MUM * Max( ( MLU / MUC ),MUM ) ) + CS ) ,( Max( MLU,MUM ) - MUC ) ) - MUC ) ) / Max( ( MLU * RCSe ),( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RRSe / Min( MUR ,( Max( MUM,CS ) / MUC ) ) ) + ( RRSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe - RRSe ) ,( MLU / MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( Min( Min( MUM ,RMSe ) ,Min( CS ,MUC ) ) - ( ( MLU + RCSe ) / ( RCSe / MUR ) ) ) + ( ( Max( RCSe,RRSe ) + ( RCSe + CS ) ) + ( Min( DS ,MUM ) / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( Max( DS,CS ),( Max( RCSe,MLU ) * DS ) )", "obj1": 1.0, "obj2": 0.0}], "3": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - Max( MUR,CS ) ) ) + ( ( ( DS - RCSe ) * ( DS + DS ) ) / Max( Min( CS ,RCSe ),( MLU - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7470119521912351, "obj2": 0.18329622435482767}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( Max( ( RMSe / RRSe ),CS ) + ( DS - MUC ) )", "obj1": 0.6394422310756972, "obj2": 0.343457501415359}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.898406374501992, "obj2": 0.0795800670440863}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( ( ( MLU + DS ) + CS ) - DS ) ,( MUC * RRSe ) ) )", "obj1": 0.4641434262948207, "obj2": 0.45933461271541787}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( ( ( CS / RCSe ) / MLU ) * ( MUC / MLU ) ) ) * CS ) / ( ( MUC / RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6155378486055777, "obj2": 0.3777801244951679}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6220999931430775}, {"determining": "Max( ( Max( MDR,PN ) - ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) ),( Min( RRS ,FirstVNF_Mem_Server ) * ( FirstVNF_RAM + FirstVNF_Mem_Server ) ) )", "choosing": "( Max( Max( RRSe,Max( ( MUC * RMSe ),MUM ) ),( CS - MUC ) ) / Max( Min( MLU ,RCSe ),( MUR + DS ) ) )", "obj1": 0.250996015936255, "obj2": 0.734393478169007}, {"determining": "Min( Min( ( ( ACS - PN ) / Min( CRS ,RRS ) ) ,Max( ( FirstVNF_RAM_Server + CRS ),( MRS * FirstVNF_Mem_Server ) ) ) ,Max( ( ( FirstVNF_CPU_Server / Const ) * Min( BR ,FirstVNF_CPU_Server ) ),( Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) - ( MRS * FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( ( MUM + RCSe ) * ( MUM * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.2549800796812749, "obj2": 0.6953454137557016}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "Max( ( RRSe - ( Max( DS,DS ) / Min( ( DS - DS ) ,Min( MUC ,( MLU * CS ) ) ) ) ),( ( MLU / MUR ) * DS ) )", "obj1": 0.4262948207171315, "obj2": 0.5002226798331969}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "( ( BR + FirstVNF_Mem ) / Max( FirstVNF_RAM_Server,FirstVNF_Mem ) )", "choosing": "Min( Min( RRSe ,MLU ) ,( DS + MLU ) )", "obj1": 0.350597609561753, "obj2": 0.5659971754089638}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( MUR - ( Max( MUR,DS ) - Max( MUR,( DS + ( MUR - ( RMSe / RMSe ) ) ) ) ) ) ,( DS * MLU ) ) )", "obj1": 0.448207171314741, "obj2": 0.47866690157086045}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( MLU,MLU ) ,( RCSe + Min( MUC ,Min( RRSe ,RRSe ) ) ) )", "obj1": 0.9223107569721115, "obj2": 0.05817834142612967}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( DS * ( MUC / MLU ) ) ) * CS ) / ( Max( MUC,RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6254980079681275, "obj2": 0.36155655796976705}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.9083665338645418, "obj2": 0.06740752879873581}, {"determining": "Const", "choosing": "( ( ( ( DS / DS ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / CS ) ) ) * ( ( ( RRSe * RMSe ) / ( CS / MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.3665338645418327, "obj2": 0.5574146493410121}, {"determining": "( ( ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) / Min( FirstVNF_CPU_Server ,BR ) ) / Min( ( FirstVNF_Mem * BR ) ,( FirstVNF_CPU * ARS ) ) ) - ( Min( Min( Const ,ACS ) ,Min( FirstVNF_RAM_Server ,ACS ) ) / ( ( FirstVNF_Mem - FirstVNF_CPU_Server ) / ( BR * ARS ) ) ) )", "choosing": "( ( ( ( DS + CS ) / ( DS / DS ) ) + ( ( DS + DS ) / ( MUM / RRSe ) ) ) * ( ( RMSe - RCSe ) / ( RCSe / CS ) ) )", "obj1": 0.38645418326693226, "obj2": 0.5259067560096429}, {"determining": "Const", "choosing": "( ( RRSe * RRSe ) + ( MUR / ( CS + MLU ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5511367630938778}, {"determining": "Const", "choosing": "( ( ( ( DS / DS ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / CS ) ) ) * ( ( ( RRSe * RMSe ) / ( CS / MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.3804780876494024, "obj2": 0.5375142083788539}, {"determining": "( ( Min( ( FirstVNF_Mem_Server / DDR ) ,Min( MDR ,FirstVNF_RAM_Server ) ) * Max( ( BR / FirstVNF_RAM_Server ),( MRS / DDR ) ) ) * ( Min( ( RRS / DDR ) ,Min( Const ,MRS ) ) / ( ( DDR + PN ) * ( AMS * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( ( RCSe * ( ( ( ( MUR + RMSe ) - DS ) - MUR ) / MUC ) ) + ( RMSe + Max( ( Min( Max( MUM,MUC ) ,CS ) + ( ( CS - RMSe ) / ( RCSe - MUC ) ) ),MUR ) ) ) + ( ( DS * DS ) / ( MUM / CS ) ) ) * ( ( ( RRSe * RMSe ) / Max( CS,MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.3804780876494024, "obj2": 0.5375142083788539}, {"determining": "Const", "choosing": "( ( ( ( DS / DS ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / CS ) ) ) * ( ( ( RRSe * RMSe ) / ( CS / MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.36852589641434264, "obj2": 0.551299074268548}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RMSe,RMSe ) ),( Max( RRSe,RMSe ) - Max( MUR,CS ) ) ) + ( MLU + ( DS + MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( CS + RCSe ) / Max( MUR,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "( ( Min( RMSe ,CS ) * DS ) + ( MUR + RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe + RRSe ) ,( DS - MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( ( RRSe - ( Max( DS,DS ) / Min( ( DS - DS ) ,Min( MUC ,( MLU * CS ) ) ) ) ),( ( MLU / MUR ) * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( AMS ,Const ) ,Min( ARS ,FirstVNF_Mem_Server ) ) * ( ( AMS - AMS ) - Min( CRS ,FirstVNF_Mem ) ) )", "choosing": "( ( Min( MLU ,DS ) + Min( CS ,MUC ) ) - ( ( DS + MUC ) - ( MUM * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( MUR + ( ( Max( Min( MUR ,( MUC / Min( MLU ,DS ) ) ),MLU ) - ( MUR * Max( ( MLU - ( RMSe + CS ) ),( MUM + RRSe ) ) ) ) + DS ) ) + ( MLU * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "Max( ( ( MUC - MLU ) * MLU ),( MUC / ( MUR + Min( RRSe ,( MLU + ( RRSe - MUR ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( ( MUM + RMSe ) - Max( MUR,CS ) ),( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ) ) + ( RMSe + Max( Max( DS,( ( RRSe - MUC ) / RMSe ) ),( ( MUC + ( RMSe + RCSe ) ) - CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUC / RCSe ) ) ) + ( Max( Min( CS ,RCSe ),( MLU / MUM ) ) / ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe + RRSe ) + ( ( MUR / ( MUM - ( MLU - ( RCSe + Max( ( DS / MUM ),CS ) ) ) ) ) - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RMSe - ( RRSe + MLU ) ) / Max( RRSe,( MLU / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( Max( RCSe,RRSe ),( Min( ( ( MUM * Max( ( MLU / MUC ),MUM ) ) + CS ) ,( Max( MLU,MUM ) - MUC ) ) - MUC ) ) / Max( ( MLU * RCSe ),( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RRSe / Min( MUR ,( Max( MUM,CS ) / MUC ) ) ) + ( RRSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe - RRSe ) ,( MLU / MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( Min( Min( MUM ,RMSe ) ,Min( CS ,MUC ) ) - ( ( MLU + RCSe ) / ( RCSe / MUR ) ) ) + ( ( Max( RCSe,RRSe ) + ( RCSe + CS ) ) + ( Min( DS ,MUM ) / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( Max( DS,CS ),( Max( RCSe,MLU ) * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( ( Max( Max( Min( ( MUM + MUC ) ,MLU ),DS ),( ( Min( MUM ,MUC ) + RCSe ) / ( MUR + ( MLU - RMSe ) ) ) ) / ( DS * RCSe ) ) - MUC ) * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( ( ( DS * RCSe ) * RMSe ) / ( Max( MUC,RCSe ) * RRSe ) ) + ( Min( ( ( RCSe * RMSe ) / CS ) ,CS ) / Min( MUM ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "Max( Max( DS,DS ),Min( ( MUM * MLU ) ,Min( CS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "( ( RCSe * Max( MLU,RCSe ) ) + ( ( MLU / ( ( ( Min( RRSe ,MUC ) / MUM ) + RMSe ) + MUM ) ) / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}], "4": [{"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( CS / ( CS + DS ) ) + Min( DS ,( ( ( ( MLU - RCSe ) * RCSe ) * RCSe ) / ( MUC + ( MUC - ( ( DS / MUR ) / Min( DS ,DS ) ) ) ) ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.6454183266932271, "obj2": 0.2777458354904435}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( ( ( MLU + DS ) + CS ) - DS ) ,( MUC * RRSe ) ) )", "obj1": 0.4641434262948207, "obj2": 0.45933461271541787}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( ( ( CS / RCSe ) / MLU ) * ( MUC / MLU ) ) ) * CS ) / ( ( MUC / RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6155378486055777, "obj2": 0.3777801244951679}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7470119521912351, "obj2": 0.18329622435482767}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 0.7768924302788844, "obj2": 0.17528701212105113}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( ( MLU - RCSe ) / ( MUM + MLU ) ),( ( RMSe - MUM ) - ( CS - MLU ) ) ) + Max( ( ( MUR * MLU ) / MLU ),CS ) )", "obj1": 0.8784860557768924, "obj2": 0.08491774764338732}, {"determining": "Max( ( Max( MDR,PN ) - ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) ),( Min( RRS ,FirstVNF_Mem_Server ) * ( FirstVNF_RAM + FirstVNF_Mem_Server ) ) )", "choosing": "( Max( Max( RRSe,Max( ( MUC * RMSe ),MUM ) ),( CS - MUC ) ) / Max( Min( MLU ,RCSe ),( MUR + DS ) ) )", "obj1": 0.250996015936255, "obj2": 0.734393478169007}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( Max( ( RMSe / RRSe ),CS ) + ( DS - MUC ) )", "obj1": 0.6394422310756972, "obj2": 0.343457501415359}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "Const", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( Max( DS,MUC ) * ( MUR * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.26095617529880477, "obj2": 0.6820390643457372}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6220999931430775}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5369089488131741}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( MUR - ( Max( MUR,DS ) - Max( MUR,( DS + ( MUR - ( RMSe / RMSe ) ) ) ) ) ) ,( DS * MLU ) ) )", "obj1": 0.448207171314741, "obj2": 0.47866690157086045}, {"determining": "Const", "choosing": "Min( ( Min( RMSe ,( ( RCSe / CS ) / CS ) ) + ( MLU / ( CS + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.2729083665338645, "obj2": 0.6085148969449606}, {"determining": "Min( Min( ( ( ACS - PN ) / Min( CRS ,RRS ) ) ,Max( ( FirstVNF_RAM_Server + CRS ),( MRS * FirstVNF_Mem_Server ) ) ) ,Max( ( ( FirstVNF_CPU_Server / Const ) * Min( BR ,FirstVNF_CPU_Server ) ),( Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) - ( MRS * FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( ( MUM + RCSe ) * ( MUM * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.2549800796812749, "obj2": 0.6953454137557016}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( DS * ( MUC / MLU ) ) ) * CS ) / ( Max( MUC,RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6254980079681275, "obj2": 0.36155655796976705}, {"determining": "Const", "choosing": "Max( ( RRSe - ( Max( DS,DS ) / Min( ( DS - DS ) ,Min( MUC ,( MLU * CS ) ) ) ) ),( ( MLU / MUR ) * DS ) )", "obj1": 0.4262948207171315, "obj2": 0.5002226798331969}, {"determining": "Const", "choosing": "( ( ( ( DS + CS ) / ( DS / DS ) ) + ( ( DS + DS ) / ( MUM / RRSe ) ) ) * ( ( RMSe - RCSe ) / ( RCSe / CS ) ) )", "obj1": 0.4203187250996016, "obj2": 0.5090841659833849}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.898406374501992, "obj2": 0.0795800670440863}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.9083665338645418, "obj2": 0.06740752879873581}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.9282868525896414, "obj2": 0.05342535141560134}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( MLU,MLU ) ,( RCSe + Min( MUC ,Min( RRSe ,RRSe ) ) ) )", "obj1": 0.9223107569721115, "obj2": 0.05817834142612967}, {"determining": "( ( ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) / Min( FirstVNF_CPU_Server ,BR ) ) / Min( ( FirstVNF_Mem * BR ) ,( FirstVNF_CPU * ARS ) ) ) - ( Min( Min( Const ,ACS ) ,Min( FirstVNF_RAM_Server ,ACS ) ) / ( ( FirstVNF_Mem - FirstVNF_CPU_Server ) / ( BR * ARS ) ) ) )", "choosing": "( ( ( ( DS + CS ) / ( DS / DS ) ) + ( ( DS + DS ) / ( MUM / RRSe ) ) ) * ( ( RMSe - RCSe ) / ( RCSe / CS ) ) )", "obj1": 0.38645418326693226, "obj2": 0.5259067560096429}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - Max( MUR,CS ) ) ) + ( ( ( DS - RCSe ) * ( DS + DS ) ) / Max( Min( CS ,RCSe ),( MLU - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RMSe,RMSe ) ),( Max( RRSe,RMSe ) - Max( MUR,CS ) ) ) + ( MLU + ( DS + MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( CS + RCSe ) / Max( MUR,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "( ( Min( RMSe ,CS ) * DS ) + ( MUR + RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe + RRSe ) ,( DS - MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( ( RRSe - ( Max( DS,DS ) / Min( ( DS - DS ) ,Min( MUC ,( MLU * CS ) ) ) ) ),( ( MLU / MUR ) * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( AMS ,Const ) ,Min( ARS ,FirstVNF_Mem_Server ) ) * ( ( AMS - AMS ) - Min( CRS ,FirstVNF_Mem ) ) )", "choosing": "( ( Min( MLU ,DS ) + Min( CS ,MUC ) ) - ( ( DS + MUC ) - ( MUM * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( MUR + ( ( Max( Min( MUR ,( MUC / Min( MLU ,DS ) ) ),MLU ) - ( MUR * Max( ( MLU - ( RMSe + CS ) ),( MUM + RRSe ) ) ) ) + DS ) ) + ( MLU * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "Max( ( ( MUC - MLU ) * MLU ),( MUC / ( MUR + Min( RRSe ,( MLU + ( RRSe - MUR ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( ( MUM + RMSe ) - Max( MUR,CS ) ),( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ) ) + ( RMSe + Max( Max( DS,( ( RRSe - MUC ) / RMSe ) ),( ( MUC + ( RMSe + RCSe ) ) - CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUC / RCSe ) ) ) + ( Max( Min( CS ,RCSe ),( MLU / MUM ) ) / ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe + RRSe ) + ( ( MUR / ( MUM - ( MLU - ( RCSe + Max( ( DS / MUM ),CS ) ) ) ) ) - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RMSe - ( RRSe + MLU ) ) / Max( RRSe,( MLU / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( Max( RCSe,RRSe ),( Min( ( ( MUM * Max( ( MLU / MUC ),MUM ) ) + CS ) ,( Max( MLU,MUM ) - MUC ) ) - MUC ) ) / Max( ( MLU * RCSe ),( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RRSe / Min( MUR ,( Max( MUM,CS ) / MUC ) ) ) + ( RRSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe - RRSe ) ,( MLU / MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( Min( Min( MUM ,RMSe ) ,Min( CS ,MUC ) ) - ( ( MLU + RCSe ) / ( RCSe / MUR ) ) ) + ( ( Max( RCSe,RRSe ) + ( RCSe + CS ) ) + ( Min( DS ,MUM ) / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( Max( DS,CS ),( Max( RCSe,MLU ) * DS ) )", "obj1": 1.0, "obj2": 0.0}], "5": [{"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( Min( Min( MUM ,RMSe ) ,Min( CS ,RMSe ) ) - ( ( ( MUC / ( ( ( DS / RCSe ) + MUM ) * MUR ) ) / MUC ) / ( RCSe / MUR ) ) ) + ( ( Max( RCSe,RRSe ) + ( RCSe + CS ) ) + ( Min( DS ,MUM ) / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7470119521912351, "obj2": 0.18329622435482767}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( Min( ( MUC * RMSe ) ,( MUR / MUR ) ) * Min( MUC ,( DS * CS ) ) ) * ( DS / ( ( CS / RCSe ) * CS ) ) ) / CS ) ) + ( ( CS + DS ) / MLU ) ) )", "obj1": 0.5258964143426295, "obj2": 0.40934088644632943}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( CS / ( CS + DS ) ) + Min( DS ,( ( ( ( MLU - RCSe ) * RCSe ) * RCSe ) / ( MUC + ( MUC - ( ( DS / MUR ) / Min( DS ,DS ) ) ) ) ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.6454183266932271, "obj2": 0.2777458354904435}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / ( RMSe / Min( Min( ( ( ( DS - MLU ) * Min( CS ,RRSe ) ) - CS ) ,MUC ) ,MUR ) ) ) )", "obj1": 0.8466135458167331, "obj2": 0.10574348111027049}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 0.7768924302788844, "obj2": 0.17528701212105113}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( ( ( MLU + DS ) + CS ) - DS ) ,( MUC * RRSe ) ) )", "obj1": 0.4641434262948207, "obj2": 0.45933461271541787}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( ( ( CS / RCSe ) / MLU ) * ( MUC / MLU ) ) ) * CS ) / ( ( MUC / RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6155378486055777, "obj2": 0.3777801244951679}, {"determining": "Max( ( Max( MDR,PN ) - ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) ),( Min( RRS ,FirstVNF_Mem_Server ) * ( FirstVNF_RAM + FirstVNF_Mem_Server ) ) )", "choosing": "( Max( Max( RRSe,Max( ( MUC * RMSe ),MUM ) ),( CS - MUC ) ) / Max( Min( MLU ,RCSe ),( MUR + DS ) ) )", "obj1": 0.250996015936255, "obj2": 0.734393478169007}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( DS * ( MUC / MLU ) ) ) * CS ) / ( Max( MUC,RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6254980079681275, "obj2": 0.36155655796976705}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4063745019920319, "obj2": 0.48756609786424576}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( Min( DS ,( CS / ( ( ( MUM - RCSe ) + RCSe ) * RCSe ) ) ) + ( CS / ( CS + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.6314741035856574, "obj2": 0.2901993246945186}, {"determining": "Const", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( Max( DS,MUC ) * ( MUR * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.26095617529880477, "obj2": 0.6820390643457372}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6220999931430775}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( MUR - ( Max( MUR,DS ) - Max( MUR,( DS + ( MUR - ( RMSe / RMSe ) ) ) ) ) ) ,( DS * MLU ) ) )", "obj1": 0.448207171314741, "obj2": 0.47866690157086045}, {"determining": "Const", "choosing": "Min( ( Min( RMSe ,( ( RCSe / CS ) / CS ) ) + ( MLU / ( CS + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.2729083665338645, "obj2": 0.6085148969449606}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5369089488131741}, {"determining": "Min( Min( ( ( ACS - PN ) / Min( CRS ,RRS ) ) ,Max( ( FirstVNF_RAM_Server + CRS ),( MRS * FirstVNF_Mem_Server ) ) ) ,Max( ( ( FirstVNF_CPU_Server / Const ) * Min( BR ,FirstVNF_CPU_Server ) ),( Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) - ( MRS * FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( ( MUM + RCSe ) * ( MUM * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.2549800796812749, "obj2": 0.6953454137557016}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUR * CS ) ) ) + ( Max( ( MLU - MUM ),Min( ( ( ( Min( RMSe ,DS ) / Min( RRSe ,RCSe ) ) - CS ) - RMSe ) ,DS ) ) + ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 0.8725099601593626, "obj2": 0.08741311906804297}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.898406374501992, "obj2": 0.0795800670440863}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.9083665338645418, "obj2": 0.06740752879873581}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.9282868525896414, "obj2": 0.05342535141560134}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( MLU,MLU ) ,( RCSe + Min( MUC ,Min( RRSe ,RRSe ) ) ) )", "obj1": 0.9223107569721115, "obj2": 0.05817834142612967}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( ( MLU - RCSe ) / ( MUM + MLU ) ),( ( RMSe - MUM ) - ( CS - MLU ) ) ) + Max( ( ( MUR * MLU ) / MLU ),CS ) )", "obj1": 0.8784860557768924, "obj2": 0.08491774764338732}, {"determining": "( ( ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) / Min( FirstVNF_CPU_Server ,BR ) ) / Min( ( FirstVNF_Mem * BR ) ,( FirstVNF_CPU * ARS ) ) ) - ( Min( Min( Const ,ACS ) ,Min( FirstVNF_RAM_Server ,ACS ) ) / ( ( FirstVNF_Mem - FirstVNF_CPU_Server ) / ( BR * ARS ) ) ) )", "choosing": "( ( ( ( DS + CS ) / ( DS / DS ) ) + ( ( DS + DS ) / ( MUM / RRSe ) ) ) * ( ( RMSe - RCSe ) / ( RCSe / CS ) ) )", "obj1": 0.38645418326693226, "obj2": 0.5259067560096429}, {"determining": "Const", "choosing": "Min( ( RCSe - MUM ) ,( Min( DS ,( ( ( Min( MUC ,RMSe ) / ( CS - MUC ) ) * ( ( ( CS * MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.30876494023904383, "obj2": 0.5737183175990827}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6374501992031872, "obj2": 0.2828407657734561}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( Max( RRSe,RCSe ) - Min( MLU ,CS ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - Max( MUR,CS ) ) ) + ( ( ( DS - RCSe ) * ( DS + DS ) ) / Max( Min( CS ,RCSe ),( MLU - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RMSe,RMSe ) ),( Max( RRSe,RMSe ) - Max( MUR,CS ) ) ) + ( MLU + ( DS + MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( CS + RCSe ) / Max( MUR,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "( ( Min( RMSe ,CS ) * DS ) + ( MUR + RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe + RRSe ) ,( DS - MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "Max( ( RRSe - ( Max( DS,DS ) / Min( ( DS - DS ) ,Min( MUC ,( MLU * CS ) ) ) ) ),( ( MLU / MUR ) * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( AMS ,Const ) ,Min( ARS ,FirstVNF_Mem_Server ) ) * ( ( AMS - AMS ) - Min( CRS ,FirstVNF_Mem ) ) )", "choosing": "( ( Min( MLU ,DS ) + Min( CS ,MUC ) ) - ( ( DS + MUC ) - ( MUM * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( MUR + ( ( Max( Min( MUR ,( MUC / Min( MLU ,DS ) ) ),MLU ) - ( MUR * Max( ( MLU - ( RMSe + CS ) ),( MUM + RRSe ) ) ) ) + DS ) ) + ( MLU * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "Max( ( ( MUC - MLU ) * MLU ),( MUC / ( MUR + Min( RRSe ,( MLU + ( RRSe - MUR ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( ( MUM + RMSe ) - Max( MUR,CS ) ),( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ) ) + ( RMSe + Max( Max( DS,( ( RRSe - MUC ) / RMSe ) ),( ( MUC + ( RMSe + RCSe ) ) - CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUC / RCSe ) ) ) + ( Max( Min( CS ,RCSe ),( MLU / MUM ) ) / ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe + RRSe ) + ( ( MUR / ( MUM - ( MLU - ( RCSe + Max( ( DS / MUM ),CS ) ) ) ) ) - MUM ) )", "obj1": 1.0, "obj2": 0.0}], "6": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe + RRSe ) + ( ( MUR / ( MUM - ( MLU - ( RCSe + Max( ( DS / MUM ),CS ) ) ) ) ) - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( Min( Min( MUM ,RMSe ) ,Min( CS ,RMSe ) ) - ( ( ( MUC / ( ( ( DS / RCSe ) + MUM ) * MUR ) ) / MUC ) / ( RCSe / MUR ) ) ) + ( ( Max( RCSe,RRSe ) + ( RCSe + CS ) ) + ( Min( DS ,MUM ) / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( Min( ( MUC * RMSe ) ,( MUR / MUR ) ) * Min( MUC ,( DS * CS ) ) ) * ( DS / ( ( CS / RCSe ) * CS ) ) ) / CS ) ) + ( ( CS + DS ) / MLU ) ) )", "obj1": 0.5258964143426295, "obj2": 0.40934088644632943}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7470119521912351, "obj2": 0.18329622435482767}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( ( ( DS * Min( ( ( MUC / DS ) - ( MUM + ( MLU - DS ) ) ) ,MUM ) ) / ( RRSe * DS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.651394422310757, "obj2": 0.27583239506961554}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * ( FirstVNF_CPU - Min( FirstVNF_Mem ,FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS * ( ( ( CS / RCSe ) / MLU ) * ( MUC / MLU ) ) ) * CS ) / ( ( MUC / RCSe ) * RRSe ) ) + ( DS + MUC ) )", "obj1": 0.6155378486055777, "obj2": 0.3777801244951679}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 0.7768924302788844, "obj2": 0.17528701212105113}, {"determining": "Max( ( Max( MDR,PN ) - ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) ),( Min( RRS ,FirstVNF_Mem_Server ) * ( FirstVNF_RAM + FirstVNF_Mem_Server ) ) )", "choosing": "( Max( Max( RRSe,Max( ( MUC * RMSe ),MUM ) ),( CS - MUC ) ) / Max( Min( MLU ,RCSe ),( MUR + DS ) ) )", "obj1": 0.250996015936255, "obj2": 0.734393478169007}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8346613545816733, "obj2": 0.10602390535000843}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( ( ( MLU + DS ) + CS ) - DS ) ,( MUC * RRSe ) ) )", "obj1": 0.4641434262948207, "obj2": 0.45933461271541787}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4063745019920319, "obj2": 0.48756609786424576}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( ( ( DS / DS ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( ( Max( RRSe,MUM ) / ( CS / MUR ) ) - ( ( RMSe * CS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.6175298804780877, "obj2": 0.31347949790029417}, {"determining": "Const", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( Max( DS,MUC ) * ( MUR * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.26095617529880477, "obj2": 0.6820390643457372}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4442231075697211, "obj2": 0.46236474217671863}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5369089488131741}, {"determining": "Min( Min( ( ( ACS - PN ) / Min( CRS ,RRS ) ) ,Max( ( FirstVNF_RAM_Server + CRS ),( MRS * FirstVNF_Mem_Server ) ) ) ,Max( ( ( FirstVNF_CPU_Server / Const ) * Min( BR ,FirstVNF_CPU_Server ) ),( Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) - ( MRS * FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( ( MUM + RCSe ) * ( MUM * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.2549800796812749, "obj2": 0.6953454137557016}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.28087649402390436, "obj2": 0.6058543664682147}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / ( RMSe / Min( Min( ( ( ( DS - MLU ) * Min( CS ,RRSe ) ) - CS ) ,MUC ) ,MUR ) ) ) )", "obj1": 0.8466135458167331, "obj2": 0.10574348111027049}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUR * CS ) ) ) + ( Max( ( MLU - MUM ),Min( ( ( ( Min( RMSe ,DS ) / Min( RRSe ,RCSe ) ) - CS ) - RMSe ) ,DS ) ) + ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 0.8725099601593626, "obj2": 0.08741311906804297}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6314741035856574, "obj2": 0.28618828670118024}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.9083665338645418, "obj2": 0.06740752879873581}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( ( MLU - RCSe ) / ( MUM + MLU ) ),( ( RMSe - MUM ) - ( CS - MLU ) ) ) + Max( ( ( MUR * MLU ) / MLU ),CS ) )", "obj1": 0.8784860557768924, "obj2": 0.08491774764338732}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.898406374501992, "obj2": 0.0795800670440863}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( MLU,MLU ) ,( RCSe + Min( MUC ,Min( RRSe ,RRSe ) ) ) )", "obj1": 0.9223107569721115, "obj2": 0.05817834142612967}, {"determining": "Const", "choosing": "Min( ( RCSe - MUM ) ,( Min( DS ,( ( ( Min( MUC ,RMSe ) / ( CS - MUC ) ) * ( ( ( CS * MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.30876494023904383, "obj2": 0.5737183175990827}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( ( MUC - MLU ) * MLU ),( ( MUR + Min( RRSe ,( MLU + ( ( MUR / RMSe ) / Max( ( MUM - MUR ),( MUC / MUM ) ) ) ) ) ) * MUC ) )", "obj1": 0.9023904382470119, "obj2": 0.07766182856486449}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6374501992031872, "obj2": 0.2828407657734561}, {"determining": "( ( ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) / Min( FirstVNF_CPU_Server ,BR ) ) / Min( ( FirstVNF_Mem * BR ) ,( FirstVNF_CPU * ARS ) ) ) - ( Min( Min( Const ,ACS ) ,Min( FirstVNF_RAM_Server ,ACS ) ) / ( ( FirstVNF_Mem - FirstVNF_CPU_Server ) / ( BR * ARS ) ) ) )", "choosing": "( ( ( ( DS + CS ) / ( DS / DS ) ) + ( ( DS + DS ) / ( MUM / RRSe ) ) ) * ( ( RMSe - RCSe ) / ( RCSe / CS ) ) )", "obj1": 0.38645418326693226, "obj2": 0.5259067560096429}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( CS / ( CS + DS ) ) + Min( DS ,( ( ( ( MLU - RCSe ) * RCSe ) * RCSe ) / ( MUC + ( MUC - ( ( DS / MUR ) / Min( DS ,DS ) ) ) ) ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.6454183266932271, "obj2": 0.2777458354904435}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.37649402390438247, "obj2": 0.5281052458975456}, {"determining": "Const", "choosing": "Min( ( Min( RMSe ,( ( RCSe / CS ) / CS ) ) + ( MLU / ( CS + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.2729083665338645, "obj2": 0.6085148969449606}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( MLU,MLU ) ,( RCSe + Min( MUC ,Min( RRSe ,RRSe ) ) ) )", "obj1": 0.9262948207171314, "obj2": 0.055737737676194846}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( Max( RRSe,RCSe ) - Min( MLU ,CS ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.9282868525896414, "obj2": 0.05342535141560134}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - Max( MUR,CS ) ) ) + ( ( ( DS - RCSe ) * ( DS + DS ) ) / Max( Min( CS ,RCSe ),( MLU - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RMSe,RMSe ) ),( Max( RRSe,RMSe ) - Max( MUR,CS ) ) ) + ( MLU + ( DS + MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) * ( DDR - AMS ) )", "choosing": "( ( CS + RCSe ) / Max( MUR,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN - FirstVNF_CPU ) + ( MRS - DDR ) )", "choosing": "( ( Min( RMSe ,CS ) * DS ) + ( MUR + RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server / ACS ) / ( CRS - DDR ) ) / Max( ( FirstVNF_Mem + ACS ),( FirstVNF_Mem * FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( RMSe + RRSe ) ,( DS - MLU ) )", "obj1": 1.0, "obj2": 0.0}], "7": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( MUC ,MUC ) / Max( MUC,( CS - RMSe ) ) ) * ( ( MUR / DS ) / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RRSe + RRSe ) + ( ( MUR / ( MUM - ( MLU - ( RCSe + Max( ( DS / MUM ),CS ) ) ) ) ) - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7470119521912351, "obj2": 0.18329622435482767}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Max( RMSe,MUM ) + ( DS - MUC ) ) )", "obj1": 0.6633466135458167, "obj2": 0.27402032603631965}, {"determining": "Const", "choosing": "Max( Max( DS,DS ),Min( ( ( ( MLU + DS ) + CS ) - DS ) ,( MUC * RRSe ) ) )", "obj1": 0.4641434262948207, "obj2": 0.45933461271541787}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * Min( MUC ,( DS * CS ) ) ) * ( DS / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6115537848605578, "obj2": 0.30914086920956385}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4043824701195219, "obj2": 0.4852723107738201}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.11291950894452835}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4442231075697211, "obj2": 0.46236474217671863}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5369089488131741}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / CS ) )", "obj1": 0.7768924302788844, "obj2": 0.17528701212105113}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / ( RMSe / Min( Min( ( ( ( DS - MLU ) * Min( CS ,RRSe ) ) - CS ) ,MUC ) ,MUR ) ) ) )", "obj1": 0.8466135458167331, "obj2": 0.10574348111027049}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUR * CS ) ) ) + ( Max( ( MLU - MUM ),Min( ( ( ( Min( RMSe ,DS ) / Min( RRSe ,RCSe ) ) - CS ) - RMSe ) ,DS ) ) + ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 0.8725099601593626, "obj2": 0.08741311906804297}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6314741035856574, "obj2": 0.28618828670118024}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.28087649402390436, "obj2": 0.6058543664682147}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6235059760956175, "obj2": 0.3031252180966088}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8346613545816733, "obj2": 0.10602390535000843}, {"determining": "Const", "choosing": "Min( ( RCSe - MUM ) ,( Min( DS ,( ( ( Min( MUC ,RMSe ) / ( CS - MUC ) ) * ( ( ( CS * MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.30876494023904383, "obj2": 0.5737183175990827}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( DS / CS ),( ( MLU / MUR ) * DS ) )", "obj1": 0.9203187250996016, "obj2": 0.055620471813621196}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Max( MLU,RMSe ) ),( Max( DS,RRSe ) / Min( DS ,MUM ) ) )", "obj1": 0.8824701195219123, "obj2": 0.08193850348483356}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.898406374501992, "obj2": 0.0795800670440863}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( ( MUC - MLU ) * MLU ),( ( MUR + Min( RRSe ,( MLU + ( ( MUR / RMSe ) / Max( ( MUM - MUR ),( MUC / MUM ) ) ) ) ) ) * MUC ) )", "obj1": 0.9023904382470119, "obj2": 0.07766182856486449}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,RCSe ) ) - Max( ( Min( MUR ,( MUM * MUR ) ) - MUC ),MLU ) ) )", "obj1": 0.9103585657370518, "obj2": 0.06343256283488824}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6374501992031872, "obj2": 0.2828407657734561}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.38247011952191234, "obj2": 0.5244929420138285}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( ( ( DS * Min( ( ( MUC / DS ) - ( MUM + ( MLU - DS ) ) ) ,MUM ) ) / ( RRSe * DS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.651394422310757, "obj2": 0.27583239506961554}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( CS / ( CS + DS ) ) + Min( DS ,( ( ( ( MLU - RCSe ) * RCSe ) * RCSe ) / ( MUC + ( MUC - ( ( DS / MUR ) / Min( DS ,DS ) ) ) ) ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.6454183266932271, "obj2": 0.2777458354904435}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6195219123505976, "obj2": 0.30542049971816204}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( Max( DS,MUC ) * ( MUR * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.9063745019920318, "obj2": 0.06433584751076128}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.37649402390438247, "obj2": 0.5281052458975456}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( ( MLU - RCSe ) / ( MUM + MLU ) ),( ( RMSe - MUM ) - ( CS - MLU ) ) ) + Max( ( ( MUR * MLU ) / MLU ),CS ) )", "obj1": 0.8784860557768924, "obj2": 0.08491774764338732}, {"determining": "Const", "choosing": "Min( ( Min( RMSe ,( ( RCSe / CS ) / CS ) ) + ( MLU / ( CS + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.2729083665338645, "obj2": 0.6085148969449606}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.9282868525896414, "obj2": 0.05342535141560134}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( Max( RRSe,RCSe ) - Min( MLU ,CS ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.954183266932271, "obj2": 0.04508699692730298}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( MUM + DS ) ) - ( Max( DS,MUC ) * ( MUR * MUR ) ) ) / Max( ( ( MUR + RCSe ) * ( RCSe + RCSe ) ),( ( MLU - RCSe ) - ( DS * CS ) ) ) )", "obj1": 0.9063745019920318, "obj2": 0.06433584751076128}, {"determining": "( ( Max( ACS,FirstVNF_CPU ) * ( MRS - MRS ) ) - Max( ( MDR / ARS ),( PN + CRS ) ) )", "choosing": "( ( Min( Min( MUM ,RMSe ) ,Min( CS ,RMSe ) ) - ( ( ( MUC / ( ( ( DS / RCSe ) + MUM ) * MUR ) ) / MUC ) / ( RCSe / MUR ) ) ) + ( ( Max( RCSe,RRSe ) + ( RCSe + CS ) ) + ( Min( DS ,MUM ) / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}], "8": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( MUC ,MUC ) / Max( MUC,( CS - RMSe ) ) ) * ( ( MUR / DS ) / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ACS - Max( FirstVNF_RAM_Server,ACS ) ),( FirstVNF_Mem_Server + ( ACS * ARS ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Min( DS ,RRSe ) ),( Max( DS,RRSe ) / Min( MUR ,MUM ) ) )", "obj1": 0.17928286852589642, "obj2": 0.7641876631738941}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.23107569721115537, "obj2": 0.696786224081404}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU - Min( MUC ,DS ) ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6972111553784861, "obj2": 0.2462805969177324}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( ( ( MUM * MUC ) / CS ) / RMSe ) )", "obj1": 0.5517928286852589, "obj2": 0.33708967752391117}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4043824701195219, "obj2": 0.4852723107738201}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * Min( MUC ,( DS * CS ) ) ) * ( DS / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6115537848605578, "obj2": 0.30914086920956385}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4442231075697211, "obj2": 0.46236474217671863}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04275713515714184}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( Min( Min( MUC ,RCSe ) ,( Min( MUC ,Max( RRSe,MUC ) ) * ( DS - RCSe ) ) ) + ( ( MLU - ( DS + RMSe ) ) * RCSe ) ) ,( Max( RMSe,MUM ) + ( DS - MUC ) ) )", "obj1": 0.6633466135458167, "obj2": 0.2727535555226682}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RRSe * RRSe ) + ( MUR / ( RMSe / Min( Min( ( ( ( DS - MLU ) * Min( CS ,RRSe ) ) - CS ) ,MUC ) ,MUR ) ) ) )", "obj1": 0.8466135458167331, "obj2": 0.10574348111027049}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUR * CS ) ) ) + ( Max( ( MLU - MUM ),Min( ( ( ( Min( RMSe ,DS ) / Min( RRSe ,RCSe ) ) - CS ) - RMSe ) ,DS ) ) + ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 0.8725099601593626, "obj2": 0.08741311906804297}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.11291950894452835}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.350597609561753, "obj2": 0.5421996609569972}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.28087649402390436, "obj2": 0.6058543664682147}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5369089488131741}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - Min( MLU ,MUC ) ) )", "obj1": 0.898406374501992, "obj2": 0.0795800670440863}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6314741035856574, "obj2": 0.28618828670118024}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Max( MLU,RMSe ) ),( Max( DS,RRSe ) / Min( DS ,MUM ) ) )", "obj1": 0.8824701195219123, "obj2": 0.08193850348483356}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,MUR ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.6274900398406374, "obj2": 0.2958099045920104}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,RCSe ) ) - Max( ( Min( MUR ,( MUM * MUR ) ) - MUC ),MLU ) ) )", "obj1": 0.9103585657370518, "obj2": 0.06343256283488824}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( ( ( DS * Min( ( ( MUC / DS ) - ( MUM + ( MLU - DS ) ) ) ,MUM ) ) / ( RRSe * DS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.651394422310757, "obj2": 0.27583239506961554}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6374501992031872, "obj2": 0.2828407657734561}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.38247011952191234, "obj2": 0.5244929420138285}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( CS / ( CS + DS ) ) + Min( DS ,( ( ( ( MLU - RCSe ) * RCSe ) * RCSe ) / ( MUC + ( MUC - ( ( DS / MUR ) / Min( DS ,DS ) ) ) ) ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.6454183266932271, "obj2": 0.2777458354904435}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8346613545816733, "obj2": 0.10602390535000843}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * Min( MUC ,( DS * CS ) ) ) * ( DS / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.6195219123505976, "obj2": 0.30334925459639167}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( Max( RRSe,MUR ) / MLU ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.3147410358565737, "obj2": 0.5686676594010678}, {"determining": "Const", "choosing": "Min( ( RCSe - MUM ) ,( Min( DS ,( ( ( Min( MUC ,RMSe ) / ( CS - MUC ) ) * ( ( ( CS * MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.30876494023904383, "obj2": 0.5737183175990827}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8286852589641435, "obj2": 0.10899908890883805}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.37649402390438247, "obj2": 0.5281052458975456}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( RRSe * Min( DS ,CS ) ),( MUC / ( MUR + Min( RRSe ,( MLU + ( CS - ( MLU - RCSe ) ) ) ) ) ) )", "obj1": 0.9043824701195219, "obj2": 0.07501546334637912}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( DS / CS ),( ( MLU / MUR ) * DS ) )", "obj1": 0.9203187250996016, "obj2": 0.055620471813621196}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( ( CS / ( CS + DS ) ) + Min( DS ,( ( ( ( MLU - RCSe ) * RCSe ) * RCSe ) / ( MUC + ( MUC - ( ( DS / MUR ) / Min( DS ,DS ) ) ) ) ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.6215139442231076, "obj2": 0.2988414511194474}], "9": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( MUC ,MUC ) / Max( MUC,( CS - RMSe ) ) ) * ( ( MUR / DS ) / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU - Min( MUC ,DS ) ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6972111553784861, "obj2": 0.2462805969177324}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.23107569721115537, "obj2": 0.696786224081404}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4043824701195219, "obj2": 0.4852723107738201}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4442231075697211, "obj2": 0.46236474217671863}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04111997043681024}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - ( DS * MUC ) ) + ( RRSe * ( RMSe + Max( RMSe,( Min( Min( ( DS * RCSe ) ,MUC ) ,CS ) + RRSe ) ) ) ) )", "obj1": 0.7270916334661355, "obj2": 0.19970806212567954}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.7091633466135459, "obj2": 0.22912213594636852}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.11291950894452835}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.798804780876494, "obj2": 0.14963666411885185}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUC - RCSe ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - MUM ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8446215139442231, "obj2": 0.09866306216744579}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + ( DS + RMSe ) ) ) )", "obj1": 0.8705179282868526, "obj2": 0.09758315493011732}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * Min( MUC ,( DS * CS ) ) ) * ( DS / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.28087649402390436, "obj2": 0.5987531345845117}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,RCSe ) ) - Max( ( Min( MUR ,( MUM * MUR ) ) - MUC ),MLU ) ) )", "obj1": 0.9103585657370518, "obj2": 0.06343256283488824}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( Max( ( DS + MLU ),RRSe ),Min( ( ( MUM * ( MUM / ( RCSe + ( ( RRSe + RRSe ) / ( MUR - CS ) ) ) ) ) * MLU ) ,Min( CS ,DS ) ) )", "obj1": 0.952191235059761, "obj2": 0.04592326118782874}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( DS / MUR ) ),Min( CS ,( DS + MUR ) ) ) )", "obj1": 0.34063745019920316, "obj2": 0.547787483588453}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5369089488131741}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Max( MLU,RMSe ) ),( Max( DS,RRSe ) / Min( DS ,MUM ) ) )", "obj1": 0.8824701195219123, "obj2": 0.08193850348483356}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( RRSe * Min( DS ,CS ) ),( MUC / ( MUR + Min( RRSe ,( MLU + ( CS - ( MLU - RCSe ) ) ) ) ) ) )", "obj1": 0.9043824701195219, "obj2": 0.07501546334637912}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( DS / CS ),( ( MLU / MUR ) * DS ) )", "obj1": 0.9203187250996016, "obj2": 0.055227794981127225}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * Max( Min( ( MLU - MUR ) ,DS ),CS ) ) - Max( Min( CS ,MUC ),( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ) ) )", "obj1": 0.8944223107569721, "obj2": 0.07782437584150736}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUR * CS ) ) ) + ( Max( ( MLU - MUM ),Min( ( ( ( Min( RMSe ,DS ) / Min( RRSe ,RCSe ) ) - CS ) - RMSe ) ,DS ) ) + ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 0.8725099601593626, "obj2": 0.08741311906804297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8346613545816733, "obj2": 0.10602390535000843}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.350597609561753, "obj2": 0.5421996609569972}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.38247011952191234, "obj2": 0.5244929420138285}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( Max( RRSe,MUR ) / MLU ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.3147410358565737, "obj2": 0.5686676594010678}, {"determining": "Const", "choosing": "Min( ( RCSe - MUM ) ,( Min( DS ,( ( ( Min( MUC ,RMSe ) / ( CS - MUC ) ) * ( ( ( CS * MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.30876494023904383, "obj2": 0.5737183175990827}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8286852589641435, "obj2": 0.10899908890883805}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.37649402390438247, "obj2": 0.5281052458975456}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( ( MUC - MLU ) * MLU ),( MUC / ( MUR + Min( RRSe ,( MLU + ( RRSe - MUR ) ) ) ) ) )", "obj1": 0.9282868525896414, "obj2": 0.052304283749165945}], "10": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( MUC ,MUC ) / Max( MUC,( CS - RMSe ) ) ) * ( ( MUR / DS ) / ( ( CS / MUR ) * CS ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU - Min( MUC ,DS ) ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6972111553784861, "obj2": 0.2462805969177324}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4960159362549801, "obj2": 0.4156529730121797}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.23107569721115537, "obj2": 0.696786224081404}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04048233089038966}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.24701195219123506, "obj2": 0.6471231311813037}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6853140427113679}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - ( DS * MUC ) ) + ( RRSe * ( RMSe + Max( RMSe,( Min( Min( ( DS * RCSe ) ,MUC ) ,CS ) + RRSe ) ) ) ) )", "obj1": 0.7270916334661355, "obj2": 0.19970806212567954}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.41832669322709165, "obj2": 0.4657681789289464}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4442231075697211, "obj2": 0.46236474217671863}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.11291950894452835}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4043824701195219, "obj2": 0.4852723107738201}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.798804780876494, "obj2": 0.14963666411885185}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUC - RCSe ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - MUM ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8446215139442231, "obj2": 0.09866306216744579}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + ( DS + RMSe ) ) ) )", "obj1": 0.8705179282868526, "obj2": 0.09758315493011732}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.4541832669322709, "obj2": 0.4490662463307518}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,MUR ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4063745019920319, "obj2": 0.48169404985622044}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( DS / MUR ) ),Min( CS ,( DS + MUR ) ) ) )", "obj1": 0.34063745019920316, "obj2": 0.547787483588453}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,RCSe ) ) - Max( ( Min( MUR ,( MUM * MUR ) ) - MUC ),MLU ) ) )", "obj1": 0.9103585657370518, "obj2": 0.06343256283488824}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5369089488131741}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( DS / CS ),( ( MLU / MUR ) * DS ) )", "obj1": 0.9203187250996016, "obj2": 0.055227794981127225}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * Max( Min( ( MLU - MUR ) ,DS ),CS ) ) - Max( Min( CS ,MUC ),( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ) ) )", "obj1": 0.8944223107569721, "obj2": 0.07782437584150736}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8266932270916335, "obj2": 0.10010337569538928}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9482071713147411, "obj2": 0.04733365678726651}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.350597609561753, "obj2": 0.5421996609569972}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.38247011952191234, "obj2": 0.5244929420138285}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( Min( MUM ,Min( RRSe ,RRSe ) ) * Max( MLU,RMSe ) ),( Max( DS,RRSe ) / Min( DS ,MUM ) ) )", "obj1": 0.8824701195219123, "obj2": 0.08193850348483356}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( Max( ( Min( MUC ,RMSe ) * Max( RCSe,RMSe ) ),( Max( MUM,RMSe ) - ( MUR * CS ) ) ) + ( Max( ( MLU - MUM ),Min( ( ( ( Min( RMSe ,DS ) / Min( RRSe ,RCSe ) ) - CS ) - RMSe ) ,DS ) ) + ( ( DS - RCSe ) * ( DS + DS ) ) ) )", "obj1": 0.8725099601593626, "obj2": 0.08741311906804297}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( Max( RRSe,MUR ) / MLU ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.3147410358565737, "obj2": 0.5686676594010678}], "11": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU - Min( MUC ,DS ) ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6972111553784861, "obj2": 0.2462805969177324}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Max( ( ( MUM * MLU ) + Min( CS ,( ( ( MUM + DS ) * ( ( RRSe * RCSe ) - Min( MLU ,( CS + RCSe ) ) ) ) * ( RCSe - MUM ) ) ) ),Max( ( DS + MLU ),RRSe ) )", "obj1": 0.9561752988047809, "obj2": 0.04048233089038966}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7226457835959347}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2450199203187251, "obj2": 0.6831345176327404}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.41832669322709165, "obj2": 0.4657681789289464}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.24701195219123506, "obj2": 0.6471231311813037}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - ( DS * MUC ) ) + ( RRSe * ( RMSe + Max( RMSe,( Min( Min( ( DS * RCSe ) ,MUC ) ,CS ) + RRSe ) ) ) ) )", "obj1": 0.7270916334661355, "obj2": 0.19970806212567954}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.11291950894452835}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4043824701195219, "obj2": 0.4852723107738201}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.798804780876494, "obj2": 0.14963666411885185}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUC - RCSe ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - MUM ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8446215139442231, "obj2": 0.09866306216744579}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + ( DS + RMSe ) ) ) )", "obj1": 0.8705179282868526, "obj2": 0.09758315493011732}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9482071713147411, "obj2": 0.04733365678726651}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8266932270916335, "obj2": 0.10010337569538928}, {"determining": "Const", "choosing": "( ( DS - DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( ( ( CS * Min( ( MUC * MUC ) ,RMSe ) ) / RMSe ) ,MUC ) ) )", "obj1": 0.36852589641434264, "obj2": 0.5283597647527931}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,Max( RRSe,MUC ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4063745019920319, "obj2": 0.48169404985622044}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,RCSe ) ) - Max( ( Min( MUR ,( MUM * MUR ) ) - MUC ),MLU ) ) )", "obj1": 0.9103585657370518, "obj2": 0.06343256283488824}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.35258964143426297, "obj2": 0.5366277781272627}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( DS / CS ),( ( MLU / MUR ) * DS ) )", "obj1": 0.9203187250996016, "obj2": 0.055227794981127225}, {"determining": "Const", "choosing": "Max( ( DS / CS ),( ( ( DS - MUR ) / MUR ) * DS ) )", "obj1": 0.39243027888446214, "obj2": 0.5224186560480444}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3745019920318725, "obj2": 0.5230411802684978}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( Max( RRSe,MUR ) / MLU ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.3147410358565737, "obj2": 0.5686676594010678}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,MUR ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.350597609561753, "obj2": 0.5421996609569972}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * Max( Min( ( MLU - MUR ) ,DS ),CS ) ) - Max( Min( CS ,MUC ),( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ) ) )", "obj1": 0.8944223107569721, "obj2": 0.07782437584150736}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( DS / MUR ) ),Min( CS ,( DS + MUR ) ) ) )", "obj1": 0.34063745019920316, "obj2": 0.547787483588453}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * Max( Min( ( MLU - MUR ) ,DS ),CS ) ) - Max( Min( Max( ( Max( MUM,MUM ) - RCSe ),( ( DS + MLU ) + RRSe ) ) ,MUC ),( ( ( DS / RMSe ) / DS ) - ( MUR + ( RRSe - RCSe ) ) ) ) )", "obj1": 0.9043824701195219, "obj2": 0.07137127572231826}], "12": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - RRSe ) - MLU ) + ( RMSe / ( ( MLU / MLU ) - MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU - Min( MUC ,DS ) ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6972111553784861, "obj2": 0.2462805969177324}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.3315417418826459}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( RCSe / ( ( MUR * ( DS / ( DS - Max( CS,Max( RCSe,RRSe ) ) ) ) ) * CS ) ) ,( Min( RRSe ,( ( ( DS * ( ( MUC / MUR ) * CS ) ) / ( Min( Max( RCSe,MUR ) ,( MUM / MUR ) ) * Min( MUM ,( DS * CS ) ) ) ) / ( ( RMSe * RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.49203187250996017, "obj2": 0.38071419904664994}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * Max( MUM,MUM ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.954183266932271, "obj2": 0.04023418832902799}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2450199203187251, "obj2": 0.6831345176327404}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + ( DS + RMSe ) ) ) )", "obj1": 0.8705179282868526, "obj2": 0.09758315493011732}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( CS * ( DS + ( ( Max( ( MLU + MUR ),Max( MUR,MUM ) ) / DS ) - Min( ( Min( MUC ,MUC ) - MUR ) ,( DS - Max( MUR,DS ) ) ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7155301416293386}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.24701195219123506, "obj2": 0.6471231311813037}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - ( DS * MUC ) ) + ( RRSe * ( RMSe + Max( RMSe,( Min( Min( ( DS * RCSe ) ,MUC ) ,CS ) + RRSe ) ) ) ) )", "obj1": 0.7270916334661355, "obj2": 0.19970806212567954}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( Min( ( CS * ( RMSe / RCSe ) ) ,( ( MUR / RMSe ) / MUC ) ) - RCSe ) ) ),( RRSe - MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.10894050787250778}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8346613545816733, "obj2": 0.09770903611357946}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.4262948207171315, "obj2": 0.46452468628617427}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,MUR ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.250996015936255, "obj2": 0.6318751297917062}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( DS / MUR ) ),Min( CS ,( DS + MUR ) ) ) )", "obj1": 0.34063745019920316, "obj2": 0.547787483588453}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,RCSe ) ) - Max( ( Min( MUR ,( MUM * MUR ) ) - MUC ),MLU ) ) )", "obj1": 0.9103585657370518, "obj2": 0.06343256283488824}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( DS / CS ),( ( MLU / MUR ) * DS ) )", "obj1": 0.9203187250996016, "obj2": 0.055227794981127225}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9482071713147411, "obj2": 0.04733365678726651}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * Max( Min( ( MLU - MUR ) ,DS ),CS ) ) - Max( Min( Max( ( Max( MUM,MUM ) - RCSe ),( ( DS + MLU ) + RRSe ) ) ,MUC ),( ( ( DS / RMSe ) / DS ) - ( MUR + ( RRSe - RCSe ) ) ) ) )", "obj1": 0.9043824701195219, "obj2": 0.07137127572231826}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( ( RMSe + CS ),Min( ( RRSe - ( RCSe - ( Min( MUM ,MUC ) + Min( DS ,DS ) ) ) ) ,( MUC / MUM ) ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.300796812749004, "obj2": 0.5872352184593819}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3844621513944223, "obj2": 0.5201288312163658}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.798804780876494, "obj2": 0.14963666411885185}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( Max( RRSe,MUR ) / MLU ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.3147410358565737, "obj2": 0.5686676594010678}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.3187250996015936, "obj2": 0.5635638032004205}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4123505976095618, "obj2": 0.47811244920369317}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.41832669322709165, "obj2": 0.4657681789289464}], "13": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - RRSe ) - MLU ) + ( RMSe / ( ( MLU / MLU ) - MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - RRSe ) - MLU ) + ( RMSe / ( ( MLU / MLU ) - MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( Max( ( DS - ( MUC / DS ) ),CS ) / MUR ) * RRSe ) )", "obj1": 0.6892430278884463, "obj2": 0.22395764992495}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.3315417418826459}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.954183266932271, "obj2": 0.03962690870105225}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( RCSe / ( ( MUR * ( DS / ( DS - Max( CS,Max( RCSe,RRSe ) ) ) ) ) * CS ) ) ,( Min( RRSe ,( ( ( DS * ( ( MUC / MUR ) * CS ) ) / ( Min( Max( RCSe,MUR ) ,( MUM / MUR ) ) * Min( MUM ,( DS * CS ) ) ) ) / ( ( RMSe * RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.49203187250996017, "obj2": 0.38071419904664994}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6637026997410131}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4123505976095618, "obj2": 0.47811244920369317}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + ( DS + RMSe ) ) ) )", "obj1": 0.8705179282868526, "obj2": 0.09758315493011732}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( CS * ( DS + ( ( Max( ( MLU + MUR ),Max( MUR,MUM ) ) / DS ) - Min( ( Min( MUC ,MUC ) - MUR ) ,( DS - Max( MUR,DS ) ) ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7155301416293386}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.7151394422310757, "obj2": 0.1953027308280228}, {"determining": "Const", "choosing": "( ( DS * Max( Min( ( MLU - MUR ) ,DS ),CS ) ) - Max( Min( CS ,MUC ),( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ) ) )", "obj1": 0.3665338645418327, "obj2": 0.5409614223422536}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8346613545816733, "obj2": 0.09770903611357946}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3844621513944223, "obj2": 0.5201288312163658}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.798804780876494, "obj2": 0.14963666411885185}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,( RMSe / MLU ) ) / Min( MLU ,MUC ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6281470937198289}, {"determining": "Const", "choosing": "( ( MUM / MUM ) - Max( ( ( Min( ( Max( CS,DS ) * ( MUC + ( CS + MLU ) ) ) ,CS ) / Max( ( RCSe - CS ),Max( MLU,MUR ) ) ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.24701195219123506, "obj2": 0.6447721834296779}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * Max( Min( ( MLU - MUR ) ,DS ),CS ) ) - Max( Min( Max( ( Max( MUM,MUM ) - RCSe ),( ( DS + MLU ) + RRSe ) ) ,MUC ),( ( ( DS / RMSe ) / DS ) - ( MUR + ( RRSe - RCSe ) ) ) ) )", "obj1": 0.9043824701195219, "obj2": 0.07137127572231826}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.4262948207171315, "obj2": 0.46452468628617427}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8207171314741036, "obj2": 0.10560109114023228}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "Min( ( ( RMSe + DS ) - RMSe ) ,Max( Max( ( Max( MUC,( RRSe / ( ( MLU + MUM ) / ( RRSe / RMSe ) ) ) ) - MUR ),( RRSe - MLU ) ),CS ) )", "obj1": 0.30278884462151395, "obj2": 0.5764126051504496}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,Min( MLU ,RCSe ) ) - Max( ( Min( MUR ,( MUM * MUR ) ) - MUC ),MLU ) ) )", "obj1": 0.9103585657370518, "obj2": 0.06343256283488824}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - Min( Min( MUC ,RCSe ) ,MLU ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.350597609561753, "obj2": 0.54437380215334}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Max( ( DS / CS ),( ( MLU / MUR ) * DS ) )", "obj1": 0.9203187250996016, "obj2": 0.055227794981127225}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( DS / MUR ) ),Min( CS ,( DS + MUR ) ) ) )", "obj1": 0.34063745019920316, "obj2": 0.547787483588453}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( RCSe * ( MLU - RCSe ) ) + ( RMSe / ( MUR - ( MLU / MLU ) ) ) )", "obj1": 0.9302788844621513, "obj2": 0.05160564033898928}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( ( RMSe + CS ),Min( ( RRSe - ( RCSe - ( Min( MUM ,MUC ) + Min( DS ,DS ) ) ) ) ,( MUC / MUM ) ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.300796812749004, "obj2": 0.5872352184593819}], "14": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - RRSe ) - MLU ) + ( RMSe / ( ( MLU / MLU ) - MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + RCSe ) + MUC ) ) ,RMSe ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6235059760956175, "obj2": 0.23966653770527818}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.3315417418826459}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( Max( ( DS - ( MUC / DS ) ),CS ) / MUR ) * RRSe ) )", "obj1": 0.6892430278884463, "obj2": 0.22395764992495}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( RCSe / ( ( MUR * ( DS / ( DS - Max( CS,Max( RCSe,RRSe ) ) ) ) ) * CS ) ) ,( Min( RRSe ,( ( ( DS * ( ( MUC / MUR ) * CS ) ) / ( Min( Max( RCSe,MUR ) ,( MUM / MUR ) ) * Min( MUM ,( DS * CS ) ) ) ) / ( ( RMSe * RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.49203187250996017, "obj2": 0.38071419904664994}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + ( DS + RMSe ) ) ) )", "obj1": 0.8705179282868526, "obj2": 0.09758315493011732}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( CS * ( DS + ( ( Max( ( MLU + MUR ),Max( MUR,MUM ) ) / DS ) - Min( ( Min( MUC ,MUC ) - MUR ) ,( DS - Max( MUR,DS ) ) ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7155301416293386}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8346613545816733, "obj2": 0.09770903611357946}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2290836653386454, "obj2": 0.6658226463073377}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.3107569721115538, "obj2": 0.5713972882046231}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3844621513944223, "obj2": 0.5201288312163658}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.7151394422310757, "obj2": 0.1953027308280228}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.798804780876494, "obj2": 0.14963666411885185}, {"determining": "Const", "choosing": "( Min( MLU ,Min( Max( MUC,Max( CS,( RMSe * ( MLU - Max( CS,MUM ) ) ) ) ) ,CS ) ) - Max( ( ( RCSe / DS ) / Max( MUM,DS ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3565737051792829, "obj2": 0.5245275859493852}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / Min( MUM ,Min( DS ,DS ) ) ) / ( MUR + ( RRSe - RCSe ) ) ),( RRSe + MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.4982744794113643}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,( RMSe / MLU ) ) / Min( MLU ,MUC ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6281470937198289}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( MUR + DS ) * ( MUC * ( RMSe + MUM ) ) ) ,CS ) / DS ) / ( MUR / ( RRSe - Min( ( RMSe * ( MLU + MUC ) ) ,Min( Min( MUR ,MUM ) ,( RCSe / DS ) ) ) ) ) ),( RRSe + MUC ) ) )", "obj1": 0.26294820717131473, "obj2": 0.6385949076056789}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4103585657370518, "obj2": 0.4920530157540192}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8207171314741036, "obj2": 0.10560109114023228}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6637026997410131}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2450199203187251, "obj2": 0.6483536992106734}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / DS ) / ( DS / MUR ) ),Min( CS ,( DS + MUR ) ) ) )", "obj1": 0.34063745019920316, "obj2": 0.547787483588453}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) / MUC ) ) ,CS ) / DS ) / Min( Max( ( RMSe - RRSe ),RCSe ) ,RRSe ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43227091633466136, "obj2": 0.46297694354880625}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( ( RMSe + CS ),Min( ( RRSe - ( RCSe - ( Min( MUM ,MUC ) + Min( DS ,DS ) ) ) ) ,( MUC / MUM ) ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.300796812749004, "obj2": 0.5872352184593819}, {"determining": "Const", "choosing": "( ( MUM / MUM ) - Max( ( ( Min( ( Max( CS,DS ) * ( MUC + ( CS + MLU ) ) ) ,CS ) / Max( ( RCSe - CS ),Max( MLU,MUR ) ) ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.24701195219123506, "obj2": 0.6447721834296779}], "15": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.3315417418826459}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( RCSe / ( ( MUR * ( DS / ( DS - Max( CS,Max( RCSe,RRSe ) ) ) ) ) * CS ) ) ,( Min( RRSe ,( ( ( DS * ( ( MUC / MUR ) * CS ) ) / ( Min( Max( RCSe,MUR ) ,( MUM / MUR ) ) * Min( MUM ,( DS * CS ) ) ) ) / ( ( RMSe * RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.49203187250996017, "obj2": 0.38071419904664994}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6772908366533864, "obj2": 0.22949765203517747}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU + DS ) * ( ( CS + MLU ) + ( MUC / RMSe ) ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8366533864541833, "obj2": 0.09590813395907216}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( CS * ( DS + ( ( Max( ( MLU + MUR ),Max( MUR,MUM ) ) / DS ) - Min( ( Min( MUC ,MUC ) - MUR ) ,( DS - Max( MUR,DS ) ) ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7155301416293386}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + RCSe ) + MUC ) ) ,RMSe ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6235059760956175, "obj2": 0.23966653770527818}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / Max( Max( ( DS - RMSe ),Min( DS ,( RCSe * ( RRSe * RMSe ) ) ) ),MUR ) ) - Max( ( Max( MUR,( Min( ( MLU + ( RRSe * RRSe ) ) ,( MLU / Min( CS ,MUR ) ) ) + MUM ) ) - RCSe ),( RRSe / MUC ) ) )", "obj1": 0.6254980079681275, "obj2": 0.23764168574267705}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.3107569721115538, "obj2": 0.5713972882046231}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.40836653386454186, "obj2": 0.4746001898690894}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.7151394422310757, "obj2": 0.1953027308280228}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / Min( MUM ,Min( DS ,DS ) ) ) / ( MUR + ( RRSe - RCSe ) ) ),( RRSe + MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.4982744794113643}, {"determining": "Const", "choosing": "( Min( MLU ,Min( Max( MUC,Max( CS,( RMSe * ( MLU - Max( CS,MUM ) ) ) ) ) ,CS ) ) - Max( ( ( RCSe / DS ) / Max( MUM,DS ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3565737051792829, "obj2": 0.5245275859493852}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( Max( ( DS - ( MUC / DS ) ),CS ) / MUR ) * RRSe ) )", "obj1": 0.6892430278884463, "obj2": 0.22395764992495}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7948207171314741, "obj2": 0.1423532139087349}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "Const", "choosing": "( ( DS / ( Min( ( ( ( ( MUM - MUC ) * ( MLU - DS ) ) * ( MUC - MLU ) ) - RCSe ) ,MUR ) * Max( RRSe,MUM ) ) ) - Max( ( ( Min( ( ( MLU + Max( CS,MUR ) ) * ( ( MLU / DS ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUC ,RRSe ) ) )", "obj1": 0.4203187250996016, "obj2": 0.4633619524518656}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2290836653386454, "obj2": 0.6658226463073377}, {"determining": "Const", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 0.2151394422310757, "obj2": 0.6767728035423639}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( ( RMSe + CS ),Min( ( RRSe - ( RCSe - ( Min( MUM ,MUC ) + Min( DS ,DS ) ) ) ) ,( MUC / MUM ) ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.300796812749004, "obj2": 0.5872352184593819}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3466135458167331, "obj2": 0.5451132269594685}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,( RMSe / MLU ) ) / Min( MLU ,MUC ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6281470937198289}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( MUR + DS ) * ( MUC * ( RMSe + MUM ) ) ) ,CS ) / DS ) / ( MUR / ( RRSe - Min( ( RMSe * ( MLU + MUC ) ) ,Min( Min( MUR ,MUM ) ,( RCSe / DS ) ) ) ) ) ),( RRSe + MUC ) ) )", "obj1": 0.26294820717131473, "obj2": 0.6385949076056789}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "Const", "choosing": "( ( Max( ( Min( DS ,( ( DS * RCSe ) / MUC ) ) * RCSe ),RMSe ) / ( ( Max( DS,Min( MUC ,Min( MLU ,( RCSe / MUC ) ) ) ) + ( RMSe - MUM ) ) - RCSe ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS - MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4302788844621514, "obj2": 0.45236338577747637}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6539132825342737}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5201428359924911}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}], "16": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.3315417418826459}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( Min( ( RCSe / DS ) ,CS ) / DS ) - Max( ( ( Min( ( ( MUR + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6772908366533864, "obj2": 0.21894361573134508}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5059760956175299, "obj2": 0.3403803592849913}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( RCSe / ( ( MUR * ( DS / ( DS - Max( CS,Max( RCSe,RRSe ) ) ) ) ) * CS ) ) ,( Min( RRSe ,( ( ( DS * ( ( MUC / MUR ) * CS ) ) / ( Min( Max( RCSe,MUR ) ,( MUM / MUR ) ) * Min( MUM ,( DS * CS ) ) ) ) / ( ( RMSe * RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.49203187250996017, "obj2": 0.38071419904664994}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU + DS ) * ( ( CS + MLU ) + ( MUC / RMSe ) ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8366533864541833, "obj2": 0.09590813395907216}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / Max( Max( ( DS - RMSe ),Min( DS ,( RCSe * ( RRSe * RMSe ) ) ) ),MUR ) ) - Max( ( Max( MUR,( Min( ( MLU + ( RRSe * RRSe ) ) ,( MLU / Min( CS ,MUR ) ) ) + MUM ) ) - RCSe ),( RRSe / MUC ) ) )", "obj1": 0.6254980079681275, "obj2": 0.23764168574267705}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( CS * ( DS + ( ( Max( ( MLU + MUR ),Max( MUR,MUM ) ) / DS ) - Min( ( Min( MUC ,MUC ) - MUR ) ,( DS - Max( MUR,DS ) ) ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7155301416293386}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + RCSe ) + MUC ) ) ,RMSe ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6235059760956175, "obj2": 0.23966653770527818}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.40836653386454186, "obj2": 0.4746001898690894}, {"determining": "Const", "choosing": "( ( DS / ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) ) - ( DS * RCSe ) )", "obj1": 0.3346613545816733, "obj2": 0.5433796200186853}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / Min( MUM ,Min( DS ,DS ) ) ) / ( MUR + ( RRSe - RCSe ) ) ),( RRSe + MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.4982744794113643}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.7151394422310757, "obj2": 0.1953027308280228}, {"determining": "Const", "choosing": "( Min( MLU ,Min( Max( MUC,Max( CS,( RMSe * ( MLU - Max( CS,MUM ) ) ) ) ) ,CS ) ) - Max( ( ( RCSe / DS ) / Max( MUM,DS ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3565737051792829, "obj2": 0.5245275859493852}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( MUR + DS ) * ( MUC * ( RMSe + MUM ) ) ) ,CS ) / DS ) / ( MUR / ( RRSe - Min( ( RMSe * ( MLU + MUC ) ) ,Min( Min( MUR ,MUM ) ,( RCSe / DS ) ) ) ) ) ),( RRSe + MUC ) ) )", "obj1": 0.26294820717131473, "obj2": 0.6385949076056789}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( Max( MUR,RCSe ) ,( MUR / MUR ) ) * ( ( MUM * CS ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / DS ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.27091633466135456, "obj2": 0.6102922154124244}, {"determining": "Const", "choosing": "( ( DS / ( Min( ( ( ( ( MUM - MUC ) * ( MLU - DS ) ) * ( MUC - MLU ) ) - RCSe ) ,MUR ) * Max( RRSe,MUM ) ) ) - Max( ( ( Min( ( ( MLU + Max( CS,MUR ) ) * ( ( MLU / DS ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUC ,RRSe ) ) )", "obj1": 0.4203187250996016, "obj2": 0.4633619524518656}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2290836653386454, "obj2": 0.6658226463073377}, {"determining": "Const", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 0.2151394422310757, "obj2": 0.6767728035423639}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2450199203187251, "obj2": 0.6514507650254756}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.3107569721115538, "obj2": 0.5713972882046231}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.10473188418341992}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5201428359924911}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( ( ( MUC - MUR ) / ( ( CS - Max( MLU,DS ) ) * ( MUM * CS ) ) ) * CS ) )", "obj1": 0.2948207171314741, "obj2": 0.5760239058198966}, {"determining": "Const", "choosing": "Min( ( MUM * RCSe ) ,( Max( DS,( RMSe / MLU ) ) / Min( MLU ,MUC ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6281470937198289}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( MUR - Max( DS,MUC ) ) + ( RRSe * RRSe ) )", "obj1": 0.7450199203187251, "obj2": 0.16865465687703865}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7948207171314741, "obj2": 0.1423532139087349}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6539132825342737}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}], "17": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4900398406374502, "obj2": 0.34011379592652524}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS - MUR ) * CS ) ) * ( Min( Max( MUR,RCSe ) ,( MUR / DS ) ) * Min( MUM ,( MUM / RCSe ) ) ) ) / ( Min( RMSe ,RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.30722869084172294}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( Min( ( RCSe / DS ) ,CS ) / DS ) - Max( ( ( Min( ( ( MUR + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6772908366533864, "obj2": 0.21894361573134508}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / Max( Max( ( DS - RMSe ),Min( DS ,( RCSe * ( RRSe * RMSe ) ) ) ),MUR ) ) - Max( ( Max( MUR,( Min( ( MLU + ( RRSe * RRSe ) ) ,( MLU / Min( CS ,MUR ) ) ) + MUM ) ) - RCSe ),( RRSe / MUC ) ) )", "obj1": 0.6254980079681275, "obj2": 0.23764168574267705}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS / MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( ( CS * MUC ) + Min( RRSe ,RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8426294820717132, "obj2": 0.09485357205772353}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + RCSe ) + MUC ) ) ,RMSe ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6235059760956175, "obj2": 0.23966653770527818}, {"determining": "Const", "choosing": "Min( ( ( MUR - ( MLU * DS ) ) / ( Min( CS ,( RRSe / Min( ( Min( MUM ,CS ) * CS ) ,( ( RMSe - RCSe ) / ( CS - RMSe ) ) ) ) ) * ( ( MLU / ( ( CS * ( MUR + DS ) ) - MUR ) ) - RCSe ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - RMSe ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6091998508990777}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( RMSe + RRSe ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( MUR,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.703187250996016, "obj2": 0.2045528754180706}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.40836653386454186, "obj2": 0.4746001898690894}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.7151394422310757, "obj2": 0.1953027308280228}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.3107569721115538, "obj2": 0.5713972882046231}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / Min( MUM ,Min( DS ,DS ) ) ) / ( MUR + ( RRSe - RCSe ) ) ),( RRSe + MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.4982744794113643}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( CS * ( DS + ( ( Max( ( MLU + MUR ),Max( MUR,MUM ) ) / DS ) - Min( ( Min( MUC ,MUC ) - MUR ) ,( DS - Max( MUR,DS ) ) ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7155301416293386}, {"determining": "Const", "choosing": "( Min( ( CS * DS ) ,Min( MUM ,RMSe ) ) - ( ( ( MUR / ( Min( ( Max( MUR,CS ) - ( MUM / MUM ) ) ,MLU ) - RCSe ) ) / ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,RRSe ) / DS ) ) - Min( RRSe ,MUC ) ) )", "obj1": 0.26095617529880477, "obj2": 0.638086558279349}, {"determining": "Const", "choosing": "( ( DS / ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) ) - ( DS * RCSe ) )", "obj1": 0.3346613545816733, "obj2": 0.5433796200186853}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5201428359924911}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( MLU - RMSe ) ) ) )", "obj1": 0.7948207171314741, "obj2": 0.1423532139087349}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "Const", "choosing": "( ( DS / ( Min( ( ( ( ( MUM - MUC ) * ( MLU - DS ) ) * ( MUC - MLU ) ) - RCSe ) ,MUR ) * Max( RRSe,MUM ) ) ) - Max( ( ( Min( ( ( MLU + Max( CS,MUR ) ) * ( ( MLU / DS ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUC ,RRSe ) ) )", "obj1": 0.4203187250996016, "obj2": 0.4633619524518656}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2290836653386454, "obj2": 0.6658226463073377}, {"determining": "Const", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 0.2151394422310757, "obj2": 0.6767728035423639}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( ( ( MUC - MUR ) / ( ( CS - Max( MLU,DS ) ) * ( MUM * CS ) ) ) * CS ) )", "obj1": 0.2948207171314741, "obj2": 0.5760239058198966}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( RMSe,MLU ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) + ( MUC + RCSe ) ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.18725099601593626, "obj2": 0.734539386467293}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3545816733067729, "obj2": 0.5301744980171628}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8227091633466136, "obj2": 0.10473188418341992}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4302788844621514, "obj2": 0.45236338577747637}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6539132825342737}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( MLU + DS ) * ( ( CS + MLU ) + ( MUC / RMSe ) ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8366533864541833, "obj2": 0.09590813395907216}, {"determining": "Const", "choosing": "( Min( MLU ,Min( Max( MUC,Max( CS,( RMSe * ( MLU - Max( CS,MUM ) ) ) ) ) ,CS ) ) - Max( ( ( RCSe / DS ) / Max( MUM,DS ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3565737051792829, "obj2": 0.5245275859493852}], "18": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.17729083665338646, "obj2": 0.7371711268442533}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4900398406374502, "obj2": 0.34011379592652524}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS - MUR ) * CS ) ) * ( Min( Max( MUR,RCSe ) ,( MUR / DS ) ) * Min( MUM ,( MUM / RCSe ) ) ) ) / ( Min( RMSe ,RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.30722869084172294}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( Min( ( RCSe / DS ) ,CS ) / DS ) - Max( ( ( Min( ( ( MUR + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6772908366533864, "obj2": 0.21894361573134508}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "Const", "choosing": "( Min( ( CS * DS ) ,Min( MUM ,RMSe ) ) - ( ( ( MUR / ( Min( ( Max( MUR,CS ) - ( MUM / MUM ) ) ,MLU ) - RCSe ) ) / ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,RRSe ) / DS ) ) - Min( RRSe ,MUC ) ) )", "obj1": 0.26095617529880477, "obj2": 0.638086558279349}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / Max( Max( ( DS - RMSe ),Min( DS ,( RCSe * ( RRSe * RMSe ) ) ) ),MUR ) ) - Max( ( Max( MUR,( Min( ( MLU + ( RRSe * RRSe ) ) ,( MLU / Min( CS ,MUR ) ) ) + MUM ) ) - RCSe ),( RRSe / MUC ) ) )", "obj1": 0.6254980079681275, "obj2": 0.23764168574267705}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS / MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( ( CS * MUC ) + Min( RRSe ,RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8426294820717132, "obj2": 0.09485357205772353}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( Max( ( ( ( ( DS + MUC ) / ( RRSe * RMSe ) ) + Max( ( CS + MLU ),( RRSe * MUC ) ) ) - Max( Min( ( RRSe - MUR ) ,( RCSe + MLU ) ),( ( RMSe - MUC ) / ( MUC * RMSe ) ) ) ),Max( Min( ( ( MUR + MUM ) * ( MUC + MUR ) ) ,( Max( RCSe,CS ) - ( MUC + CS ) ) ),Max( Min( ( MUC * DS ) ,( MUC / RRSe ) ),( Max( CS,MLU ) - ( RRSe * MUC ) ) ) ) ) / ( ( ( ( ( RMSe * RRSe ) + Min( MUR ,RMSe ) ) * Min( ( MUR * MLU ) ,( CS - DS ) ) ) - ( ( Min( RRSe ,CS ) - ( MUR - RRSe ) ) * ( ( RCSe * DS ) * Min( MUM ,RRSe ) ) ) ) + Min( Max( ( ( MLU + RRSe ) - ( MLU + CS ) ),Max( ( RRSe * MUM ),Min( MUM ,MLU ) ) ) ,( ( Max( MLU,RRSe ) - Min( RMSe ,MUM ) ) + Min( ( CS - DS ) ,Min( RMSe ,MLU ) ) ) ) ) ) / ( Max( ( Min( ( ( MLU - CS ) * ( MUC * DS ) ) ,( ( MUR - RRSe ) / ( MLU * MUC ) ) ) + ( ( ( MUM - MUC ) - ( MUM / MUM ) ) * Min( ( CS / DS ) ,Min( MLU ,RRSe ) ) ) ),( ( ( ( RCSe - CS ) + Max( CS,MUC ) ) - ( ( MLU + MUM ) + ( CS + MUM ) ) ) + ( Max( ( MUR * RCSe ),( RMSe * DS ) ) - Min( Max( MUC,MLU ) ,Min( MLU ,MUC ) ) ) ) ) * ( ( ( ( ( DS - MLU ) + ( MLU + RMSe ) ) - ( ( RCSe - MLU ) + ( RCSe - RMSe ) ) ) / ( ( Min( RRSe ,RMSe ) / ( RRSe / RCSe ) ) / ( ( MUM * MLU ) + ( DS - MUM ) ) ) ) - ( Max( Min( Min( MLU ,CS ) ,( RCSe * MUM ) ),( Min( MLU ,DS ) + Min( RCSe ,MUR ) ) ) + ( ( ( MLU * RRSe ) / Min( MUR ,DS ) ) * ( ( MUM / MUC ) * Min( DS ,CS ) ) ) ) ) ) ) * Max( ( ( Min( Max( ( ( DS - DS ) / ( MUC * RCSe ) ),( ( CS * DS ) + ( MUM * RMSe ) ) ) ,Max( ( Min( MUM ,MUM ) * ( RCSe - RCSe ) ),Min( ( MUM / MUR ) ,( DS * RMSe ) ) ) ) / ( ( ( Min( DS ,CS ) + ( CS + RMSe ) ) / Min( Max( DS,MUM ) ,( MUC * RMSe ) ) ) - ( Max( ( MUR - RRSe ),Min( DS ,RCSe ) ) - ( ( CS - RRSe ) - Max( RRSe,RRSe ) ) ) ) ) - ( ( ( Max( ( MUC / RMSe ),Max( MUM,RRSe ) ) / ( Min( MUR ,DS ) - Min( MLU ,RRSe ) ) ) / ( ( ( MUC + MUM ) / ( MUM - RRSe ) ) / ( ( RCSe + MLU ) * Min( RRSe ,DS ) ) ) ) - ( Max( ( ( MLU * DS ) * ( RCSe / RRSe ) ),Max( ( CS * MUC ),( MUC * CS ) ) ) * ( ( ( MUR / RMSe ) - ( CS + MUR ) ) / Max( Min( MLU ,CS ),Min( MUM ,CS ) ) ) ) ) ),( ( ( ( ( ( DS + DS ) * ( CS / CS ) ) / ( ( MUR * MUR ) + ( RMSe + MUR ) ) ) * ( ( Min( RCSe ,CS ) / ( MUR / RMSe ) ) * ( ( CS * DS ) - Min( RRSe ,DS ) ) ) ) + ( ( Max( Max( MUC,RRSe ),( RCSe / DS ) ) * Max( Max( RRSe,CS ),Min( MUR ,MUC ) ) ) * ( Max( Min( RRSe ,MUC ),( MUC - RCSe ) ) / ( ( MLU - MUC ) + Min( CS ,RCSe ) ) ) ) ) / Min( Min( ( ( ( CS + MUM ) / ( RRSe / MUR ) ) / ( Min( RRSe ,MUC ) + ( RRSe - CS ) ) ) ,Min( Max( ( MUM / MUM ),Max( MUR,DS ) ) ,( Min( CS ,RMSe ) / Min( MUR ,RCSe ) ) ) ) ,( Max( ( Min( MUR ,CS ) * Max( CS,RCSe ) ),( ( CS - RMSe ) / ( RMSe / DS ) ) ) + ( Min( Min( MUC ,CS ) ,( MUC / DS ) ) / ( ( MLU - DS ) + ( RCSe * CS ) ) ) ) ) ) ) )", "obj1": 0.7151394422310757, "obj2": 0.1953027308280228}, {"determining": "Const", "choosing": "Min( ( ( MUR - ( MLU * DS ) ) / ( Min( CS ,( RRSe / Min( ( Min( MUM ,CS ) * CS ) ,( ( RMSe - RCSe ) / ( CS - RMSe ) ) ) ) ) * ( ( MLU / ( ( CS * ( MUR + DS ) ) - MUR ) ) - RCSe ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - RMSe ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6091998508990777}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( ( RRSe - RRSe ) + MUC ) * ( CS + DS ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6892430278884463, "obj2": 0.19641574161611372}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.40836653386454186, "obj2": 0.4746001898690894}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6539132825342737}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.3107569721115538, "obj2": 0.5713972882046231}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / Min( MUM ,Min( DS ,DS ) ) ) / ( MUR + ( RRSe - RCSe ) ) ),( RRSe + MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.4982744794113643}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "Const", "choosing": "( ( DS / ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) ) - ( DS * RCSe ) )", "obj1": 0.3346613545816733, "obj2": 0.5433796200186853}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( Min( Min( ( ( Max( DS,CS ) - ( MUM / MLU ) ) * ( Max( RCSe,RRSe ) * Max( RRSe,DS ) ) ) ,( Max( ( RRSe - CS ),( RCSe / RMSe ) ) / Min( Max( RCSe,DS ) ,( MUM - CS ) ) ) ) ,( Max( ( ( RMSe + RRSe ) * ( MUM * RRSe ) ),( Min( MLU ,CS ) - Min( MUM ,MLU ) ) ) * Max( ( ( MUC / DS ) + ( RCSe * RMSe ) ),Max( Max( MUR,MUR ),Max( RCSe,DS ) ) ) ) ) + ( Max( ( Min( Max( RMSe,RRSe ) ,( MUR * DS ) ) / Max( Max( MLU,DS ),( RCSe * MUC ) ) ),Max( ( Min( MUM ,MLU ) / ( MUM * DS ) ),Min( ( RMSe / RRSe ) ,( MUR / RRSe ) ) ) ) / ( ( ( ( DS + CS ) - Max( CS,MUR ) ) + ( ( MUC * CS ) - ( RRSe - MUC ) ) ) + ( Min( ( RMSe - RMSe ) ,Max( CS,RRSe ) ) / ( Max( RMSe,RMSe ) + ( RMSe * MUR ) ) ) ) ) ),( ( ( ( ( Max( MUR,MUM ) * Max( RMSe,CS ) ) / ( ( RRSe * MUM ) * ( DS - RMSe ) ) ) + ( ( ( RRSe - RCSe ) / ( MUR * RCSe ) ) / ( Min( RRSe ,RMSe ) - Max( MUC,DS ) ) ) ) - ( ( ( ( MLU / MUR ) * ( RCSe * DS ) ) / ( Max( DS,MUM ) - ( MUM - RCSe ) ) ) * Max( Max( ( MUC + RCSe ),( MUM * CS ) ),( ( DS - MUM ) / ( RCSe / CS ) ) ) ) ) + ( Max( Min( ( Max( MUR,CS ) - ( MLU + MUC ) ) ,( ( MUC + RMSe ) - Min( RRSe ,DS ) ) ),( ( Max( RCSe,MLU ) - Max( RRSe,MUM ) ) / ( ( RMSe * DS ) * ( MUR / MLU ) ) ) ) * ( Min( ( ( MUC / DS ) / Min( RCSe ,RCSe ) ) ,Max( Max( DS,MUM ),( MUC * MUM ) ) ) + ( ( Min( RRSe ,MUM ) * ( RRSe / MUR ) ) / ( ( MUM - RRSe ) * ( RMSe + MUM ) ) ) ) ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - DS ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.6115537848605578, "obj2": 0.25081995387664247}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5201428359924911}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.7948207171314741, "obj2": 0.141677045745748}, {"determining": "Const", "choosing": "( ( DS / ( Min( ( ( ( ( MUM - MUC ) * ( MLU - DS ) ) * ( MUC - MLU ) ) - RCSe ) ,MUR ) * Max( RRSe,MUM ) ) ) - Max( ( ( Min( ( ( MLU + Max( CS,MUR ) ) * ( ( MLU / DS ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUC ,RRSe ) ) )", "obj1": 0.4203187250996016, "obj2": 0.4633619524518656}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( ( ( MUC - MUR ) / ( ( CS - Max( MLU,DS ) ) * ( MUM * CS ) ) ) * CS ) )", "obj1": 0.2948207171314741, "obj2": 0.5760239058198966}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3545816733067729, "obj2": 0.5301744980171628}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5956175298804781, "obj2": 0.2603462625488814}, {"determining": "Const", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 0.2151394422310757, "obj2": 0.6767728035423639}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4302788844621514, "obj2": 0.45236338577747637}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( CS * ( DS + ( ( Max( ( MLU + MUR ),Max( MUR,MUM ) ) / DS ) - Min( ( Min( MUC ,MUC ) - MUR ) ,( DS - Max( MUR,DS ) ) ) ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.19721115537848605, "obj2": 0.7155301416293386}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( RMSe,MLU ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) + ( MUC + RCSe ) ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.18725099601593626, "obj2": 0.734539386467293}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.1952191235059761, "obj2": 0.7233083405200669}, {"determining": "Const", "choosing": "( Min( MLU ,Min( Max( MUC,Max( CS,( RMSe * ( MLU - Max( CS,MUM ) ) ) ) ) ,CS ) ) - Max( ( ( RCSe / DS ) / Max( MUM,DS ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3565737051792829, "obj2": 0.5245275859493852}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + RCSe ) + MUC ) ) ,RMSe ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6235059760956175, "obj2": 0.23966653770527818}], "19": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.16533864541832669, "obj2": 0.7409552153889806}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4900398406374502, "obj2": 0.34011379592652524}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( RRSe,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( MUR / ( ( RRSe - CS ) / MLU ) ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6733067729083665, "obj2": 0.2100325882431656}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6539132825342737}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS / MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( ( CS * MUC ) + Min( RRSe ,RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8426294820717132, "obj2": 0.09485357205772353}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / Max( Max( ( DS - RMSe ),Min( DS ,( RCSe * ( RRSe * RMSe ) ) ) ),MUR ) ) - Max( ( Max( MUR,( Min( ( MLU + ( RRSe * RRSe ) ) ,( MLU / Min( CS ,MUR ) ) ) + MUM ) ) - RCSe ),( RRSe / MUC ) ) )", "obj1": 0.6254980079681275, "obj2": 0.23764168574267705}, {"determining": "Const", "choosing": "( Min( ( CS * DS ) ,Min( MUM ,RMSe ) ) - ( ( ( MUR / ( Min( ( Max( MUR,CS ) - ( MUM / MUM ) ) ,MLU ) - RCSe ) ) / ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,RRSe ) / DS ) ) - Min( RRSe ,MUC ) ) )", "obj1": 0.26095617529880477, "obj2": 0.638086558279349}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( ( ( Max( MUM,( MUC - ( MUM + CS ) ) ) + ( ( MUM - Min( MUC ,MUR ) ) / ( MUM + Min( MUM ,MUC ) ) ) ) + Min( MLU ,MLU ) ) + Max( Max( ( DS * Min( ( DS * RCSe ) ,( MUM - DS ) ) ),( ( Min( MUC ,DS ) * DS ) - ( MUM + MUR ) ) ),RRSe ) ) ) )", "obj1": 0.2948207171314741, "obj2": 0.5710963424040865}, {"determining": "Const", "choosing": "Min( ( Min( ( MLU / MUR ) ,( RRSe - ( RCSe / RMSe ) ) ) + ( MLU / ( Max( ( RMSe * MLU ),MUC ) + DS ) ) ) ,( ( RRSe / RMSe ) - RMSe ) )", "obj1": 0.33266932270916333, "obj2": 0.5577992426271741}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * ( RRSe - Min( MUC ,( RMSe - ( MUM - CS ) ) ) ) ) ) / DS ) - Max( ( Max( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ),DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6952191235059761, "obj2": 0.19339938529794645}, {"determining": "Const", "choosing": "Min( ( ( MUR - ( MLU * DS ) ) / ( Min( CS ,( RRSe / Min( ( Min( MUM ,CS ) * CS ) ,( ( RMSe - RCSe ) / ( CS - RMSe ) ) ) ) ) * ( ( MLU / ( ( CS * ( MUR + DS ) ) - MUR ) ) - RCSe ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - RMSe ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6091998508990777}, {"determining": "Const", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 0.2151394422310757, "obj2": 0.6767728035423639}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.40836653386454186, "obj2": 0.4746001898690894}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( ( RCSe / Min( MUM ,Min( DS ,DS ) ) ) / ( MUR + ( RRSe - RCSe ) ) ),( RRSe + MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.4982744794113643}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - ( ( RRSe * Min( ( MUR / ( RMSe / ( ( CS + MUM ) * Min( MLU ,MUM ) ) ) ) ,Max( RRSe,MUM ) ) ) - ( RMSe - ( RMSe + ( ( ( DS * ( MLU / RCSe ) ) / RCSe ) - RRSe ) ) ) ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( CS - ( Max( MUC,( CS / Max( Min( MUC ,RCSe ),MUC ) ) ) - RRSe ) ) ) )", "obj1": 0.5239043824701195, "obj2": 0.33364196244888583}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS - MUR ) * CS ) ) * ( Min( Max( MUR,RCSe ) ,( MUR / DS ) ) * Min( MUM ,( MUM / RCSe ) ) ) ) / ( Min( RMSe ,RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.30722869084172294}, {"determining": "Const", "choosing": "( ( DS / ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) ) - ( DS * RCSe ) )", "obj1": 0.3346613545816733, "obj2": 0.5433796200186853}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5201428359924911}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4601593625498008, "obj2": 0.42827456043999507}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( ( CS / DS ) + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RCSe - RRSe ) ) ),Min( RRSe ,( ( ( MUR - Min( RCSe ,RMSe ) ) - MLU ) * MUR ) ) ) )", "obj1": 0.7888446215139442, "obj2": 0.1597812366748131}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( RMSe / ( RRSe / RMSe ) ) ,( RCSe + ( RMSe - RMSe ) ) )", "obj1": 0.5378486055776892, "obj2": 0.3335454454046088}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.7948207171314741, "obj2": 0.141677045745748}, {"determining": "Const", "choosing": "( ( DS / ( Min( ( ( ( ( MUM - MUC ) * ( MLU - DS ) ) * ( MUC - MLU ) ) - RCSe ) ,MUR ) * Max( RRSe,MUM ) ) ) - Max( ( ( Min( ( ( MLU + Max( CS,MUR ) ) * ( ( MLU / DS ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUC ,RRSe ) ) )", "obj1": 0.4203187250996016, "obj2": 0.4633619524518656}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3545816733067729, "obj2": 0.5301744980171628}, {"determining": "Const", "choosing": "( ( DS / Min( RRSe ,MUM ) ) - Max( Max( CS,( CS - MUM ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.43824701195219123, "obj2": 0.4467810478881472}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( Min( Min( ( ( Max( DS,CS ) - ( MUM / MLU ) ) * ( Max( RCSe,RRSe ) * Max( RRSe,DS ) ) ) ,( Max( ( RRSe - CS ),( RCSe / RMSe ) ) / Min( Max( RCSe,DS ) ,( MUM - CS ) ) ) ) ,( Max( ( ( RMSe + RRSe ) * ( MUM * RRSe ) ),( Min( MLU ,CS ) - Min( MUM ,MLU ) ) ) * Max( ( ( MUC / DS ) + ( RCSe * RMSe ) ),Max( Max( MUR,MUR ),Max( RCSe,DS ) ) ) ) ) + ( Max( ( Min( Max( RMSe,RRSe ) ,( MUR * DS ) ) / Max( Max( MLU,DS ),( RCSe * MUC ) ) ),Max( ( Min( MUM ,MLU ) / ( MUM * DS ) ),Min( ( RMSe / RRSe ) ,( MUR / RRSe ) ) ) ) / ( ( ( ( DS + CS ) - Max( CS,MUR ) ) + ( ( MUC * CS ) - ( RRSe - MUC ) ) ) + ( Min( ( RMSe - RMSe ) ,Max( CS,RRSe ) ) / ( Max( RMSe,RMSe ) + ( RMSe * MUR ) ) ) ) ) ),( ( ( ( ( Max( MUR,MUM ) * Max( RMSe,CS ) ) / ( ( RRSe * MUM ) * ( DS - RMSe ) ) ) + ( ( ( RRSe - RCSe ) / ( MUR * RCSe ) ) / ( Min( RRSe ,RMSe ) - Max( MUC,DS ) ) ) ) - ( ( ( ( MLU / MUR ) * ( RCSe * DS ) ) / ( Max( DS,MUM ) - ( MUM - RCSe ) ) ) * Max( Max( ( MUC + RCSe ),( MUM * CS ) ),( ( DS - MUM ) / ( RCSe / CS ) ) ) ) ) + ( Max( Min( ( Max( MUR,CS ) - ( MLU + MUC ) ) ,( ( MUC + RMSe ) - Min( RRSe ,DS ) ) ),( ( Max( RCSe,MLU ) - Max( RRSe,MUM ) ) / ( ( RMSe * DS ) * ( MUR / MLU ) ) ) ) * ( Min( ( ( MUC / DS ) / Min( RCSe ,RCSe ) ) ,Max( Max( DS,MUM ),( MUC * MUM ) ) ) + ( ( Min( RRSe ,MUM ) * ( RRSe / MUR ) ) / ( ( MUM - RRSe ) * ( RMSe + MUM ) ) ) ) ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - DS ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.5418326693227091, "obj2": 0.307391098332471}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( ( RRSe - RRSe ) + MUC ) * ( CS + DS ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6892430278884463, "obj2": 0.19641574161611372}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( Min( Min( ( ( Max( DS,CS ) - ( MUM / MLU ) ) * ( Max( RCSe,RRSe ) * Max( RRSe,DS ) ) ) ,( Max( ( RRSe - CS ),( RCSe / RMSe ) ) / Min( Max( RCSe,DS ) ,( MUM - CS ) ) ) ) ,( Max( ( ( RMSe + RRSe ) * ( MUM * RRSe ) ),( Min( MLU ,CS ) - Min( MUM ,MLU ) ) ) * Max( ( ( MUC / DS ) + ( RCSe * RMSe ) ),Max( Max( MUR,MUR ),Max( RCSe,DS ) ) ) ) ) + ( Max( ( Min( Max( RMSe,RRSe ) ,( MUR * DS ) ) / Max( Max( MLU,DS ),( RCSe * MUC ) ) ),Max( ( Min( MUM ,MLU ) / ( MUM * DS ) ),Min( ( RMSe / RRSe ) ,( MUR / RRSe ) ) ) ) / ( ( ( ( DS + CS ) - Max( CS,MUR ) ) + ( ( MUC * CS ) - ( RRSe - MUC ) ) ) + ( Min( ( RMSe - RMSe ) ,Max( CS,RRSe ) ) / ( Max( RMSe,RMSe ) + ( RMSe * MUR ) ) ) ) ) ),( ( ( ( ( Max( MUR,MUM ) * Max( RMSe,CS ) ) / ( ( RRSe * MUM ) * ( DS - RMSe ) ) ) + ( ( ( RRSe - RCSe ) / ( MUR * RCSe ) ) / ( Min( RRSe ,RMSe ) - Max( MUC,DS ) ) ) ) - ( ( ( ( MLU / MUR ) * ( RCSe * DS ) ) / ( Max( DS,MUM ) - ( MUM - RCSe ) ) ) * Max( Max( ( MUC + RCSe ),( MUM * CS ) ),( ( DS - MUM ) / ( RCSe / CS ) ) ) ) ) + ( Max( Min( ( Max( MUR,CS ) - ( MLU + MUC ) ) ,( ( MUC + RMSe ) - Min( RRSe ,DS ) ) ),( ( Max( RCSe,MLU ) - Max( RRSe,MUM ) ) / ( ( RMSe * DS ) * ( MUR / MLU ) ) ) ) * ( Min( ( ( MUC / DS ) / Min( RCSe ,RCSe ) ) ,Max( Max( DS,MUM ),( MUC * MUM ) ) ) + ( ( Min( RRSe ,MUM ) * ( RRSe / MUR ) ) / ( ( MUM - RRSe ) * ( RMSe + MUM ) ) ) ) ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - DS ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.6115537848605578, "obj2": 0.25081995387664247}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5956175298804781, "obj2": 0.2603462625488814}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4302788844621514, "obj2": 0.45236338577747637}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,( MLU + MLU ) ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.8247011952191236, "obj2": 0.10304297611688636}], "20": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.16533864541832669, "obj2": 0.7409552153889806}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4900398406374502, "obj2": 0.34011379592652524}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( RRSe,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( MUR / ( ( RRSe - CS ) / MLU ) ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6733067729083665, "obj2": 0.2100325882431656}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / Max( Max( ( DS - RMSe ),Min( DS ,( RCSe * ( RRSe * RMSe ) ) ) ),MUR ) ) - Max( ( Max( MUR,( Min( ( MLU + ( RRSe * RRSe ) ) ,( MLU / Min( CS ,MUR ) ) ) + MUM ) ) - RCSe ),( RRSe / MUC ) ) )", "obj1": 0.6254980079681275, "obj2": 0.23764168574267705}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( DS / CS ),( ( ( CS / Min( ( CS / ( ( CS + MLU ) / RRSe ) ) ,Max( MLU,MUC ) ) ) + Max( MUR,DS ) ) * DS ) )", "obj1": 0.7330677290836654, "obj2": 0.17606171374758758}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.9083665338645418, "obj2": 0.07052484174748673}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6539132825342737}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS / MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( ( CS * MUC ) + Min( RRSe ,RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8426294820717132, "obj2": 0.09485357205772353}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.1952191235059761, "obj2": 0.7262759920735312}, {"determining": "Const", "choosing": "( Min( ( CS * DS ) ,Min( MUM ,RMSe ) ) - ( ( ( MUR / ( Min( ( Max( MUR,CS ) - ( MUM / MUM ) ) ,MLU ) - RCSe ) ) / ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,RRSe ) / DS ) ) - Min( RRSe ,MUC ) ) )", "obj1": 0.26095617529880477, "obj2": 0.638086558279349}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.5159362549800797, "obj2": 0.3221878272722993}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * ( RRSe - Min( MUC ,( RMSe - ( MUM - CS ) ) ) ) ) ) / DS ) - Max( ( Max( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ),DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6952191235059761, "obj2": 0.19339938529794645}, {"determining": "Const", "choosing": "Min( ( ( MUR - ( MLU * DS ) ) / ( Min( CS ,( RRSe / Min( ( Min( MUM ,CS ) * CS ) ,( ( RMSe - RCSe ) / ( CS - RMSe ) ) ) ) ) * ( ( MLU / ( ( CS * ( MUR + DS ) ) - MUR ) ) - RCSe ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - RMSe ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6091998508990777}, {"determining": "Const", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 0.2151394422310757, "obj2": 0.6767728035423639}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3545816733067729, "obj2": 0.5301744980171628}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.40836653386454186, "obj2": 0.4746001898690894}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5201428359924911}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe + MUM ) - RMSe ),MLU ) ) / MLU ) ,( ( RCSe / CS ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.49552860907629825}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( ( RMSe * ( MLU + CS ) ) - RRSe ) ) ) )", "obj1": 0.32270916334661354, "obj2": 0.5502641555300878}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( Min( Min( ( ( Max( DS,CS ) - ( MUM / MLU ) ) * ( Max( RCSe,RRSe ) * Max( RRSe,DS ) ) ) ,( Max( ( RRSe - CS ),( RCSe / RMSe ) ) / Min( Max( RCSe,DS ) ,( MUM - CS ) ) ) ) ,( Max( ( ( RMSe + RRSe ) * ( MUM * RRSe ) ),( Min( MLU ,CS ) - Min( MUM ,MLU ) ) ) * Max( ( ( MUC / DS ) + ( RCSe * RMSe ) ),Max( Max( MUR,MUR ),Max( RCSe,DS ) ) ) ) ) + ( Max( ( Min( Max( RMSe,RRSe ) ,( MUR * DS ) ) / Max( Max( MLU,DS ),( RCSe * MUC ) ) ),Max( ( Min( MUM ,MLU ) / ( MUM * DS ) ),Min( ( RMSe / RRSe ) ,( MUR / RRSe ) ) ) ) / ( ( ( ( DS + CS ) - Max( CS,MUR ) ) + ( ( MUC * CS ) - ( RRSe - MUC ) ) ) + ( Min( ( RMSe - RMSe ) ,Max( CS,RRSe ) ) / ( Max( RMSe,RMSe ) + ( RMSe * MUR ) ) ) ) ) ),( ( ( ( ( Max( MUR,MUM ) * Max( RMSe,CS ) ) / ( ( RRSe * MUM ) * ( DS - RMSe ) ) ) + ( ( ( RRSe - RCSe ) / ( MUR * RCSe ) ) / ( Min( RRSe ,RMSe ) - Max( MUC,DS ) ) ) ) - ( ( ( ( MLU / MUR ) * ( RCSe * DS ) ) / ( Max( DS,MUM ) - ( MUM - RCSe ) ) ) * Max( Max( ( MUC + RCSe ),( MUM * CS ) ),( ( DS - MUM ) / ( RCSe / CS ) ) ) ) ) + ( Max( Min( ( Max( MUR,CS ) - ( MLU + MUC ) ) ,( ( MUC + RMSe ) - Min( RRSe ,DS ) ) ),( ( Max( RCSe,MLU ) - Max( RRSe,MUM ) ) / ( ( RMSe * DS ) * ( MUR / MLU ) ) ) ) * ( Min( ( ( MUC / DS ) / Min( RCSe ,RCSe ) ) ,Max( Max( DS,MUM ),( MUC * MUM ) ) ) + ( ( Min( RRSe ,MUM ) * ( RRSe / MUR ) ) / ( ( MUM - RRSe ) * ( RMSe + MUM ) ) ) ) ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - DS ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.6115537848605578, "obj2": 0.25081995387664247}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS - MUR ) * CS ) ) * ( Min( Max( MUR,RCSe ) ,( MUR / DS ) ) * Min( MUM ,( MUM / RCSe ) ) ) ) / ( Min( RMSe ,RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.30722869084172294}, {"determining": "Const", "choosing": "( ( DS / ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) ) - ( DS * RCSe ) )", "obj1": 0.3346613545816733, "obj2": 0.5433796200186853}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe - MUC ) - RMSe ),MLU ) ) / MLU ) ,( ( MLU / RCSe ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5133208432191219}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.30876494023904383, "obj2": 0.5704359836894257}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4601593625498008, "obj2": 0.42827456043999507}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( ( ( Max( MUM,( MUC - ( MUM + CS ) ) ) + ( ( MUM - Min( MUC ,MUR ) ) / ( MUM + Min( MUM ,MUC ) ) ) ) + Min( MLU ,MLU ) ) + Max( Max( ( DS * Min( ( DS * RCSe ) ,( MUM - DS ) ) ),( ( Min( MUC ,DS ) * DS ) - ( MUM + MUR ) ) ),RRSe ) ) ) )", "obj1": 0.2948207171314741, "obj2": 0.5710963424040865}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( Min( Min( ( ( Max( DS,CS ) - ( MUM / MLU ) ) * ( Max( RCSe,RRSe ) * Max( RRSe,DS ) ) ) ,( Max( ( RRSe - CS ),( RCSe / RMSe ) ) / Min( Max( RCSe,DS ) ,( MUM - CS ) ) ) ) ,( Max( ( ( RMSe + RRSe ) * ( MUM * RRSe ) ),( Min( MLU ,CS ) - Min( MUM ,MLU ) ) ) * Max( ( ( MUC / DS ) + ( RCSe * RMSe ) ),Max( Max( MUR,MUR ),Max( RCSe,DS ) ) ) ) ) + ( Max( ( Min( Max( RMSe,RRSe ) ,( MUR * DS ) ) / Max( Max( MLU,DS ),( RCSe * MUC ) ) ),Max( ( Min( MUM ,MLU ) / ( MUM * DS ) ),Min( ( RMSe / RRSe ) ,( MUR / RRSe ) ) ) ) / ( ( ( ( DS + CS ) - Max( CS,MUR ) ) + ( ( MUC * CS ) - ( RRSe - MUC ) ) ) + ( Min( ( RMSe - RMSe ) ,Max( CS,RRSe ) ) / ( Max( RMSe,RMSe ) + ( RMSe * MUR ) ) ) ) ) ),( ( ( ( ( Max( MUR,MUM ) * Max( RMSe,CS ) ) / ( ( RRSe * MUM ) * ( DS - RMSe ) ) ) + ( ( ( RRSe - RCSe ) / ( MUR * RCSe ) ) / ( Min( RRSe ,RMSe ) - Max( MUC,DS ) ) ) ) - ( ( ( ( MLU / MUR ) * ( RCSe * DS ) ) / ( Max( DS,MUM ) - ( MUM - RCSe ) ) ) * Max( Max( ( MUC + RCSe ),( MUM * CS ) ),( ( DS - MUM ) / ( RCSe / CS ) ) ) ) ) + ( Max( Min( ( Max( MUR,CS ) - ( MLU + MUC ) ) ,( ( MUC + RMSe ) - Min( RRSe ,DS ) ) ),( ( Max( RCSe,MLU ) - Max( RRSe,MUM ) ) / ( ( RMSe * DS ) * ( MUR / MLU ) ) ) ) * ( Min( ( ( MUC / DS ) / Min( RCSe ,RCSe ) ) ,Max( Max( DS,MUM ),( MUC * MUM ) ) ) + ( ( Min( RRSe ,MUM ) * ( RRSe / MUR ) ) / ( ( MUM - RRSe ) * ( RMSe + MUM ) ) ) ) ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - DS ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.5378486055776892, "obj2": 0.31892875501114487}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - ( ( RRSe * Min( ( MUR / ( RMSe / ( ( CS + MUM ) * Min( MLU ,MUM ) ) ) ) ,Max( RRSe,MUM ) ) ) - ( RMSe - ( RMSe + ( ( ( DS * ( MLU / RCSe ) ) / RCSe ) - RRSe ) ) ) ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( ( RRSe - RRSe ) + MUC ) * ( CS + DS ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6892430278884463, "obj2": 0.19641574161611372}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.7948207171314741, "obj2": 0.141677045745748}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5956175298804781, "obj2": 0.2603462625488814}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.045489145319235105}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "Const", "choosing": "( ( DS / ( Min( ( ( ( ( MUM - MUC ) * ( MLU - DS ) ) * ( MUC - MLU ) ) - RCSe ) ,MUR ) * Max( RRSe,MUM ) ) ) - Max( ( ( Min( ( ( MLU + Max( CS,MUR ) ) * ( ( MLU / DS ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUC ,RRSe ) ) )", "obj1": 0.4203187250996016, "obj2": 0.4633619524518656}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,( MLU + MLU ) ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.8247011952191236, "obj2": 0.10304297611688636}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4302788844621514, "obj2": 0.45236338577747637}], "21": [{"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_CPU_Server + BR ) ,Max( MRS,FirstVNF_Mem ) ) + ( Min( MDR ,MDR ) * ( MDR + FirstVNF_Mem_Server ) ) ) / ( ( ( DDR - FirstVNF_Mem ) - Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) ) * Max( Max( FirstVNF_Mem,ACS ),( ACS + RRS ) ) ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.16533864541832669, "obj2": 0.7409552153889806}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( DS / RMSe ) ,( Max( Min( MUR ,MUR ),( RMSe - MUC ) ) - Min( MLU ,MUC ) ) )", "obj1": 0.46215139442231074, "obj2": 0.39950990128170955}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4900398406374502, "obj2": 0.34011379592652524}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.9561752988047809, "obj2": 0.039196773557840646}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( MUR + DS ) * ( MUC * ( RMSe + MUM ) ) ) ,CS ) / DS ) / ( MUR / ( RRSe - Min( ( RMSe * ( MLU + MUC ) ) ,Min( Min( MUR ,MUM ) ,( RCSe / DS ) ) ) ) ) ),( RRSe + MUC ) ) )", "obj1": 0.7211155378486056, "obj2": 0.17465096463112426}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( ( MUM / RCSe ) ,( RCSe - ( Min( ( ( Max( MLU,MUC ) / RMSe ) * RCSe ) ,( RMSe - ( MLU + MLU ) ) ) + MLU ) ) )", "obj1": 0.8884462151394422, "obj2": 0.08174731833971771}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.2350597609561753, "obj2": 0.6539132825342737}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS / MUR ) * CS ) ) * ( Min( MUM ,( DS * CS ) ) * Min( Max( MUR,RCSe ) ,( MUR / DS ) ) ) ) / ( Min( RMSe ,RMSe ) / MLU ) ) ) + ( Max( MLU,Max( RMSe,DS ) ) / ( CS + DS ) ) ) )", "obj1": 0.5517928286852589, "obj2": 0.26723122427137297}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( ( RRSe - RRSe ) + MUC ) * ( CS + DS ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.1892430278884462, "obj2": 0.7097016554758605}, {"determining": "Const", "choosing": "( Min( ( CS * DS ) ,Min( MUM ,RMSe ) ) - ( ( ( MUR / ( Min( ( Max( MUR,CS ) - ( MUM / MUM ) ) ,MLU ) - RCSe ) ) / ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,RRSe ) / DS ) ) - Min( RRSe ,MUC ) ) )", "obj1": 0.26095617529880477, "obj2": 0.638086558279349}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS / MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( ( CS * MUC ) + Min( RRSe ,RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8426294820717132, "obj2": 0.09485357205772353}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( RRSe ,( ( ( DS / ( ( CS - MUR ) * CS ) ) * ( Min( Max( MUR,RCSe ) ,( MUR / DS ) ) * Min( MUM ,( MUM / RCSe ) ) ) ) / ( Min( RMSe ,RMSe ) - MLU ) ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.549800796812749, "obj2": 0.30722869084172294}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( ( RRSe - RRSe ) + MUC ) * ( CS + DS ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6613545816733067, "obj2": 0.21491282692373007}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.7948207171314741, "obj2": 0.141677045745748}, {"determining": "Const", "choosing": "Min( ( ( MUR - ( MLU * DS ) ) / ( Min( CS ,( RRSe / Min( ( Min( MUM ,CS ) * CS ) ,( ( RMSe - RCSe ) / ( CS - RMSe ) ) ) ) ) * ( ( MLU / ( ( CS * ( MUR + DS ) ) - MUR ) ) - RCSe ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - RMSe ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.26693227091633465, "obj2": 0.6091998508990777}, {"determining": "Const", "choosing": "( Max( ( MLU / MLU ),Max( MUR,DS ) ) - ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUR ) ) * MUC ) ) / DS ) )", "obj1": 0.2151394422310757, "obj2": 0.6767728035423639}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( MUR / ( ( RCSe + ( MUC * ( MLU - CS ) ) ) * ( Min( ( MUR - RMSe ) ,( RCSe - MLU ) ) + ( MUC + MLU ) ) ) ) * ( ( ( Min( MUM ,( RRSe / RMSe ) ) + ( CS / RCSe ) ) + Max( MUR,MUM ) ) / MLU ) ),( ( DS / RMSe ) / Max( RRSe,RRSe ) ) ) )", "obj1": 0.7709163346613546, "obj2": 0.16286596798978187}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( ( Min( RMSe ,MUC ) * MLU ),Max( MUM,( ( ( MUC * MUM ) - Min( ( MUR * DS ) ,CS ) ) + CS ) ) )", "obj1": 0.7549800796812749, "obj2": 0.16354837737910188}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6314741035856574, "obj2": 0.23515777559514028}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.9083665338645418, "obj2": 0.07052484174748673}, {"determining": "( ( Min( ( DDR / DDR ) ,( PN - ACS ) ) - ( ( FirstVNF_Mem_Server - DDR ) - ( ARS + ARS ) ) ) - ( ( ( AMS - BR ) + Min( BR ,AMS ) ) - ( ( FirstVNF_CPU * PN ) * ( RRS / MDR ) ) ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.9342629482071713, "obj2": 0.06901485732550573}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / ( ( MUM / RRSe ) + CS ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / RRSe ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( ( DS / CS ) - DS ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.5159362549800797, "obj2": 0.3221878272722993}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * ( RRSe - Min( MUC ,( RMSe - ( MUM - CS ) ) ) ) ) ) / DS ) - Max( ( Max( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ),DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6952191235059761, "obj2": 0.19339938529794645}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( ( RMSe * ( MLU + CS ) ) - RRSe ) ) ) )", "obj1": 0.32270916334661354, "obj2": 0.5502641555300878}, {"determining": "Const", "choosing": "( ( DS / ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) ) - ( DS * RCSe ) )", "obj1": 0.3346613545816733, "obj2": 0.5433796200186853}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.8127490039840638, "obj2": 0.11128271096318096}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Max( Min( RCSe ,RCSe ),Min( MLU ,( MLU * ( RRSe - ( Min( RMSe ,RRSe ) - CS ) ) ) ) )", "obj1": 0.8067729083665338, "obj2": 0.13366293008064242}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.3944223107569721, "obj2": 0.5123627406651935}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( ( ( MUM - MLU ) - Min( MUC ,Min( MUC ,DS ) ) ) - ( RCSe + RRSe ) ),RCSe ) ,( ( RMSe - ( ( RMSe * ( MLU + CS ) ) - MUC ) ) + MLU ) )", "obj1": 0.5896414342629482, "obj2": 0.2645257111061638}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.3545816733067729, "obj2": 0.5301744980171628}, {"determining": "Const", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.30876494023904383, "obj2": 0.5704359836894257}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( Min( Min( ( ( Max( DS,CS ) - ( MUM / MLU ) ) * ( Max( RCSe,RRSe ) * Max( RRSe,DS ) ) ) ,( Max( ( RRSe - CS ),( RCSe / RMSe ) ) / Min( Max( RCSe,DS ) ,( MUM - CS ) ) ) ) ,( Max( ( ( RMSe + RRSe ) * ( MUM * RRSe ) ),( Min( MLU ,CS ) - Min( MUM ,MLU ) ) ) * Max( ( ( MUC / DS ) + ( RCSe * RMSe ) ),Max( Max( MUR,MUR ),Max( RCSe,DS ) ) ) ) ) + ( Max( ( Min( Max( RMSe,RRSe ) ,( MUR * DS ) ) / Max( Max( MLU,DS ),( RCSe * MUC ) ) ),Max( ( Min( MUM ,MLU ) / ( MUM * DS ) ),Min( ( RMSe / RRSe ) ,( MUR / RRSe ) ) ) ) / ( ( ( ( DS + CS ) - Max( CS,MUR ) ) + ( ( MUC * CS ) - ( RRSe - MUC ) ) ) + ( Min( ( RMSe - RMSe ) ,Max( CS,RRSe ) ) / ( Max( RMSe,RMSe ) + ( RMSe * MUR ) ) ) ) ) ),( ( ( ( ( Max( MUR,MUM ) * Max( RMSe,CS ) ) / ( ( RRSe * MUM ) * ( DS - RMSe ) ) ) + ( ( ( RRSe - RCSe ) / ( MUR * RCSe ) ) / ( Min( RRSe ,RMSe ) - Max( MUC,DS ) ) ) ) - ( ( ( ( MLU / MUR ) * ( RCSe * DS ) ) / ( Max( DS,MUM ) - ( MUM - RCSe ) ) ) * Max( Max( ( MUC + RCSe ),( MUM * CS ) ),( ( DS - MUM ) / ( RCSe / CS ) ) ) ) ) + ( Max( Min( ( Max( MUR,CS ) - ( MLU + MUC ) ) ,( ( MUC + RMSe ) - Min( RRSe ,DS ) ) ),( ( Max( RCSe,MLU ) - Max( RRSe,MUM ) ) / ( ( RMSe * DS ) * ( MUR / MLU ) ) ) ) * ( Min( ( ( MUC / DS ) / Min( RCSe ,RCSe ) ) ,Max( Max( DS,MUM ),( MUC * MUM ) ) ) + ( ( Min( RRSe ,MUM ) * ( RRSe / MUR ) ) / ( ( MUM - RRSe ) * ( RMSe + MUM ) ) ) ) ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - DS ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.5378486055776892, "obj2": 0.31892875501114487}, {"determining": "( Max( ( FirstVNF_RAM + RRS ),( FirstVNF_RAM - AMS ) ) - Min( ( FirstVNF_CPU_Server * ARS ) ,( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( DS * DS ) - Max( ( CS * MUR ),MUM ) )", "obj1": 0.9402390438247012, "obj2": 0.04548338520960283}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( RRSe,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( MUR / ( ( RRSe - CS ) / MLU ) ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6733067729083665, "obj2": 0.2100325882431656}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4601593625498008, "obj2": 0.42827456043999507}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( DS * DS ) - Max( ( ( RCSe - DS ) / ( ( ( RRSe / DS ) * RRSe ) + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.50199203187251, "obj2": 0.338561632756464}, {"determining": "Const", "choosing": "( ( DS / ( ( MUM - DS ) * ( RMSe * RRSe ) ) ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + ( RCSe / DS ) ) ) ,CS ) / DS ) / ( MUR + Min( RRSe ,RCSe ) ) ),Min( MUM ,MUC ) ) )", "obj1": 0.4581673306772908, "obj2": 0.43890899454899207}, {"determining": "Const", "choosing": "( ( ( ( DS * ( ( RCSe - ( Max( RRSe,RMSe ) + DS ) ) / ( ( CS - ( RMSe * MLU ) ) - ( ( MLU + RRSe ) / MUM ) ) ) ) / ( DS + CS ) ) + ( ( DS * DS ) / ( MUM / RRSe ) ) ) * ( CS / Max( RMSe,( ( RMSe * CS ) + Min( RRSe ,( RMSe - RMSe ) ) ) ) ) )", "obj1": 0.2848605577689243, "obj2": 0.5879284296915739}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( Min( CS ,MLU ) - ( Max( MLU,RMSe ) - MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20119521912350596, "obj2": 0.6977964500987833}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.40836653386454186, "obj2": 0.4746001898690894}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( ( ( Max( MUM,( MUC - ( MUM + CS ) ) ) + ( ( MUM - Min( MUC ,MUR ) ) / ( MUM + Min( MUM ,MUC ) ) ) ) + Min( MLU ,MLU ) ) + Max( Max( ( DS * Min( ( DS * RCSe ) ,( MUM - DS ) ) ),( ( Min( MUC ,DS ) * DS ) - ( MUM + MUR ) ) ),RRSe ) ) ) )", "obj1": 0.2948207171314741, "obj2": 0.5710963424040865}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( Max( CS,DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR + ( ( Min( MUC ,RCSe ) / ( MLU * MUC ) ) - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.37250996015936255, "obj2": 0.5201428359924911}, {"determining": "Const", "choosing": "( ( DS / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( DS + MLU ) + RRSe ) ) ,CS ) / DS ) / ( MUR + ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.4362549800796813, "obj2": 0.44624535216821115}, {"determining": "Const", "choosing": "Min( ( ( RRSe / RMSe ) - RMSe ) ,( Min( DS ,( ( ( Min( ( DS - MLU ) ,( MUR / MUR ) ) * ( ( MLU * MLU ) * RCSe ) ) * ( ( ( CS / MUR ) * CS ) / Max( RRSe,Max( MUR,RMSe ) ) ) ) / CS ) ) + ( MLU / ( CS + DS ) ) ) )", "obj1": 0.2749003984063745, "obj2": 0.5925943942299121}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( ( RRSe - RRSe ) + MUC ) * ( CS + DS ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.6892430278884463, "obj2": 0.19641574161611372}, {"determining": "Const", "choosing": "( ( ( MUC - ( ( CS - Min( Max( MLU,RMSe ) ,MUC ) ) * MUC ) ) / DS ) - Max( ( ( Min( ( ( CS + DS ) * ( ( CS + MLU ) + MUC ) ) ,CS ) / DS ) / ( MUR / ( RRSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.20318725099601595, "obj2": 0.6831582026998314}, {"determining": "Const", "choosing": "( ( Min( ( Max( MUC,Max( ( ( RRSe + MUM ) - RMSe ),MLU ) ) / MLU ) ,( ( RCSe / CS ) / ( RRSe / CS ) ) ) * DS ) - Max( ( ( RCSe / DS ) / ( MUR + ( RMSe - RCSe ) ) ),Min( RRSe ,MUC ) ) )", "obj1": 0.39641434262948205, "obj2": 0.49552860907629825}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( ( ( RRSe / RMSe ) / RMSe ) ,( MLU + ( RMSe - ( DS - RRSe ) ) ) )", "obj1": 0.5956175298804781, "obj2": 0.2603462625488814}, {"determining": "( ( ACS - FirstVNF_Mem_Server ) * ( FirstVNF_RAM_Server / CRS ) )", "choosing": "Min( Max( ( Min( Min( ( ( Max( DS,CS ) - ( MUM / MLU ) ) * ( Max( RCSe,RRSe ) * Max( RRSe,DS ) ) ) ,( Max( ( RRSe - CS ),( RCSe / RMSe ) ) / Min( Max( RCSe,DS ) ,( MUM - CS ) ) ) ) ,( Max( ( ( RMSe + RRSe ) * ( MUM * RRSe ) ),( Min( MLU ,CS ) - Min( MUM ,MLU ) ) ) * Max( ( ( MUC / DS ) + ( RCSe * RMSe ) ),Max( Max( MUR,MUR ),Max( RCSe,DS ) ) ) ) ) + ( Max( ( Min( Max( RMSe,RRSe ) ,( MUR * DS ) ) / Max( Max( MLU,DS ),( RCSe * MUC ) ) ),Max( ( Min( MUM ,MLU ) / ( MUM * DS ) ),Min( ( RMSe / RRSe ) ,( MUR / RRSe ) ) ) ) / ( ( ( ( DS + CS ) - Max( CS,MUR ) ) + ( ( MUC * CS ) - ( RRSe - MUC ) ) ) + ( Min( ( RMSe - RMSe ) ,Max( CS,RRSe ) ) / ( Max( RMSe,RMSe ) + ( RMSe * MUR ) ) ) ) ) ),( ( ( ( ( Max( MUR,MUM ) * Max( RMSe,CS ) ) / ( ( RRSe * MUM ) * ( DS - RMSe ) ) ) + ( ( ( RRSe - RCSe ) / ( MUR * RCSe ) ) / ( Min( RRSe ,RMSe ) - Max( MUC,DS ) ) ) ) - ( ( ( ( MLU / MUR ) * ( RCSe * DS ) ) / ( Max( DS,MUM ) - ( MUM - RCSe ) ) ) * Max( Max( ( MUC + RCSe ),( MUM * CS ) ),( ( DS - MUM ) / ( RCSe / CS ) ) ) ) ) + ( Max( Min( ( Max( MUR,CS ) - ( MLU + MUC ) ) ,( ( MUC + RMSe ) - Min( RRSe ,DS ) ) ),( ( Max( RCSe,MLU ) - Max( RRSe,MUM ) ) / ( ( RMSe * DS ) * ( MUR / MLU ) ) ) ) * ( Min( ( ( MUC / DS ) / Min( RCSe ,RCSe ) ) ,Max( Max( DS,MUM ),( MUC * MUM ) ) ) + ( ( Min( RRSe ,MUM ) * ( RRSe / MUR ) ) / ( ( MUM - RRSe ) * ( RMSe + MUM ) ) ) ) ) ) ) ,( ( ( ( Min( ( Max( MUC,MUR ) - ( RRSe * MUR ) ) ,( Min( MLU ,RMSe ) + ( MUR + CS ) ) ) + ( ( ( MUR + MLU ) / ( RCSe * MUC ) ) - ( ( MUR - DS ) - Min( CS ,RCSe ) ) ) ) + Max( ( ( ( MUM / CS ) + ( RRSe / MUM ) ) - ( ( MUC - MUM ) / ( RCSe / RRSe ) ) ),Max( ( Max( DS,RRSe ) - ( MLU * RMSe ) ),( ( MLU / MLU ) + ( DS / MLU ) ) ) ) ) / ( ( ( Max( ( RRSe * RMSe ),( CS / RMSe ) ) / Min( ( RCSe + MUM ) ,( RMSe - MUR ) ) ) / ( ( ( MUM + RRSe ) - ( MLU - DS ) ) - Max( ( MLU + CS ),( RMSe + RMSe ) ) ) ) / Min( Min( Min( ( RRSe - RRSe ) ,( DS + DS ) ) ,( Min( RMSe ,RRSe ) * ( DS / MUM ) ) ) ,( Max( ( MUM * DS ),( CS / CS ) ) / Max( ( MUM + MUR ),( RMSe - CS ) ) ) ) ) ) + Min( ( ( ( Min( Min( MLU ,MLU ) ,Min( DS ,MUC ) ) / ( ( RRSe * MLU ) * Max( DS,RCSe ) ) ) * ( ( ( CS / RCSe ) * ( MLU + CS ) ) * ( ( RRSe / RCSe ) * ( RRSe - RRSe ) ) ) ) / ( ( Min( ( DS - RCSe ) ,Max( RMSe,MUC ) ) * ( Max( RRSe,RCSe ) / Min( RCSe ,RCSe ) ) ) - ( ( Max( MUR,MUR ) + ( RMSe + MUR ) ) - ( ( MLU * MLU ) + ( RCSe / MLU ) ) ) ) ) ,Max( ( Min( ( ( MLU / MUC ) / ( RMSe * RMSe ) ) ,Max( ( MUC - CS ),( MLU - CS ) ) ) * Min( ( ( MUR - RRSe ) - ( RCSe * DS ) ) ,( Min( MUC ,CS ) * Min( CS ,DS ) ) ) ),Min( ( ( ( RCSe / MUR ) * ( MUR / MUM ) ) + Min( Min( RCSe ,CS ) ,( CS + RCSe ) ) ) ,( ( ( RRSe / MUC ) * ( RCSe + RMSe ) ) - ( ( DS - MUC ) + Max( MUC,RCSe ) ) ) ) ) ) ) )", "obj1": 0.6115537848605578, "obj2": 0.25081995387664247}]}