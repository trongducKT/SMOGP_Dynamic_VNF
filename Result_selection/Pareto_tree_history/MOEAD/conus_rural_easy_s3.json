{"1": [{"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "( ( MUC * Min( RRSe ,Min( RMSe ,MUC ) ) ) * ( RRSe - RMSe ) )", "obj1": 0.712, "obj2": 0.2419753579262493}, {"determining": "( ( FirstVNF_RAM / FirstVNF_Mem ) + Max( FirstVNF_CPU_Server,AMS ) )", "choosing": "Min( ( RRSe - MUC ) ,( MUC + MUR ) )", "obj1": 0.22, "obj2": 0.6200179618567597}, {"determining": "( Min( MDR ,FirstVNF_Mem ) - ( ACS - FirstVNF_CPU ) )", "choosing": "Max( ( MUR / RCSe ),Min( RRSe ,DS ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "Min( Max( MRS,ACS ) ,Max( Const,ACS ) )", "choosing": "( Max( RMSe,MUC ) * ( DS - MLU ) )", "obj1": 0.256, "obj2": 0.5949095710785731}, {"determining": "( ( Const / FirstVNF_RAM ) / ( RRS / FirstVNF_Mem_Server ) )", "choosing": "( ( MUR + MUM ) - ( RMSe - MUC ) )", "obj1": 0.332, "obj2": 0.5445396640509783}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "Min( ( RCSe - RRSe ) ,( DS / CS ) )", "obj1": 0.298, "obj2": 0.5684121062640748}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( Const / BR ) * ( FirstVNF_CPU * FirstVNF_Mem ) )", "choosing": "( ( MUC / RMSe ) - ( MUR + DS ) )", "obj1": 0.138, "obj2": 0.693632577908714}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "( ( PN + MDR ) + ( FirstVNF_RAM_Server - FirstVNF_CPU ) )", "choosing": "( ( MUM * MLU ) * ( DS + MUR ) )", "obj1": 0.486, "obj2": 0.41423367257101906}, {"determining": "( ( ( FirstVNF_RAM_Server + ACS ) / FirstVNF_CPU_Server ) - Max( FirstVNF_CPU_Server,DDR ) )", "choosing": "( Max( Min( ( MUR - MUR ) ,( ( RRSe + RCSe ) * RRSe ) ),RMSe ) * ( RCSe / RRSe ) )", "obj1": 0.448, "obj2": 0.44481168922924086}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( FirstVNF_RAM_Server,MRS ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( Max( FirstVNF_Mem_Server,ARS ) * ( ACS + ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - BR ) ) )", "choosing": "Max( Min( CS ,RCSe ),Min( CS ,( Max( DS,MUR ) / ( Max( MUM,( MLU / ( ( DS / RRSe ) * RCSe ) ) ) * RRSe ) ) ) )", "obj1": 0.33, "obj2": 0.6106262112109287}, {"determining": "( ( ACS + FirstVNF_CPU_Server ) / Min( FirstVNF_RAM_Server ,ARS ) )", "choosing": "( ( MUM + RMSe ) + Max( RRSe,MUM ) )", "obj1": 0.332, "obj2": 0.5578770195314228}, {"determining": "( ( MRS + PN ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.17, "obj2": 0.645316677604374}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / Max( BR,AMS ) )", "choosing": "( Max( RCSe,MUC ) + ( MLU * MUC ) )", "obj1": 0.372, "obj2": 0.5125433244028238}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Max( MUC,RRSe ) * ( RRSe - RRSe ) )", "obj1": 0.236, "obj2": 0.5946516941186584}, {"determining": "( ( CRS / PN ) - ( RRS / BR ) )", "choosing": "Max( ( RMSe - MUR ),Min( RMSe ,MUR ) )", "obj1": 0.33, "obj2": 0.544159252975024}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "Min( Min( FirstVNF_CPU ,FirstVNF_CPU_Server ) ,( ARS - Const ) )", "choosing": "( ( MUM * ( DS - MLU ) ) / Min( MUR ,MUC ) )", "obj1": 0.906, "obj2": 0.08954298001688388}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.162, "obj2": 0.6844365142042587}, {"determining": "( ( CRS / Const ) / Max( ARS,MRS ) )", "choosing": "Max( Max( MUM,RMSe ),( RCSe + MUC ) )", "obj1": 0.31, "obj2": 0.5678605822874758}, {"determining": "Min( ( ( ( FirstVNF_RAM - ( FirstVNF_Mem / BR ) ) * Max( MRS,MDR ) ) - AMS ) ,( MDR + CRS ) )", "choosing": "Max( ( MLU - MUC ),( MUR * ( RRSe * MUM ) ) )", "obj1": 0.342, "obj2": 0.5439201078901291}, {"determining": "( ( MDR + Const ) + Min( FirstVNF_Mem ,RRS ) )", "choosing": "( Max( CS,RMSe ) * Max( MUR,MLU ) )", "obj1": 0.304, "obj2": 0.6415172917332879}, {"determining": "( Min( FirstVNF_Mem ,DDR ) + Min( FirstVNF_CPU ,DDR ) )", "choosing": "( ( RMSe / MUM ) * Max( RMSe,DS ) )", "obj1": 0.316, "obj2": 0.5584979574060772}, {"determining": "( ( RRS * FirstVNF_Mem_Server ) + Min( Const ,CRS ) )", "choosing": "Min( Max( RMSe,MLU ) ,( MLU / DS ) )", "obj1": 0.256, "obj2": 0.6157788059845877}, {"determining": "Max( Max( RRS,BR ),( AMS - FirstVNF_CPU ) )", "choosing": "Min( ( MUC - MUM ) ,( RMSe / RCSe ) )", "obj1": 0.292, "obj2": 0.6163878196535083}, {"determining": "Min( ( ( ARS / ACS ) * DDR ) ,( CRS / AMS ) )", "choosing": "( Min( RRSe ,MUC ) / ( MUM + CS ) )", "obj1": 0.334, "obj2": 0.5118039996713164}, {"determining": "( ( FirstVNF_CPU * Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) / Max( Const,FirstVNF_CPU ) )", "choosing": "( ( DS + RCSe ) + ( ( RRSe * RRSe ) / Max( MUM,( RRSe + RMSe ) ) ) )", "obj1": 0.514, "obj2": 0.3837924550336786}, {"determining": "( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) )", "choosing": "Max( ( RCSe - CS ),Max( MUR,RMSe ) )", "obj1": 0.32, "obj2": 0.5609131273526835}, {"determining": "Min( Min( PN ,MRS ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - RRSe ) + Min( DS ,RMSe ) )", "obj1": 0.344, "obj2": 0.5162292500855811}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) + ( Max( AMS,Const ) + ( DDR + BR ) ) )", "choosing": "Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) )", "obj1": 0.252, "obj2": 0.6080809784998681}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_RAM_Server - ( CRS + ACS ) ) + ( ( MDR + FirstVNF_RAM_Server ) / BR ) )", "choosing": "Min( Min( MUC ,MUC ) ,( RMSe / CS ) )", "obj1": 0.316, "obj2": 0.5606531265160836}, {"determining": "( Min( CRS ,BR ) / ( PN / ( DDR * AMS ) ) )", "choosing": "( ( Min( RMSe ,DS ) - Max( MLU,CS ) ) + ( ( CS + RCSe ) / ( RMSe + MUM ) ) )", "obj1": 0.254, "obj2": 0.7030072821359538}, {"determining": "( Max( CRS,( DDR / FirstVNF_RAM ) ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.382, "obj2": 0.4516691163185002}, {"determining": "Max( ( ( ARS / FirstVNF_Mem_Server ) - Max( Const,ACS ) ),Max( FirstVNF_CPU,Min( RRS ,BR ) ) )", "choosing": "( Min( Max( RMSe,MUR ) ,( MUM / CS ) ) - ( ( CS + ( RCSe - DS ) ) - ( CS - MUC ) ) )", "obj1": 0.204, "obj2": 0.7738468273126738}, {"determining": "Max( ( ( FirstVNF_RAM_Server * FirstVNF_RAM ) + ( RRS - FirstVNF_CPU_Server ) ),( ( FirstVNF_CPU_Server * FirstVNF_RAM ) + ( RRS / ARS ) ) )", "choosing": "( ( ( RRSe / DS ) / MUR ) / Max( RMSe,( CS / RCSe ) ) )", "obj1": 0.064, "obj2": 0.7434245489355443}, {"determining": "Min( ( DDR - ( FirstVNF_RAM - PN ) ) ,Max( MDR,( Max( PN,( ACS - PN ) ) - FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe + RMSe ) / ( MUC * ( RRSe - ( Max( MUM,CS ) / ( MUR * RCSe ) ) ) ) )", "obj1": 0.676, "obj2": 0.25673410507383454}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) - ( ARS - FirstVNF_RAM ) )", "choosing": "( ( MUM * MUR ) * ( ( MLU * CS ) * MUM ) )", "obj1": 0.338, "obj2": 0.559028717737944}, {"determining": "Max( Min( FirstVNF_CPU_Server ,( RRS - AMS ) ),( CRS - Min( Min( PN ,FirstVNF_Mem ) ,FirstVNF_CPU_Server ) ) )", "choosing": "( ( RRSe - MUR ) * ( Min( ( RCSe + ( RRSe * MUR ) ) ,Max( MLU,( RMSe + Min( DS ,MLU ) ) ) ) / DS ) )", "obj1": 0.224, "obj2": 0.6203136883473498}, {"determining": "( ( ( ( Min( ACS ,( Const / Max( ( RRS / FirstVNF_CPU_Server ),BR ) ) ) + PN ) - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( DS / DS ) / ( Max( Min( RRSe ,( MLU + Min( Min( DS ,( DS - RCSe ) ) ,MLU ) ) ),MUR ) * ( DS / MUC ) ) )", "obj1": 0.45, "obj2": 0.4173089418676932}, {"determining": "( ( ( MRS + FirstVNF_CPU ) - ( ACS / FirstVNF_CPU_Server ) ) + ( Min( Const ,Const ) + ( ARS + ARS ) ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( RCSe * MLU ) ,( RCSe + MUR ) ) )", "obj1": 0.372, "obj2": 0.5097690091548278}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( Min( MDR ,MRS ) * Min( BR ,PN ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - ( RRSe / RRSe ) )", "obj1": 0.582, "obj2": 0.31513122789150044}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR * Const ) - ( MRS + MRS ) )", "choosing": "Max( Max( ( RCSe * MUM ),( MUM * RCSe ) ),( Min( MUR ,MUR ) * ( MUM + MUM ) ) )", "obj1": 0.338, "obj2": 0.5421535050445092}, {"determining": "( ( RRS + FirstVNF_Mem ) / ( FirstVNF_Mem_Server * FirstVNF_RAM ) )", "choosing": "Min( ( CS - MLU ) ,( MUC * RRSe ) )", "obj1": 0.192, "obj2": 0.7833305296779421}, {"determining": "( Max( ARS,Max( FirstVNF_Mem_Server,AMS ) ) + Min( FirstVNF_CPU_Server ,CRS ) )", "choosing": "( ( ( MLU + MLU ) * Min( RCSe ,MLU ) ) / Max( Min( MUM ,RCSe ),Min( MUC ,RRSe ) ) )", "obj1": 0.28, "obj2": 0.5960059979214091}, {"determining": "Max( ( Max( FirstVNF_CPU_Server,RRS ) / FirstVNF_Mem ),Min( MRS ,DDR ) )", "choosing": "Min( Max( RCSe,RCSe ) ,( MUM * ( RCSe / MLU ) ) )", "obj1": 0.272, "obj2": 0.5957269089944938}, {"determining": "( ( PN - Max( DDR,RRS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_RAM_Server ) ,MRS ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.466, "obj2": 0.39790369644585377}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "Min( ( Min( MUC ,MLU ) + Max( RCSe,MUM ) ) ,( Min( CS ,MUR ) / ( MUM / MUC ) ) )", "obj1": 0.32, "obj2": 0.629262098157998}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( FirstVNF_Mem - MRS ),( FirstVNF_RAM_Server / DDR ) )", "choosing": "( ( Min( DS ,MUR ) / ( RMSe * MUR ) ) + ( ( RRSe / MUC ) + Max( MUC,MUR ) ) )", "obj1": 0.412, "obj2": 0.48276685317960943}, {"determining": "( Max( ( Const + MRS ),( MRS + MDR ) ) * ( ( ACS + CRS ) + ( MDR + MRS ) ) )", "choosing": "( ( RRSe * RCSe ) * Max( Max( RCSe,CS ),( DS - RMSe ) ) )", "obj1": 0.33, "obj2": 0.563239586859679}, {"determining": "( ( ( ACS + DDR ) + Max( MRS,FirstVNF_CPU ) ) + ( Min( DDR ,ARS ) - ( CRS * DDR ) ) )", "choosing": "Max( Max( CS,Min( CS ,MUR ) ),( DS + ( RMSe * RRSe ) ) )", "obj1": 0.432, "obj2": 0.4803767852478235}, {"determining": "Min( Min( ( Const + DDR ) ,( FirstVNF_RAM / BR ) ) ,( ( AMS - MDR ) / ( FirstVNF_RAM_Server * ACS ) ) )", "choosing": "Max( ( CS * MLU ),( RCSe / MUC ) )", "obj1": 0.232, "obj2": 0.6086533522116054}, {"determining": "Max( ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) - ( ACS / BR ) ),( BR * CRS ) )", "choosing": "Min( Max( Min( RMSe ,RCSe ),( ( MUC / CS ) / MUM ) ) ,Min( ( MUM - CS ) ,RMSe ) )", "obj1": 0.466, "obj2": 0.4048052869836658}, {"determining": "Min( ( Max( CRS,FirstVNF_CPU ) + ( FirstVNF_CPU_Server - MRS ) ) ,( ( Const / MDR ) + ( FirstVNF_RAM_Server + DDR ) ) )", "choosing": "Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) )", "obj1": 0.244, "obj2": 0.6598215274768928}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Max( ( ( DDR + RRS ) / ( FirstVNF_CPU_Server - FirstVNF_RAM ) ),Max( ( ACS / FirstVNF_RAM_Server ),Max( MDR,ACS ) ) ) / ( ( ( ACS * MDR ) + ( RRS * DDR ) ) + ( Max( Const,FirstVNF_CPU ) * Min( Const ,DDR ) ) ) )", "choosing": "Max( Max( ( ( RRSe * RMSe ) * ( RMSe + MUM ) ),( Min( MUM ,CS ) / ( MUR + RRSe ) ) ),( Max( ( RRSe - RMSe ),( CS + MLU ) ) / ( Max( RRSe,RRSe ) / ( MUR / MUR ) ) ) )", "obj1": 0.246, "obj2": 0.7280554060219957}, {"determining": "( ( ( Min( MRS ,BR ) * Min( FirstVNF_RAM_Server ,FirstVNF_Mem ) ) / ( ( FirstVNF_RAM / FirstVNF_CPU ) - ( FirstVNF_CPU + CRS ) ) ) * Max( Max( ( FirstVNF_RAM_Server * ARS ),( ARS + FirstVNF_Mem ) ),( Min( FirstVNF_RAM ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU - ACS ) ) ) )", "choosing": "Max( ( Min( RRSe ,Max( RRSe,MUR ) ) - RRSe ),( MUR * ( CS - RRSe ) ) )", "obj1": 0.312, "obj2": 0.5185321606553557}, {"determining": "( ( Min( DDR ,FirstVNF_RAM_Server ) - Max( FirstVNF_Mem_Server,( CRS + ( MDR * MDR ) ) ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( CS - MUR ) + ( ( MLU / MUC ) - ( MUC * ( MLU / DS ) ) ) )", "obj1": 0.292, "obj2": 0.5731900440056352}, {"determining": "( ( ( Min( DDR ,( ( FirstVNF_RAM / ( Max( FirstVNF_CPU,FirstVNF_Mem ) * FirstVNF_CPU_Server ) ) + MRS ) ) + Max( FirstVNF_Mem_Server,FirstVNF_Mem ) ) / BR ) / Max( AMS,PN ) )", "choosing": "( ( RRSe - MLU ) + ( ( ( MLU + RMSe ) / ( CS + MUM ) ) + ( ( RMSe * MUR ) - ( MUR / DS ) ) ) )", "obj1": 0.478, "obj2": 0.40162488292496645}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.023740494738729453}, {"determining": "Min( Min( ( ( MRS + FirstVNF_Mem ) - ( RRS - FirstVNF_Mem_Server ) ) ,Min( Max( FirstVNF_Mem,RRS ) ,( Const / PN ) ) ) ,Min( ( Max( RRS,DDR ) - ( MDR - FirstVNF_Mem_Server ) ) ,( Max( RRS,RRS ) + Min( MRS ,Const ) ) ) )", "choosing": "( ( ( Max( MUC,MUR ) + Min( RMSe ,MLU ) ) * Min( ( MLU + MUC ) ,Min( MUM ,RRSe ) ) ) / ( Min( Max( RRSe,MUR ) ,( DS * MUR ) ) + ( Max( MLU,CS ) / ( MLU * MUR ) ) ) )", "obj1": 0.248, "obj2": 0.6206602523394213}, {"determining": "Min( Min( ( Min( RRS ,MRS ) / ( ARS + BR ) ) ,( ( PN * FirstVNF_RAM ) / Max( FirstVNF_CPU,RRS ) ) ) ,( ( ( PN + FirstVNF_RAM ) - ( BR + CRS ) ) * ( ( ARS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem,FirstVNF_RAM_Server ) ) ) )", "choosing": "( Max( Min( Max( MUR,MUR ) ,Max( RRSe,RCSe ) ),( Min( MLU ,MLU ) * ( RCSe + MUR ) ) ) - Max( ( ( MLU / RMSe ) * Max( DS,RRSe ) ),( ( MUC * RRSe ) / ( MLU - MUR ) ) ) )", "obj1": 0.228, "obj2": 0.630213004414606}, {"determining": "Max( ( ( ( DDR * CRS ) * RRS ) - MRS ),( Const + CRS ) )", "choosing": "( ( ( Min( CS ,RCSe ) + ( MLU + MUC ) ) * ( ( MUM * RMSe ) - ( MUM / RCSe ) ) ) + ( Min( ( DS - MUC ) ,Max( RCSe,RCSe ) ) / ( ( RRSe + MUR ) - ( MLU - MUC ) ) ) )", "obj1": 0.352, "obj2": 0.5080292169170223}, {"determining": "Max( ( ( ( PN + FirstVNF_RAM_Server ) - ( ACS * MDR ) ) * ( ( AMS * BR ) + Min( FirstVNF_Mem_Server ,ACS ) ) ),( Max( Max( PN,FirstVNF_RAM_Server ),( FirstVNF_CPU_Server * FirstVNF_RAM_Server ) ) * ( Max( MRS,FirstVNF_Mem_Server ) - Max( DDR,DDR ) ) ) )", "choosing": "Max( Max( MUR,( Max( MUR,MLU ) + CS ) ),( Max( RRSe,DS ) - RRSe ) )", "obj1": 0.264, "obj2": 0.7378754208336673}, {"determining": "Min( ( ( Min( FirstVNF_RAM_Server ,ACS ) + ( FirstVNF_Mem_Server * PN ) ) - ( ( ACS - ACS ) - Min( MRS ,DDR ) ) ) ,Max( ( Max( PN,CRS ) + ( AMS / PN ) ),( Max( CRS,RRS ) + ( FirstVNF_CPU_Server + ARS ) ) ) )", "choosing": "Min( Min( MUR ,DS ) ,( MUR + MUM ) )", "obj1": 0.602, "obj2": 0.29739891876412783}, {"determining": "( ( FirstVNF_Mem - DDR ) / ( MDR * ( ACS + RRS ) ) )", "choosing": "( Min( MUM ,MUC ) * ( Max( Max( MLU,RMSe ),MLU ) + RCSe ) )", "obj1": 0.512, "obj2": 0.3827724248006225}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( MDR - Const ) ,( FirstVNF_RAM + ARS ) ) ) - ( Max( ( ARS + MDR ),Max( ( FirstVNF_CPU_Server * PN ),CRS ) ) / ( ( ACS * CRS ) - Min( FirstVNF_CPU_Server ,DDR ) ) ) )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - Max( MUM,( MUM / RMSe ) ) ) - Max( ( Min( MUR ,RCSe ) * Max( DS,MUC ) ),Min( Max( MUR,CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.156, "obj2": 0.7912623559778603}, {"determining": "( ( PN / FirstVNF_Mem ) / ( FirstVNF_CPU_Server * FirstVNF_Mem ) )", "choosing": "Min( ( Min( Min( MUR ,RMSe ) ,Min( MUM ,DS ) ) / ( ( MLU + CS ) / Max( RCSe,CS ) ) ) ,Min( ( ( MLU / DS ) + ( MUC / MUM ) ) ,( ( RCSe - MUC ) * ( RRSe * RRSe ) ) ) )", "obj1": 0.258, "obj2": 0.6126978816068236}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( ( RMSe + MUM ) / Min( MUC ,RRSe ) ) - Min( ( MUR / RCSe ) ,Min( CS ,RMSe ) ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.814, "obj2": 0.16247340031155985}, {"determining": "Max( Min( ( Const + Min( MRS ,( Min( DDR ,( ( FirstVNF_CPU - AMS ) / ARS ) ) / PN ) ) ) ,FirstVNF_CPU_Server ),( FirstVNF_CPU - BR ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( ( ( RCSe - DS ) * MUM ) - MUM ) ) / RCSe ) ,Max( RRSe,RMSe ) )", "obj1": 0.184, "obj2": 0.6594399411154124}, {"determining": "Max( ( ( ( MDR / RRS ) - ( DDR / MRS ) ) / ( Min( PN ,ARS ) - Min( FirstVNF_Mem ,CRS ) ) ),Min( ( ( FirstVNF_CPU + FirstVNF_RAM ) - Max( MDR,FirstVNF_CPU_Server ) ) ,Min( ( BR * ARS ) ,Min( Const ,FirstVNF_CPU ) ) ) )", "choosing": "Min( ( MUM * MUR ) ,( ( DS / RMSe ) * MUC ) )", "obj1": 0.646, "obj2": 0.28506708998982133}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Max( PN,( FirstVNF_Mem_Server + MRS ) ),( FirstVNF_RAM / AMS ) ) / ( ( ( AMS / FirstVNF_CPU ) - ( BR + PN ) ) * ( ( MDR - CRS ) * ( FirstVNF_RAM_Server / ACS ) ) ) )", "choosing": "( ( ( RMSe / ( DS + RRSe ) ) + MLU ) + Min( ( MUM / RRSe ) ,( Max( ( ( MUR / CS ) - ( Max( Min( RMSe ,MUM ),MLU ) + Min( DS ,Min( MUR ,MUR ) ) ) ),Min( CS ,DS ) ) - MUM ) ) )", "obj1": 0.13, "obj2": 0.7096264520789051}, {"determining": "Max( Min( FirstVNF_RAM ,( ACS / ( MDR + ( FirstVNF_Mem + FirstVNF_Mem ) ) ) ),Min( MDR ,CRS ) )", "choosing": "Min( ( ( ( RMSe * MUC ) / ( CS + RRSe ) ) * Min( ( RCSe / MUM ) ,( RRSe * RRSe ) ) ) ,( ( Min( MLU ,MUM ) / ( MLU * MLU ) ) + ( Min( MUR ,CS ) + ( CS * MLU ) ) ) )", "obj1": 0.272, "obj2": 0.5990272060283335}, {"determining": "( Max( ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) / ( RRS / FirstVNF_Mem ) ),( Min( AMS ,MDR ) - Min( ARS ,FirstVNF_CPU ) ) ) * Max( ( ( FirstVNF_RAM + AMS ) - ( BR / AMS ) ),( Max( FirstVNF_Mem_Server,ARS ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe * ( MLU / MLU ) ) + ( MUR + MLU ) )", "obj1": 0.382, "obj2": 0.504454875773438}, {"determining": "Max( ( ( ( DDR - FirstVNF_Mem ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / FirstVNF_CPU_Server ) + ( FirstVNF_RAM / ACS ) ) ),( FirstVNF_CPU_Server * FirstVNF_Mem ) )", "choosing": "( Min( MUR ,DS ) + ( Min( ( MUM / MUC ) ,( MLU - RCSe ) ) / ( Min( MUM ,RCSe ) + Min( RRSe ,RMSe ) ) ) )", "obj1": 0.23, "obj2": 0.7260121987295144}, {"determining": "( ( BR / ACS ) + ( MRS * ( ( ( FirstVNF_Mem + Const ) * MRS ) + Min( MRS ,MRS ) ) ) )", "choosing": "Min( ( MUR + ( ( MUR + MLU ) + ( MUR - RMSe ) ) ) ,Min( RMSe ,Max( ( MUM * RMSe ),Max( RMSe,MUC ) ) ) )", "obj1": 0.328, "obj2": 0.560044741132911}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( Min( ( MUC - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.198, "obj2": 0.6157523266071744}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( Min( ( FirstVNF_Mem_Server * FirstVNF_Mem ) ,Max( AMS,DDR ) ) ,( ( MDR / ACS ) + Max( FirstVNF_CPU,FirstVNF_Mem_Server ) ) ) ,( Max( ( FirstVNF_Mem_Server - BR ),( FirstVNF_Mem_Server * CRS ) ) + ( Max( FirstVNF_RAM_Server,ARS ) - ( Const / FirstVNF_RAM ) ) ) )", "choosing": "( Min( ( ( RMSe + MLU ) / Max( MUR,MUC ) ) ,( Min( MUC ,CS ) + ( RMSe + RCSe ) ) ) + ( Max( Min( MLU ,MLU ),( DS / CS ) ) - ( Min( RRSe ,RMSe ) * ( MUC - MUC ) ) ) )", "obj1": 0.394, "obj2": 0.4992673107171959}, {"determining": "( ( RRS - AMS ) + ( ACS + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 0.248, "obj2": 0.5380386128419559}, {"determining": "( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( AMS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( Max( MLU,MLU ) / ( MUM / MUR ) )", "obj1": 0.48, "obj2": 0.43490348603348805}, {"determining": "Max( Min( Min( FirstVNF_CPU ,FirstVNF_CPU ) ,( Const - ARS ) ),( FirstVNF_RAM_Server - ( FirstVNF_RAM - BR ) ) )", "choosing": "Max( ( Max( ( DS + MUM ),( DS * RMSe ) ) * ( ( RMSe * RMSe ) * ( MUC / CS ) ) ),Min( ( Max( CS,RRSe ) - ( RMSe / MUR ) ) ,( Max( RCSe,RCSe ) + ( MUM / MLU ) ) ) )", "obj1": 0.466, "obj2": 0.40659975245728197}, {"determining": "( ( Const - RRS ) + ( ( ( FirstVNF_CPU / CRS ) / ( RRS * FirstVNF_CPU_Server ) ) + ( ( FirstVNF_CPU_Server / MDR ) - ( Const * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( Max( CS,MUC ) + ( MUM / MLU ) ) - ( Max( RRSe,MUM ) + ( CS + RMSe ) ) ) / ( MUM * RMSe ) )", "obj1": 0.14, "obj2": 0.6859249682704731}, {"determining": "( Min( Max( ( AMS * PN ),Max( FirstVNF_RAM,MRS ) ) ,Min( ( ARS - CRS ) ,( PN * AMS ) ) ) / Max( ( ( MDR - ARS ) + Max( FirstVNF_RAM,FirstVNF_CPU ) ),Max( ( FirstVNF_RAM_Server * AMS ),Max( AMS,DDR ) ) ) )", "choosing": "Min( ( MLU * ( ( DS / MUR ) * ( MUR + CS ) ) ) ,( Max( ( MUR / MUR ),Max( RRSe,RRSe ) ) / ( ( RRSe - MUC ) * ( RCSe + CS ) ) ) )", "obj1": 0.328, "obj2": 0.5461150620599099}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}], "2": [{"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( PN,MRS ) )", "choosing": "( MLU / ( DS - MLU ) )", "obj1": 0.056, "obj2": 0.7580447875786599}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( ( ( ( DDR + ACS ) + Max( FirstVNF_Mem_Server,FirstVNF_Mem ) ) / BR ) / Max( AMS,PN ) )", "choosing": "( Max( Min( Max( MUC,RMSe ) ,Max( RRSe,MUR ) ),( Min( MUM ,DS ) / ( CS - RRSe ) ) ) + ( ( ( MLU + RMSe ) / ( CS + MUM ) ) + ( ( RMSe * MUR ) - ( MUR / DS ) ) ) )", "obj1": 0.494, "obj2": 0.3711212412471176}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.93, "obj2": 0.05352149622874247}, {"determining": "( ( ( MRS + FirstVNF_CPU ) - ( ACS / FirstVNF_CPU_Server ) ) + ( ( FirstVNF_CPU - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) )", "choosing": "Max( ( ( MUC - MUC ) + Min( DS ,MUR ) ),Min( ( ( ( Max( MUM,MUR ) * ( DS / MUC ) ) / ( DS / DS ) ) * MLU ) ,( RCSe + MUR ) ) )", "obj1": 0.72, "obj2": 0.23137607319572462}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( MUC - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 0.778, "obj2": 0.17997963780490966}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( ( Min( FirstVNF_RAM_Server ,ACS ) + ( FirstVNF_Mem_Server * PN ) ) - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - ( Max( ( FirstVNF_RAM_Server + MDR ),Max( FirstVNF_CPU_Server,CRS ) ) / ( ( ACS * CRS ) - Min( FirstVNF_CPU_Server ,DDR ) ) ) )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( DS,Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.08, "obj2": 0.7270221993748742}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( MUM - ( CS - DS ) )", "obj1": 0.424, "obj2": 0.42491120240531055}, {"determining": "( ( ( ( Const + CRS ) / ( FirstVNF_Mem / Const ) ) - ( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( AMS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) ) ) + ( ( ( FirstVNF_CPU / CRS ) / ( RRS * FirstVNF_RAM_Server ) ) + ( ( FirstVNF_CPU_Server / MDR ) - ( Const * FirstVNF_CPU_Server ) ) ) )", "choosing": "( MLU / Min( Max( Max( MLU,DS ),Min( RMSe ,RRSe ) ) ,Min( ( MUR + MUC ) ,( CS * RMSe ) ) ) )", "obj1": 0.27, "obj2": 0.5219754481625412}, {"determining": "( ( ( Min( DDR ,( ( FirstVNF_RAM / ( Max( FirstVNF_CPU,FirstVNF_Mem ) * FirstVNF_CPU_Server ) ) + MRS ) ) + Max( FirstVNF_Mem_Server,FirstVNF_Mem ) ) / BR ) / Max( AMS,PN ) )", "choosing": "( ( RRSe - MLU ) * ( ( ( MLU + RMSe ) / ( CS + MUM ) ) + ( ( RMSe * MUR ) - ( MUR / DS ) ) ) )", "obj1": 0.122, "obj2": 0.6939368601757926}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "( ( MUC * Min( RRSe ,Min( RMSe ,MUC ) ) ) * ( RRSe - RMSe ) )", "obj1": 0.712, "obj2": 0.2419753579262493}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.32, "obj2": 0.48151823650993164}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( Min( Min( ( ( MRS + FirstVNF_Mem ) - ( RRS - FirstVNF_Mem_Server ) ) ,Min( Max( FirstVNF_Mem,RRS ) ,( Const / PN ) ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( Max( MUC,MUR ) + Min( RMSe ,MLU ) ) * Min( ( MLU + MUC ) ,Min( MUM ,RRSe ) ) ) ) )", "obj1": 0.222, "obj2": 0.5623680229508953}, {"determining": "( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( ACS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( Max( MLU,MLU ) / ( ( RMSe * MUR ) / MUR ) )", "obj1": 0.414, "obj2": 0.44520139861607444}, {"determining": "( Min( MDR ,FirstVNF_Mem ) - ( ACS - FirstVNF_CPU ) )", "choosing": "Max( ( MUR / RCSe ),Min( RRSe ,DS ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "Max( Max( ( FirstVNF_RAM * FirstVNF_Mem_Server ),( BR / ACS ) ),( ( FirstVNF_CPU + AMS ) + ( Const / RRS ) ) )", "choosing": "Min( ( CS * RCSe ) ,Min( ( MUM - CS ) ,MUM ) )", "obj1": 0.356, "obj2": 0.47744783145247643}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "( ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) + ( ACS + Const ) )", "choosing": "Min( ( Max( ( DS / RMSe ),( MUC * MLU ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 0.22, "obj2": 0.5963381550742419}, {"determining": "( Min( MDR ,FirstVNF_Mem ) - ( ACS - FirstVNF_CPU ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 0.886, "obj2": 0.11785403034828026}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "Min( ( Max( CRS,FirstVNF_CPU ) + ( FirstVNF_CPU_Server - MRS ) ) ,( ( Const / MDR ) + ( FirstVNF_RAM_Server + DDR ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Const / BR ) * ( FirstVNF_CPU * FirstVNF_Mem ) )", "choosing": "( ( MUC / RMSe ) - ( MUR + DS ) )", "obj1": 0.124, "obj2": 0.6808751156793426}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.646, "obj2": 0.24743872458386362}, {"determining": "Min( Min( FirstVNF_CPU ,FirstVNF_CPU_Server ) ,( ARS - Const ) )", "choosing": "( ( MUM * ( DS - MLU ) ) / Min( MUR ,MUC ) )", "obj1": 0.906, "obj2": 0.08954298001688388}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - PN )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / ( Min( RMSe ,DS ) - Max( MLU,CS ) ) ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 0.986, "obj2": 0.011446299706969545}, {"determining": "( ( ( MRS + FirstVNF_CPU ) - ( ACS / FirstVNF_CPU_Server ) ) + ( Min( Const ,Const ) + ( ARS + ARS ) ) )", "choosing": "( ( Max( MUM,MUR ) * ( DS / MUC ) ) / ( DS / DS ) )", "obj1": 0.492, "obj2": 0.37451777642849515}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( FirstVNF_RAM_Server,MRS ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( Max( CRS,( DDR / FirstVNF_RAM ) ) - Min( MRS ,( ( ( FirstVNF_CPU_Server * FirstVNF_RAM ) + ( RRS / ARS ) ) + MRS ) ) )", "choosing": "( Max( Min( RCSe ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.368, "obj2": 0.46413970716475494}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,MRS )", "choosing": "( ( MUM * MUM ) / Min( MUR ,MUC ) )", "obj1": 0.894, "obj2": 0.09846773933822202}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( ( RMSe + MUM ) / Min( MUC ,RRSe ) ) - Min( ( MUR / RCSe ) ,Min( CS ,RMSe ) ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.802, "obj2": 0.17073529667299067}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( ( FirstVNF_Mem_Server * MDR ) + FirstVNF_Mem ) )", "choosing": "Min( ( RCSe - RRSe ) ,( Max( MUR,CS ) - ( MLU + CS ) ) )", "obj1": 0.176, "obj2": 0.6286318038914682}, {"determining": "( Min( MDR ,MDR ) - ( ( PN + CRS ) / ( DDR / Min( PN ,FirstVNF_CPU_Server ) ) ) )", "choosing": "Max( ( Max( Min( MLU ,CS ),MUC ) - RCSe ),Min( MUR ,( ( CS * ( Min( ( CS / DS ) ,CS ) - DS ) ) * MLU ) ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) )", "choosing": "( ( MUM * MUM ) / Min( MUR ,MUC ) )", "obj1": 0.906, "obj2": 0.08954298001688388}, {"determining": "( ( PN / FirstVNF_Mem ) / Max( FirstVNF_CPU_Server,CRS ) )", "choosing": "Min( ( Min( Min( MUR ,RMSe ) ,Min( MUM ,DS ) ) / ( ( MLU + CS ) / Max( RCSe,CS ) ) ) ,( Max( CS,CS ) + ( CS - CS ) ) )", "obj1": 0.578, "obj2": 0.3080819709359817}, {"determining": "( ( RRS + FirstVNF_Mem ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( RRSe,CS ) - ( MLU + CS ) )", "obj1": 0.194, "obj2": 0.6151530017285431}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( PN + MDR ) + ( FirstVNF_RAM_Server - FirstVNF_CPU ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( MRS / ( FirstVNF_RAM_Server / PN ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "( ( MUC * Min( RRSe ,CS ) ) * ( RRSe - RMSe ) )", "obj1": 0.79, "obj2": 0.17595275561052118}, {"determining": "( Max( Max( PN,( FirstVNF_Mem_Server * MRS ) ),( ( RRS * MRS ) + ( BR * Const ) ) ) / ( ( ( AMS / FirstVNF_CPU ) - ( BR + PN ) ) * ( ( FirstVNF_RAM_Server / ACS ) * ( MDR - CRS ) ) ) )", "choosing": "( ( ( RMSe / ( DS + RRSe ) ) + MLU ) + Min( ( MUM / RRSe ) ,( Max( ( ( MUR / CS ) - ( Max( Min( RMSe ,MUM ),MLU ) + Min( DS ,( RMSe + RRSe ) ) ) ),Min( CS ,DS ) ) / MUM ) ) )", "obj1": 0.204, "obj2": 0.6025324729718724}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Max( ( ( ( RMSe + MUM ) / Min( MUC ,RRSe ) ) - Min( ( MUR / RCSe ) ,Min( CS ,RMSe ) ) ),Max( ( ( MLU + RCSe ) * Max( MUR,MUR ) ),( ( MLU * MUM ) * ( RCSe + RRSe ) ) ) )", "obj1": 0.8, "obj2": 0.17491606631820097}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.2, "obj2": 0.6097118460847647}, {"determining": "( Max( Max( PN,( FirstVNF_Mem_Server + MRS ) ),( FirstVNF_RAM / AMS ) ) / ( ( ( AMS / FirstVNF_CPU ) - ( BR + PN ) ) * ( ( MDR - CRS ) * ( FirstVNF_RAM_Server / ACS ) ) ) )", "choosing": "( ( ( RMSe / ( DS + RRSe ) ) + MLU ) + Min( ( MUM / RRSe ) ,( Max( ( ( MUR / CS ) - ( Max( Min( RMSe ,MUM ),MLU ) + Min( DS ,Min( MUR ,MUR ) ) ) ),Min( CS ,DS ) ) - MUM ) ) )", "obj1": 0.204, "obj2": 0.6025324729718724}, {"determining": "( Min( Const ,MDR ) * Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( CS * CS ) / RCSe ) )", "obj1": 0.2, "obj2": 0.6097118460847647}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) * Min( ( ARS - FirstVNF_Mem ) ,Const ) )", "choosing": "Min( ( MUC - Min( MUM ,MUM ) ) ,Max( MUR,Max( RRSe,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - ( FirstVNF_CPU - FirstVNF_Mem ) ) * ( MRS - ( Min( BR ,DDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( CS + MUC ) * ( ( MUR / RMSe ) + Max( ( RMSe + ( MUR + ( Min( RRSe ,Min( MLU ,RRSe ) ) / ( Min( RRSe ,MLU ) + ( RRSe * MUC ) ) ) ) ),DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_Mem_Server ) * ( ( DDR * MDR ) - MRS ) )", "choosing": "Max( ( ( ( CS + DS ) - ( CS - ( MUM * RRSe ) ) ) + CS ),( ( Max( ( ( RMSe + RRSe ) / ( RMSe / DS ) ),( RCSe * ( CS / ( Min( MUR ,RRSe ) - Max( MUM,RRSe ) ) ) ) ) + ( MUR * Max( RCSe,Min( RCSe ,( MUM * CS ) ) ) ) ) * ( DS / ( DS * MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / Max( BR,AMS ) ) ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - FirstVNF_CPU )", "choosing": "( ( CS - ( Max( MUC,RRSe ) * ( RRSe - RRSe ) ) ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( Max( MUC,RRSe ) * ( RRSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Min( Min( PN ,MRS ) ,( ACS / ACS ) ) ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( ( ( RMSe - RRSe ) + Min( DS ,RMSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "( ( RMSe - RRSe ) + Min( DS ,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Min( Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) ) ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / ( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) + ( Max( AMS,Const ) + ( DDR + BR ) ) ) ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( ( RCSe / RRSe ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / DDR ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( Max( DS,MUM ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ( ( MDR + FirstVNF_RAM_Server ) / BR ) ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( RMSe / CS ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( CRS ,BR ) / ( PN / ( ( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) ) * AMS ) ) )", "choosing": "( ( Min( RMSe ,DS ) - Max( MLU,( Max( MUC,MLU ) - ( MUR / CS ) ) ) ) + ( ( CS + RCSe ) / ( RMSe + MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) )", "choosing": "( ( Min( RMSe ,DS ) - Max( MLU,CS ) ) + ( ( CS + RCSe ) / ( RMSe + MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( CRS,( DDR / FirstVNF_RAM ) ) - ( ( FirstVNF_RAM_Server - ( CRS + ACS ) ) + ( ( MDR + FirstVNF_RAM_Server ) / BR ) ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * Min( Min( MUC ,MUC ) ,( RMSe / CS ) ) ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ARS / FirstVNF_Mem_Server ) - Max( Const,ACS ) ) - Max( FirstVNF_CPU,Min( RRS ,BR ) ) )", "choosing": "( Min( Max( RMSe,MUR ) ,( MUM / CS ) ) - ( ( CS + ( RCSe - DS ) ) - ( CS - MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( CRS - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( DS * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "( Min( Max( MUM,RRSe ) ,( DS * MUM ) ) - ( RRSe / RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( BR - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + Min( Max( MUM,RRSe ) ,( DS * MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - Max( Max( Min( FirstVNF_Mem ,DDR ),( PN - CRS ) ),( Min( MDR ,MRS ) * Min( BR ,PN ) ) ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) ) * Const ) - ( MRS + MRS ) )", "choosing": "Max( Max( ( RCSe * MUM ),( MUM * RCSe ) ),( Min( MUR ,MUR ) * ( ( MLU - DS ) + MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( ( ( MDR * Const ) - ( MRS + MRS ) ) - FirstVNF_CPU_Server ) ) )", "choosing": "( RCSe / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}], "3": [{"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( PN,MRS ) )", "choosing": "( MLU / ( DS - MLU ) )", "obj1": 0.056, "obj2": 0.7580447875786599}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.93, "obj2": 0.05352149622874247}, {"determining": "( ( Max( Min( Const ,MDR ),( FirstVNF_CPU_Server - RRS ) ) * ( ( FirstVNF_CPU / FirstVNF_Mem_Server ) + ( DDR - CRS ) ) ) + ( ( ( PN / FirstVNF_Mem ) + ( FirstVNF_Mem - Const ) ) + ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) - ( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( MUC - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 0.778, "obj2": 0.17997963780490966}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( ( Min( FirstVNF_RAM_Server ,ACS ) + ( FirstVNF_Mem_Server * PN ) ) - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - ( Max( ( FirstVNF_RAM_Server + MDR ),Max( FirstVNF_CPU_Server,CRS ) ) / ( ( ACS * CRS ) - Min( FirstVNF_CPU_Server ,DDR ) ) ) )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( DS,Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.08, "obj2": 0.7270221993748742}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( Min( MDR ,FirstVNF_Mem ) - ( ACS - FirstVNF_CPU ) )", "choosing": "Max( ( MUR / RCSe ),Min( RRSe ,DS ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.118, "obj2": 0.6809454333626828}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( MUM - ( CS - DS ) )", "obj1": 0.424, "obj2": 0.42491120240531055}, {"determining": "( ( ( ( Const + CRS ) / ( FirstVNF_Mem / Const ) ) - ( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( AMS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) ) ) + ( ( ( FirstVNF_CPU / CRS ) / ( RRS * FirstVNF_RAM_Server ) ) + ( ( FirstVNF_CPU_Server / MDR ) - ( Const * FirstVNF_CPU_Server ) ) ) )", "choosing": "( MLU / Min( Max( Max( MLU,DS ),Min( RMSe ,RRSe ) ) ,Min( ( MUR + MUC ) ,( CS * RMSe ) ) ) )", "obj1": 0.27, "obj2": 0.5219754481625412}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( Min( PN ,FirstVNF_CPU ) - CRS ) )", "choosing": "( ( MUC * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.204, "obj2": 0.5898067905889878}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( ACS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( Max( MLU,MLU ) / ( ( RMSe * MUR ) / MUR ) )", "obj1": 0.414, "obj2": 0.44520139861607444}, {"determining": "( ( ( FirstVNF_CPU - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( Min( PN ,FirstVNF_Mem ) + Max( AMS,AMS ) ) )", "choosing": "( ( Max( MUM,MUR ) * ( DS / MUC ) ) / ( ( Min( ( RCSe + ( RRSe * MUR ) ) ,Max( MLU,( RMSe + Min( DS ,MLU ) ) ) ) / DS ) / DS ) )", "obj1": 0.556, "obj2": 0.33765460411732184}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 0.534, "obj2": 0.36232820437793134}, {"determining": "( Min( Min( ( ( MRS + FirstVNF_Mem ) - ( RRS - FirstVNF_Mem_Server ) ) ,Min( Max( FirstVNF_Mem,RRS ) ,( Const / PN ) ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( Max( MUC,MUR ) + Min( RMSe ,MLU ) ) * Min( ( MLU + MUC ) ,Min( MUM ,RRSe ) ) ) ) )", "obj1": 0.222, "obj2": 0.5623680229508953}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ),FirstVNF_RAM_Server ) / Max( BR,AMS ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.124, "obj2": 0.6760647253609664}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.15816833416300252}, {"determining": "Min( ( Max( CRS,FirstVNF_CPU ) + ( FirstVNF_CPU_Server - MRS ) ) ,( ( Const / MDR ) + ( FirstVNF_RAM_Server + DDR ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.562, "obj2": 0.3246273087924629}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - PN )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / ( Min( RMSe ,DS ) - Max( MLU,CS ) ) ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 0.986, "obj2": 0.011446299706969545}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( FirstVNF_RAM_Server,MRS ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Min( MDR ,FirstVNF_Mem ) - ( ACS - FirstVNF_CPU ) )", "choosing": "Max( ( MUR / RCSe ),Min( RRSe ,DS ) )", "obj1": 0.866, "obj2": 0.1274277289042769}, {"determining": "( Min( Const ,MRS ) + ( ACS + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.234, "obj2": 0.5618646987733076}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( Min( ( ( CRS - FirstVNF_CPU ) - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) ,( FirstVNF_Mem_Server / CRS ) ) * ( DDR - PN ) )", "choosing": "Max( ( ( ( MLU + ( MLU - MLU ) ) - ( ( MUR + Min( MUR ,( MUM * ( DS * RRSe ) ) ) ) - DS ) ) * RCSe ),MLU )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.15816833416300252}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 0.534, "obj2": 0.36232820437793134}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.2, "obj2": 0.6097118460847647}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( ( FirstVNF_Mem_Server * MDR ) + FirstVNF_Mem ) )", "choosing": "Min( ( RCSe - RRSe ) ,( Max( MUR,CS ) - ( MLU + CS ) ) )", "obj1": 0.176, "obj2": 0.6286318038914682}, {"determining": "( Min( ACS ,MDR ) * Min( Const ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( MUR / Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) ) )", "obj1": 0.152, "obj2": 0.6613606932242824}, {"determining": "( ( RRS + FirstVNF_Mem ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( RRSe,CS ) - ( MLU + CS ) )", "obj1": 0.194, "obj2": 0.6151530017285431}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( PN + MDR ) + ( FirstVNF_RAM_Server - FirstVNF_CPU ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( Min( Const ,MDR ) * Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( CS * CS ) / RCSe ) )", "obj1": 0.198, "obj2": 0.6135271086554889}, {"determining": "( Min( Const ,MDR ) * Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( CS * CS ) / RCSe ) )", "obj1": 0.2, "obj2": 0.6097118460847647}, {"determining": "( Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MDR ) * Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( MUR * CS ) / RCSe ) )", "obj1": 0.196, "obj2": 0.6137430475744119}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) * Min( ( ARS - FirstVNF_Mem ) ,Const ) )", "choosing": "Min( ( MUC - Min( MUM ,MUM ) ) ,Max( MUR,Max( RRSe,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - ( FirstVNF_CPU - FirstVNF_Mem ) ) * ( MRS - ( Min( BR ,DDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( CS + MUC ) * ( ( MUR / RMSe ) + Max( ( RMSe + ( MUR + ( Min( RRSe ,Min( MLU ,RRSe ) ) / ( Min( RRSe ,MLU ) + ( RRSe * MUC ) ) ) ) ),DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_Mem_Server ) * ( ( DDR * MDR ) - MRS ) )", "choosing": "Max( ( ( ( CS + DS ) - ( CS - ( MUM * RRSe ) ) ) + CS ),( ( Max( ( ( RMSe + RRSe ) / ( RMSe / DS ) ),( RCSe * ( CS / ( Min( MUR ,RRSe ) - Max( MUM,RRSe ) ) ) ) ) + ( MUR * Max( RCSe,Min( RCSe ,( MUM * CS ) ) ) ) ) * ( DS / ( DS * MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / Max( BR,AMS ) ) ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - FirstVNF_CPU )", "choosing": "( ( CS - ( Max( MUC,RRSe ) * ( RRSe - RRSe ) ) ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( Max( MUC,RRSe ) * ( RRSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Min( Min( PN ,MRS ) ,( ACS / ACS ) ) ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( ( ( RMSe - RRSe ) + Min( DS ,RMSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "( ( RMSe - RRSe ) + Min( DS ,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Min( Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) ) ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / ( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) + ( Max( AMS,Const ) + ( DDR + BR ) ) ) ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( ( RCSe / RRSe ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / DDR ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( Max( DS,MUM ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ( ( MDR + FirstVNF_RAM_Server ) / BR ) ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( RMSe / CS ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( CRS ,BR ) / ( PN / ( ( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) ) * AMS ) ) )", "choosing": "( ( Min( RMSe ,DS ) - Max( MLU,( Max( MUC,MLU ) - ( MUR / CS ) ) ) ) + ( ( CS + RCSe ) / ( RMSe + MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) )", "choosing": "( ( Min( RMSe ,DS ) - Max( MLU,CS ) ) + ( ( CS + RCSe ) / ( RMSe + MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( CRS,( DDR / FirstVNF_RAM ) ) - ( ( FirstVNF_RAM_Server - ( CRS + ACS ) ) + ( ( MDR + FirstVNF_RAM_Server ) / BR ) ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * Min( Min( MUC ,MUC ) ,( RMSe / CS ) ) ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}], "4": [{"determining": "( ( RRS - AMS ) + Const )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( MUR / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( PN,MRS ) )", "choosing": "( MLU / ( DS - MLU ) )", "obj1": 0.056, "obj2": 0.7580447875786599}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.93, "obj2": 0.05352149622874247}, {"determining": "( ( RRS - AMS ) + ( ACS + ( Min( Const ,MDR ) * Min( Const ,MRS ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.764, "obj2": 0.16430059627753962}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( ( ( MUR / RCSe ) * MLU ) * ( DS + MUR ) )", "obj1": 0.828, "obj2": 0.11406669044650897}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( ( Min( FirstVNF_RAM_Server ,ACS ) + ( FirstVNF_Mem_Server * PN ) ) - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - ( Max( ( FirstVNF_RAM_Server + MDR ),Max( FirstVNF_CPU_Server,CRS ) ) / ( ( ACS * CRS ) - Min( FirstVNF_CPU_Server ,DDR ) ) ) )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( DS,Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.08, "obj2": 0.7270221993748742}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.118, "obj2": 0.6809454333626828}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( MUM - ( CS - DS ) )", "obj1": 0.424, "obj2": 0.42491120240531055}, {"determining": "( ( ( ( Const + CRS ) / ( FirstVNF_Mem / Const ) ) - ( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( AMS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) ) ) + ( ( ( FirstVNF_CPU / CRS ) / ( RRS * FirstVNF_RAM_Server ) ) + ( ( FirstVNF_CPU_Server / MDR ) - ( Const * FirstVNF_CPU_Server ) ) ) )", "choosing": "( MLU / Min( Max( Max( MLU,DS ),Min( RMSe ,RRSe ) ) ,Min( ( MUR + MUC ) ,( CS * RMSe ) ) ) )", "obj1": 0.27, "obj2": 0.5219754481625412}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( ACS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( Max( MLU,MLU ) / ( ( RMSe * MUR ) / MUR ) )", "obj1": 0.414, "obj2": 0.44520139861607444}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "Min( ( Max( CRS,FirstVNF_CPU ) + ( FirstVNF_CPU_Server - MRS ) ) ,( ( Const / MDR ) + ( FirstVNF_RAM_Server + DDR ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 0.534, "obj2": 0.36232820437793134}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "( Min( ( ( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) ) - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.222, "obj2": 0.5507176527079317}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.562, "obj2": 0.3246273087924629}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( Min( PN ,FirstVNF_CPU ) - CRS ) )", "choosing": "( ( MUC * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.204, "obj2": 0.5898067905889878}, {"determining": "( Max( ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ),FirstVNF_RAM_Server ) / Max( BR,AMS ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.124, "obj2": 0.6760647253609664}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.212, "obj2": 0.5693487438877771}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.518, "obj2": 0.3639124618300771}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - PN )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / ( Min( RMSe ,DS ) - Max( MLU,CS ) ) ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 0.986, "obj2": 0.011446299706969545}, {"determining": "( ( Max( ARS,ARS ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) ) )", "obj1": 0.786, "obj2": 0.1542967103661295}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( FirstVNF_Mem / Const ) * Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( Min( RMSe ,RRSe ) * CS ) / RCSe ) )", "obj1": 0.176, "obj2": 0.6267575167371482}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "( Min( FirstVNF_RAM_Server ,ARS ) / Max( FirstVNF_RAM_Server,MRS ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( ( FirstVNF_Mem + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / Max( MUM,( Max( DS,MUC ) * MUR ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.208, "obj2": 0.5776951074749849}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.2, "obj2": 0.6097118460847647}, {"determining": "( Min( ACS ,MDR ) * Min( Const ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( MUR / Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) ) )", "obj1": 0.152, "obj2": 0.6613606932242824}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.15816833416300252}, {"determining": "( ( RRS + FirstVNF_Mem ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( RRSe,CS ) - ( MLU + CS ) )", "obj1": 0.194, "obj2": 0.6151530017285431}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "Max( ( ( FirstVNF_CPU + BR ) * AMS ),( Max( RRS,FirstVNF_CPU ) - ACS ) )", "choosing": "( ( ( MUM / CS ) + ( MUC / MUM ) ) - ( ( MUR + DS ) - Max( RRSe,MUM ) ) )", "obj1": 0.176, "obj2": 0.6172725488320728}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( Min( MRS ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 0.534, "obj2": 0.36232820437793134}, {"determining": "( ( PN + MDR ) + ( FirstVNF_RAM_Server - FirstVNF_CPU ) )", "choosing": "( ( RMSe + DS ) / ( DS - MLU ) )", "obj1": 0.15, "obj2": 0.6684053084859471}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.15816833416300252}, {"determining": "Max( ( ( ( FirstVNF_Mem - DDR ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / ACS ) + ( FirstVNF_RAM / ACS ) ) ),Max( ( FirstVNF_CPU - FirstVNF_CPU ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) )", "choosing": "( Max( ( Min( MUC ,MUR ) - Max( RRSe,RCSe ) ),Max( ( RMSe - RMSe ),( ( RRSe / ( RRSe * MUR ) ) - ( MUM * RMSe ) ) ) ) + ( Min( ( MUM / MUC ) ,( MLU - RCSe ) ) / ( Min( MUM ,CS ) + Min( RRSe ,RMSe ) ) ) )", "obj1": 0.198, "obj2": 0.612291022840273}, {"determining": "( Min( ( ( CRS - FirstVNF_CPU ) - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) ,( FirstVNF_Mem_Server / CRS ) ) * ( DDR - PN ) )", "choosing": "Max( ( ( ( MLU + ( MLU - MLU ) ) - ( ( MUR + Min( MUR ,( MUM * ( DS * RRSe ) ) ) ) - DS ) ) * RCSe ),MLU )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MDR ) * Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( MUR * CS ) / RCSe ) )", "obj1": 0.196, "obj2": 0.6137430475744119}, {"determining": "( Min( Const ,MDR ) * Min( Max( FirstVNF_CPU,Min( MRS ,BR ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( CS * CS ) / RCSe ) )", "obj1": 0.2, "obj2": 0.6097118460847647}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) * Min( ( ARS - FirstVNF_Mem ) ,Const ) )", "choosing": "Min( ( MUC - Min( MUM ,MUM ) ) ,Max( MUR,Max( RRSe,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - ( FirstVNF_CPU - FirstVNF_Mem ) ) * ( MRS - ( Min( BR ,DDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( CS + MUC ) * ( ( MUR / RMSe ) + Max( ( RMSe + ( MUR + ( Min( RRSe ,Min( MLU ,RRSe ) ) / ( Min( RRSe ,MLU ) + ( RRSe * MUC ) ) ) ) ),DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_Mem_Server ) * ( ( DDR * MDR ) - MRS ) )", "choosing": "Max( ( ( ( CS + DS ) - ( CS - ( MUM * RRSe ) ) ) + CS ),( ( Max( ( ( RMSe + RRSe ) / ( RMSe / DS ) ),( RCSe * ( CS / ( Min( MUR ,RRSe ) - Max( MUM,RRSe ) ) ) ) ) + ( MUR * Max( RCSe,Min( RCSe ,( MUM * CS ) ) ) ) ) * ( DS / ( DS * MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / Max( BR,AMS ) ) ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - FirstVNF_CPU )", "choosing": "( ( CS - ( Max( MUC,RRSe ) * ( RRSe - RRSe ) ) ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( Max( MUC,RRSe ) * ( RRSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Min( Min( PN ,MRS ) ,( ACS / ACS ) ) ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( ( ( RMSe - RRSe ) + Min( DS ,RMSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "( ( RMSe - RRSe ) + Min( DS ,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Min( Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) ) ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / ( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) + ( Max( AMS,Const ) + ( DDR + BR ) ) ) ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( ( RCSe / RRSe ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( BR - AMS ) / ( FirstVNF_Mem_Server / DDR ) ) ,( ( ACS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( Max( Max( DS,MUM ),Max( DS,MUR ) ) / Max( ( RCSe / MUC ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ( ( MDR + FirstVNF_RAM_Server ) / BR ) ) + Min( FirstVNF_Mem_Server ,BR ) ) - ( ( ARS + DDR ) / Max( Const,FirstVNF_CPU ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( RMSe / CS ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}], "5": [{"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Min( ( ( FirstVNF_RAM_Server - AMS ) / Max( Max( ACS,CRS ),FirstVNF_RAM ) ) ,Max( ( Max( MDR,AMS ) - FirstVNF_Mem_Server ),Const ) ) - FirstVNF_RAM_Server ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( ( MUM + MLU ) - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + Const )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( MUR / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / ( RRSe * DS ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.048, "obj2": 0.7504405638074119}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( ( ( MUR / RCSe ) * MLU ) * ( DS + MUR ) )", "obj1": 0.828, "obj2": 0.11406669044650897}, {"determining": "( ( ( ( Min( ACS ,( Const / Max( ( FirstVNF_CPU / FirstVNF_CPU_Server ),BR ) ) ) + PN ) - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( DS / DS ) / ( Max( Min( RRSe ,( MLU + Min( Min( DS ,( DS - RCSe ) ) ,MLU ) ) ),CS ) * ( DS / MUC ) ) )", "obj1": 0.078, "obj2": 0.7158593297038336}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) )", "choosing": "( Min( DS ,RMSe ) - Min( MUC ,CS ) )", "obj1": 0.93, "obj2": 0.05352149622874247}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RRSe / ( ( MUM * MUM ) * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.268, "obj2": 0.5139153793308547}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.118, "obj2": 0.6809454333626828}, {"determining": "( Min( ( FirstVNF_CPU - FirstVNF_CPU_Server ) ,( FirstVNF_CPU_Server - FirstVNF_CPU ) ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( MUM - ( CS - DS ) )", "obj1": 0.424, "obj2": 0.42491120240531055}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "Max( ( ( ( FirstVNF_Mem - DDR ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / ACS ) + ( FirstVNF_RAM / ACS ) ) ),Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.174, "obj2": 0.5917289458207318}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "( ( RRS - AMS ) + ( ACS + ( Min( Const ,MDR ) * Min( Const ,MRS ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.764, "obj2": 0.16430059627753962}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.73, "obj2": 0.1841191566404429}, {"determining": "( ( ( Min( ( ( Min( RRS ,Min( RRS ,RRS ) ) + ( FirstVNF_RAM - FirstVNF_RAM_Server ) ) / MDR ) ,CRS ) - FirstVNF_CPU_Server ) + FirstVNF_CPU_Server ) / ( Max( Max( ( RRS - ( BR - RRS ) ),FirstVNF_CPU ),FirstVNF_Mem_Server ) - BR ) )", "choosing": "( ( Max( MUM,( MLU + ( DS + ( MUM * MUR ) ) ) ) * RRSe ) + Max( RRSe,MUM ) )", "obj1": 0.95, "obj2": 0.04669776994312548}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( ( Max( Max( AMS,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * Min( DS ,( DS - RCSe ) ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.72, "obj2": 0.1939404007869139}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.518, "obj2": 0.3639124618300771}, {"determining": "( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( ACS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( Max( MLU,MLU ) / ( ( RMSe * MUR ) / MUR ) )", "obj1": 0.414, "obj2": 0.44520139861607444}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( Min( PN ,FirstVNF_CPU ) - CRS ) )", "choosing": "( ( MUC * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.204, "obj2": 0.5898067905889878}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "( Min( ( ( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) ) - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.222, "obj2": 0.5507176527079317}, {"determining": "Min( ( Max( CRS,FirstVNF_CPU ) + ( FirstVNF_CPU_Server - MRS ) ) ,( ( Const / MDR ) + ( FirstVNF_RAM_Server + DDR ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.562, "obj2": 0.3246273087924629}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.212, "obj2": 0.5693487438877771}, {"determining": "( Max( ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ),FirstVNF_RAM_Server ) / Max( BR,AMS ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.124, "obj2": 0.6760647253609664}, {"determining": "( ( Const * RRS ) - ( Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( Max( ( RMSe - RMSe ),Min( CS ,RMSe ) ) / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.148, "obj2": 0.6666197816462321}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( ( Max( ARS,ARS ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) ) )", "obj1": 0.786, "obj2": 0.1542967103661295}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - PN )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / ( Min( RMSe ,DS ) - Max( MLU,CS ) ) ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 0.986, "obj2": 0.011446299706969545}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - AMS )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( ( RRSe - MUC ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.53, "obj2": 0.35507993434839963}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / AMS )", "choosing": "( ( DS / RRSe ) / ( MLU + MUR ) )", "obj1": 0.42, "obj2": 0.4428843747122994}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( ( FirstVNF_Mem + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / Max( MUM,( Max( DS,MUC ) * MUR ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.208, "obj2": 0.5776951074749849}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( Min( ACS ,MDR ) * Min( Const ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( MUR / Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) ) )", "obj1": 0.152, "obj2": 0.6613606932242824}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.15816833416300252}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( Min( DDR ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( ( MUR / RCSe ) / RCSe ),MLU )", "obj1": 0.988, "obj2": 0.0043896063695106485}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Max( ( ARS + MDR ),Max( ( FirstVNF_CPU_Server * PN ),CRS ) ) / ( ( ACS * CRS ) - Min( FirstVNF_CPU_Server ,DDR ) ) ) ) ) )", "choosing": "( ( MUM - Min( ( RCSe * ( Max( ( ( CS / MUM ) - DS ),MUR ) - RRSe ) ) ,CS ) ) - RRSe )", "obj1": 0.998, "obj2": 0.0010119048255597468}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.15816833416300252}, {"determining": "( Min( MRS ,Const ) * ( PN - DDR ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) )", "obj1": 0.992, "obj2": 0.003080353547980575}, {"determining": "( Max( ARS,FirstVNF_Mem_Server ) * ( PN - DDR ) )", "choosing": "Max( ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ),MLU )", "obj1": 0.992, "obj2": 0.003080353547980575}, {"determining": "( Min( MRS ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( Min( MRS ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) * Min( ( ARS - FirstVNF_Mem ) ,Const ) )", "choosing": "Min( ( MUC - Min( MUM ,MUM ) ) ,Max( MUR,Max( RRSe,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - ( FirstVNF_CPU - FirstVNF_Mem ) ) * ( MRS - ( Min( BR ,DDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( CS + MUC ) * ( ( MUR / RMSe ) + Max( ( RMSe + ( MUR + ( Min( RRSe ,Min( MLU ,RRSe ) ) / ( Min( RRSe ,MLU ) + ( RRSe * MUC ) ) ) ) ),DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_Mem_Server ) * ( ( DDR * MDR ) - MRS ) )", "choosing": "Max( ( ( ( CS + DS ) - ( CS - ( MUM * RRSe ) ) ) + CS ),( ( Max( ( ( RMSe + RRSe ) / ( RMSe / DS ) ),( RCSe * ( CS / ( Min( MUR ,RRSe ) - Max( MUM,RRSe ) ) ) ) ) + ( MUR * Max( RCSe,Min( RCSe ,( MUM * CS ) ) ) ) ) * ( DS / ( DS * MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / Max( BR,AMS ) ) ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - FirstVNF_CPU )", "choosing": "( ( CS - ( Max( MUC,RRSe ) * ( RRSe - RRSe ) ) ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( Max( MUC,RRSe ) * ( RRSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Min( Min( PN ,MRS ) ,( ACS / ACS ) ) ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( ( ( RMSe - RRSe ) + Min( DS ,RMSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "( ( RMSe - RRSe ) + Min( DS ,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( ( Max( FirstVNF_CPU,MRS ) * ( AMS / PN ) ) - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Min( Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) ) ,MUR ) ,( RCSe / RCSe ) ),( ( RMSe * MUR ) * Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * ACS ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ACS ,CRS ) ) )", "choosing": "Max( Min( Max( MLU,CS ) ,RCSe ),Max( ( RCSe / RRSe ),RCSe ) )", "obj1": 1.0, "obj2": 0.0}], "6": [{"determining": "( ( Min( ( Max( ( ( Const / MDR ) / ( RRS * FirstVNF_CPU ) ),ACS ) * FirstVNF_RAM ) ,FirstVNF_CPU ) + ARS ) * Min( MDR ,( Min( MRS ,Const ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RCSe / RCSe ) - ( MUR - Max( RRSe,Min( ( MUM - MUM ) ,Min( CS ,RRSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Min( ( ( FirstVNF_RAM_Server - AMS ) / Max( Max( ACS,CRS ),FirstVNF_RAM ) ) ,Max( ( Max( MDR,AMS ) - FirstVNF_Mem_Server ),Const ) ) - FirstVNF_RAM_Server ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( ( MUM + MLU ) - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / ( RRSe * DS ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.048, "obj2": 0.7504405638074119}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( ( ( MUR / RCSe ) * MLU ) * ( DS + MUR ) )", "obj1": 0.828, "obj2": 0.11406669044650897}, {"determining": "( ( ( ( Min( ACS ,( Const / Max( ( FirstVNF_CPU / FirstVNF_CPU_Server ),BR ) ) ) + PN ) - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( DS / DS ) / ( Max( Min( RRSe ,( MLU + Min( Min( DS ,( DS - RCSe ) ) ,MLU ) ) ),CS ) * ( DS / MUC ) ) )", "obj1": 0.078, "obj2": 0.7158593297038336}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RRSe / ( ( MUM * MUM ) * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.268, "obj2": 0.5139153793308547}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.118, "obj2": 0.6809454333626828}, {"determining": "( ( FirstVNF_RAM_Server / BR ) / Min( CRS ,FirstVNF_CPU_Server ) )", "choosing": "( ( DS / Max( MUM,( Max( Max( MLU,Min( RCSe ,Min( DS ,RRSe ) ) ),Max( Max( RCSe,RRSe ),( ( MUC * CS ) - RMSe ) ) ) + ( MLU + MLU ) ) ) ) / ( RMSe * ( CS + Min( Min( MUR ,CS ) ,RRSe ) ) ) )", "obj1": 0.422, "obj2": 0.42207862935144624}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "Max( ( ( ( FirstVNF_Mem - DDR ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / ACS ) + ( FirstVNF_RAM / ACS ) ) ),Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.174, "obj2": 0.5917289458207318}, {"determining": "( ( ( Min( ( ( Min( RRS ,Min( RRS ,RRS ) ) + ( FirstVNF_RAM - FirstVNF_RAM_Server ) ) / MDR ) ,CRS ) - FirstVNF_CPU_Server ) + FirstVNF_CPU_Server ) / ( Max( Max( ( RRS - ( BR - RRS ) ),FirstVNF_CPU ),FirstVNF_Mem_Server ) - BR ) )", "choosing": "( ( Max( MUM,( MLU + ( DS + ( MUM * MUR ) ) ) ) * RRSe ) + Max( RRSe,MUM ) )", "obj1": 0.95, "obj2": 0.04669776994312548}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( ( Max( Max( AMS,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * Min( DS ,( DS - RCSe ) ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.72, "obj2": 0.1939404007869139}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( RRS - AMS ) + ( ACS + ( Min( Const ,MDR ) * Min( Const ,MRS ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.764, "obj2": 0.16430059627753962}, {"determining": "( ( ACS / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) ) )", "obj1": 0.752, "obj2": 0.1814639354374626}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * Min( Max( PN,BR ) ,Const ) ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) )", "obj1": 0.334, "obj2": 0.47216671534704324}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) - ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.518, "obj2": 0.3639124618300771}, {"determining": "( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( ACS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( Max( MLU,MLU ) / ( ( RMSe * MUR ) / MUR ) )", "obj1": 0.414, "obj2": 0.44520139861607444}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( Min( PN ,FirstVNF_CPU ) - CRS ) )", "choosing": "( ( MUC * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.204, "obj2": 0.5898067905889878}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "( Min( ( ( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) ) - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.222, "obj2": 0.5507176527079317}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( ( MUC - ( MUC / MLU ) ) * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.92, "obj2": 0.05165112779497102}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.562, "obj2": 0.3162221442844198}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.212, "obj2": 0.5693487438877771}, {"determining": "( Max( ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ),FirstVNF_RAM_Server ) / Max( BR,AMS ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.124, "obj2": 0.6760647253609664}, {"determining": "( ( Max( Min( ACS ,( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( RMSe,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.73, "obj2": 0.1841191566404429}, {"determining": "( ( Const * RRS ) - ( Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( Max( ( RMSe - RMSe ),Min( CS ,RMSe ) ) / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.148, "obj2": 0.6666197816462321}, {"determining": "( ( Max( ARS,ARS ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) ) )", "obj1": 0.786, "obj2": 0.1542967103661295}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - PN )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / ( Min( RMSe ,DS ) - Max( MLU,CS ) ) ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 0.986, "obj2": 0.011446299706969545}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - AMS )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( ( RRSe - MUC ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.53, "obj2": 0.35507993434839963}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / AMS )", "choosing": "( ( DS / RRSe ) / ( MLU + MUR ) )", "obj1": 0.42, "obj2": 0.4428843747122994}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + FirstVNF_CPU_Server ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( MUM ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.1568562503599011}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( ( FirstVNF_Mem + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / Max( MUM,( Max( DS,MUC ) * MUR ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.208, "obj2": 0.5776951074749849}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( ( Max( ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( Min( ACS ,MDR ) * Min( Const ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( MUR / Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) ) )", "obj1": 0.152, "obj2": 0.6613606932242824}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( Min( DDR ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( ( MUR / RCSe ) / RCSe ),MLU )", "obj1": 0.988, "obj2": 0.0043896063695106485}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Max( ( ARS + MDR ),Max( ( FirstVNF_CPU_Server * PN ),CRS ) ) / ( ( ACS * CRS ) - Min( FirstVNF_CPU_Server ,DDR ) ) ) ) ) )", "choosing": "( ( MUM - Min( ( RCSe * ( Max( ( ( CS / MUM ) - DS ),MUR ) - RRSe ) ) ,CS ) ) - RRSe )", "obj1": 0.998, "obj2": 0.0010119048255597468}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( Min( FirstVNF_RAM_Server ,( Min( MRS ,Const ) / CRS ) ) * ( PN - DDR ) )", "choosing": "Max( ( Max( DS,Max( ( MUR / RCSe ),Min( RRSe ,DS ) ) ) + RCSe ),MLU )", "obj1": 0.992, "obj2": 0.003080353547980575}, {"determining": "( Min( MRS ,Const ) * ( PN - DDR ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) )", "obj1": 0.992, "obj2": 0.003080353547980575}, {"determining": "( Min( FirstVNF_RAM_Server ,( FirstVNF_CPU / CRS ) ) * ( PN - DDR ) )", "choosing": "Max( ( MUR / RCSe ),Min( RRSe ,DS ) )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( Min( MRS ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( ( RRS - AMS ) + Const )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( MUR / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) * Min( ( ARS - FirstVNF_Mem ) ,Const ) )", "choosing": "Min( ( MUC - Min( MUM ,MUM ) ) ,Max( MUR,Max( RRSe,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - ( FirstVNF_CPU - FirstVNF_Mem ) ) * ( MRS - ( Min( BR ,DDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( CS + MUC ) * ( ( MUR / RMSe ) + Max( ( RMSe + ( MUR + ( Min( RRSe ,Min( MLU ,RRSe ) ) / ( Min( RRSe ,MLU ) + ( RRSe * MUC ) ) ) ) ),DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_Mem_Server ) * ( ( DDR * MDR ) - MRS ) )", "choosing": "Max( ( ( ( CS + DS ) - ( CS - ( MUM * RRSe ) ) ) + CS ),( ( Max( ( ( RMSe + RRSe ) / ( RMSe / DS ) ),( RCSe * ( CS / ( Min( MUR ,RRSe ) - Max( MUM,RRSe ) ) ) ) ) + ( MUR * Max( RCSe,Min( RCSe ,( MUM * CS ) ) ) ) ) * ( DS / ( DS * MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / Max( BR,AMS ) ) ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * Const ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUM ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - FirstVNF_CPU )", "choosing": "( ( CS - ( Max( MUC,RRSe ) * ( RRSe - RRSe ) ) ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}], "7": [{"determining": "( ( Min( MRS ,Const ) - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( Min( ( MUC - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( ( RRSe + MUC ),( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( Max( ( ( Const / MDR ) / ( RRS * FirstVNF_CPU ) ),ACS ) * FirstVNF_RAM ) ,FirstVNF_CPU ) + ARS ) * Min( MDR ,( Min( MRS ,Const ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RCSe / RCSe ) - ( MUR - Max( RRSe,Min( ( MUM - MUM ) ,Min( CS ,RRSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / ( RRSe * DS ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.048, "obj2": 0.7504405638074119}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( ( ( MUR / RCSe ) * MLU ) * ( DS + MUR ) )", "obj1": 0.828, "obj2": 0.11406669044650897}, {"determining": "( ( ( ( Min( ACS ,( Const / Max( ( FirstVNF_CPU / FirstVNF_CPU_Server ),BR ) ) ) + PN ) - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( DS / DS ) / ( Max( Min( RRSe ,( MLU + Min( Min( DS ,( DS - RCSe ) ) ,MLU ) ) ),CS ) * ( DS / MUC ) ) )", "obj1": 0.078, "obj2": 0.7158593297038336}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RRSe / ( ( MUM * MUM ) * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.268, "obj2": 0.5139153793308547}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.118, "obj2": 0.6809454333626828}, {"determining": "( ( FirstVNF_RAM_Server / BR ) / Min( CRS ,FirstVNF_CPU_Server ) )", "choosing": "( ( DS / Max( MUM,( Max( Max( MLU,Min( RCSe ,Min( DS ,RRSe ) ) ),Max( Max( RCSe,RRSe ),( ( MUC * CS ) - RMSe ) ) ) + ( MLU + MLU ) ) ) ) / ( RMSe * ( CS + Min( Min( MUR ,CS ) ,RRSe ) ) ) )", "obj1": 0.422, "obj2": 0.42207862935144624}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( ( ( Min( ( ( Min( RRS ,Min( RRS ,RRS ) ) + ( FirstVNF_RAM - FirstVNF_RAM_Server ) ) / MDR ) ,CRS ) - FirstVNF_CPU_Server ) + FirstVNF_CPU_Server ) / ( Max( Max( ( RRS - ( BR - RRS ) ),FirstVNF_CPU ),FirstVNF_Mem_Server ) - BR ) )", "choosing": "( ( Max( MUM,( MLU + ( DS + ( MUM * MUR ) ) ) ) * RRSe ) + Max( RRSe,MUM ) )", "obj1": 0.95, "obj2": 0.04669776994312548}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( ( Max( Max( AMS,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * Min( DS ,( DS - RCSe ) ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.72, "obj2": 0.1939404007869139}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "Max( ( ( ( FirstVNF_Mem - DDR ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / ACS ) + ( FirstVNF_RAM / ACS ) ) ),Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.174, "obj2": 0.5917289458207318}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * Min( Max( PN,BR ) ,Const ) ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) )", "obj1": 0.334, "obj2": 0.47216671534704324}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( ( DS + Max( MLU,MUC ) ) ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.518, "obj2": 0.3639124618300771}, {"determining": "( ( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( FirstVNF_Mem + FirstVNF_RAM_Server ) ) * ( Min( CRS ,ARS ) - ( FirstVNF_CPU * FirstVNF_CPU ) ) ) - ( Min( ( ACS / BR ) ,Min( FirstVNF_RAM ,ARS ) ) / ( ( RRS * AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( Max( MLU,MLU ) / ( ( RMSe * MUR ) / MUR ) )", "obj1": 0.414, "obj2": 0.44520139861607444}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "( Min( ( ( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) ) - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.222, "obj2": 0.5507176527079317}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( ( MUC - ( MUC / MLU ) ) * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.92, "obj2": 0.05165112779497102}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) - ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.562, "obj2": 0.3162221442844198}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.212, "obj2": 0.5693487438877771}, {"determining": "( Max( ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ),FirstVNF_RAM_Server ) / Max( BR,AMS ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.124, "obj2": 0.6760647253609664}, {"determining": "( ( Max( Min( ACS ,( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( RMSe,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Const * RRS ) - ( Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( Max( ( RMSe - RMSe ),Min( CS ,RMSe ) ) / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.148, "obj2": 0.6666197816462321}, {"determining": "( ( RRS - AMS ) + ( ACS + ( Min( Const ,MDR ) * Min( Const ,MRS ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.764, "obj2": 0.16430059627753962}, {"determining": "( ( Max( ARS,ARS ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) ) )", "obj1": 0.786, "obj2": 0.1542967103661295}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Min( Const ,( FirstVNF_Mem * ( Max( ( ( BR * Const ) + ACS ),ACS ) + MRS ) ) ) * Min( MRS ,Const ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.198, "obj2": 0.5841175342114412}, {"determining": "( ( ( CRS / ARS ) + Min( FirstVNF_Mem_Server ,BR ) ) - PN )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / ( Min( RMSe ,DS ) - Max( MLU,CS ) ) ) ),( ( CS + MLU ) - ( MUR + CS ) ) )", "obj1": 0.986, "obj2": 0.011446299706969545}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - AMS )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( ( RRSe - MUC ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.53, "obj2": 0.35507993434839963}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Const + ARS ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( MUC * DS ) ,MLU ) ) )", "obj1": 0.652, "obj2": 0.24674915314797585}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / AMS )", "choosing": "( ( DS / RRSe ) / ( MLU + MUR ) )", "obj1": 0.42, "obj2": 0.4428843747122994}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + FirstVNF_CPU_Server ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( MUM ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.1568562503599011}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * ( MUM * ( DS + CS ) ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.186, "obj2": 0.5914596088963912}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( ( FirstVNF_Mem + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / Max( MUM,( Max( DS,MUC ) * MUR ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.208, "obj2": 0.5776951074749849}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( ( Max( ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.73, "obj2": 0.1841191566404429}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( ( ACS / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) ) )", "obj1": 0.752, "obj2": 0.1814639354374626}, {"determining": "( Min( ACS ,MDR ) * Min( Const ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( MUR / Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) ) )", "obj1": 0.152, "obj2": 0.6613606932242824}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Min( ( ( MLU - MUC ) - ( MUR - RRSe ) ) ,( RCSe * MUC ) )", "obj1": 0.732, "obj2": 0.18189444353963657}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "( ( Max( Min( ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,( Max( RRSe,MUR ) + CS ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.762, "obj2": 0.17350408701353537}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ),RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.76, "obj2": 0.17736079226343898}, {"determining": "( Min( DDR ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( ( MUR / RCSe ) / RCSe ),MLU )", "obj1": 0.988, "obj2": 0.0043896063695106485}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.754, "obj2": 0.17858674803168897}, {"determining": "( ( ( FirstVNF_Mem_Server / ( ( FirstVNF_Mem_Server / FirstVNF_RAM ) - MRS ) ) - PN ) * Min( ( AMS + BR ) ,( Min( DDR ,AMS ) - FirstVNF_Mem_Server ) ) )", "choosing": "Min( ( RRSe - ( ( MUR - ( RCSe * MUC ) ) + Min( ( ( MUM - CS ) + MUR ) ,Max( Min( ( ( RCSe + DS ) * DS ) ,DS ),Min( CS ,( MUR - MUR ) ) ) ) ) ) ,( ( RCSe - CS ) + MUR ) )", "obj1": 0.998, "obj2": 0.0005211122828401783}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( Min( Min( FirstVNF_RAM_Server ,( FirstVNF_CPU / CRS ) ) ,( FirstVNF_CPU / CRS ) ) * ( PN - DDR ) )", "choosing": "Max( ( Max( DS,Min( MUC ,( Max( DS,Min( MUC ,DS ) ) + RCSe ) ) ) + RCSe ),MLU )", "obj1": 0.992, "obj2": 0.003080353547980575}, {"determining": "( Min( FirstVNF_RAM_Server ,( Min( MRS ,Const ) / CRS ) ) * ( PN - DDR ) )", "choosing": "Max( ( Max( DS,Max( ( MUR / RCSe ),Min( RRSe ,DS ) ) ) + RCSe ),MLU )", "obj1": 0.992, "obj2": 0.003080353547980575}, {"determining": "( Min( ( MRS - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) ,( FirstVNF_CPU / CRS ) ) * ( DDR - PN ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( Min( FirstVNF_RAM_Server ,( FirstVNF_CPU / CRS ) ) * ( PN - DDR ) )", "choosing": "Max( ( MUR / RCSe ),Min( RRSe ,DS ) )", "obj1": 0.99, "obj2": 0.003601465830820753}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Min( ( ( FirstVNF_RAM_Server - AMS ) / Max( Max( ACS,CRS ),FirstVNF_RAM ) ) ,Max( ( Max( MDR,AMS ) - FirstVNF_Mem_Server ),Const ) ) - FirstVNF_RAM_Server ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( ( MUM + MLU ) - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + Const )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( MUR / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) * Min( ( ARS - FirstVNF_Mem ) ,Const ) )", "choosing": "Min( ( MUC - Min( MUM ,MUM ) ) ,Max( MUR,Max( RRSe,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}], "8": [{"determining": "( ( MDR - FirstVNF_CPU_Server ) + ( ( Min( FirstVNF_CPU_Server ,MDR ) * FirstVNF_CPU ) * MRS ) )", "choosing": "( Max( ( CS * ( RMSe - CS ) ),Max( ( MLU - RMSe ),( ( ( Max( MUC,( MLU * MUC ) ) * RCSe ) * RMSe ) - ( Min( MLU ,MUM ) - ( MUR - Max( Max( MUM,MUM ),MLU ) ) ) ) ) ) * ( RRSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MRS ,Const ) - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( Min( ( MUC - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( ( RRSe + MUC ),( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / ( RRSe * DS ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.048, "obj2": 0.7504405638074119}, {"determining": "( Min( AMS ,AMS ) / ( FirstVNF_Mem - ( DDR * ACS ) ) )", "choosing": "( ( ( RRSe * ( ( ( ( ( MUR - MLU ) / RMSe ) - ( CS - RCSe ) ) * MUR ) + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) ) - ( Max( MUR,( Max( MUC,( DS + Max( MLU,MUC ) ) ) + MUC ) ) * Max( Min( DS ,( DS / MUM ) ),MUM ) ) ) - ( MUM * RMSe ) )", "obj1": 0.4, "obj2": 0.41580069962922583}, {"determining": "( ( ( ( Min( ACS ,( Const / Max( ( FirstVNF_CPU / FirstVNF_CPU_Server ),BR ) ) ) + PN ) - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( DS / DS ) / ( Max( Min( RRSe ,( MLU + Min( Min( DS ,( DS - RCSe ) ) ,MLU ) ) ),CS ) * ( DS / MUC ) ) )", "obj1": 0.078, "obj2": 0.7158593297038336}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( ( ( MUR / RCSe ) * MLU ) * ( DS + MUR ) )", "obj1": 0.828, "obj2": 0.11406669044650897}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "( Max( ( Const + ARS ),FirstVNF_RAM ) * ( ( ( ( ARS - FirstVNF_RAM_Server ) * BR ) / MRS ) + RRS ) )", "choosing": "( ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) * Max( MUC,MLU ) )", "obj1": 0.268, "obj2": 0.5032147545177641}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.118, "obj2": 0.6809454333626828}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( Min( MRS ,Const ) * ( RRS - Min( MDR ,( ( FirstVNF_RAM - DDR ) - CRS ) ) ) )", "choosing": "Min( ( ( CS + ( DS / ( ( MUM - MUM ) / ( MUR * RCSe ) ) ) ) - MUC ) ,Min( RRSe ,DS ) )", "obj1": 0.87, "obj2": 0.10591566853687132}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( ( ( Min( ( ( Min( RRS ,Min( RRS ,RRS ) ) + ( FirstVNF_RAM - FirstVNF_RAM_Server ) ) / MDR ) ,CRS ) - FirstVNF_CPU_Server ) + FirstVNF_CPU_Server ) / ( Max( Max( ( RRS - ( BR - RRS ) ),FirstVNF_CPU ),FirstVNF_Mem_Server ) - BR ) )", "choosing": "( ( Max( MUM,( MLU + ( DS + ( MUM * MUR ) ) ) ) * RRSe ) + Max( RRSe,MUM ) )", "obj1": 0.95, "obj2": 0.04669776994312548}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "( ( Max( Max( AMS,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * Min( DS ,( DS - RCSe ) ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.72, "obj2": 0.1939404007869139}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "Max( ( ( ( FirstVNF_Mem - DDR ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / ACS ) + ( FirstVNF_RAM / ACS ) ) ),Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.174, "obj2": 0.5917289458207318}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( Max( DDR,MRS ) / ( FirstVNF_Mem_Server * MDR ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.17, "obj2": 0.6330992095238708}, {"determining": "( Min( AMS ,AMS ) / ( FirstVNF_Mem - ( DDR * ACS ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.67, "obj2": 0.23316666655612397}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * Min( Max( PN,BR ) ,Const ) ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) )", "obj1": 0.334, "obj2": 0.47216671534704324}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.518, "obj2": 0.3639124618300771}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "( Min( ( ( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) ) - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.222, "obj2": 0.5507176527079317}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( ( MUC - ( MUC / MLU ) ) * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.92, "obj2": 0.05165112779497102}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( ( DS + Max( MLU,MUC ) ) ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.562, "obj2": 0.3162221442844198}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.212, "obj2": 0.5693487438877771}, {"determining": "( Max( ( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ),FirstVNF_RAM_Server ) / Max( BR,AMS ) )", "choosing": "( ( DS / DS ) / ( ( MLU * MUC ) / Max( RCSe,MUC ) ) )", "obj1": 0.124, "obj2": 0.6760647253609664}, {"determining": "( ( Max( Min( ACS ,( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( RMSe,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Const * RRS ) - ( Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( Max( ( RMSe - RMSe ),Min( CS ,RMSe ) ) / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.148, "obj2": 0.6666197816462321}, {"determining": "( ( RRS - AMS ) + ( ACS + ( Min( Const ,MDR ) * Min( Const ,MRS ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.764, "obj2": 0.16430059627753962}, {"determining": "( ( Max( ARS,ARS ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) ) )", "obj1": 0.786, "obj2": 0.1542967103661295}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Min( Const ,( FirstVNF_Mem * ( Max( ( ( BR * Const ) + ACS ),ACS ) + MRS ) ) ) * Min( MRS ,Const ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.198, "obj2": 0.5841175342114412}, {"determining": "( Min( AMS ,AMS ) / ( Max( PN,( BR * MDR ) ) - ( DDR * ACS ) ) )", "choosing": "( Max( MUR,( Max( RMSe,MUC ) + ( ( ( MUR - MLU ) / RMSe ) - ( CS - RCSe ) ) ) ) + ( MUC * ( ( RCSe / MLU ) - Min( Max( RMSe,Min( MUC ,RMSe ) ) ,DS ) ) ) )", "obj1": 0.974, "obj2": 0.008799873904482022}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) - ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - AMS )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( ( RRSe - MUC ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.53, "obj2": 0.35507993434839963}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Const + ARS ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( MUC * DS ) ,MLU ) ) )", "obj1": 0.652, "obj2": 0.24674915314797585}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + FirstVNF_CPU_Server ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( MUM ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.1568562503599011}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * ( MUM * ( DS + CS ) ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.186, "obj2": 0.5914596088963912}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( ( FirstVNF_Mem + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / Max( MUM,( Max( DS,MUC ) * MUR ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.208, "obj2": 0.5776951074749849}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( ( Max( ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.73, "obj2": 0.1841191566404429}, {"determining": "( ( ACS / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) ) )", "obj1": 0.752, "obj2": 0.1814639354374626}, {"determining": "( Min( ACS ,MDR ) * Min( Const ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( MUR / Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) ) )", "obj1": 0.152, "obj2": 0.6613606932242824}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Min( ( ( MLU - MUC ) - ( MUR - RRSe ) ) ,( RCSe * MUC ) )", "obj1": 0.732, "obj2": 0.18189444353963657}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( Max( ( Const + ARS ),FirstVNF_RAM ) - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,MUC ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.542, "obj2": 0.3413255371286277}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Min( DDR ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( ( MUR / RCSe ) / RCSe ),MLU )", "obj1": 0.988, "obj2": 0.0043896063695106485}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "( ( Max( Min( ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,( Max( RRSe,MUR ) + CS ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.762, "obj2": 0.17350408701353537}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ),RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.76, "obj2": 0.17736079226343898}, {"determining": "( ( Min( FirstVNF_CPU ,ARS ) - ( ( FirstVNF_RAM_Server - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUC ) ,( ( ( RRSe * ( MUM / ( MUM - RRSe ) ) ) - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + MUR ) )", "obj1": 0.538, "obj2": 0.34565385656289693}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.754, "obj2": 0.17858674803168897}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( MRS - ( ( PN - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUR ) ,( ( MUM - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + MUR ) )", "obj1": 0.996, "obj2": 0.0011006803493837146}, {"determining": "( Min( ( MRS - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) ,( ( MRS - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) / CRS ) ) * ( DDR - PN ) )", "choosing": "Max( Min( CS ,( Max( RRSe,MUR ) + CS ) ),Max( RRSe,MUR ) )", "obj1": 0.992, "obj2": 0.0030218977642772166}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( Min( MRS ,( FirstVNF_RAM + Min( ( ( FirstVNF_RAM + DDR ) - FirstVNF_CPU_Server ) ,BR ) ) ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) )", "choosing": "( ( RMSe + ( Min( RMSe ,Min( DS ,MLU ) ) * RCSe ) ) * ( RRSe + MUC ) )", "obj1": 0.99, "obj2": 0.003331220442498598}, {"determining": "( ( ( FirstVNF_Mem_Server / ( ( FirstVNF_Mem_Server / FirstVNF_RAM ) - MRS ) ) - PN ) * Min( ( AMS + BR ) ,( Min( DDR ,AMS ) - FirstVNF_Mem_Server ) ) )", "choosing": "Min( ( RRSe - ( ( MUR - ( RCSe * MUC ) ) + Min( ( ( MUM - CS ) + MUR ) ,Max( Min( ( ( RCSe + DS ) * DS ) ,DS ),Min( CS ,( MUR - MUR ) ) ) ) ) ) ,( ( RCSe - CS ) + MUR ) )", "obj1": 0.998, "obj2": 0.0005211122828401783}, {"determining": "( ( Min( ( Max( ( ( Const / MDR ) / ( RRS * FirstVNF_CPU ) ),ACS ) * FirstVNF_RAM ) ,FirstVNF_CPU ) + ARS ) * Min( MDR ,( Min( MRS ,Const ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RCSe / RCSe ) - ( MUR - Max( RRSe,Min( ( MUM - MUM ) ,Min( CS ,RRSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Min( ( ( FirstVNF_RAM_Server - AMS ) / Max( Max( ACS,CRS ),FirstVNF_RAM ) ) ,Max( ( Max( MDR,AMS ) - FirstVNF_Mem_Server ),Const ) ) - FirstVNF_RAM_Server ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( ( MUM + MLU ) - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + Const )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( MUR / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS / ARS ) * Min( BR ,FirstVNF_Mem_Server ) ) - ( ( ARS + DDR ) / Max( Const,( FirstVNF_CPU_Server + MRS ) ) ) )", "choosing": "Max( ( Max( MUC,MLU ) - ( MUR / CS ) ),( ( ( MUR * ( MLU - ( ( ( RMSe - RMSe ) - CS ) - ( MUC + DS ) ) ) ) + MLU ) - ( MUR + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ARS ,FirstVNF_Mem ) ,( Const - FirstVNF_CPU_Server ) ) - ( ( Const / CRS ) - ( MDR * FirstVNF_Mem ) ) )", "choosing": "Max( Max( ( DS / DS ),( MUM + MLU ) ),( ( RMSe - MUC ) + ( MUC - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( PN - FirstVNF_RAM ) - ( ARS * FirstVNF_Mem_Server ) ) / ( ( FirstVNF_CPU_Server * ACS ) * ( FirstVNF_CPU_Server + MRS ) ) )", "choosing": "Min( ( ( MUM - MUR ) - ( MLU - CS ) ) ,( ( RMSe * RMSe ) * Min( DS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - ACS ) - ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) ) + Min( ( FirstVNF_CPU / Const ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU - DS ) * CS ) / ( Max( MUC,MLU ) - ( RMSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * FirstVNF_RAM ) + ( BR * ACS ) ) / ( ( FirstVNF_RAM - ARS ) - ( PN + DDR ) ) )", "choosing": "Max( ( Min( MLU ,CS ) - ( MLU * RRSe ) ),( Max( CS,DS ) * ( MUM / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ACS + FirstVNF_CPU ) - Min( ACS ,CRS ) ) / ( Max( MDR,FirstVNF_CPU_Server ) * ( PN * BR ) ) ) - Max( ( Max( PN,DDR ) * ( ARS / FirstVNF_CPU ) ),Max( ( ( MDR + PN ) / ARS ),Min( RRS ,FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( DS / ( MUR * MUR ) ),Min( ( Min( DS ,DS ) / ( RRSe + DS ) ) ,( ( DS - RCSe ) - ( MLU - MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS * FirstVNF_CPU ) - ( ( ( BR + FirstVNF_RAM_Server ) / CRS ) - FirstVNF_Mem_Server ) )", "choosing": "( Max( RRSe,Max( ( DS / RMSe ),( MUC * MLU ) ) ) * Max( CS,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Min( FirstVNF_RAM_Server ,DDR ) - ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( AMS / FirstVNF_RAM ),Max( ACS,MDR ) ) ) - ( ( ( MRS + Const ) + Max( FirstVNF_RAM,FirstVNF_Mem ) ) / Max( ( CRS * PN ),( FirstVNF_CPU * FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe + RMSe ) ,Min( CS ,MUR ) )", "obj1": 1.0, "obj2": 0.0}], "9": [{"determining": "( ( ( ( ( RRS - RRS ) + CRS ) / ( FirstVNF_Mem / Const ) ) - Min( ( FirstVNF_CPU_Server / RRS ) ,( CRS / RRS ) ) ) + Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( ( MUR - MLU ) - ( Max( RRSe,MUM ) + ( CS + RMSe ) ) ) / Min( ( MUC + ( CS * MUR ) ) ,Min( ( MUR + MUC ) ,( CS * RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU_Server ) + ( ( Min( FirstVNF_CPU_Server ,MDR ) * FirstVNF_CPU ) * MRS ) )", "choosing": "( Max( ( CS * ( RMSe - CS ) ),Max( ( MLU - RMSe ),( ( ( Max( MUC,( MLU * MUC ) ) * RCSe ) * RMSe ) - ( Min( MLU ,MUM ) - ( MUR - Max( Max( MUM,MUM ),MLU ) ) ) ) ) ) * ( RRSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / ( RRSe * DS ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.048, "obj2": 0.7504405638074119}, {"determining": "( Min( AMS ,AMS ) / ( FirstVNF_Mem - ( DDR * ACS ) ) )", "choosing": "( ( ( RRSe * ( ( ( ( ( MUR - MLU ) / RMSe ) - ( CS - RCSe ) ) * MUR ) + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) ) - ( Max( MUR,( Max( MUC,( DS + Max( MLU,MUC ) ) ) + MUC ) ) * Max( Min( DS ,( DS / MUM ) ),MUM ) ) ) - ( MUM * RMSe ) )", "obj1": 0.4, "obj2": 0.41580069962922583}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,CRS ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) ) ) ) )", "obj1": 0.116, "obj2": 0.6691822770704217}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "( ( ( Min( ( ( Min( RRS ,Min( RRS ,RRS ) ) + ( FirstVNF_RAM - FirstVNF_RAM_Server ) ) / MDR ) ,CRS ) - FirstVNF_CPU_Server ) + FirstVNF_CPU_Server ) / ( Max( Max( ( RRS - ( BR - RRS ) ),FirstVNF_CPU ),FirstVNF_Mem_Server ) - BR ) )", "choosing": "( ( Max( MUM,( MLU + ( DS + ( MUM * MUR ) ) ) ) * RRSe ) + Max( RRSe,MUM ) )", "obj1": 0.95, "obj2": 0.04669776994312548}, {"determining": "( Min( MRS ,Const ) * ( RRS - Min( MDR ,( ( FirstVNF_RAM - DDR ) - CRS ) ) ) )", "choosing": "Min( ( ( CS + ( DS / ( ( MUM - MUM ) / ( MUR * RCSe ) ) ) ) - MUC ) ,Min( RRSe ,DS ) )", "obj1": 0.87, "obj2": 0.10591566853687132}, {"determining": "( ( Max( Max( AMS,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * Min( DS ,( DS - RCSe ) ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.72, "obj2": 0.1939404007869139}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "( Max( ( Const + ARS ),FirstVNF_RAM ) * ( ( ( ( ARS - FirstVNF_RAM_Server ) * BR ) / MRS ) + RRS ) )", "choosing": "( ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) * Max( MUC,MLU ) )", "obj1": 0.268, "obj2": 0.5032147545177641}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.628, "obj2": 0.268597688900607}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( ( Const * RRS ) - ( AMS * ( ( DDR - Min( MDR ,( RRS / ACS ) ) ) - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( MUM - MUM ) / ( MUR * RCSe ) ) * ( RRSe + MUC ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.17, "obj2": 0.6052221673632142}, {"determining": "( Min( AMS ,AMS ) / ( FirstVNF_Mem - ( DDR * ACS ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.67, "obj2": 0.23316666655612397}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( BR * MDR ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) ) )", "obj1": 0.266, "obj2": 0.5246083568473838}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( ( ( MUR / RCSe ) * MLU ) * ( DS + MUR ) )", "obj1": 0.828, "obj2": 0.11406669044650897}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.094, "obj2": 0.7063453853636219}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * Min( Max( PN,BR ) ,Const ) ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) )", "obj1": 0.334, "obj2": 0.47216671534704324}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( ( ( Min( ACS ,( Const / Max( ( FirstVNF_CPU / FirstVNF_CPU_Server ),BR ) ) ) + PN ) - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( DS / DS ) / ( Max( Min( RRSe ,( MLU + Min( Min( DS ,( DS - RCSe ) ) ,MLU ) ) ),CS ) * ( DS / MUC ) ) )", "obj1": 0.078, "obj2": 0.7158593297038336}, {"determining": "( ( FirstVNF_CPU_Server - ( ( FirstVNF_RAM_Server - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUC ) ,( ( MUM - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + ( MUC - ( MUC / MLU ) ) ) )", "obj1": 0.832, "obj2": 0.11284728397324961}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.518, "obj2": 0.3639124618300771}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "( Min( ( ( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) ) - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.222, "obj2": 0.5507176527079317}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( ( MUC - ( MUC / MLU ) ) * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.92, "obj2": 0.05165112779497102}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( ( DS + Max( MLU,MUC ) ) ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.212, "obj2": 0.5693487438877771}, {"determining": "( ( Max( Min( ACS ,( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( RMSe,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Const * RRS ) - ( Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( Max( ( RMSe - RMSe ),Min( CS ,RMSe ) ) / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.148, "obj2": 0.6666197816462321}, {"determining": "( ( RRS - AMS ) + ( ACS + ( Min( Const ,MDR ) * Min( Const ,MRS ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.764, "obj2": 0.16430059627753962}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUR ) ) )", "obj1": 0.068, "obj2": 0.7280251707591244}, {"determining": "( ( Max( ARS,ARS ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) ) )", "obj1": 0.786, "obj2": 0.1542967103661295}, {"determining": "( Min( Const ,( FirstVNF_Mem * ( Max( ( ( BR * Const ) + ACS ),ACS ) + MRS ) ) ) * Min( MRS ,Const ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.198, "obj2": 0.5841175342114412}, {"determining": "( Min( AMS ,AMS ) / ( Max( PN,( BR * MDR ) ) - ( DDR * ACS ) ) )", "choosing": "( Max( MUR,( Max( RMSe,MUC ) + ( ( ( MUR - MLU ) / RMSe ) - ( CS - RCSe ) ) ) ) + ( MUC * ( ( RCSe / MLU ) - Min( Max( RMSe,Min( MUC ,RMSe ) ) ,DS ) ) ) )", "obj1": 0.974, "obj2": 0.008799873904482022}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) - ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - AMS )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( ( RRSe - MUC ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.53, "obj2": 0.35507993434839963}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Const + ARS ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( MUC * DS ) ,MLU ) ) )", "obj1": 0.652, "obj2": 0.24674915314797585}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + FirstVNF_CPU_Server ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( MUM ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.1568562503599011}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.094, "obj2": 0.7063453853636219}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * ( MUM * ( DS + CS ) ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.186, "obj2": 0.5914596088963912}, {"determining": "Max( ( ( ( FirstVNF_Mem - DDR ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / ACS ) + ( FirstVNF_RAM / ACS ) ) ),Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.174, "obj2": 0.5917289458207318}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( ( FirstVNF_Mem + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / Max( MUM,( Max( DS,MUC ) * MUR ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.208, "obj2": 0.5776951074749849}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.562, "obj2": 0.3162221442844198}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( ( Max( ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.73, "obj2": 0.1841191566404429}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Min( ( ( MLU - MUC ) - ( MUR - RRSe ) ) ,( RCSe * MUC ) )", "obj1": 0.732, "obj2": 0.18189444353963657}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( MLU * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.75, "obj2": 0.17868004513936409}, {"determining": "( Min( ACS ,MDR ) * Min( Const ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( MUR / Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) ) )", "obj1": 0.152, "obj2": 0.6613606932242824}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( Max( ( Const + ARS ),FirstVNF_RAM ) - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,MUC ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.542, "obj2": 0.3413255371286277}, {"determining": "( Min( DDR ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( ( MUR / RCSe ) / RCSe ),MLU )", "obj1": 0.988, "obj2": 0.0043896063695106485}, {"determining": "( Min( FirstVNF_Mem_Server ,RRS ) * ( Min( ( ( ARS + DDR ) - ( BR + Max( ( Min( MDR ,FirstVNF_Mem ) * Min( FirstVNF_Mem_Server ,ACS ) ),Const ) ) ) ,FirstVNF_Mem ) - RRS ) )", "choosing": "Min( ( MUC - ( CS + ( ( MUR + ( MUM + MUR ) ) / ( ( RRSe * RRSe ) / ( MUM - MUM ) ) ) ) ) ,( RMSe + RRSe ) )", "obj1": 0.242, "obj2": 0.5461419472278921}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.544, "obj2": 0.3309819868416515}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "( ( Max( Min( ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,( Max( RRSe,MUR ) + CS ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.762, "obj2": 0.17350408701353537}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.562, "obj2": 0.3162221442844198}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ),RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.76, "obj2": 0.17736079226343898}, {"determining": "( ( Min( FirstVNF_CPU ,ARS ) - ( ( FirstVNF_RAM_Server - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUC ) ,( ( ( RRSe * ( MUM / ( MUM - RRSe ) ) ) - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + MUR ) )", "obj1": 0.538, "obj2": 0.34565385656289693}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.754, "obj2": 0.17858674803168897}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( MRS - ( ( PN - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUR ) ,( ( MUM - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + MUR ) )", "obj1": 0.996, "obj2": 0.0011006803493837146}, {"determining": "( Min( ( MRS - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) ,( ( MRS - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) / CRS ) ) * ( DDR - PN ) )", "choosing": "Max( Min( CS ,( Max( RRSe,MUR ) + CS ) ),Max( RRSe,MUR ) )", "obj1": 0.992, "obj2": 0.0030218977642772166}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - ( Min( FirstVNF_CPU ,( ( ( ARS - DDR ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.536, "obj2": 0.34771573081999624}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Min( MRS ,( FirstVNF_RAM + Min( ( ( FirstVNF_RAM + DDR ) - FirstVNF_CPU_Server ) ,BR ) ) ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) )", "choosing": "( ( RMSe + ( Min( RMSe ,Min( DS ,MLU ) ) * RCSe ) ) * ( RRSe + MUC ) )", "obj1": 0.99, "obj2": 0.003331220442498598}, {"determining": "( ( ( FirstVNF_Mem_Server / ( ( FirstVNF_Mem_Server / FirstVNF_RAM ) - MRS ) ) - PN ) * Min( ( AMS + BR ) ,( Min( DDR ,AMS ) - FirstVNF_Mem_Server ) ) )", "choosing": "Min( ( RRSe - ( ( MUR - ( RCSe * MUC ) ) + Min( ( ( MUM - CS ) + MUR ) ,Max( Min( ( ( RCSe + DS ) * DS ) ,DS ),Min( CS ,( MUR - MUR ) ) ) ) ) ) ,( ( RCSe - CS ) + MUR ) )", "obj1": 0.998, "obj2": 0.0005211122828401783}, {"determining": "( ( Min( MRS ,Const ) - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( Min( ( MUC - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( ( RRSe + MUC ),( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( Max( ( ( Const / MDR ) / ( RRS * FirstVNF_CPU ) ),ACS ) * FirstVNF_RAM ) ,FirstVNF_CPU ) + ARS ) * Min( MDR ,( Min( MRS ,Const ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RCSe / RCSe ) - ( MUR - Max( RRSe,Min( ( MUM - MUM ) ,Min( CS ,RRSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Min( ( ( FirstVNF_RAM_Server - AMS ) / Max( Max( ACS,CRS ),FirstVNF_RAM ) ) ,Max( ( Max( MDR,AMS ) - FirstVNF_Mem_Server ),Const ) ) - FirstVNF_RAM_Server ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( ( MUM + MLU ) - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + Const )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( MUR / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( DDR - FirstVNF_CPU ) ) )", "choosing": "( ( DS / ( RRSe * MUR ) ) - ( MUM * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * PN ) - ( FirstVNF_CPU * BR ) )", "choosing": "( ( CS - MUR ) + Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * Const ) - ( FirstVNF_CPU_Server + AMS ) ) / ( MDR - Min( ( ACS * ( BR * FirstVNF_CPU_Server ) ) ,CRS ) ) )", "choosing": "Max( ( MUM * MUC ),( ( RMSe * MUR ) + Min( RRSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( AMS ,BR ) / ( ( Max( FirstVNF_CPU_Server,CRS ) / FirstVNF_CPU_Server ) / DDR ) ) ,( ( ARS - FirstVNF_RAM ) / ( BR + ARS ) ) )", "choosing": "( ( Min( Max( DS,MLU ) ,Min( ( ( RMSe / RCSe ) - MUM ) ,RCSe ) ) + Max( DS,MUR ) ) / Max( ( RMSe + ( CS - ( MUM + RRSe ) ) ),Max( CS,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}], "10": [{"determining": "( ( BR - ( ( ( AMS + FirstVNF_RAM_Server ) * Max( ( BR / DDR ),Max( ( FirstVNF_RAM_Server * CRS ),Max( CRS,FirstVNF_Mem_Server ) ) ) ) * FirstVNF_RAM ) ) * Min( MRS ,Const ) )", "choosing": "( ( ( CS + ( DS / ( Min( MUM ,MUM ) / ( MUR * RCSe ) ) ) ) / Min( Min( ( RCSe - CS ) ,MUM ) ,MUC ) ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( ( RRS - RRS ) + CRS ) / ( FirstVNF_Mem / Const ) ) - Min( ( FirstVNF_CPU_Server / RRS ) ,( CRS / RRS ) ) ) + Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( ( MUR - MLU ) - ( Max( RRSe,MUM ) + ( CS + RMSe ) ) ) / Min( ( MUC + ( CS * MUR ) ) ,Min( ( MUR + MUC ) ,( CS * RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / ( RRSe * DS ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.048, "obj2": 0.7504405638074119}, {"determining": "( Min( AMS ,AMS ) / ( FirstVNF_Mem - ( DDR * ACS ) ) )", "choosing": "( ( ( RRSe * ( ( ( ( ( MUR - MLU ) / RMSe ) - ( CS - RCSe ) ) * MUR ) + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) ) - ( Max( MUR,( Max( MUC,( DS + Max( MLU,MUC ) ) ) + MUC ) ) * Max( Min( DS ,( DS / MUM ) ),MUM ) ) ) - ( MUM * RMSe ) )", "obj1": 0.4, "obj2": 0.41580069962922583}, {"determining": "( ( ( Min( Const ,FirstVNF_CPU ) + Max( FirstVNF_Mem,PN ) ) * Min( ( Const - MDR ) ,( FirstVNF_RAM + ARS ) ) ) - FirstVNF_CPU_Server )", "choosing": "( ( ( Max( CS,CS ) + ( CS - CS ) ) - ( ( MUM + MLU ) * ( DS / MUR ) ) ) - Max( ( Min( ( ( MUM - RMSe ) - RRSe ) ,RCSe ) * Max( DS,MUC ) ),Min( ( MUR * CS ) ,Max( MUM,RRSe ) ) ) )", "obj1": 0.882, "obj2": 0.0829364481898327}, {"determining": "( Min( PN ,( Min( PN ,MRS ) * ( BR - CRS ) ) ) * ( ( Const / BR ) - CRS ) )", "choosing": "( ( ( MUC / RMSe ) - ( ( MUC / RMSe ) - ( ( RRSe * RCSe ) + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.692, "obj2": 0.214970585537036}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) - Min( DDR ,FirstVNF_RAM_Server ) ) + ( MRS / FirstVNF_Mem ) )", "choosing": "( ( MUC - MUC ) + ( ( MUC * ( MLU / RCSe ) ) - ( ( MUR * ( CS - RRSe ) ) / MUC ) ) )", "obj1": 0.374, "obj2": 0.4474618656109793}, {"determining": "( Min( FirstVNF_CPU ,RRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.442, "obj2": 0.3846902763670412}, {"determining": "( Max( ( ( FirstVNF_Mem * FirstVNF_Mem ) - ( RRS - PN ) ),( ( ARS / RRS ) * ( FirstVNF_Mem + RRS ) ) ) - ( Min( ( ARS * RRS ) ,( BR - FirstVNF_Mem_Server ) ) / ( Min( ACS ,BR ) - ( Const + AMS ) ) ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 0.804, "obj2": 0.1410020406883979}, {"determining": "( ( FirstVNF_CPU / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( Min( MUR ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.492, "obj2": 0.3662771040997419}, {"determining": "( ( ( Min( ( ( Min( RRS ,Min( RRS ,RRS ) ) + ( FirstVNF_RAM - FirstVNF_RAM_Server ) ) / MDR ) ,CRS ) - FirstVNF_CPU_Server ) + FirstVNF_CPU_Server ) / ( Max( Max( ( RRS - ( BR - RRS ) ),FirstVNF_CPU ),FirstVNF_Mem_Server ) - BR ) )", "choosing": "( ( Max( MUM,( MLU + ( DS + ( MUM * MUR ) ) ) ) * RRSe ) + Max( RRSe,MUM ) )", "obj1": 0.95, "obj2": 0.04669776994312548}, {"determining": "( Min( MRS ,Const ) * ( RRS - Min( MDR ,( ( FirstVNF_RAM - DDR ) - CRS ) ) ) )", "choosing": "Min( ( ( CS + ( DS / ( ( MUM - MUM ) / ( MUR * RCSe ) ) ) ) - MUC ) ,Min( RRSe ,DS ) )", "obj1": 0.87, "obj2": 0.10591566853687132}, {"determining": "( ( Max( Max( AMS,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * Min( DS ,( DS - RCSe ) ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.72, "obj2": 0.1939404007869139}, {"determining": "( Min( Min( ( RRS / FirstVNF_CPU_Server ) ,( MDR - FirstVNF_RAM ) ) ,( Max( DDR,FirstVNF_Mem ) / ( FirstVNF_CPU_Server / DDR ) ) ) / Min( Max( Min( AMS ,FirstVNF_Mem ),( AMS + Const ) ) ,( ( CRS / FirstVNF_CPU_Server ) * Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( RRSe * RCSe ) ) - ( ( CS * RMSe ) * Min( RCSe ,RRSe ) ) ) - Min( ( ( MUR * DS ) * ( RMSe - RCSe ) ) ,( ( RMSe + MUM ) * ( DS + MUC ) ) ) )", "obj1": 0.972, "obj2": 0.022842329970857646}, {"determining": "( Max( CRS,ARS ) - Min( MRS ,( MDR + MRS ) ) )", "choosing": "( Max( Min( ( MLU * ( DS + MUR ) ) ,MUR ),( MUC * CS ) ) - Min( ( CS - MLU ) ,( CS * MUM ) ) )", "obj1": 0.362, "obj2": 0.4627510884971159}, {"determining": "( Max( ( Const + ARS ),FirstVNF_RAM ) * ( ( ( ( ARS - FirstVNF_RAM_Server ) * BR ) / MRS ) + RRS ) )", "choosing": "( ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) * Max( MUC,MLU ) )", "obj1": 0.268, "obj2": 0.5032147545177641}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.628, "obj2": 0.268597688900607}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.32, "obj2": 0.47428020867375803}, {"determining": "( ( Const * RRS ) - ( AMS * ( ( DDR - Min( MDR ,( RRS / ACS ) ) ) - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( MUM - MUM ) / ( MUR * RCSe ) ) * ( RRSe + MUC ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.17, "obj2": 0.6052221673632142}, {"determining": "( Min( AMS ,AMS ) / ( FirstVNF_Mem - ( DDR * ACS ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.67, "obj2": 0.23316666655612397}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( ( ( MUR / RCSe ) * MLU ) * ( DS + MUR ) )", "obj1": 0.828, "obj2": 0.11406669044650897}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.094, "obj2": 0.7063453853636219}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( ( DS + Max( CS,MUM ) ) + Max( CS,MUM ) ) )", "obj1": 0.128, "obj2": 0.6608926352248878}, {"determining": "( ( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,( MUR - MLU ) ) ) )", "obj1": 0.116, "obj2": 0.6691822770704217}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * Min( Max( PN,BR ) ,Const ) ) ) * ( RRS + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) )", "obj1": 0.334, "obj2": 0.47216671534704324}, {"determining": "( ( MDR + CRS ) * ( Max( ( ( ACS / ARS ) / ( FirstVNF_RAM_Server + FirstVNF_RAM ) ),Const ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe - ( MUM + Max( ( ( Max( MUM,MLU ) - MUM ) - MUM ),MLU ) ) ) - ( MUC + MUM ) )", "obj1": 0.166, "obj2": 0.6367445666318612}, {"determining": "( ( MRS * MRS ) + ( MDR + FirstVNF_CPU_Server ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( ( ( Min( ACS ,( Const / Max( ( FirstVNF_CPU / FirstVNF_CPU_Server ),BR ) ) ) + PN ) - MRS ) / ( MDR + FirstVNF_RAM_Server ) ) / ( ( FirstVNF_Mem - AMS ) + Max( AMS,AMS ) ) )", "choosing": "( ( DS / DS ) / ( Max( Min( RRSe ,( MLU + Min( Min( DS ,( DS - RCSe ) ) ,MLU ) ) ),CS ) * ( DS / MUC ) ) )", "obj1": 0.078, "obj2": 0.7158593297038336}, {"determining": "( ( FirstVNF_CPU_Server - ( ( FirstVNF_RAM_Server - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUC ) ,( ( MUM - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + ( MUC - ( MUC / MLU ) ) ) )", "obj1": 0.832, "obj2": 0.11284728397324961}, {"determining": "( Min( MRS ,Const ) * FirstVNF_Mem )", "choosing": "Min( ( DS * ( RRSe / CS ) ) ,( ( RCSe * MUC ) + MUR ) )", "obj1": 0.544, "obj2": 0.3255476976006859}, {"determining": "( ( FirstVNF_CPU_Server + AMS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + ( RCSe / RCSe ) ) ) ) - ( CS - RCSe ) )", "obj1": 0.63, "obj2": 0.2471136047509901}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "( Min( ( ( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) ) - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( MUM,( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 0.222, "obj2": 0.5507176527079317}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( ( MUC - ( MUC / MLU ) ) * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.92, "obj2": 0.05165112779497102}, {"determining": "( ( ACS * ( Min( Const ,MDR ) * MRS ) ) * ( ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * ( Min( ( DS + Max( MLU,MUC ) ) ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "Min( ( ( FirstVNF_RAM * FirstVNF_Mem ) + FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,PN ) )", "choosing": "( ( MUM + CS ) / ( DS * Max( CS,CS ) ) )", "obj1": 0.058, "obj2": 0.7322925470040494}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( Min( FirstVNF_RAM_Server ,FirstVNF_RAM_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.212, "obj2": 0.5693487438877771}, {"determining": "( ( Max( Min( ACS ,( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( RMSe,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( BR * MDR ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / Min( Max( MLU,( ( MUR * MLU ) + ( MUC - RCSe ) ) ) ,MUR ) ) ) )", "obj1": 0.266, "obj2": 0.5246083568473838}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( ARS,ARS ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * ( Min( ( RCSe / MUR ) ,RMSe ) * MLU ) ) )", "obj1": 0.786, "obj2": 0.1542967103661295}, {"determining": "( Min( AMS ,AMS ) / ( Max( PN,( BR * MDR ) ) - ( DDR * ACS ) ) )", "choosing": "( Max( MUR,( Max( RMSe,MUC ) + ( ( ( MUR - MLU ) / RMSe ) - ( CS - RCSe ) ) ) ) + ( MUC * ( ( RCSe / MLU ) - Min( Max( RMSe,Min( MUC ,RMSe ) ) ,DS ) ) ) )", "obj1": 0.974, "obj2": 0.008799873904482022}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) - ( ( CRS * Min( Min( Max( PN,BR ) ,Const ) ,PN ) ) * FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * ( Min( MLU ,CS ) / CS ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.294, "obj2": 0.49280863330379415}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Const + ARS ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( MUC * DS ) ,MLU ) ) )", "obj1": 0.652, "obj2": 0.24674915314797585}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( DS / MLU ) / Min( ( ( DS * ( Max( MUR,RCSe ) + Max( Min( MLU ,CS ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.518, "obj2": 0.3639124618300771}, {"determining": "Max( ( ( ( FirstVNF_Mem - DDR ) * ( FirstVNF_CPU_Server / MRS ) ) + ( ( DDR / ACS ) + ( FirstVNF_RAM / ACS ) ) ),Max( Max( ( Const / PN ),( AMS - PN ) ),( ( FirstVNF_RAM / ACS ) - ( FirstVNF_Mem * PN ) ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.174, "obj2": 0.5917289458207318}, {"determining": "( Min( Const ,( FirstVNF_Mem * ( Max( ( ( BR * Const ) + ACS ),ACS ) + MRS ) ) ) * Min( MRS ,Const ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.198, "obj2": 0.5841175342114412}, {"determining": "( Min( PN ,MRS ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.59, "obj2": 0.27409866764498725}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * RCSe ) - ( CS - RCSe ) )", "obj1": 0.658, "obj2": 0.23913744702424852}, {"determining": "( Min( MRS ,( FirstVNF_CPU_Server * ( FirstVNF_Mem * FirstVNF_Mem_Server ) ) ) * ( RRS - Min( MDR ,( Min( RRS ,PN ) - ARS ) ) ) )", "choosing": "( ( Max( CS,Max( Max( ( ( DS - RRSe ) * MLU ),CS ),( RMSe - Max( MUR,DS ) ) ) ) + MUC ) * ( ( ( ( MLU - ( ( MUM + RMSe ) - Max( MUR,RCSe ) ) ) * RCSe ) - MUM ) / RMSe ) )", "obj1": 0.258, "obj2": 0.5316654654539693}, {"determining": "( Min( MDR ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - RCSe )", "obj1": 0.588, "obj2": 0.29409466581843635}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( ( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) ),FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( Max( MUR,RMSe ) * ( DS / RRSe ) ) )", "obj1": 0.578, "obj2": 0.3045862350569413}, {"determining": "( Min( ( FirstVNF_CPU - CRS ) ,Const ) * ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + ( FirstVNF_CPU + AMS ) ) )", "choosing": "( ( MLU - ( CS * RCSe ) ) * ( MUM + RRSe ) )", "obj1": 0.244, "obj2": 0.5348247097769038}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) )", "obj1": 0.094, "obj2": 0.7063453853636219}, {"determining": "( Min( Const ,( FirstVNF_Mem * ( Max( ( ( BR * Const ) + ACS ),ACS ) + MRS ) ) ) * ( Max( Max( PN,( FirstVNF_Mem_Server + MRS ) ),( FirstVNF_RAM / AMS ) ) / ( ( ( AMS / FirstVNF_CPU ) - ( BR + PN ) ) * ( ( MDR - CRS ) * ( FirstVNF_RAM_Server / ACS ) ) ) ) )", "choosing": "Min( ( MUM * ( Min( ( ( MLU - RMSe ) - ( ( MUR + ( MUR + DS ) ) + CS ) ) ,MUR ) / MUR ) ) ,( MUC + RMSe ) )", "obj1": 0.186, "obj2": 0.5884033961269921}, {"determining": "( ( Const * RRS ) - ( AMS * ( FirstVNF_CPU - ( FirstVNF_Mem * ( ( FirstVNF_Mem + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / Max( MUM,( Max( DS,MUC ) * MUR ) ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.208, "obj2": 0.5776951074749849}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,CRS ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,( ( MUR - MLU ) - ( DS + Max( CS,MUM ) ) ) ) ) )", "obj1": 0.116, "obj2": 0.6691822770704217}, {"determining": "( ( RRS - AMS ) + ( ACS + ( Min( Const ,MDR ) * Min( Const ,MRS ) ) ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( ( MUR - MLU ) - ( MUR / RCSe ) ) )", "obj1": 0.764, "obj2": 0.16430059627753962}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( Max( ( Const + ARS ),FirstVNF_RAM ) - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * FirstVNF_CPU ) ) )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( Max( MUR,CS ) + Max( Min( MLU ,MUC ),MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.542, "obj2": 0.3413255371286277}, {"determining": "( ( Max( ARS,( FirstVNF_Mem - ( MDR + ARS ) ) ) / MRS ) - AMS )", "choosing": "( ( MUC * RMSe ) - ( ( RRSe * MUM ) / Min( ( ( DS * ( ( RRSe - MUC ) + ( Min( MUC ,CS ) + MUM ) ) ) * DS ) ,MLU ) ) )", "obj1": 0.53, "obj2": 0.35507993434839963}, {"determining": "Min( ( ( FirstVNF_Mem_Server / MRS ) * Min( ARS ,FirstVNF_Mem ) ) ,( ACS / ACS ) )", "choosing": "( ( RMSe - Max( ( RCSe - CS ),Max( MUR,RMSe ) ) ) + Min( DS ,RMSe ) )", "obj1": 0.574, "obj2": 0.3160566886031151}, {"determining": "( Max( FirstVNF_RAM,BR ) * ( RRS + FirstVNF_Mem ) )", "choosing": "( Max( MUR,CS ) - ( MLU + CS ) )", "obj1": 0.164, "obj2": 0.64425652377694}, {"determining": "( ( Max( ( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) * MLU ) )", "obj1": 0.918, "obj2": 0.061242988755949676}, {"determining": "( ( Max( ARS,FirstVNF_Mem_Server ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Max( ( MUR / RCSe ),MLU )", "obj1": 0.73, "obj2": 0.1841191566404429}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "Min( ( ( MLU - MUC ) - ( MUR - RRSe ) ) ,( RCSe * MUC ) )", "obj1": 0.732, "obj2": 0.18189444353963657}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( MLU * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.75, "obj2": 0.17868004513936409}, {"determining": "( Min( MDR ,Const ) * Min( Max( FirstVNF_CPU,Min( Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUR ) ) )", "obj1": 0.068, "obj2": 0.7280251707591244}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.562, "obj2": 0.3162221442844198}, {"determining": "( ( Max( ( FirstVNF_Mem - ( MDR + ARS ) ),ARS ) / ( FirstVNF_RAM_Server - FirstVNF_Mem ) ) - ( Min( FirstVNF_CPU ,( ( ( ARS - FirstVNF_RAM_Server ) * BR ) * RRS ) ) * ( Const * ( CRS - ( ( Max( FirstVNF_RAM_Server,Const ) + ACS ) + MDR ) ) ) ) )", "choosing": "( ( DS + MUM ) * Max( MUC,Min( RCSe ,Min( MLU ,( MUC - RRSe ) ) ) ) )", "obj1": 0.524, "obj2": 0.36192792625295356}, {"determining": "( Min( DDR ,Const ) * ( PN - DDR ) )", "choosing": "Max( ( ( MUR / RCSe ) / RCSe ),MLU )", "obj1": 0.988, "obj2": 0.0043896063695106485}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.78, "obj2": 0.16208059910231287}, {"determining": "( Min( FirstVNF_Mem_Server ,RRS ) * ( Min( ( ( ARS + DDR ) - ( BR + Max( ( Min( MDR ,FirstVNF_Mem ) * Min( FirstVNF_Mem_Server ,ACS ) ),Const ) ) ) ,FirstVNF_Mem ) - RRS ) )", "choosing": "Min( ( MUC - ( CS + ( ( MUR + ( MUM + MUR ) ) / ( ( RRSe * RRSe ) / ( MUM - MUM ) ) ) ) ) ,( RMSe + RRSe ) )", "obj1": 0.242, "obj2": 0.5461419472278921}, {"determining": "( Max( DDR,FirstVNF_RAM_Server ) - ( AMS * CRS ) )", "choosing": "( ( MUC / MUC ) - ( MUM * Min( Min( Min( RRSe ,MUM ) ,MUC ) ,( Max( MUR,RRSe ) * ( CS / MLU ) ) ) ) )", "obj1": 0.236, "obj2": 0.5478991989428418}, {"determining": "( ( Max( Min( ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,( Max( RRSe,MUR ) + CS ) ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.762, "obj2": 0.17350408701353537}, {"determining": "( ( MRS - ( Min( Const ,( FirstVNF_CPU_Server * ( FirstVNF_Mem * FirstVNF_Mem_Server ) ) ) / FirstVNF_RAM ) ) * ( MRS - ( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) ) ) )", "choosing": "Min( ( RRSe - MUC ) ,( ( MUM - Max( ( DS / ( ( MUC + ( MLU / RCSe ) ) - CS ) ),( RCSe + MUR ) ) ) + MUR ) )", "obj1": 0.536, "obj2": 0.3469189598445465}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_Mem / MDR ) )", "choosing": "( ( MUM - RMSe ) - ( CS - DS ) )", "obj1": 0.446, "obj2": 0.3778116119380395}, {"determining": "( ( FirstVNF_CPU - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( ( RRSe / ( RRSe * MUR ) ) - ( MUM * ( DS + CS ) ) )", "obj1": 0.562, "obj2": 0.3162221442844198}, {"determining": "( Min( MDR ,Const ) * Min( Max( Min( Max( FirstVNF_CPU,Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ),Min( Max( FirstVNF_CPU,RRS ) ,Max( FirstVNF_Mem_Server,CRS ) ) ) ,MRS ) )", "choosing": "( ( MUR - MLU ) - ( DS + Max( CS,MUR ) ) )", "obj1": 0.068, "obj2": 0.7280251707591244}, {"determining": "( Max( BR,AMS ) + ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( DS / DS ) / Max( RCSe,MUC ) )", "obj1": 0.158, "obj2": 0.6541866718624422}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ),RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.76, "obj2": 0.17736079226343898}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( Min( FirstVNF_CPU ,ARS ) - ( ( FirstVNF_RAM_Server - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUC ) ,( ( ( RRSe * ( MUM / ( MUM - RRSe ) ) ) - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + MUR ) )", "obj1": 0.538, "obj2": 0.34565385656289693}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + FirstVNF_CPU_Server ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( MUM ,RMSe ) * MLU ) )", "obj1": 0.784, "obj2": 0.1568562503599011}, {"determining": "( ( Max( Min( ACS ,AMS ),BR ) / FirstVNF_RAM ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,RMSe ) * ( Min( ( ( MUM * MLU ) * ( MUC - ( MUC / MLU ) ) ) ,RMSe ) * MLU ) )", "obj1": 0.754, "obj2": 0.17858674803168897}, {"determining": "( ( Max( ( ( PN * ( Const + DDR ) ) / FirstVNF_Mem ),Min( ACS ,AMS ) ) / FirstVNF_Mem ) - ( FirstVNF_CPU_Server + ARS ) )", "choosing": "( Max( MUR,Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) ) * ( Min( ( Min( CS ,DS ) / ( MLU / RCSe ) ) ,RMSe ) * MLU ) )", "obj1": 0.782, "obj2": 0.16121153438073216}, {"determining": "( ( Max( FirstVNF_Mem_Server,ARS ) / FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( Max( MUR,RMSe ) * ( DS / RRSe ) )", "obj1": 0.586, "obj2": 0.2982398846149452}, {"determining": "( ( MRS - ( ( PN - FirstVNF_Mem ) / FirstVNF_RAM ) ) * ( MRS - Const ) )", "choosing": "Min( ( RRSe - MUR ) ,( ( MUM - Max( ( DS / ( CS - CS ) ),( RCSe + MUR ) ) ) + MUR ) )", "obj1": 0.996, "obj2": 0.0011006803493837146}, {"determining": "( Min( ( MRS - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) ,( ( MRS - ( FirstVNF_Mem * ( ARS + Min( FirstVNF_RAM_Server ,FirstVNF_CPU_Server ) ) ) ) / CRS ) ) * ( DDR - PN ) )", "choosing": "Max( Min( CS ,( Max( RRSe,MUR ) + CS ) ),Max( RRSe,MUR ) )", "obj1": 0.992, "obj2": 0.0030218977642772166}, {"determining": "( ( RRS + ( FirstVNF_CPU + AMS ) ) * ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - ( CS * Max( ( RMSe * ( RMSe / MLU ) ),Max( ( DS * ( DS / ( MUR + RCSe ) ) ),( Min( MUC ,( DS + MUC ) ) / MLU ) ) ) ) ) * ( MUC + ( CS / CS ) ) )", "obj1": 0.238, "obj2": 0.5471126199145273}, {"determining": "( Min( PN ,FirstVNF_CPU ) * ( BR - CRS ) )", "choosing": "( ( RRSe * ( ( MUC / RMSe ) - ( MUR + DS ) ) ) - ( CS - RCSe ) )", "obj1": 0.594, "obj2": 0.27093813462930016}, {"determining": "( Min( MRS ,( FirstVNF_RAM + Min( ( ( FirstVNF_RAM + DDR ) - FirstVNF_CPU_Server ) ,BR ) ) ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) )", "choosing": "( ( RMSe + ( Min( RMSe ,Min( DS ,MLU ) ) * RCSe ) ) * ( RRSe + MUC ) )", "obj1": 0.99, "obj2": 0.003331220442498598}, {"determining": "( ( ( FirstVNF_Mem_Server / ( ( FirstVNF_Mem_Server / FirstVNF_RAM ) - MRS ) ) - PN ) * Min( ( AMS + BR ) ,( Min( DDR ,AMS ) - FirstVNF_Mem_Server ) ) )", "choosing": "Min( ( RRSe - ( ( MUR - ( RCSe * MUC ) ) + Min( ( ( MUM - CS ) + MUR ) ,Max( Min( ( ( RCSe + DS ) * DS ) ,DS ),Min( CS ,( MUR - MUR ) ) ) ) ) ) ,( ( RCSe - CS ) + MUR ) )", "obj1": 0.998, "obj2": 0.0005211122828401783}, {"determining": "( ( MDR - FirstVNF_CPU_Server ) + ( ( Min( FirstVNF_CPU_Server ,MDR ) * FirstVNF_CPU ) * MRS ) )", "choosing": "( Max( ( CS * ( RMSe - CS ) ),Max( ( MLU - RMSe ),( ( ( Max( MUC,( MLU * MUC ) ) * RCSe ) * RMSe ) - ( Min( MLU ,MUM ) - ( MUR - Max( Max( MUM,MUM ),MLU ) ) ) ) ) ) * ( RRSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MRS ,Const ) - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) + ( MDR / ( FirstVNF_Mem + FirstVNF_Mem_Server ) ) )", "choosing": "( Min( ( MUC - CS ) ,RMSe ) - Min( ( ( DS / ( DS + RCSe ) ) + ( Max( ( RRSe + MUC ),( Max( DS,MUC ) * MUR ) ) * ( DS - MUM ) ) ) ,( RRSe + MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( Max( ( ( Const / MDR ) / ( RRS * FirstVNF_CPU ) ),ACS ) * FirstVNF_RAM ) ,FirstVNF_CPU ) + ARS ) * Min( MDR ,( Min( MRS ,Const ) * ( RRS - Min( MDR ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( RCSe / RCSe ) - ( MUR - Max( RRSe,Min( ( MUM - MUM ) ,Min( CS ,RRSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU ) + Min( FirstVNF_CPU_Server ,( ( ARS / PN ) / ( Min( ( ( FirstVNF_RAM_Server - AMS ) / Max( Max( ACS,CRS ),FirstVNF_RAM ) ) ,Max( ( Max( MDR,AMS ) - FirstVNF_Mem_Server ),Const ) ) - FirstVNF_RAM_Server ) ) ) )", "choosing": "Min( ( ( ( MLU - RRSe ) + ( ( MUM + MLU ) - MUM ) ) / RCSe ) ,Max( RMSe,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + Const )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - Min( ( CS + DS ) ,( RMSe * MUR ) ) ) ,( MUR / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - AMS ) + ( Min( Const ,MRS ) + Const ) )", "choosing": "Min( ( Min( ( DS - RRSe ) ,Max( MUC,MUM ) ) - ( MUR - MLU ) ) ,Min( ( ( RRSe / MUC ) - ( DS / MLU ) ) ,( Max( RRSe,MUM ) + Max( MUM,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / ( FirstVNF_RAM_Server / PN ) ) - Min( Const ,FirstVNF_Mem_Server ) )", "choosing": "Max( Min( Max( Min( MLU ,CS ),Min( MUR ,MUR ) ) ,( Min( MUC ,RRSe ) * ( DS - RRSe ) ) ),Min( ( ( RMSe * CS ) / ( MLU - CS ) ) ,( ( MUR + DS ) / ( CS - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,Const ) * ( RRS - DDR ) )", "choosing": "( ( RMSe + MUM ) * ( RRSe + MUC ) )", "obj1": 1.0, "obj2": 0.0}]}