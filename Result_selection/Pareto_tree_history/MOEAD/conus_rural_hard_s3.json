{"1": [{"determining": "( ( Const * FirstVNF_RAM ) / ( ARS - DDR ) )", "choosing": "( ( CS * DS ) / Min( RRSe ,CS ) )", "obj1": 0.7386138613861386, "obj2": 0.18221576851365628}, {"determining": "Max( ( Min( RRS ,Const ) / MDR ),( MDR - FirstVNF_CPU ) )", "choosing": "Max( Max( MUR,( RCSe / ( MUC - CS ) ) ),Min( RCSe ,Max( CS,MLU ) ) )", "obj1": 0.7405940594059406, "obj2": 0.24453672278240354}, {"determining": "( Max( DDR,FirstVNF_CPU ) * ( DDR - ( BR / DDR ) ) )", "choosing": "Min( Min( MUM ,( RCSe / ( RMSe / Min( MUR ,( ( MUR + Max( RCSe,MUC ) ) + RMSe ) ) ) ) ) ,( RMSe * MUR ) )", "obj1": 0.6851485148514852, "obj2": 0.24937920687677614}, {"determining": "Max( Max( ( Min( ( FirstVNF_CPU + MDR ) ,Const ) / BR ),Min( CRS ,RRS ) ),( CRS / FirstVNF_CPU_Server ) )", "choosing": "( ( MLU * ( ( Min( Min( CS ,MUM ) ,MLU ) - Min( DS ,RMSe ) ) + DS ) ) * Max( RRSe,( ( Max( CS,Max( MLU,RCSe ) ) / Min( MUC ,Min( ( Min( RCSe ,RCSe ) / MLU ) ,MUM ) ) ) - MUR ) ) )", "obj1": 0.7722772277227723, "obj2": 0.17057147732157776}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Const ) )", "choosing": "Min( ( MUR + MLU ) ,( MUM - RMSe ) )", "obj1": 0.6831683168316832, "obj2": 0.2345743375147011}, {"determining": "Max( Max( FirstVNF_Mem_Server,FirstVNF_RAM ),( RRS * DDR ) )", "choosing": "( ( MUR + CS ) + ( MUR - MUM ) )", "obj1": 0.6811881188118812, "obj2": 0.2464220802874649}, {"determining": "( Min( BR ,FirstVNF_Mem_Server ) / Max( ( FirstVNF_RAM_Server * ( CRS * ACS ) ),MDR ) )", "choosing": "Min( ( MUM / RRSe ) ,( RRSe + Min( CS ,( ( DS - DS ) * MUM ) ) ) )", "obj1": 0.7346534653465346, "obj2": 0.24076373240896018}, {"determining": "( ( FirstVNF_RAM_Server * FirstVNF_RAM_Server ) * Min( CRS ,Const ) )", "choosing": "Max( ( MUM / RMSe ),Max( MUR,DS ) )", "obj1": 0.7445544554455445, "obj2": 0.25159096858372754}, {"determining": "( ( ( ( ARS + ( FirstVNF_Mem_Server - ( PN + ( Min( DDR ,DDR ) - ( MDR + FirstVNF_CPU ) ) ) ) ) - PN ) - MDR ) * ( ACS / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( Min( Min( MUR ,RRSe ) ,Min( DS ,RCSe ) ) ,MUR ) ) / Max( ( RRSe * RRSe ),MUM ) ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 0.7128712871287128, "obj2": 0.2533391814342572}, {"determining": "( ( CRS + FirstVNF_CPU_Server ) / Max( FirstVNF_CPU,FirstVNF_CPU ) )", "choosing": "Max( ( RMSe + DS ),Max( CS,MLU ) )", "obj1": 0.7069306930693069, "obj2": 0.20979772762713333}, {"determining": "( Max( Const,MDR ) / ( FirstVNF_Mem / DDR ) )", "choosing": "( Max( RMSe,RCSe ) / ( RCSe * MUC ) )", "obj1": 0.7504950495049505, "obj2": 0.23591968867352814}, {"determining": "( Max( RRS,RRS ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( Min( RRSe ,MUM ) / ( DS + RCSe ) )", "obj1": 0.7148514851485148, "obj2": 0.25114599819741157}, {"determining": "( ( PN + FirstVNF_RAM ) - Min( FirstVNF_Mem_Server ,DDR ) )", "choosing": "( Min( MUM ,MLU ) - ( RCSe / CS ) )", "obj1": 0.6851485148514852, "obj2": 0.23913297703703812}, {"determining": "Max( ( PN / FirstVNF_CPU ),( FirstVNF_Mem_Server * FirstVNF_Mem ) )", "choosing": "Max( Max( CS,MUR ),( MUC / MUR ) )", "obj1": 0.7287128712871287, "obj2": 0.2515443880089193}, {"determining": "( Max( MDR,FirstVNF_RAM_Server ) + ( BR - FirstVNF_Mem_Server ) )", "choosing": "( Min( MLU ,RCSe ) / ( DS / RRSe ) )", "obj1": 0.7029702970297029, "obj2": 0.2355517887090312}, {"determining": "( Max( FirstVNF_RAM_Server,FirstVNF_Mem_Server ) - ( Const - ACS ) )", "choosing": "( Min( RCSe ,MLU ) + ( RRSe + RRSe ) )", "obj1": 0.7108910891089109, "obj2": 0.2545314499554913}, {"determining": "( Min( FirstVNF_RAM ,FirstVNF_RAM ) + Max( RRS,Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) ) )", "choosing": "Max( Max( MUC,Max( ( ( ( RRSe + CS ) - DS ) + MUR ),RCSe ) ),( MUR / DS ) )", "obj1": 0.7168316831683168, "obj2": 0.2743275732003987}, {"determining": "( ( DDR / Const ) * ( CRS / ( BR + RRS ) ) )", "choosing": "( Max( MLU,RCSe ) / ( ( RCSe - RCSe ) + CS ) )", "obj1": 0.7366336633663366, "obj2": 0.24904640885032897}, {"determining": "( ( ( FirstVNF_RAM + CRS ) / ( FirstVNF_CPU_Server - RRS ) ) + ( ( AMS + BR ) / Min( MDR ,FirstVNF_RAM_Server ) ) )", "choosing": "Max( ( ( MUR + MLU ) * Min( CS ,MLU ) ),( ( DS * MUC ) + Max( RMSe,CS ) ) )", "obj1": 0.7306930693069307, "obj2": 0.2516897643991203}, {"determining": "Min( Max( ( FirstVNF_RAM_Server - ( AMS * MDR ) ),FirstVNF_CPU ) ,Max( MRS,FirstVNF_RAM_Server ) )", "choosing": "Min( ( ( MUC * CS ) * Min( MLU ,DS ) ) ,Max( Max( CS,CS ),( MUR / ( ( MUC / MLU ) * Max( MUR,MUM ) ) ) ) )", "obj1": 0.7782178217821782, "obj2": 0.18579709268668126}, {"determining": "Max( ( ( FirstVNF_RAM_Server + ACS ) + ( ARS / AMS ) ),( Min( FirstVNF_RAM ,AMS ) - Min( FirstVNF_Mem ,ACS ) ) )", "choosing": "( ( ( CS + MUM ) + ( MLU + MUC ) ) * ( RCSe - MLU ) )", "obj1": 0.7425742574257426, "obj2": 0.24570895825330963}, {"determining": "( ( FirstVNF_RAM + Const ) * ( ( FirstVNF_RAM - BR ) + Max( FirstVNF_CPU,FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( ( ( MUR * Min( CS ,Min( MLU ,MUR ) ) ) / ( Max( RMSe,MUR ) + MUM ) ) - RCSe ) / RRSe ) / Max( DS,( RCSe - RRSe ) ) )", "obj1": 0.7405940594059406, "obj2": 0.26931538806991623}, {"determining": "( Max( RRS,ARS ) - Min( ( AMS * Const ) ,BR ) )", "choosing": "( Max( CS,RCSe ) / ( MUM * ( ( ( MLU * ( Max( RCSe,( DS + MLU ) ) - Min( Min( MUC ,MUM ) ,RRSe ) ) ) / ( ( MUC * CS ) - ( RMSe + MLU ) ) ) + MUM ) ) )", "obj1": 0.7108910891089109, "obj2": 0.25344912245286644}, {"determining": "( ( BR - PN ) * ( ( Const / ARS ) - Max( FirstVNF_CPU_Server,ARS ) ) )", "choosing": "( ( Min( MUC ,MUC ) + ( MLU * CS ) ) * ( MUM / DS ) )", "obj1": 0.7049504950495049, "obj2": 0.24767984005916555}, {"determining": "( ( Const + ( FirstVNF_Mem_Server / PN ) ) - ( BR - ACS ) )", "choosing": "( ( Min( RCSe ,RRSe ) / ( RMSe + RRSe ) ) - Max( ( MUC + MLU ),( RRSe - MUC ) ) )", "obj1": 0.7287128712871287, "obj2": 0.2404030890142825}, {"determining": "Max( ( MRS / FirstVNF_Mem ),( RRS / Min( FirstVNF_RAM ,ACS ) ) )", "choosing": "( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) )", "obj1": 0.7683168316831683, "obj2": 0.23618008521084138}, {"determining": "Max( ( PN - ( FirstVNF_Mem_Server - BR ) ),Min( ( FirstVNF_Mem - MRS ) ,FirstVNF_Mem ) )", "choosing": "Min( ( ( RCSe + RCSe ) * CS ) ,Max( ( RRSe / RCSe ),MUR ) )", "obj1": 0.7267326732673267, "obj2": 0.23362206191759827}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 0.8950495049504951, "obj2": 0.10076777008113041}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 0.6316831683168317, "obj2": 0.26120720568432615}, {"determining": "Max( ( Min( MDR ,RRS ) - ( MDR * FirstVNF_RAM ) ),Min( ( MDR + ( Max( MDR,Const ) * FirstVNF_RAM_Server ) ) ,( MDR / FirstVNF_RAM ) ) )", "choosing": "Max( ( CS - RRSe ),( RCSe / ( Max( ( ( RRSe + Max( ( DS + MUR ),( CS * MUR ) ) ) - RRSe ),Min( MUC ,MUR ) ) + RRSe ) ) )", "obj1": 0.7386138613861386, "obj2": 0.24028200159024213}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * DDR ) - ( AMS + ( CRS + PN ) ) )", "choosing": "( Max( ( MUM - MUM ),MLU ) + Min( ( RRSe * MUM ) ,( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) ,Max( Max( FirstVNF_Mem,BR ),( MRS * ARS ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( FirstVNF_CPU_Server - ( FirstVNF_RAM_Server / MRS ) ),( CRS / Const ) )", "choosing": "Max( Max( RRSe,RMSe ),( ( RRSe / MUR ) / Max( RCSe,RRSe ) ) )", "obj1": 0.7405940594059406, "obj2": 0.25310739988951625}, {"determining": "( Max( RRS,FirstVNF_Mem_Server ) - Min( Max( ARS,Const ) ,Const ) )", "choosing": "Min( ( Min( ( DS - Max( CS,DS ) ) ,MUR ) * Max( Max( DS,RMSe ),( MUC - DS ) ) ) ,Min( MUC ,Max( RRSe,MLU ) ) )", "obj1": 0.7504950495049505, "obj2": 0.16951038159958245}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8396039603960396, "obj2": 0.11233461513923604}, {"determining": "( ( ( ( PN + DDR ) - Min( Const ,MRS ) ) * ( ( RRS - FirstVNF_CPU_Server ) * Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) ) ) + ( ( ( FirstVNF_CPU_Server * ARS ) / Min( ACS ,MRS ) ) / ( Max( FirstVNF_Mem_Server,FirstVNF_Mem_Server ) / ( FirstVNF_RAM_Server + CRS ) ) ) )", "choosing": "( Min( MUC ,RRSe ) + Min( ( ( RRSe / RRSe ) - ( RRSe - RRSe ) ) ,Max( ( MUM * RRSe ),( MUC * MUR ) ) ) )", "obj1": 0.6871287128712872, "obj2": 0.26869034567548616}, {"determining": "Min( ( ( ( DDR * MDR ) / ( ACS * PN ) ) / Max( Min( MRS ,BR ),( FirstVNF_Mem / FirstVNF_Mem_Server ) ) ) ,( ( Min( FirstVNF_RAM ,ARS ) / ( CRS / Const ) ) / ( ( FirstVNF_RAM / RRS ) * Max( CRS,RRS ) ) ) )", "choosing": "Min( Min( ( ( RMSe / DS ) - Min( MUC ,RCSe ) ) ,( Min( RCSe ,CS ) * Min( RRSe ,CS ) ) ) ,( Max( Max( RCSe,RCSe ),( CS + RRSe ) ) / ( ( DS / CS ) * ( RCSe / MUC ) ) ) )", "obj1": 0.7247524752475247, "obj2": 0.2532613522849976}, {"determining": "( ( ( ( PN / CRS ) + ( AMS / FirstVNF_CPU ) ) + Min( ( FirstVNF_RAM_Server / ARS ) ,( PN + CRS ) ) ) * Min( ( Min( FirstVNF_RAM_Server ,FirstVNF_Mem_Server ) * Max( FirstVNF_RAM,AMS ) ) ,( ( FirstVNF_CPU_Server - FirstVNF_RAM_Server ) + ( BR / FirstVNF_RAM ) ) ) )", "choosing": "( Max( MUM,( MUR / ( RMSe - MUC ) ) ) / ( MUM + CS ) )", "obj1": 0.7524752475247525, "obj2": 0.207118215954831}, {"determining": "( ( Min( ( CRS - DDR ) ,( FirstVNF_CPU_Server * RRS ) ) - ( ( FirstVNF_RAM / FirstVNF_CPU ) - Max( FirstVNF_RAM,FirstVNF_Mem ) ) ) * ( ( ( FirstVNF_Mem_Server / FirstVNF_Mem ) * ( RRS - MDR ) ) * ( ( Const * FirstVNF_Mem_Server ) + Max( FirstVNF_Mem_Server,FirstVNF_RAM ) ) ) )", "choosing": "Max( ( ( Max( RCSe,MUC ) / ( DS + RMSe ) ) - ( ( MUR / MLU ) - ( MUM + MUM ) ) ),Min( Min( ( RMSe / RRSe ) ,Max( RCSe,MLU ) ) ,Max( ( CS + DS ),( CS / MLU ) ) ) )", "obj1": 0.7207920792079208, "obj2": 0.2798446274559694}, {"determining": "Min( ( ( Max( FirstVNF_RAM_Server,FirstVNF_CPU ) + Max( BR,FirstVNF_CPU_Server ) ) - Min( ( FirstVNF_RAM_Server + CRS ) ,( FirstVNF_CPU - DDR ) ) ) ,( Max( ( ACS * FirstVNF_Mem_Server ),Min( CRS ,( AMS / Min( RRS ,( RRS + FirstVNF_Mem ) ) ) ) ) - ( Min( FirstVNF_Mem ,MRS ) / Min( FirstVNF_Mem ,Const ) ) ) )", "choosing": "( ( Max( ( ( RMSe + ( ( MLU / ( DS + MUM ) ) + Min( ( MUM - RCSe ) ,( MUC / RCSe ) ) ) ) * RRSe ),RRSe ) - MUM ) + Max( MUR,RRSe ) )", "obj1": 0.7267326732673267, "obj2": 0.2393900441835008}, {"determining": "Max( Max( ( ( DDR + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + Max( FirstVNF_RAM_Server,Min( Max( BR,Max( DDR,RRS ) ) ,BR ) ) ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( ( MLU / RCSe ) - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( Min( MDR ,FirstVNF_RAM_Server ) / ( ACS * FirstVNF_Mem ) )", "choosing": "Min( ( Max( ( MLU - MUM ),CS ) - Min( DS ,MUC ) ) ,( ( Min( RMSe ,Max( CS,( RCSe / ( MUM + MLU ) ) ) ) * ( RMSe / Max( Min( ( RCSe * CS ) ,MLU ),CS ) ) ) * Min( DS ,CS ) ) )", "obj1": 0.7544554455445545, "obj2": 0.20802139954082918}, {"determining": "( ( ( ( CRS + ACS ) - Min( FirstVNF_RAM ,RRS ) ) / ( ( FirstVNF_Mem * FirstVNF_Mem_Server ) * Max( MRS,ACS ) ) ) + ( ( ( DDR * FirstVNF_Mem ) / ( FirstVNF_Mem_Server * FirstVNF_Mem_Server ) ) - Min( ( ARS - RRS ) ,( AMS * MDR ) ) ) )", "choosing": "Min( ( CS + RRSe ) ,( ( Max( MUM,CS ) - MUM ) * CS ) )", "obj1": 0.7207920792079208, "obj2": 0.24311948970666794}, {"determining": "Min( Min( ( ( ARS + FirstVNF_Mem_Server ) + Max( FirstVNF_Mem_Server,RRS ) ) ,( ( FirstVNF_Mem * FirstVNF_RAM_Server ) / ( AMS + PN ) ) ) ,( ( Min( Max( AMS,Max( CRS,( CRS * ( BR / AMS ) ) ) ) ,PN ) * Min( MRS ,Const ) ) + ( ( CRS * FirstVNF_Mem ) / Max( MDR,MRS ) ) ) )", "choosing": "( ( ( ( DS * RCSe ) * Max( MUM,MUR ) ) - ( ( RCSe + DS ) / ( MUR - CS ) ) ) * ( MLU + MUR ) )", "obj1": 0.6831683168316832, "obj2": 0.24489673089361746}, {"determining": "Max( ( ( ( FirstVNF_CPU * CRS ) + ( AMS - FirstVNF_Mem ) ) * ( ( CRS - FirstVNF_Mem ) * ( ACS + AMS ) ) ),( ( ( FirstVNF_CPU - MRS ) + Min( ( ( FirstVNF_CPU_Server / Max( ( AMS - MDR ),ARS ) ) - ( BR + Const ) ) ,FirstVNF_CPU_Server ) ) / ( Max( DDR,RRS ) + ( RRS - MRS ) ) ) )", "choosing": "( ( MLU + ( CS * Min( MUR ,RRSe ) ) ) / ( MUM * ( RMSe - Min( RMSe ,MUR ) ) ) )", "obj1": 0.7128712871287128, "obj2": 0.2411560273098072}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU - Min( BR ,ARS ) ) * ( MDR / AMS ) )", "choosing": "Min( ( Min( ( ( RMSe * ( MUC / ( Max( MUM,MUR ) - RCSe ) ) ) * CS ) ,Min( MUM ,MUM ) ) / Min( Max( RMSe,MLU ) ,Max( RRSe,DS ) ) ) ,( Max( Min( MUM ,RRSe ),Max( RCSe,DS ) ) + ( ( CS * RMSe ) - Min( MUM ,DS ) ) ) )", "obj1": 0.697029702970297, "obj2": 0.2766759316349152}, {"determining": "Max( ( ( Max( MRS,Const ) + Min( FirstVNF_CPU ,CRS ) ) * ( ( ARS / MDR ) / ( DDR / Const ) ) ),( ( ( ARS / FirstVNF_Mem ) * Min( DDR ,ACS ) ) / ( Max( FirstVNF_Mem,AMS ) + ( FirstVNF_RAM - DDR ) ) ) )", "choosing": "( ( RCSe / Max( MUR,RMSe ) ) / Min( RMSe ,CS ) )", "obj1": 0.7267326732673267, "obj2": 0.2402908539821554}], "2": [{"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 0.6316831683168317, "obj2": 0.26120720568432615}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( Min( FirstVNF_Mem_Server ,RRS ) - ( MDR * FirstVNF_RAM ) ),Min( ( MDR + FirstVNF_Mem ) ,( MDR / FirstVNF_RAM ) ) )", "choosing": "( ( MUR - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.26120720568432615}, {"determining": "Min( Min( ( FirstVNF_RAM - FirstVNF_CPU_Server ) ,FirstVNF_CPU ) ,Max( MRS,FirstVNF_RAM_Server ) )", "choosing": "Min( ( ( CS * Max( ( ( MUR + MLU ) * Min( CS ,MLU ) ),( ( DS * MUC ) + Max( RMSe,CS ) ) ) ) * Min( MLU ,DS ) ) ,Min( Max( CS,CS ) ,( MUR / DS ) ) )", "obj1": 0.9326732673267327, "obj2": 0.05815469934233446}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 0.9861386138613861, "obj2": 0.01098733703850944}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 0.8950495049504951, "obj2": 0.10076777008113041}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / ( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + ( ( RRSe * MUR ) + ( RCSe / CS ) ) ) ) )", "obj1": 0.7643564356435644, "obj2": 0.14824220108397693}, {"determining": "( Max( RRS,FirstVNF_RAM_Server ) - ( FirstVNF_CPU / FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) / ( RRSe * Max( MUM,( RRSe - RCSe ) ) ) )", "obj1": 0.8178217821782178, "obj2": 0.13705666966603866}, {"determining": "( Max( PN,FirstVNF_Mem_Server ) - Max( FirstVNF_RAM_Server,( MDR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 0.9148514851485149, "obj2": 0.06890002881459108}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8396039603960396, "obj2": 0.11233461513923604}, {"determining": "Max( ( MRS / FirstVNF_Mem ),( RRS / Min( FirstVNF_RAM ,ACS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 0.7188118811881188, "obj2": 0.1738726088589805}, {"determining": "( Max( RRS,FirstVNF_Mem_Server ) - Min( Max( ARS,Const ) ,Const ) )", "choosing": "Min( ( Min( ( DS - Max( CS,DS ) ) ,MUR ) * Max( Max( DS,RMSe ),( MUC - DS ) ) ) ,Min( MUC ,Max( RRSe,MLU ) ) )", "obj1": 0.7504950495049505, "obj2": 0.16951038159958245}, {"determining": "( ( FirstVNF_CPU - Min( ( DDR + MRS ) ,ARS ) ) * ( MDR / AMS ) )", "choosing": "Min( ( Min( ( ( RMSe * ( MUC / ( Max( MUM,MUR ) - RCSe ) ) ) * CS ) ,Min( MUM ,MUM ) ) / Min( Max( RMSe,MLU ) ,Max( RRSe,DS ) ) ) ,( Max( Min( MUM ,RRSe ),Max( RCSe,DS ) ) + ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) ) )", "obj1": 0.7069306930693069, "obj2": 0.2089306884175265}, {"determining": "( Max( RRS,RRS ) / Max( FirstVNF_CPU,FirstVNF_CPU ) )", "choosing": "Max( ( RMSe + ( DS + RCSe ) ),Max( CS,MLU ) )", "obj1": 0.7128712871287128, "obj2": 0.20170140538032616}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Max( FirstVNF_Mem_Server,FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( ( MUR + CS ) + ( MUR - MUM ) ) - RMSe ) )", "obj1": 0.6851485148514852, "obj2": 0.22941408185070492}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8336633663366336, "obj2": 0.12213581766134553}, {"determining": "Max( Max( FirstVNF_Mem_Server,FirstVNF_RAM ),( ( ( FirstVNF_RAM_Server * MDR ) + ( Const * Const ) ) * DDR ) )", "choosing": "( ( ( MUR + MLU ) + CS ) + ( MUR - MUM ) )", "obj1": 0.6712871287128713, "obj2": 0.24160158935064635}, {"determining": "( Max( PN,FirstVNF_Mem_Server ) - ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) )", "choosing": "Min( ( Max( ( MUR - CS ),Min( RCSe ,RRSe ) ) * Max( ( MUC - DS ),Max( DS,CS ) ) ) ,( Min( Min( RMSe ,MUM ) ,( RRSe * MUM ) ) / ( ( DS * MUM ) / ( CS + DS ) ) ) )", "obj1": 0.6554455445544555, "obj2": 0.2434117278603}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Const ) )", "choosing": "Min( ( MUR + MLU ) ,( MUM - RMSe ) )", "obj1": 0.6831683168316832, "obj2": 0.2345743375147011}, {"determining": "( ( FirstVNF_RAM_Server * FirstVNF_CPU ) + Max( Min( ( ( Const * FirstVNF_Mem_Server ) - Max( ( MDR * Min( ( BR - PN ) ,CRS ) ),BR ) ) ,PN ),( FirstVNF_RAM / ARS ) ) )", "choosing": "Min( ( MLU + ( RMSe + MUC ) ) ,( ( CS + RRSe ) / ( RCSe / RCSe ) ) )", "obj1": 0.6475247524752475, "obj2": 0.25233360630665547}, {"determining": "Max( Max( ( ( DDR + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + Max( FirstVNF_RAM_Server,Min( Max( BR,Max( DDR,RRS ) ) ,BR ) ) ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( ( MLU / RCSe ) - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * DDR ) - ( AMS + ( CRS + PN ) ) )", "choosing": "( Max( ( MUM - MUM ),MLU ) + Min( ( RRSe * MUM ) ,( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) ,Max( Max( FirstVNF_Mem,BR ),( MRS * ARS ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "Min( ( ( ( Max( DS,RCSe ) - MUM ) + ( MUR + MUC ) ) * RCSe ) ,( Max( CS,Min( ( Min( Min( MLU ,Max( MUC,MUC ) ) ,MUC ) / MUM ) ,DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,BR ) - Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) - ( ( MUC + MLU ) - ( RRSe - MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM ,ACS ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_Mem * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,Max( ( RRSe / RCSe ),MUR ) ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - ( ( FirstVNF_RAM_Server + AMS ) / ( DDR - Const ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - FirstVNF_CPU_Server )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,RRSe ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + FirstVNF_Mem ) - ( ACS + AMS ) ) - ( Max( RRS,BR ) * ( FirstVNF_Mem - PN ) ) )", "choosing": "Max( ( Max( MUR,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( CS ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - ( ( FirstVNF_RAM_Server + AMS ) / ( DDR - Const ) ) )", "choosing": "Max( ( Max( MUR,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( CS ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + FirstVNF_Mem ) - ( ACS + AMS ) ) - ( Max( FirstVNF_CPU_Server,FirstVNF_CPU ) * ( FirstVNF_Mem - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( DDR - Const ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( Max( ( Min( MDR ,RRS ) - ( MDR * FirstVNF_RAM ) ),Min( ( MDR + ( Max( MDR,Const ) * FirstVNF_RAM_Server ) ) ,( MDR / FirstVNF_RAM ) ) ) / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( ( ( RRSe + Max( ( DS + MUR ),( CS * MUR ) ) ) - RRSe ) ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}], "3": [{"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 0.6316831683168317, "obj2": 0.26120720568432615}, {"determining": "( ( MDR - ( ( ARS + FirstVNF_CPU_Server ) - PN ) ) * ( BR / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( MUC ,RMSe ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( Min( FirstVNF_Mem_Server ,RRS ) - ( MDR * FirstVNF_RAM ) ),Min( ( MDR + FirstVNF_Mem ) ,( MDR / FirstVNF_RAM ) ) )", "choosing": "( ( MUR - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.26120720568432615}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 0.8950495049504951, "obj2": 0.10076777008113041}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 0.9861386138613861, "obj2": 0.01098733703850944}, {"determining": "( ( ( MRS - ( ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( DS + RMSe ) )", "obj1": 0.9128712871287129, "obj2": 0.03821651173707417}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / ( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + ( ( RRSe * MUR ) + ( RCSe / CS ) ) ) ) )", "obj1": 0.7643564356435644, "obj2": 0.14824220108397693}, {"determining": "( Max( RRS,FirstVNF_RAM_Server ) - ( FirstVNF_CPU / FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) / ( RRSe * Max( MUM,( RRSe - RCSe ) ) ) )", "obj1": 0.8178217821782178, "obj2": 0.13705666966603866}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8396039603960396, "obj2": 0.11233461513923604}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "Max( ( MRS / FirstVNF_Mem ),( RRS / Min( FirstVNF_RAM ,ACS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 0.7188118811881188, "obj2": 0.1738726088589805}, {"determining": "( Max( RRS,FirstVNF_Mem_Server ) - Min( Max( ARS,Const ) ,Const ) )", "choosing": "Min( ( Min( ( DS - Max( CS,DS ) ) ,MUR ) * Max( Max( DS,RMSe ),( MUC - DS ) ) ) ,Min( MUC ,Max( RRSe,MLU ) ) )", "obj1": 0.7504950495049505, "obj2": 0.16951038159958245}, {"determining": "( Max( RRS,RRS ) / Max( FirstVNF_CPU,FirstVNF_CPU ) )", "choosing": "Max( ( RMSe + ( DS + RCSe ) ),Max( CS,MLU ) )", "obj1": 0.7128712871287128, "obj2": 0.20170140538032616}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8336633663366336, "obj2": 0.12213581766134553}, {"determining": "( ( FirstVNF_CPU - Min( ( DDR + MRS ) ,ARS ) ) * ( MDR / AMS ) )", "choosing": "Min( ( Min( ( ( RMSe * ( MUC / ( Max( MUM,MUR ) - RCSe ) ) ) * CS ) ,Min( MUM ,MUM ) ) / Min( Max( RMSe,MLU ) ,Max( RRSe,DS ) ) ) ,( Max( Min( MUM ,RRSe ),Max( RCSe,DS ) ) + ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) ) )", "obj1": 0.7069306930693069, "obj2": 0.2089306884175265}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Max( ( FirstVNF_RAM_Server * MDR ),FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( MUM + ( MUR - MUM ) ) - RMSe ) )", "obj1": 0.691089108910891, "obj2": 0.223653343431637}, {"determining": "( FirstVNF_RAM_Server + ( Const * Const ) )", "choosing": "Min( ( MUR + MLU ) ,( MUM - RMSe ) )", "obj1": 0.6554455445544555, "obj2": 0.24326021442118234}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( FirstVNF_RAM_Server * Max( FirstVNF_Mem_Server,FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( ( MUR + CS ) + ( ( MUM - RMSe ) - MUM ) ) - RMSe ) )", "obj1": 0.6732673267326733, "obj2": 0.23527967963684857}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Max( FirstVNF_Mem_Server,FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( ( MUR + CS ) + ( MUR - MUM ) ) - RMSe ) )", "obj1": 0.6633663366336634, "obj2": 0.23876920046489336}, {"determining": "( ( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.994059405940594, "obj2": 0.00223319526606793}, {"determining": "( CRS + ( FirstVNF_RAM / Max( Const,( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) ) ) )", "choosing": "( Min( RRSe ,( RMSe + DS ) ) / ( ( CS + Min( MUC ,RMSe ) ) + RCSe ) )", "obj1": 0.6752475247524753, "obj2": 0.22600899930297272}, {"determining": "( ( MDR - ARS ) * ( BR / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( ( MUM * Min( DS ,MUM ) ) ,MUR ) ) / MUM ) ) + ( ( MUM * Min( DS ,MUM ) ) - MUR ) ) + ( MLU - MUM ) )", "obj1": 0.9920792079207921, "obj2": 0.010128981491686706}, {"determining": "( Max( PN,FirstVNF_Mem_Server ) - Max( FirstVNF_RAM_Server,( MDR * FirstVNF_CPU_Server ) ) )", "choosing": "Min( ( Max( Min( MUR ,RRSe ),Min( RCSe ,RRSe ) ) * Max( ( MUC - DS ),Max( DS,CS ) ) ) ,( Min( Min( RMSe ,MUM ) ,( RRSe * MUM ) ) / ( ( DS * MUM ) / ( CS + DS ) ) ) )", "obj1": 0.7504950495049505, "obj2": 0.16951038159958245}, {"determining": "Max( ( RRS * DDR ),Max( PN,( BR / ( ( RRS * FirstVNF_Mem ) * Min( Const ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( FirstVNF_RAM_Server * FirstVNF_CPU ) + Max( Min( ( ( Const * FirstVNF_Mem_Server ) - Max( ( MDR * Min( ( BR - PN ) ,CRS ) ),BR ) ) ,PN ),( FirstVNF_RAM / ARS ) ) )", "choosing": "Min( ( MLU + ( RMSe + MUC ) ) ,( ( CS + RRSe ) / ( RCSe / RCSe ) ) )", "obj1": 0.6475247524752475, "obj2": 0.25233360630665547}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "Max( Max( ( ( FirstVNF_RAM_Server + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + RRS ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "Max( Max( ( ( DDR + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + Max( FirstVNF_RAM_Server,Min( Max( BR,Max( DDR,RRS ) ) ,BR ) ) ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( ( MLU / RCSe ) - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Const ) )", "choosing": "Min( ( MUR + MLU ) ,( MUM - RMSe ) )", "obj1": 0.6475247524752475, "obj2": 0.25233360630665547}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * DDR ) - ( AMS + ( CRS + PN ) ) )", "choosing": "( Max( ( MUM - MUM ),MLU ) + Min( ( RRSe * MUM ) ,( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) ,Max( Max( FirstVNF_Mem,BR ),( MRS * ARS ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "Min( ( ( ( Max( DS,RCSe ) - MUM ) + ( MUR + MUC ) ) * RCSe ) ,( Max( CS,Min( ( Min( Min( MLU ,Max( MUC,MUC ) ) ,MUC ) / MUM ) ,DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,BR ) - Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) - ( ( MUC + MLU ) - ( RRSe - MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM ,ACS ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_Mem * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,Max( ( RRSe / RCSe ),MUR ) ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - ( ( FirstVNF_RAM_Server + AMS ) / ( DDR - Const ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - FirstVNF_CPU_Server )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,RRSe ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + FirstVNF_Mem ) - ( ACS + AMS ) ) - ( Max( RRS,BR ) * ( FirstVNF_Mem - PN ) ) )", "choosing": "Max( ( Max( MUR,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( CS ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - ( ( FirstVNF_RAM_Server + AMS ) / ( DDR - Const ) ) )", "choosing": "Max( ( Max( MUR,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( CS ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + FirstVNF_Mem ) - ( ACS + AMS ) ) - ( Max( FirstVNF_CPU_Server,FirstVNF_CPU ) * ( FirstVNF_Mem - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}], "4": [{"determining": "( ( MDR - ( ( ARS + ( FirstVNF_Mem_Server - Const ) ) - PN ) ) * ( ACS / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( Min( Min( MUR ,RRSe ) ,Min( DS ,MUM ) ) ,MUR ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ( ( ARS + FirstVNF_CPU_Server ) - PN ) ) * ( BR / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( MUC ,RMSe ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.25848961592675507}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 0.8950495049504951, "obj2": 0.10076777008113041}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( ( FirstVNF_RAM / MDR ) - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + DS ) )", "obj1": 0.9287128712871288, "obj2": 0.029422542447670248}, {"determining": "( Max( RRS,FirstVNF_RAM_Server ) - ( FirstVNF_CPU / FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) / ( RRSe * Max( MUM,( RRSe - RCSe ) ) ) )", "obj1": 0.8178217821782178, "obj2": 0.13705666966603866}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( ( RMSe * ( DS * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.9861386138613861, "obj2": 0.004939535774017165}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / ( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + ( ( RRSe * MUR ) + ( RCSe / CS ) ) ) ) )", "obj1": 0.7643564356435644, "obj2": 0.14824220108397693}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / ( RCSe * ( ( MUR - RCSe ) * ( ( Min( MUC ,RMSe ) + CS ) / MUM ) ) ) )", "obj1": 0.904950495049505, "obj2": 0.04255284090440613}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8396039603960396, "obj2": 0.11233461513923604}, {"determining": "Max( ( MRS / FirstVNF_Mem ),( RRS / Min( FirstVNF_RAM ,ACS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 0.7188118811881188, "obj2": 0.1738726088589805}, {"determining": "( Max( RRS,RRS ) / Max( FirstVNF_CPU,FirstVNF_CPU ) )", "choosing": "Max( ( RMSe + ( DS + RCSe ) ),Max( CS,MLU ) )", "obj1": 0.7128712871287128, "obj2": 0.20170140538032616}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8336633663366336, "obj2": 0.12213581766134553}, {"determining": "( ( FirstVNF_CPU - Min( ( DDR + MRS ) ,ARS ) ) * ( MDR / AMS ) )", "choosing": "Min( ( Min( ( ( RMSe * ( MUC / ( Max( MUM,MUR ) - RCSe ) ) ) * CS ) ,Min( MUM ,MUM ) ) / Min( Max( RMSe,MLU ) ,Max( RRSe,DS ) ) ) ,( Max( Min( MUM ,RRSe ),Max( RCSe,DS ) ) + ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) ) )", "obj1": 0.7069306930693069, "obj2": 0.2089306884175265}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Max( ( FirstVNF_RAM_Server * MDR ),FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( MUM + ( MUR - MUM ) ) - RMSe ) )", "obj1": 0.691089108910891, "obj2": 0.223653343431637}, {"determining": "( Max( BR,FirstVNF_CPU ) * FirstVNF_CPU )", "choosing": "Min( DS ,( MLU * ( ( Min( Min( CS ,MUM ) ,MLU ) - Min( DS ,RMSe ) ) + DS ) ) )", "obj1": 0.7584158415841584, "obj2": 0.16558077383059527}, {"determining": "( Max( RRS,FirstVNF_Mem_Server ) - Min( Max( ARS,Const ) ,Const ) )", "choosing": "Min( ( Min( ( DS - Max( CS,DS ) ) ,MUR ) * Max( Max( DS,RMSe ),( MUC - DS ) ) ) ,Min( MUC ,Max( RRSe,MLU ) ) )", "obj1": 0.7504950495049505, "obj2": 0.16951038159958245}, {"determining": "( FirstVNF_RAM_Server + ( Const * Const ) )", "choosing": "Min( ( MUR + MLU ) ,( MUM - RMSe ) )", "obj1": 0.6554455445544555, "obj2": 0.24326021442118234}, {"determining": "( ( ( MRS - ( ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( DS + RMSe ) )", "obj1": 0.9128712871287129, "obj2": 0.03821651173707417}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) ) / FirstVNF_Mem ) )", "choosing": "( MUM + ( MUR - MUM ) )", "obj1": 0.6455445544554456, "obj2": 0.2504990139639477}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( FirstVNF_RAM_Server * Max( FirstVNF_Mem_Server,FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( ( MUR + CS ) + ( ( MUM - RMSe ) - MUM ) ) - RMSe ) )", "obj1": 0.6732673267326733, "obj2": 0.23527967963684857}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( Const * Max( FirstVNF_Mem_Server,FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( ( MUR + CS ) + ( MUR - MUM ) ) - RMSe ) )", "obj1": 0.6633663366336634, "obj2": 0.23876920046489336}, {"determining": "( CRS + ( FirstVNF_RAM / Max( Const,( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) ) ) )", "choosing": "( Min( RRSe ,( RMSe + DS ) ) / ( ( CS + Min( MUC ,RMSe ) ) + RCSe ) )", "obj1": 0.6752475247524753, "obj2": 0.22600899930297272}, {"determining": "( ( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.994059405940594, "obj2": 0.00223319526606793}, {"determining": "Max( Max( ( ( FirstVNF_RAM_Server + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + RRS ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( Max( PN,FirstVNF_Mem_Server ) - Max( FirstVNF_RAM_Server,( MDR * FirstVNF_CPU_Server ) ) )", "choosing": "Min( ( Max( Min( MUR ,RRSe ),Min( RCSe ,RRSe ) ) * Max( ( MUC - DS ),Max( DS,CS ) ) ) ,( Min( Min( RMSe ,MUM ) ,( RRSe * MUM ) ) / ( ( DS * MUM ) / ( CS + DS ) ) ) )", "obj1": 0.7504950495049505, "obj2": 0.16951038159958245}, {"determining": "( ( ( MRS - ( ( RRS * ( FirstVNF_CPU - AMS ) ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + ( RCSe + DS ) ) ) / ( RCSe + DS ) )", "obj1": 0.906930693069307, "obj2": 0.04025509379153863}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "Max( ( RRS * DDR ),Max( PN,( BR / ( ( RRS * FirstVNF_Mem ) * Min( Const ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) * FirstVNF_RAM_Server )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * DDR ) - ( AMS + ( CRS + PN ) ) )", "choosing": "( Max( ( MUM - MUM ),MLU ) + Min( ( RRSe * MUM ) ,( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) ,Max( Max( FirstVNF_Mem,BR ),( MRS * ARS ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "Min( ( ( ( Max( DS,RCSe ) - MUM ) + ( MUR + MUC ) ) * RCSe ) ,( Max( CS,Min( ( Min( Min( MLU ,Max( MUC,MUC ) ) ,MUC ) / MUM ) ,DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,BR ) - Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) - ( ( MUC + MLU ) - ( RRSe - MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM ,ACS ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_Mem * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,Max( ( RRSe / RCSe ),MUR ) ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) - ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( Const - PN ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( MUR + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - ( ( FirstVNF_RAM_Server + AMS ) / ( DDR - Const ) ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - FirstVNF_CPU_Server )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,RRSe ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( RRSe + Min( DS ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}], "5": [{"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.25848961592675507}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) / MDR ) )", "choosing": "( ( RCSe - ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) ) / ( RCSe + DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ( ( ARS + ( FirstVNF_Mem_Server - Const ) ) - PN ) ) * ( ACS / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( Min( Min( MUR ,RRSe ) ,Min( DS ,MUM ) ) ,MUR ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.25848961592675507}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 0.8950495049504951, "obj2": 0.10076777008113041}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR / RCSe ) - MUM ) + ( ( ( MUM - MUC ) - RMSe ) * Min( MUC ,RCSe ) ) ) ) + ( MUC * Min( DS ,MUC ) ) ) * RCSe ) / MUM )", "obj1": 0.8138613861386138, "obj2": 0.13689404097475663}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( ( FirstVNF_RAM / MDR ) - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + DS ) )", "obj1": 0.9287128712871288, "obj2": 0.029422542447670248}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( ( RMSe * ( DS * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.9861386138613861, "obj2": 0.004939535774017165}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / ( RCSe * ( ( MUR - RCSe ) * ( ( Min( MUC ,RMSe ) + CS ) / MUM ) ) ) )", "obj1": 0.904950495049505, "obj2": 0.04255284090440613}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8396039603960396, "obj2": 0.11233461513923604}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / ( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + ( ( RRSe * MUR ) + ( RCSe / CS ) ) ) ) )", "obj1": 0.7643564356435644, "obj2": 0.14824220108397693}, {"determining": "( ( FirstVNF_CPU - Min( ( DDR + MRS ) ,ARS ) ) * ( MDR / AMS ) )", "choosing": "Min( ( Min( ( ( RMSe * ( MUC / ( Max( MUM,MUR ) - RCSe ) ) ) * CS ) ,Min( MUM ,MUM ) ) / Min( Max( RMSe,MLU ) ,Max( RRSe,DS ) ) ) ,( Max( Min( MUM ,RRSe ),Max( RCSe,DS ) ) + ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) ) )", "obj1": 0.7069306930693069, "obj2": 0.2089306884175265}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) * ( BR / MDR ) )", "choosing": "( ( MUR * ( DS + RMSe ) ) + ( MLU - Min( ( MUM / RCSe ) ,( DS - MUR ) ) ) )", "obj1": 0.7207920792079208, "obj2": 0.15485713478114563}, {"determining": "( Max( DDR,FirstVNF_CPU ) * ( ( CRS / ( CRS / FirstVNF_CPU_Server ) ) - DDR ) )", "choosing": "Min( MUR ,( RMSe * ( RMSe * MUR ) ) )", "obj1": 0.7108910891089109, "obj2": 0.18210881893153966}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8336633663366336, "obj2": 0.12213581766134553}, {"determining": "( Max( DDR,FirstVNF_CPU ) * ( ( CRS / ( CRS / FirstVNF_CPU_Server ) ) - DDR ) )", "choosing": "( ( MLU * ( ( Min( Min( CS ,MUM ) ,MLU ) - DS ) + DS ) ) * ( DS * DS ) )", "obj1": 0.7504950495049505, "obj2": 0.1513495450722276}, {"determining": "Max( ( MRS / FirstVNF_Mem ),( RRS / Min( FirstVNF_RAM ,ACS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 0.7188118811881188, "obj2": 0.1738726088589805}, {"determining": "( Min( AMS ,( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) ) ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( MUR + CS ) + ( ( MUR + CS ) + ( MUR - MUM ) ) )", "obj1": 0.693069306930693, "obj2": 0.2210707704352867}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) ) / FirstVNF_Mem ) )", "choosing": "( MUM + ( MUR - MUM ) )", "obj1": 0.6455445544554456, "obj2": 0.2504990139639477}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / Min( Min( Max( ( ( Max( DS,RRSe ) - MUC ) + Min( RMSe ,MUM ) ),( Min( MUM ,( Max( MUM,RCSe ) / RRSe ) ) + CS ) ) ,RCSe ) ,CS ) )", "obj1": 0.9207920792079208, "obj2": 0.032568086491042675}, {"determining": "( ( FirstVNF_RAM_Server * MDR ) + ( FirstVNF_RAM_Server * Max( FirstVNF_Mem_Server,FirstVNF_RAM ) ) )", "choosing": "Min( ( MUR + MLU ) ,( ( ( MUR + CS ) + ( ( MUM - RMSe ) - MUM ) ) - RMSe ) )", "obj1": 0.6732673267326733, "obj2": 0.23527967963684857}, {"determining": "( FirstVNF_RAM_Server + ( Const * Const ) )", "choosing": "Min( ( MUR + MLU ) ,( MUM - RMSe ) )", "obj1": 0.6554455445544555, "obj2": 0.24326021442118234}, {"determining": "( Max( DDR,Max( ( ( ARS * PN ) / DDR ),AMS ) ) * ( DDR + ( ( ( FirstVNF_CPU_Server / FirstVNF_Mem_Server ) + MRS ) / PN ) ) )", "choosing": "Min( Min( MUM ,MLU ) ,( RMSe * ( Min( RMSe ,Max( MLU,MUR ) ) * ( RMSe * ( DS - DS ) ) ) ) )", "obj1": 0.6633663366336634, "obj2": 0.23571700373430673}, {"determining": "( CRS + ( FirstVNF_RAM / Max( Const,( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) ) ) )", "choosing": "( Min( RRSe ,( RMSe + DS ) ) / ( ( CS + Min( MUC ,RMSe ) ) + RCSe ) )", "obj1": 0.6752475247524753, "obj2": 0.22600899930297272}, {"determining": "( ( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.994059405940594, "obj2": 0.00223319526606793}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( ( DDR / FirstVNF_Mem ) - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( ( ( Max( DS,RRSe ) - MUC ) + Min( RMSe ,MUM ) ) - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9128712871287129, "obj2": 0.03732610350816849}, {"determining": "( Min( ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( DDR - Const ) ) ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( Max( ( DS + RMSe ),MUR ) ,CS ) + CS ) + ( MUR - MUM ) )", "obj1": 0.6871287128712872, "obj2": 0.22274650649156302}, {"determining": "Max( Max( ( ( FirstVNF_RAM_Server + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + RRS ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( ( MRS - ( ( RRS * ( FirstVNF_CPU - AMS ) ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + ( RCSe + DS ) ) ) / ( RCSe + DS ) )", "obj1": 0.906930693069307, "obj2": 0.04025509379153863}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( FirstVNF_RAM_Server * FirstVNF_CPU ) + Max( Min( ( ( Const * FirstVNF_Mem_Server ) - Max( ( MDR * Min( ( BR - PN ) ,CRS ) ),BR ) ) ,PN ),( FirstVNF_RAM / ARS ) ) )", "choosing": "Min( ( MLU + ( RMSe + MUC ) ) ,( ( CS + RRSe ) / ( RCSe / RCSe ) ) )", "obj1": 0.6574257425742575, "obj2": 0.24119810115916088}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "Min( ( MUR + MLU ) ,( MUC / ( RCSe / RCSe ) ) )", "obj1": 0.6574257425742575, "obj2": 0.24119810115916088}, {"determining": "( ( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) * FirstVNF_RAM_Server )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "Max( ( RRS * DDR ),Max( PN,( BR / ( ( RRS * FirstVNF_Mem ) * Min( Const ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "( ( MDR - ( ( ARS + FirstVNF_CPU_Server ) - PN ) ) * ( BR / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( MUC ,RMSe ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * DDR ) - ( AMS + ( CRS + PN ) ) )", "choosing": "( Max( ( MUM - MUM ),MLU ) + Min( ( RRSe * MUM ) ,( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) ,Max( Max( FirstVNF_Mem,BR ),( MRS * ARS ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "Min( ( ( ( Max( DS,RCSe ) - MUM ) + ( MUR + MUC ) ) * RCSe ) ,( Max( CS,Min( ( Min( Min( MLU ,Max( MUC,MUC ) ) ,MUC ) / MUM ) ,DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,BR ) - Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) - ( ( MUC + MLU ) - ( RRSe - MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM ,ACS ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_Mem * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,Max( ( RRSe / RCSe ),MUR ) ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}], "6": [{"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.25848961592675507}, {"determining": "( ( MDR / Min( AMS ,Max( Const,MDR ) ) ) * ( BR / Min( FirstVNF_RAM_Server ,( ( FirstVNF_CPU_Server - Const ) - ARS ) ) ) )", "choosing": "( ( MLU + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) / MDR ) )", "choosing": "( ( RCSe - ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) ) / ( RCSe + DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.25848961592675507}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - ( ( FirstVNF_RAM_Server * MDR ) + Max( Min( PN ,PN ),DDR ) ) ) - ( ( RRS + CRS ) * FirstVNF_Mem ) ) )", "choosing": "Min( ( ( ( MUC * ( DS / MUC ) ) + ( CS - Min( ( ( MUR / RCSe ) - MUM ) ,( ( ( MUM - MUC ) - RMSe ) * Min( MUC ,RCSe ) ) ) ) ) * RCSe ) ,( Max( RCSe,Min( MUR ,RRSe ) ) / ( RCSe / RCSe ) ) )", "obj1": 0.8792079207920792, "obj2": 0.048480770708838286}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8396039603960396, "obj2": 0.11233461513923604}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( ( FirstVNF_RAM / MDR ) - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + DS ) )", "obj1": 0.9287128712871288, "obj2": 0.029422542447670248}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( ( RMSe * ( DS * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.9861386138613861, "obj2": 0.004939535774017165}, {"determining": "( ( FirstVNF_CPU - Min( ( DDR + MRS ) ,ARS ) ) * ( MDR / AMS ) )", "choosing": "Min( ( Min( ( ( RMSe * ( MUC / ( Max( MUM,MUR ) - RCSe ) ) ) * CS ) ,Min( MUM ,MUM ) ) / Min( Max( RMSe,MLU ) ,Max( RRSe,DS ) ) ) ,( Max( Min( MUM ,RRSe ),Max( RCSe,DS ) ) + ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) ) )", "obj1": 0.7069306930693069, "obj2": 0.2089306884175265}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) - ( ( RRS + CRS ) * FirstVNF_Mem ) ) )", "choosing": "( ( MLU * DS ) * ( DS * DS ) )", "obj1": 0.7980198019801981, "obj2": 0.14188466733935556}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( MUR - MUM ) + ( MUR - MUM ) )", "obj1": 0.6534653465346535, "obj2": 0.22765238497278756}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) * ( BR / MDR ) )", "choosing": "( ( MUR * ( DS + RMSe ) ) + ( MLU - Min( ( MUM / RCSe ) ,( DS - MUR ) ) ) )", "obj1": 0.7207920792079208, "obj2": 0.15485713478114563}, {"determining": "( Max( DDR,FirstVNF_CPU ) * ( ( CRS / ( CRS / FirstVNF_CPU_Server ) ) - DDR ) )", "choosing": "Min( MUR ,( RMSe * ( RMSe * MUR ) ) )", "obj1": 0.7108910891089109, "obj2": 0.18210881893153966}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / ( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + ( ( RRSe * MUR ) + ( RCSe / CS ) ) ) ) )", "obj1": 0.7643564356435644, "obj2": 0.14824220108397693}, {"determining": "( Max( DDR,FirstVNF_CPU ) * ( ( CRS / ( CRS / FirstVNF_CPU_Server ) ) - DDR ) )", "choosing": "( ( MLU * ( ( Min( Min( CS ,MUM ) ,MLU ) - DS ) + DS ) ) * ( DS * DS ) )", "obj1": 0.7504950495049505, "obj2": 0.1513495450722276}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) ) / FirstVNF_Mem ) )", "choosing": "( MUM + ( MUR - MUM ) )", "obj1": 0.6455445544554456, "obj2": 0.2504990139639477}, {"determining": "Max( ( MRS / FirstVNF_Mem ),( RRS / Min( FirstVNF_RAM ,ACS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 0.7188118811881188, "obj2": 0.1738726088589805}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8336633663366336, "obj2": 0.12213581766134553}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) - ( ( ( RRS + CRS ) + CRS ) * FirstVNF_Mem ) ) )", "choosing": "Min( ( ( ( MUC * ( DS / MUC ) ) + ( ( MUC * ( DS / MUC ) ) - Min( ( ( MUR / RCSe ) - MUM ) ,( ( ( MUM - MUC ) - RMSe ) * Min( MUC ,RCSe ) ) ) ) ) * RCSe ) ,( Max( RCSe,Min( MUR ,RRSe ) ) / MUR ) )", "obj1": 0.8217821782178217, "obj2": 0.13215600619580295}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / ( RCSe * ( ( MUR - RCSe ) * ( ( Min( MUC ,RMSe ) + CS ) / MUM ) ) ) )", "obj1": 0.904950495049505, "obj2": 0.04255284090440613}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR / RCSe ) - MUM ) + ( ( ( MUM - MUC ) - RMSe ) * Min( MUC ,RCSe ) ) ) ) + ( MUC * Min( DS ,MUC ) ) ) * RCSe ) / MUM )", "obj1": 0.8138613861386138, "obj2": 0.13689404097475663}, {"determining": "( ( FirstVNF_RAM_Server * FirstVNF_CPU ) + Max( Min( ( ( Const * FirstVNF_Mem_Server ) - Max( ( MDR * Min( ( BR - PN ) ,CRS ) ),BR ) ) ,PN ),( FirstVNF_RAM / ARS ) ) )", "choosing": "Min( ( MLU + ( RMSe + MUC ) ) ,( ( CS + RRSe ) / ( RCSe / RCSe ) ) )", "obj1": 0.695049504950495, "obj2": 0.2194240330079864}, {"determining": "( CRS + ( FirstVNF_RAM / Max( Const,( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) ) ) )", "choosing": "( Min( RRSe ,( RMSe + DS ) ) / ( ( CS + Min( MUC ,RMSe ) ) + RCSe ) )", "obj1": 0.6752475247524753, "obj2": 0.22600899930297272}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / Min( Min( Max( ( ( Max( DS,RRSe ) - MUC ) + Min( RMSe ,MUM ) ),( Min( MUM ,( Max( MUM,RCSe ) / RRSe ) ) + CS ) ) ,RCSe ) ,CS ) )", "obj1": 0.9207920792079208, "obj2": 0.032568086491042675}, {"determining": "( ( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.994059405940594, "obj2": 0.00223319526606793}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( ( DDR / FirstVNF_Mem ) - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( ( ( Max( DS,RRSe ) - MUC ) + Min( RMSe ,MUM ) ) - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9128712871287129, "obj2": 0.03732610350816849}, {"determining": "( Min( ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( DDR - Const ) ) ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( Max( ( DS + RMSe ),MUR ) ,CS ) + CS ) + ( MUR - MUM ) )", "obj1": 0.6871287128712872, "obj2": 0.22274650649156302}, {"determining": "Max( Max( ( ( FirstVNF_RAM_Server + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + RRS ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( Min( AMS ,( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) ) ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( MUR + CS ) + ( ( MUR + CS ) + ( MUR - MUM ) ) )", "obj1": 0.693069306930693, "obj2": 0.2210707704352867}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) * FirstVNF_RAM_Server )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - ( FirstVNF_CPU_Server / FirstVNF_CPU ) ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RCSe ) ) / ( RCSe + DS ) )", "obj1": 0.906930693069307, "obj2": 0.04025509379153863}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "Max( ( RRS * DDR ),Max( PN,( BR / ( ( RRS * FirstVNF_Mem ) * Min( Const ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.0390438107337781}, {"determining": "( ( ( MRS - ( ( RRS * ( FirstVNF_CPU - AMS ) ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + ( RCSe + DS ) ) ) / ( RCSe + DS ) )", "obj1": 0.906930693069307, "obj2": 0.04025509379153863}, {"determining": "( ( MDR - ( ( ARS + ( FirstVNF_Mem_Server - Const ) ) - PN ) ) * ( ACS / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( Min( Min( MUR ,RRSe ) ,Min( DS ,MUM ) ) ,MUR ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ( ( ARS + FirstVNF_CPU_Server ) - PN ) ) * ( BR / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( MUC ,RMSe ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * DDR ) - ( AMS + ( CRS + PN ) ) )", "choosing": "( Max( ( MUM - MUM ),MLU ) + Min( ( RRSe * MUM ) ,( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) ,Max( Max( FirstVNF_Mem,BR ),( MRS * ARS ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "Min( ( ( ( Max( DS,RCSe ) - MUM ) + ( MUR + MUC ) ) * RCSe ) ,( Max( CS,Min( ( Min( Min( MLU ,Max( MUC,MUC ) ) ,MUC ) / MUM ) ,DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,BR ) - Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) - ( ( MUC + MLU ) - ( RRSe - MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM ,ACS ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_Mem * ACS ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,Max( ( RRSe / RCSe ),MUR ) ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + ( RCSe / CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) ) ,FirstVNF_CPU ) )", "choosing": "( Max( Max( MUR,MUC ),( CS * RRSe ) ) / ( ( RRSe * MUR ) + Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}], "7": [{"determining": "Max( Max( ( DDR / BR ),AMS ),( MRS + DDR ) )", "choosing": "( ( MLU / DS ) * Min( MLU ,MUM ) )", "obj1": 0.6198019801980198, "obj2": 0.2707096468653401}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) / MDR ) )", "choosing": "( RMSe / ( RCSe + DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR / Min( AMS ,Max( Const,MDR ) ) ) * ( BR / Min( FirstVNF_RAM_Server ,( ( FirstVNF_CPU_Server - Const ) - ARS ) ) ) )", "choosing": "( ( MLU + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Max( ( DDR / BR ),AMS ),( MRS + DDR ) )", "choosing": "( ( MLU / DS ) * Min( MLU ,MUM ) )", "obj1": 0.6198019801980198, "obj2": 0.2707096468653401}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - ( ( FirstVNF_RAM_Server * MDR ) + Max( Min( PN ,PN ),DDR ) ) ) - ( ( RRS + CRS ) * FirstVNF_Mem ) ) )", "choosing": "Min( ( ( ( MUC * ( DS / MUC ) ) + ( CS - Min( ( ( MUR / RCSe ) - MUM ) ,( ( ( MUM - MUC ) - RMSe ) * Min( MUC ,RCSe ) ) ) ) ) * RCSe ) ,( Max( RCSe,Min( MUR ,RRSe ) ) / ( RCSe / RCSe ) ) )", "obj1": 0.8792079207920792, "obj2": 0.048480770708838286}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) - ( ( RRS + CRS ) * FirstVNF_Mem ) ) )", "choosing": "( ( ( MLU * DS ) * ( DS * DS ) ) * ( DS * DS ) )", "obj1": 0.8356435643564356, "obj2": 0.11082617828667331}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) * ( ( ( FirstVNF_RAM_Server - MDR ) - Max( ( ARS - FirstVNF_Mem ),BR ) ) / MDR ) )", "choosing": "( ( MUR * MLU ) + ( Max( Min( Min( RMSe ,RMSe ) ,( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) )", "obj1": 0.700990099009901, "obj2": 0.1697689520886689}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) - Max( DDR,FirstVNF_CPU ) )", "choosing": "( ( RMSe * ( DS * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.9861386138613861, "obj2": 0.004939535774017165}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( ( FirstVNF_RAM / MDR ) - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RMSe ) ) / ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + DS ) )", "obj1": 0.9287128712871288, "obj2": 0.029422542447670248}, {"determining": "( Min( ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( DDR - Const ) ) ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( MUR + Max( ( DS + RMSe ),MUR ) ) + ( MUR - MUM ) )", "obj1": 0.691089108910891, "obj2": 0.21390595483589653}, {"determining": "( ( ( FirstVNF_RAM_Server - MDR ) - Max( RRS,BR ) ) * ( BR / MDR ) )", "choosing": "( ( MUR * ( DS + RMSe ) ) + ( MLU - Min( ( MUM / RCSe ) ,( DS - MUR ) ) ) )", "obj1": 0.7207920792079208, "obj2": 0.15485713478114563}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( MUR - MUM ) + ( MUR - MUM ) )", "obj1": 0.6534653465346535, "obj2": 0.22765238497278756}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) - ( ( RRS + CRS ) * FirstVNF_Mem ) ) )", "choosing": "( ( MLU * DS ) * ( DS * DS ) )", "obj1": 0.7980198019801981, "obj2": 0.14188466733935556}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / ( ( CRS - FirstVNF_RAM_Server ) + Min( ( FirstVNF_CPU_Server * ACS ) ,FirstVNF_CPU ) ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + ( ( RRSe * MUR ) + ( RCSe / CS ) ) ) ) )", "obj1": 0.7643564356435644, "obj2": 0.14824220108397693}, {"determining": "( Max( DDR,FirstVNF_CPU ) * ( ( CRS / ( CRS / FirstVNF_CPU_Server ) ) - DDR ) )", "choosing": "( ( MLU * ( ( Min( Min( CS ,MUM ) ,MLU ) - DS ) + DS ) ) * ( DS * DS ) )", "obj1": 0.7504950495049505, "obj2": 0.1513495450722276}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / ( RCSe * ( ( MUR - RCSe ) * ( ( Min( MUC ,RMSe ) + CS ) / MUM ) ) ) )", "obj1": 0.904950495049505, "obj2": 0.04255284090440613}, {"determining": "( Max( Max( Max( ( BR / BR ),AMS ),( Max( ( BR / BR ),AMS ) / FirstVNF_CPU_Server ) ),DDR ) * ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) - ( ( RRS + CRS ) * FirstVNF_Mem ) ) )", "choosing": "Min( ( ( ( MLU * DS ) * ( DS * DS ) ) * ( DS * DS ) ) ,( Max( RCSe,Min( MUR ,RRSe ) ) / MUR ) )", "obj1": 0.807920792079208, "obj2": 0.13585498348391353}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) ) / FirstVNF_Mem ) )", "choosing": "( MUM + ( MUR - MUM ) )", "obj1": 0.6455445544554456, "obj2": 0.2504990139639477}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) - ( ( ( RRS + CRS ) + CRS ) * FirstVNF_Mem ) ) )", "choosing": "Min( ( ( ( MUC * ( DS / MUC ) ) + ( ( MUC * ( DS / MUC ) ) - Min( ( ( MUR / RCSe ) - MUM ) ,( ( ( MUM - MUC ) - RMSe ) * Min( MUC ,RCSe ) ) ) ) ) * RCSe ) ,( Max( RCSe,Min( MUR ,RRSe ) ) / MUR ) )", "obj1": 0.8217821782178217, "obj2": 0.13215600619580295}, {"determining": "( CRS + ( FirstVNF_RAM / Max( Const,( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) ) ) )", "choosing": "( Min( RRSe ,( RMSe + DS ) ) / ( ( CS + Min( MUC ,RMSe ) ) + RCSe ) )", "obj1": 0.6752475247524753, "obj2": 0.22600899930297272}, {"determining": "Min( ( MRS / ( ( ACS + MRS ) - ( FirstVNF_RAM / ARS ) ) ) ,Max( Max( Max( RRS,FirstVNF_RAM ),BR ),FirstVNF_RAM_Server ) )", "choosing": "( ( RRSe * ( RRSe / RCSe ) ) + Min( RRSe ,MUM ) )", "obj1": 0.8336633663366336, "obj2": 0.12213581766134553}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.25848961592675507}, {"determining": "( Min( ( ( ( FirstVNF_RAM / Const ) + AMS ) / ( DDR - Const ) ) ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( Max( ( DS + RMSe ),MUR ) ,CS ) + CS ) + ( MUR - MUM ) )", "obj1": 0.6871287128712872, "obj2": 0.22274650649156302}, {"determining": "( Max( FirstVNF_CPU,DDR ) * ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) - ( ( ( AMS - Max( FirstVNF_RAM,( ( Const + FirstVNF_RAM ) - DDR ) ) ) + CRS ) * FirstVNF_Mem ) ) )", "choosing": "Min( ( ( ( MUC * ( DS / MUC ) ) + ( CS - Min( ( ( MUR / RCSe ) - MUR ) ,( ( ( MUM - MUC ) - RMSe ) * Min( MUC ,RCSe ) ) ) ) ) * RCSe ) ,( Max( RCSe,Min( MUR ,RRSe ) ) / MUR ) )", "obj1": 0.8277227722772277, "obj2": 0.1260944524276221}, {"determining": "( ( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.994059405940594, "obj2": 0.00223319526606793}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / Min( Min( Max( ( ( Max( DS,RRSe ) - MUC ) + Min( RMSe ,MUM ) ),( Min( MUM ,( Max( MUM,RCSe ) / RRSe ) ) + CS ) ) ,RCSe ) ,CS ) )", "obj1": 0.9207920792079208, "obj2": 0.032568086491042675}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( MLU ,( ( Max( Max( Min( RMSe ,RMSe ),( CS - MLU ) ),( Min( MUM ,CS ) * RCSe ) ) / MUR ) * Max( MUR,RMSe ) ) ) - ( MUR * DS ) ) * ( CS + Min( Max( ( DS + RMSe ),MUR ) ,CS ) ) )", "obj1": 0.6316831683168317, "obj2": 0.25848961592675507}, {"determining": "Max( Max( ( ( FirstVNF_RAM_Server + DDR ) - Min( BR ,FirstVNF_CPU ) ),Max( ( FirstVNF_CPU * FirstVNF_RAM ),( Const + RRS ) ) ),Min( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) + ( FirstVNF_CPU * AMS ) ) ,( ( BR - BR ) / ( BR / AMS ) ) ) )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RMSe + RCSe ) / Min( Min( Max( ( ( Max( DS,RRSe ) - MUC ) + Min( RMSe ,MUM ) ),( Min( MUM ,( Max( MUM,RCSe ) / RRSe ) ) + CS ) ) ,RCSe ) ,CS ) )", "obj1": 0.9148514851485149, "obj2": 0.034907825684870664}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / Min( AMS ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( MUR + CS ) + ( MUR - CS ) )", "obj1": 0.6455445544554456, "obj2": 0.2504990139639477}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - FirstVNF_RAM ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9267326732673268, "obj2": 0.030949115576884123}, {"determining": "( Min( AMS ,FirstVNF_Mem_Server ) / ( ACS / FirstVNF_Mem ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) / ( RCSe + DS ) )", "obj1": 0.9108910891089109, "obj2": 0.03884363356419308}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( ( DDR / FirstVNF_Mem ) - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( ( ( Max( DS,RRSe ) - MUC ) + Min( RMSe ,MUM ) ) - ( DS + RMSe ) ) / ( RCSe + DS ) )", "obj1": 0.9128712871287129, "obj2": 0.03732610350816849}, {"determining": "( ( MDR / Min( AMS ,Min( FirstVNF_Mem_Server ,Const ) ) ) * FirstVNF_RAM_Server )", "choosing": "( ( MLU / RMSe ) / ( DS - Min( RCSe ,MUM ) ) )", "obj1": 0.6415841584158416, "obj2": 0.25507531768080494}, {"determining": "( ( ( MRS - ( ( RRS * ( FirstVNF_CPU - AMS ) ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + ( RCSe + DS ) ) ) / ( RCSe + DS ) )", "obj1": 0.906930693069307, "obj2": 0.04025509379153863}, {"determining": "Max( ( RRS * DDR ),Max( PN,( BR / ( ( RRS * FirstVNF_Mem ) * Min( Const ,FirstVNF_Mem ) ) ) ) )", "choosing": "( ( Min( DS ,Min( RRSe ,MUM ) ) + CS ) + ( MUR - RCSe ) )", "obj1": 0.6811881188118812, "obj2": 0.22592756798068545}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - ( FirstVNF_CPU_Server / FirstVNF_CPU ) ) ) ) ) - FirstVNF_Mem_Server ) + ( FirstVNF_RAM / MDR ) )", "choosing": "( ( RCSe - ( DS + RCSe ) ) / ( RCSe + DS ) )", "obj1": 0.906930693069307, "obj2": 0.04025509379153863}, {"determining": "( ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) - FirstVNF_Mem_Server ) + ( ( MRS - ( ( FirstVNF_CPU_Server / FirstVNF_CPU ) / ( RRS * ( FirstVNF_CPU - AMS ) ) ) ) / MDR ) )", "choosing": "( ( RCSe - ( ( RCSe - ( DS + RMSe ) ) / ( RCSe + DS ) ) ) / ( RCSe + DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ( ( ARS + ( FirstVNF_Mem_Server - Const ) ) - PN ) ) * ( ACS / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( Min( Min( MUR ,RRSe ) ,Min( DS ,MUM ) ) ,MUR ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ( ( ARS + FirstVNF_CPU_Server ) - PN ) ) * ( BR / MDR ) )", "choosing": "( ( ( MUR * ( ( CS + Min( MUC ,RMSe ) ) / MUM ) ) + ( MUC - MUR ) ) + ( MLU - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_CPU,AMS ) / Max( AMS,ARS ) ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,Min( DS ,( RMSe + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + AMS ) - ( ACS + AMS ) ) - ( MDR / Max( FirstVNF_CPU_Server,ACS ) ) )", "choosing": "Max( ( Max( MUC,MUC ) * ( MUM * RRSe ) ),( ( RRSe + MUM ) + Min( Min( RMSe ,MUC ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * DDR ) - ( AMS + ( CRS + PN ) ) )", "choosing": "( Max( ( MUM - MUM ),MLU ) + Min( ( RRSe * MUM ) ,( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_RAM - CRS ) - ( FirstVNF_Mem_Server + PN ) ) ,Max( Max( FirstVNF_Mem,BR ),( MRS * ARS ) ) )", "choosing": "( ( ( MUC - MUR ) / ( MUR - CS ) ) + ( Min( RCSe ,CS ) - Max( RMSe,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS + DDR ) / ( FirstVNF_RAM + BR ) ) - ( Min( PN ,MDR ) / ( FirstVNF_RAM_Server - BR ) ) ) - ( Max( ( Const * CRS ),( DDR + MRS ) ) + Max( Max( AMS,DDR ),( FirstVNF_CPU - Const ) ) ) )", "choosing": "( ( Max( ( DS + MLU ),Min( RMSe ,MUR ) ) * Max( ( RMSe - RCSe ),( MUM * MUR ) ) ) - Min( ( Min( DS ,RMSe ) / ( DS / MLU ) ) ,( ( MUM / CS ) - Max( MUM,RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( DDR,Max( FirstVNF_RAM_Server,( BR / AMS ) ) ) ,Max( ACS,FirstVNF_Mem ) ) * ( ( ( RRS + CRS ) * FirstVNF_Mem ) - ( ( FirstVNF_CPU / MRS ) - Max( FirstVNF_Mem_Server,( ( Const + FirstVNF_RAM ) - DDR ) ) ) ) )", "choosing": "Min( ( ( ( Max( DS,RCSe ) - MUM ) + ( MUR + MUC ) ) * RCSe ) ,( Max( CS,Min( ( Min( Min( MLU ,Max( MUC,MUC ) ) ,MUC ) / MUM ) ,DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,BR ) - Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) )", "choosing": "( Max( CS,RCSe ) - ( ( MUC + MLU ) - ( RRSe - MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM ,ACS ) * ( ( Const - FirstVNF_Mem ) + ( FirstVNF_RAM_Server * CRS ) ) )", "choosing": "Min( ( CS / ( DS + CS ) ) ,( ( MLU - MUM ) - ( ( CS * MUR ) - ( RCSe / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}]}