{"1": [{"determining": "Max( ( MRS / CRS ),( ACS - MRS ) )", "choosing": "( Min( RCSe ,MUM ) + Max( DS,MUC ) )", "obj1": 0.697196261682243, "obj2": 0.2465172051479585}, {"determining": "( ( ( ( BR - ACS ) - ( MRS * FirstVNF_CPU_Server ) ) - ( ( FirstVNF_Mem_Server * FirstVNF_RAM_Server ) - ( Min( DDR ,FirstVNF_CPU_Server ) / FirstVNF_CPU_Server ) ) ) / ( ( ( ACS + FirstVNF_RAM ) + ( RRS / MRS ) ) * ( ( DDR - ACS ) + ( AMS * BR ) ) ) )", "choosing": "( Max( ( ( MUC / CS ) - Max( MUM,RMSe ) ),( ( DS * MUR ) - ( CS - CS ) ) ) / ( Max( ( RCSe - Max( CS,RMSe ) ),Max( RMSe,RRSe ) ) - ( Min( MUC ,RRSe ) - ( MUM * MLU ) ) ) )", "obj1": 0.7252336448598131, "obj2": 0.1612898930704234}, {"determining": "Min( ( FirstVNF_CPU_Server / FirstVNF_Mem_Server ) ,( Const / FirstVNF_RAM_Server ) )", "choosing": "Max( ( RMSe - RCSe ),Max( RMSe,DS ) )", "obj1": 0.7252336448598131, "obj2": 0.24242216132647965}, {"determining": "( Min( FirstVNF_CPU_Server ,Min( Max( FirstVNF_RAM,AMS ) ,( Min( Const ,( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) ) * ( Min( FirstVNF_CPU_Server ,FirstVNF_RAM ) - ( MRS / RRS ) ) ) ) ) / ( Const - FirstVNF_CPU ) )", "choosing": "Max( ( DS + MLU ),( ( RMSe * MUR ) * ( DS + RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_RAM_Server ,AMS ) - ( ( ( Const / ( FirstVNF_Mem_Server + Const ) ) + Min( ( ( FirstVNF_Mem - FirstVNF_RAM ) * ( DDR / AMS ) ) ,MRS ) ) * MDR ) )", "choosing": "( ( RRSe * DS ) / Min( MUM ,( ( ( MUM + ( ( MLU * DS ) * RRSe ) ) + Max( MUM,RCSe ) ) / Max( MUC,DS ) ) ) )", "obj1": 0.7345794392523365, "obj2": 0.20290530494735504}, {"determining": "( Max( ( FirstVNF_RAM_Server + MDR ),CRS ) / ( FirstVNF_Mem_Server * ( Const / ( FirstVNF_CPU - ( Const + FirstVNF_CPU ) ) ) ) )", "choosing": "( ( MUC + RMSe ) * ( CS + Min( CS ,( MLU + ( Max( ( Max( RRSe,CS ) - MLU ),Max( DS,CS ) ) / ( MUC / DS ) ) ) ) ) )", "obj1": 0.7102803738317757, "obj2": 0.2583075901137939}, {"determining": "( ( MRS / AMS ) * Min( PN ,ACS ) )", "choosing": "( ( MUR * CS ) - ( RCSe + MUM ) )", "obj1": 0.7065420560747664, "obj2": 0.2674735287270815}, {"determining": "( Min( Const ,FirstVNF_Mem ) * ( BR + RRS ) )", "choosing": "( ( CS + MUC ) - ( MLU - MUR ) )", "obj1": 0.7214953271028037, "obj2": 0.24789849893024435}, {"determining": "Min( Min( FirstVNF_RAM ,AMS ) ,( MDR * FirstVNF_CPU_Server ) )", "choosing": "( ( RMSe + RMSe ) * ( RCSe * MUR ) )", "obj1": 0.7140186915887851, "obj2": 0.2532500565979275}, {"determining": "( ( FirstVNF_CPU_Server + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) )", "choosing": "( ( RCSe / RMSe ) - ( RRSe + DS ) )", "obj1": 0.7308411214953271, "obj2": 0.25458782919244277}, {"determining": "Min( Min( RRS ,Const ) ,( BR * RRS ) )", "choosing": "( ( RMSe - RCSe ) / ( RMSe - CS ) )", "obj1": 0.7457943925233644, "obj2": 0.24693482437630035}, {"determining": "Max( Max( ACS,MDR ),( FirstVNF_Mem_Server * BR ) )", "choosing": "( ( CS * CS ) / ( CS - MUC ) )", "obj1": 0.7252336448598131, "obj2": 0.2354266010885094}, {"determining": "Max( ( FirstVNF_RAM + FirstVNF_Mem ),( DDR - Const ) )", "choosing": "( ( MUM - RRSe ) - ( MLU * RRSe ) )", "obj1": 0.7401869158878505, "obj2": 0.23976045629709816}, {"determining": "( ( FirstVNF_Mem + FirstVNF_Mem ) * ( PN / PN ) )", "choosing": "( Min( RRSe ,RRSe ) + ( CS - MUM ) )", "obj1": 0.7383177570093458, "obj2": 0.25136596494918145}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_Mem_Server ) * ( PN / Const ) )", "choosing": "Max( ( RCSe + MLU ),( CS * DS ) )", "obj1": 0.7177570093457943, "obj2": 0.23454828986843443}, {"determining": "( Max( BR,FirstVNF_RAM ) / ( ARS + FirstVNF_Mem_Server ) )", "choosing": "( Min( MLU ,RCSe ) * Min( RCSe ,RMSe ) )", "obj1": 0.719626168224299, "obj2": 0.24876615632875754}, {"determining": "( Max( CRS,MRS ) - ( Const * FirstVNF_Mem ) )", "choosing": "Min( ( MLU * RMSe ) ,Min( CS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN + FirstVNF_Mem ) / ( DDR * DDR ) )", "choosing": "Min( ( MLU + RCSe ) ,( RCSe + RMSe ) )", "obj1": 0.7233644859813084, "obj2": 0.24040511476556434}, {"determining": "( Max( RRS,CRS ) + ( ACS + ARS ) )", "choosing": "( ( RMSe + RMSe ) * ( MUR / RMSe ) )", "obj1": 0.7252336448598131, "obj2": 0.2665012090475247}, {"determining": "Max( Max( MRS,FirstVNF_RAM ),( BR - ARS ) )", "choosing": "( ( RMSe - MLU ) + Min( MUM ,DS ) )", "obj1": 0.7420560747663552, "obj2": 0.2245641740605498}, {"determining": "( Min( BR ,MRS ) - ( ACS * BR ) )", "choosing": "( ( RRSe - MUR ) * ( MLU * MUM ) )", "obj1": 0.9401869158878504, "obj2": 0.06382760102252798}, {"determining": "( ( MRS + MRS ) / Min( PN ,FirstVNF_RAM_Server ) )", "choosing": "Min( ( DS / MUR ) ,( MUM + DS ) )", "obj1": 0.7364485981308411, "obj2": 0.22841843052297314}, {"determining": "( Min( MRS ,DDR ) - ( AMS - FirstVNF_CPU_Server ) )", "choosing": "( ( MUM * RRSe ) - ( RMSe * RCSe ) )", "obj1": 0.7383177570093458, "obj2": 0.21790561186421714}, {"determining": "( ( PN + FirstVNF_Mem_Server ) / ( FirstVNF_RAM / RRS ) )", "choosing": "( ( MLU / MUM ) * ( RRSe - CS ) )", "obj1": 0.7158878504672898, "obj2": 0.23646958732100976}, {"determining": "( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) * ( MRS + Const ) )", "choosing": "( ( MLU + DS ) * Max( RCSe,RCSe ) )", "obj1": 0.7401869158878505, "obj2": 0.2124098305863475}, {"determining": "( ( ACS * FirstVNF_CPU ) + ( RRS / CRS ) )", "choosing": "( Max( MUM,RMSe ) - Min( MLU ,RRSe ) )", "obj1": 0.6747663551401869, "obj2": 0.22990285294945734}, {"determining": "( ( DDR / FirstVNF_CPU_Server ) + ( MRS / FirstVNF_RAM_Server ) )", "choosing": "( Max( DS,RCSe ) / ( RCSe * MUR ) )", "obj1": 0.7289719626168224, "obj2": 0.23663119366679025}, {"determining": "Min( Max( BR,ACS ) ,( FirstVNF_RAM_Server / FirstVNF_CPU_Server ) )", "choosing": "Min( Max( RMSe,MUM ) ,( CS / RCSe ) )", "obj1": 0.7158878504672898, "obj2": 0.24517880948486212}, {"determining": "( ( FirstVNF_RAM / ACS ) - ( PN - FirstVNF_RAM ) )", "choosing": "Max( Min( MUR ,MLU ),( RMSe / CS ) )", "obj1": 0.7158878504672898, "obj2": 0.2491076500434376}, {"determining": "( ( FirstVNF_Mem_Server - FirstVNF_Mem ) + Min( ARS ,MRS ) )", "choosing": "( ( RCSe / DS ) * Min( DS ,RCSe ) )", "obj1": 0.7738317757009345, "obj2": 0.20741268913404276}, {"determining": "( ( ACS * DDR ) - ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,CS ) - ( MUC / MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( CRS * DDR ),( DDR + MRS ) )", "choosing": "( ( DS * MUM ) - ( MLU / DS ) )", "obj1": 0.7588785046728972, "obj2": 0.16947013126893903}, {"determining": "Min( Min( ARS ,ARS ) ,( ARS / PN ) )", "choosing": "( ( RRSe + MUR ) / ( RMSe + MUR ) )", "obj1": 0.697196261682243, "obj2": 0.254195374912895}, {"determining": "Min( ( FirstVNF_Mem * MRS ) ,( FirstVNF_RAM + DDR ) )", "choosing": "( ( DS - RMSe ) - ( DS * CS ) )", "obj1": 0.7271028037383177, "obj2": 0.241943781297431}, {"determining": "( Max( FirstVNF_Mem,FirstVNF_Mem ) * ( FirstVNF_RAM_Server - FirstVNF_Mem ) )", "choosing": "( Min( RCSe ,RCSe ) + ( RMSe - MUM ) )", "obj1": 0.7831775700934579, "obj2": 0.17920113257527392}, {"determining": "Min( Min( ACS ,( MRS - FirstVNF_CPU_Server ) ) ,( BR + Min( PN ,DDR ) ) )", "choosing": "( ( ( RMSe + MUM ) * ( RRSe / RRSe ) ) + ( ( MLU - MUM ) * ( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( BR + DDR ) / Min( AMS ,FirstVNF_CPU ) ),( ( MRS + FirstVNF_CPU_Server ) + Min( CRS ,FirstVNF_CPU ) ) )", "choosing": "( ( ( RCSe + CS ) - ( RRSe - RMSe ) ) / ( Min( MUR ,DS ) * ( MLU * MUR ) ) )", "obj1": 0.6261682242990654, "obj2": 0.272561314455281}, {"determining": "Max( ( ( MDR - FirstVNF_Mem_Server ) * Min( RRS ,Const ) ),Max( ( FirstVNF_CPU_Server * FirstVNF_RAM_Server ),( FirstVNF_Mem * ACS ) ) )", "choosing": "Min( ( MLU + ( DS * DS ) ) ,Min( RCSe ,RMSe ) )", "obj1": 0.7177570093457943, "obj2": 0.24195563743068815}, {"determining": "( Min( Max( ( ( MRS + FirstVNF_CPU ) / MDR ),FirstVNF_CPU ) ,Const ) / ( FirstVNF_CPU - AMS ) )", "choosing": "Max( Max( ( RCSe + MLU ),RRSe ),Max( RCSe,DS ) )", "obj1": 0.7570093457943925, "obj2": 0.21553457109380816}, {"determining": "Max( ( Max( ARS,Min( DDR ,FirstVNF_RAM ) ) / ( ACS / FirstVNF_RAM_Server ) ),( ( FirstVNF_Mem_Server - PN ) / Min( MRS ,RRS ) ) )", "choosing": "( Max( ( RMSe * MUR ),( MUC * ( MUM + RRSe ) ) ) * Max( ( RMSe + MUR ),Min( MUM ,MLU ) ) )", "obj1": 0.685981308411215, "obj2": 0.23814500233701494}, {"determining": "( Max( Min( ARS ,FirstVNF_Mem ),( Const / AMS ) ) + ( ( ACS + FirstVNF_Mem ) + Min( ARS ,Const ) ) )", "choosing": "( ( RCSe + MUM ) + ( MUM / ( RMSe + RMSe ) ) )", "obj1": 0.7158878504672898, "obj2": 0.2499342408998266}, {"determining": "( ( ( ARS / MDR ) * ( FirstVNF_RAM * MRS ) ) - ( ( DDR - AMS ) - ( FirstVNF_RAM_Server / Const ) ) )", "choosing": "Min( ( ( CS + RRSe ) + ( RCSe - MUR ) ) ,( ( MUR / RRSe ) - Min( RCSe ,RCSe ) ) )", "obj1": 0.719626168224299, "obj2": 0.24530037641587962}, {"determining": "Min( ( ( FirstVNF_CPU_Server + MDR ) * Min( FirstVNF_CPU_Server ,FirstVNF_RAM ) ) ,( Min( FirstVNF_RAM ,FirstVNF_Mem_Server ) - ( FirstVNF_CPU * PN ) ) )", "choosing": "Max( Min( MUR ,( RMSe * MUR ) ),( Min( MUM ,DS ) / Min( MUR ,DS ) ) )", "obj1": 0.7308411214953271, "obj2": 0.25101978405080766}, {"determining": "( ( ( FirstVNF_Mem_Server / DDR ) * ( Const - FirstVNF_RAM_Server ) ) * Min( ( ARS / MDR ) ,( MDR - ARS ) ) )", "choosing": "Min( Max( ( RRSe - MUC ),( MUC * RCSe ) ) ,Min( MUR ,MUM ) )", "obj1": 0.7476635514018691, "obj2": 0.21669983790872657}, {"determining": "( ( Min( FirstVNF_Mem_Server ,MRS ) - BR ) / Max( RRS,MRS ) )", "choosing": "( ( RRSe * Max( MLU,MLU ) ) * ( RCSe * MUR ) )", "obj1": 0.9383177570093458, "obj2": 0.06621518199384553}, {"determining": "( Min( ( ACS + FirstVNF_CPU_Server ) ,( CRS + FirstVNF_CPU_Server ) ) + ( ( ACS + FirstVNF_Mem_Server ) + ( CRS * FirstVNF_Mem_Server ) ) )", "choosing": "( ( ( RRSe + RRSe ) - ( RMSe * RCSe ) ) * Max( ( RCSe - RCSe ),Min( MUC ,RMSe ) ) )", "obj1": 0.7364485981308411, "obj2": 0.2565388035449958}, {"determining": "Min( ( Min( MDR ,PN ) - ( PN * ARS ) ) ,Min( Min( FirstVNF_RAM ,FirstVNF_Mem ) ,( ARS - ARS ) ) )", "choosing": "( ( Min( RRSe ,RRSe ) + ( CS - RRSe ) ) * Max( ( DS - CS ),( RCSe + MUR ) ) )", "obj1": 0.7289719626168224, "obj2": 0.2639908339930682}, {"determining": "( ( ( RRS / Const ) - Min( MRS ,FirstVNF_CPU_Server ) ) + Min( ( Const - ARS ) ,( FirstVNF_RAM / RRS ) ) )", "choosing": "Max( ( ( RMSe - MUM ) / ( RRSe - MUM ) ),( ( MLU * RMSe ) * ( MUR / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( RRS * FirstVNF_Mem ) * MRS ) * ( DDR - FirstVNF_Mem ) )", "choosing": "Max( ( ( RMSe + MUM ) * CS ),Min( CS ,Min( RMSe ,RMSe ) ) )", "obj1": 0.719626168224299, "obj2": 0.24542458869538103}, {"determining": "( ( ( FirstVNF_CPU * FirstVNF_CPU_Server ) + MDR ) - ( PN - FirstVNF_CPU ) )", "choosing": "Max( ( Max( MLU,CS ) * ( RRSe + DS ) ),Min( MLU ,( MUC / MLU ) ) )", "obj1": 0.7476635514018691, "obj2": 0.18123835656689175}, {"determining": "( ( BR - Min( FirstVNF_Mem_Server ,MRS ) ) / ( ( FirstVNF_Mem_Server - RRS ) - FirstVNF_Mem ) )", "choosing": "( ( Min( CS ,MUC ) - ( MUC * MUC ) ) + Min( ( RRSe + RMSe ) ,( DS / MUC ) ) )", "obj1": 0.7663551401869159, "obj2": 0.1744975012543253}, {"determining": "( ( ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) + ( Const + MDR ) ) + ( ( BR * FirstVNF_Mem ) + ( MDR * FirstVNF_Mem ) ) )", "choosing": "( ( MLU - RMSe ) / Max( ( RCSe * RRSe ),DS ) )", "obj1": 0.685981308411215, "obj2": 0.23640610179956423}, {"determining": "Max( ( ( Const - PN ) + ( CRS + PN ) ),Min( ( FirstVNF_Mem / Const ) ,Max( AMS,FirstVNF_CPU_Server ) ) )", "choosing": "( ( Min( RMSe ,DS ) / Min( RCSe ,DS ) ) / ( ( MUC + RRSe ) + ( CS * RMSe ) ) )", "obj1": 0.7289719626168224, "obj2": 0.23706154402714663}, {"determining": "( ( RRS - MRS ) * ( MDR - FirstVNF_Mem_Server ) )", "choosing": "( ( CS / Min( RMSe ,MUC ) ) - ( MUM * ( MUM * MUR ) ) )", "obj1": 0.6878504672897197, "obj2": 0.2306161006317634}, {"determining": "( Min( ( FirstVNF_Mem_Server * FirstVNF_Mem_Server ) ,Min( Const ,DDR ) ) / ( Max( FirstVNF_RAM,FirstVNF_RAM ) * ( FirstVNF_RAM + AMS ) ) )", "choosing": "Min( ( ( CS / MUC ) - ( RRSe + RCSe ) ) ,( ( RMSe - MUR ) - Min( RCSe ,MLU ) ) )", "obj1": 0.7532710280373832, "obj2": 0.2399633814811577}, {"determining": "( ( Max( FirstVNF_Mem,FirstVNF_RAM_Server ) + Min( MDR ,AMS ) ) - ( Min( FirstVNF_RAM ,PN ) + ( ACS + ACS ) ) )", "choosing": "( ( ( MUC * MUR ) * ( MUR + MLU ) ) * ( ( CS * RRSe ) + ( CS / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - Max( AMS,MRS ) ) / ( MDR / FirstVNF_CPU ) )", "choosing": "( ( ( MLU - MUM ) * ( CS * MLU ) ) * Min( ( MUR - MLU ) ,( MUR / MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_Mem + BR ) * ( RRS / BR ) ) ,( ( ARS + AMS ) + Max( CRS,ACS ) ) )", "choosing": "( ( ( RRSe - RCSe ) * ( MUR * RRSe ) ) - ( Max( RCSe,DS ) - ( RMSe / MUM ) ) )", "obj1": 0.7439252336448599, "obj2": 0.24455285558645018}, {"determining": "Max( ( ( FirstVNF_CPU_Server - PN ) * ( AMS * CRS ) ),( ( FirstVNF_Mem / MRS ) / ( FirstVNF_CPU_Server - RRS ) ) )", "choosing": "Max( Min( ( DS + MUM ) ,( RMSe + CS ) ),( ( MUC + MUM ) + ( CS * MLU ) ) )", "obj1": 0.7532710280373832, "obj2": 0.24724702348767935}, {"determining": "( ( Max( FirstVNF_CPU,PN ) * FirstVNF_RAM ) + ( BR / BR ) )", "choosing": "Max( Min( ( MUR * CS ) ,Min( RRSe ,RMSe ) ),( ( MUC / MUR ) / Min( MLU ,RRSe ) ) )", "obj1": 0.7327102803738318, "obj2": 0.24615465592962457}, {"determining": "( ( Min( MRS ,RRS ) - FirstVNF_CPU ) * Max( FirstVNF_CPU,FirstVNF_CPU ) )", "choosing": "Min( ( MUR / MUR ) ,( ( Max( MUR,( MLU / CS ) ) - RRSe ) / ( DS * RCSe ) ) )", "obj1": 0.8299065420560747, "obj2": 0.13096130130797137}, {"determining": "( ( Min( MRS ,ARS ) - ( ( FirstVNF_CPU_Server - FirstVNF_Mem ) * Const ) ) / ( ( MDR * ARS ) / ( ACS - DDR ) ) )", "choosing": "( ( ( MUR / DS ) + Min( MUM ,MLU ) ) + ( RMSe / Max( Min( ( CS + ( MUR * DS ) ) ,( ( Min( ( RMSe - RCSe ) ,CS ) * MUC ) * MUR ) ),( ( RCSe / RCSe ) / Min( RRSe ,RRSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ARS,FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_RAM ) )", "choosing": "( Min( Max( RMSe,MLU ) ,( MUC / MUM ) ) - ( ( RRSe * RCSe ) * ( DS - MLU ) ) )", "obj1": 0.708411214953271, "obj2": 0.22242827943088095}, {"determining": "( ( BR * BR ) / ( ACS - ( Const * FirstVNF_Mem_Server ) ) )", "choosing": "( ( MLU - MLU ) + ( RMSe / RRSe ) )", "obj1": 0.7009345794392523, "obj2": 0.2500867509668439}, {"determining": "Max( Min( DDR ,Min( AMS ,Const ) ),Max( MRS,( MRS / DDR ) ) )", "choosing": "( ( DS + MUM ) - ( ( MUC / CS ) + ( MUR + DS ) ) )", "obj1": 0.7327102803738318, "obj2": 0.2407754184253563}, {"determining": "( Min( ( FirstVNF_RAM_Server / MDR ) ,( FirstVNF_Mem / MRS ) ) * ( AMS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR - CS ) * Min( DS ,MUC ) )", "obj1": 0.719626168224299, "obj2": 0.25268863094847316}, {"determining": "Min( ( Min( FirstVNF_Mem ,PN ) / ( MDR - DDR ) ) ,( Min( BR ,FirstVNF_Mem_Server ) - ( DDR + FirstVNF_RAM_Server ) ) )", "choosing": "( Max( Max( CS,CS ),Max( CS,RMSe ) ) * ( ( MUR * RCSe ) - ( MUC / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Max( RRS,CRS ),Min( PN ,CRS ) ) + ( ( FirstVNF_RAM_Server - FirstVNF_Mem_Server ) * Min( DDR ,FirstVNF_CPU_Server ) ) )", "choosing": "Min( ( ( MUM + MUC ) + ( CS + MUC ) ) ,( ( MUR * MUC ) + Min( RMSe ,RRSe ) ) )", "obj1": 0.77196261682243, "obj2": 0.19714224485241202}, {"determining": "( Min( FirstVNF_Mem_Server ,( DDR - FirstVNF_RAM ) ) / ( CRS + FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + RRSe ) - MLU ) + ( MUR * DS ) ) + ( RMSe - Max( RRSe,RRSe ) ) )", "obj1": 0.8018691588785046, "obj2": 0.1839261847288302}, {"determining": "( ( Const * BR ) + ( ( FirstVNF_RAM - MRS ) / FirstVNF_RAM ) )", "choosing": "Max( Max( ( ( MUC / CS ) + ( RRSe / MUC ) ),Max( ( DS / DS ),( MUM / RRSe ) ) ),Min( ( Max( RRSe,DS ) - ( RMSe * MLU ) ) ,Max( ( MUC * MUM ),( RRSe / RCSe ) ) ) )", "obj1": 0.7420560747663552, "obj2": 0.24270691216069454}, {"determining": "Min( ( ( MDR - ( CRS * FirstVNF_Mem ) ) * Min( ( ( ARS + ACS ) * PN ) ,FirstVNF_Mem ) ) ,( FirstVNF_Mem_Server + BR ) )", "choosing": "Min( ( ( ( MUR + MUC ) + ( MUM + MUR ) ) * ( Min( MUM ,MLU ) + ( RMSe / MUR ) ) ) ,( ( ( RMSe + MUC ) - ( RMSe * MLU ) ) / Max( ( DS * MUM ),( MUR + CS ) ) ) )", "obj1": 0.7364485981308411, "obj2": 0.25641057940398426}, {"determining": "( ( ( Const + FirstVNF_Mem ) - FirstVNF_RAM ) / ( ( FirstVNF_CPU * Max( FirstVNF_Mem_Server,DDR ) ) * Min( RRS ,AMS ) ) )", "choosing": "Min( Min( CS ,CS ) ,( MUR + MUC ) )", "obj1": 0.6915887850467289, "obj2": 0.23204412646728168}, {"determining": "( Max( MDR,Max( FirstVNF_RAM,ARS ) ) + Min( ( CRS + Max( FirstVNF_RAM,( BR - CRS ) ) ) ,RRS ) )", "choosing": "( Max( RCSe,MUC ) + Max( ( Max( MUR,DS ) * MLU ),MUM ) )", "obj1": 0.7121495327102804, "obj2": 0.23974878024219604}, {"determining": "Min( ( DDR + FirstVNF_RAM ) ,( AMS / FirstVNF_RAM ) )", "choosing": "( ( ( ( CS * MUC ) / ( DS * RRSe ) ) / ( ( RMSe / DS ) / ( MLU * MUC ) ) ) * ( ( ( MUM - DS ) + ( DS / MUM ) ) + Max( ( RMSe + MLU ),( RRSe + MUC ) ) ) )", "obj1": 0.6654205607476635, "obj2": 0.25158241334307513}, {"determining": "( ( Min( Max( FirstVNF_RAM,BR ) ,Min( FirstVNF_RAM_Server ,RRS ) ) / Min( Max( ACS,FirstVNF_RAM ) ,( FirstVNF_CPU - RRS ) ) ) - Min( ( ( FirstVNF_RAM * FirstVNF_CPU ) + ( MDR - AMS ) ) ,( Max( MDR,CRS ) * ( FirstVNF_RAM_Server / ACS ) ) ) )", "choosing": "Min( ( ( Min( RRSe ,RRSe ) + ( MUC * RRSe ) ) * ( ( MUM - MUC ) + Max( RRSe,MUM ) ) ) ,( Min( ( MLU - MUR ) ,Max( DS,MUC ) ) * Min( ( MLU + MUR ) ,Min( MLU ,RMSe ) ) ) )", "obj1": 0.9121495327102803, "obj2": 0.03856845846723953}, {"determining": "( Max( ( ( ACS - DDR ) / Max( AMS,PN ) ),( ( FirstVNF_RAM_Server / Const ) - Min( CRS ,AMS ) ) ) * Min( ( ( MRS - FirstVNF_RAM_Server ) + Min( ACS ,FirstVNF_Mem ) ) ,Min( ( ACS * ARS ) ,( FirstVNF_CPU * PN ) ) ) )", "choosing": "( Max( MUM,MUM ) * ( MLU - DS ) )", "obj1": 0.9383177570093458, "obj2": 0.05570142377418169}, {"determining": "( Max( ( ( MDR / FirstVNF_RAM_Server ) / ( FirstVNF_Mem * ACS ) ),Max( Min( BR ,FirstVNF_RAM_Server ),( FirstVNF_Mem_Server + AMS ) ) ) + ( Min( ( FirstVNF_RAM / CRS ) ,( ACS * BR ) ) / ( ( ACS / RRS ) - Max( FirstVNF_Mem_Server,FirstVNF_Mem ) ) ) )", "choosing": "( ( ( ( RCSe + RMSe ) + MLU ) + MUC ) - ( RMSe / MUM ) )", "obj1": 0.6897196261682244, "obj2": 0.22708990753133956}, {"determining": "( ( ARS + MDR ) + ( ( ARS - Max( Const,FirstVNF_CPU_Server ) ) - Const ) )", "choosing": "( ( Min( ( MUM - CS ) ,Min( MUR ,MUC ) ) + ( ( RRSe / MUR ) * ( RRSe * RRSe ) ) ) + Min( Max( ( RRSe + MUC ),Min( MUC ,MUR ) ) ,Max( ( MUM + MUM ),Min( RCSe ,RMSe ) ) ) )", "obj1": 0.6915887850467289, "obj2": 0.24435203790441495}, {"determining": "( Max( ( ( FirstVNF_CPU + PN ) + ( MDR * FirstVNF_CPU_Server ) ),( Max( FirstVNF_RAM_Server,MDR ) * ( FirstVNF_Mem_Server / MRS ) ) ) + ( Max( ( FirstVNF_RAM_Server * AMS ),Min( FirstVNF_CPU_Server ,FirstVNF_RAM ) ) / Min( Max( MDR,Const ) ,Min( FirstVNF_CPU_Server ,ARS ) ) ) )", "choosing": "( Min( ( Min( MUR ,CS ) * Min( RMSe ,MUM ) ) ,( ( MUR * RCSe ) - ( MLU * MUC ) ) ) - Min( Max( Max( DS,CS ),Max( MUM,RRSe ) ) ,( Min( MUM ,MUR ) * Max( MUM,MUM ) ) ) )", "obj1": 0.6785046728971963, "obj2": 0.23498520284781288}, {"determining": "( Min( Const ,MDR ) / ( FirstVNF_CPU_Server / Max( ( FirstVNF_CPU - FirstVNF_RAM ),BR ) ) )", "choosing": "( Max( Max( MUR,MLU ),RMSe ) / Min( MLU ,CS ) )", "obj1": 0.7289719626168224, "obj2": 0.23441587327304358}, {"determining": "( ( ( CRS - FirstVNF_Mem_Server ) - ( DDR * FirstVNF_Mem_Server ) ) / ( FirstVNF_Mem_Server - FirstVNF_Mem_Server ) )", "choosing": "( Min( CS ,RCSe ) + ( ( CS - ( CS / MUC ) ) - MLU ) )", "obj1": 0.6616822429906543, "obj2": 0.24490497899839914}, {"determining": "Max( ( ( Max( FirstVNF_CPU_Server,FirstVNF_Mem ) + Min( DDR ,FirstVNF_Mem_Server ) ) - Min( ( BR * ACS ) ,( DDR * AMS ) ) ),( Max( ( FirstVNF_RAM_Server / ACS ),Min( AMS ,RRS ) ) * Min( Max( FirstVNF_RAM,FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) ) ) )", "choosing": "( Max( Min( Min( CS ,RCSe ) ,Max( MUR,CS ) ),( ( RMSe + MUM ) - Max( MUR,RCSe ) ) ) - ( ( Max( MUR,RCSe ) - Min( MUM ,RMSe ) ) + ( ( MUR * RCSe ) - Min( MLU ,RCSe ) ) ) )", "obj1": 0.7439252336448599, "obj2": 0.23922127012651495}, {"determining": "( ( ( ( RRS + MDR ) * ( DDR + MDR ) ) + ( Min( RRS ,FirstVNF_Mem_Server ) - ( FirstVNF_RAM_Server + FirstVNF_Mem ) ) ) + Min( ( ( FirstVNF_CPU / AMS ) / ( CRS * DDR ) ) ,Min( ( PN * ACS ) ,( CRS / ARS ) ) ) )", "choosing": "Max( Max( Max( ( RCSe - MLU ),Max( CS,CS ) ),( ( MUC - RMSe ) * ( MLU + CS ) ) ),( ( ( DS / CS ) / Min( CS ,MUR ) ) - ( ( MUR * CS ) / ( RRSe - CS ) ) ) )", "obj1": 0.9719626168224299, "obj2": 0.03170801777309511}, {"determining": "( Min( AMS ,AMS ) * Max( ACS,ARS ) )", "choosing": "( ( ( ( DS - MLU ) * ( RMSe + MLU ) ) - Min( Min( MLU ,RMSe ) ,( MUR - RRSe ) ) ) - ( ( ( DS * CS ) + Max( MUC,RCSe ) ) + ( Min( RMSe ,MUC ) * ( RMSe / RCSe ) ) ) )", "obj1": 0.7476635514018691, "obj2": 0.25086810076035754}, {"determining": "Max( ( ( PN / FirstVNF_RAM ) / ARS ),( Const + FirstVNF_RAM ) )", "choosing": "Min( ( Min( Max( MUM,CS ) ,( DS + MUR ) ) - ( ( CS + RMSe ) + Min( MUC ,MUM ) ) ) ,( Max( ( RMSe - MUM ),( MLU * MUR ) ) + ( Min( MLU ,RMSe ) - ( MUR / MUC ) ) ) )", "obj1": 0.7271028037383177, "obj2": 0.22769936375788954}, {"determining": "Max( Max( ( ( FirstVNF_Mem / FirstVNF_CPU ) + ( ARS - MRS ) ),Min( Min( AMS ,FirstVNF_RAM ) ,Max( MRS,RRS ) ) ),Max( ( ( Const + FirstVNF_CPU_Server ) - ( FirstVNF_RAM_Server + BR ) ),Max( ( MDR + CRS ),( CRS * FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( ( MLU / MUC ) + Min( MUR ,MUR ) ) - Min( Min( DS ,DS ) ,( RCSe + MUR ) ) ) * ( Min( Min( RCSe ,RCSe ) ,( MUM + DS ) ) * ( Max( RCSe,RRSe ) - ( MUR * DS ) ) ) )", "obj1": 0.708411214953271, "obj2": 0.2532186217383054}, {"determining": "( Min( Min( Min( RRS ,FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,AMS ) ) ,Min( ( FirstVNF_RAM / ACS ) ,( AMS + FirstVNF_CPU_Server ) ) ) / Max( ( ( DDR - ARS ) * Max( CRS,AMS ) ),Max( Min( FirstVNF_CPU_Server ,FirstVNF_RAM ),Max( FirstVNF_CPU_Server,DDR ) ) ) )", "choosing": "( Max( ( Min( RRSe ,CS ) * Max( MLU,RRSe ) ),( Min( CS ,RMSe ) + ( CS * MUR ) ) ) * Max( Min( ( DS / MUM ) ,( MUC - MLU ) ),( ( RCSe / MUC ) / ( RMSe * MUM ) ) ) )", "obj1": 0.7495327102803738, "obj2": 0.24019275302703494}, {"determining": "( ( ( ( FirstVNF_RAM - FirstVNF_CPU ) / ( DDR - ARS ) ) * Max( ( MRS * FirstVNF_RAM_Server ),Const ) ) / Min( AMS ,FirstVNF_CPU ) )", "choosing": "Min( ( ( RCSe * ( MLU - RRSe ) ) + MUM ) ,( RRSe / RMSe ) )", "obj1": 0.7308411214953271, "obj2": 0.2060712487902061}, {"determining": "( ( Max( Min( PN ,ARS ),( FirstVNF_Mem_Server * DDR ) ) / ( Min( ACS ,FirstVNF_Mem_Server ) * ( CRS / ARS ) ) ) - Max( ( ( MDR * AMS ) / ( CRS * ACS ) ),Min( ( Const / FirstVNF_Mem ) ,( MRS / ACS ) ) ) )", "choosing": "( Min( DS ,( RMSe / ( RRSe / CS ) ) ) / ( CS / CS ) )", "obj1": 0.8074766355140187, "obj2": 0.1488531954345764}, {"determining": "Min( ( BR + MDR ) ,Min( ARS ,PN ) )", "choosing": "( ( RCSe - ( Min( MLU ,RMSe ) * ( MUC + RRSe ) ) ) - ( DS + MUM ) )", "obj1": 0.6841121495327103, "obj2": 0.2557373118982429}, {"determining": "Min( ( ( ( MDR * BR ) - ( FirstVNF_Mem_Server - FirstVNF_Mem ) ) / ( Max( BR,AMS ) / Max( BR,FirstVNF_CPU ) ) ) ,Min( ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) - Min( MDR ,FirstVNF_Mem_Server ) ) ,( ( AMS * FirstVNF_Mem_Server ) * ( CRS / Const ) ) ) )", "choosing": "( ( ( Min( MUM ,MUR ) - Min( RCSe ,MUR ) ) / Max( Min( MLU ,MUC ),Min( RRSe ,DS ) ) ) / ( ( ( DS - MUM ) * ( MUR / MUC ) ) + Min( Min( RRSe ,RMSe ) ,( MUC + RRSe ) ) ) )", "obj1": 0.8336448598130841, "obj2": 0.13499365683606726}, {"determining": "( ( ( ( MRS / ACS ) * ( FirstVNF_RAM_Server * ARS ) ) / ( Max( ACS,RRS ) + ( FirstVNF_Mem_Server + DDR ) ) ) * ( Min( ( FirstVNF_RAM_Server + MDR ) ,( FirstVNF_Mem_Server / FirstVNF_CPU_Server ) ) - ( BR - BR ) ) )", "choosing": "( Max( ( ( DS * MUM ) * ( RCSe * CS ) ),( RCSe / MUR ) ) * ( ( Min( MLU ,DS ) * Max( DS,DS ) ) / ( ( RRSe / MLU ) / ( MUM * DS ) ) ) )", "obj1": 0.7439252336448599, "obj2": 0.2168935935244911}, {"determining": "Max( ( MDR + Max( Max( AMS,( ( FirstVNF_RAM_Server + Max( ARS,Max( DDR,RRS ) ) ) - FirstVNF_Mem ) ),PN ) ),Min( ARS ,MRS ) )", "choosing": "Max( ( MUC * DS ),( ( ( RRSe * MLU ) / ( MLU * CS ) ) + ( ( RCSe - RMSe ) * Max( MUM,RRSe ) ) ) )", "obj1": 0.6934579439252336, "obj2": 0.2548372856171712}, {"determining": "Max( Max( ( ( PN * MRS ) + Min( FirstVNF_RAM ,PN ) ),( ( FirstVNF_Mem_Server - ACS ) * ( FirstVNF_CPU * CRS ) ) ),( ( ( DDR - MDR ) + ( DDR * FirstVNF_Mem ) ) + Min( ( BR - RRS ) ,( FirstVNF_RAM_Server - BR ) ) ) )", "choosing": "( ( DS / Min( CS ,RCSe ) ) - ( RRSe + RMSe ) )", "obj1": 0.7401869158878505, "obj2": 0.24732115302063792}, {"determining": "Max( ( ARS / FirstVNF_RAM ),Max( CRS,( BR / ARS ) ) )", "choosing": "Max( ( DS + RCSe ),( RCSe / RMSe ) )", "obj1": 0.7514018691588785, "obj2": 0.21210236865953852}, {"determining": "Min( ( Max( MRS,FirstVNF_CPU_Server ) + ( FirstVNF_Mem + AMS ) ) ,( FirstVNF_CPU / ( AMS + ( MRS * MRS ) ) ) )", "choosing": "( ( ( ( DS - MUR ) + ( MLU - MUC ) ) - ( Min( RMSe ,RCSe ) * ( RRSe * MUC ) ) ) - ( ( ( DS + RRSe ) * Min( RRSe ,RCSe ) ) / ( Min( MLU ,CS ) / ( DS + MUM ) ) ) )", "obj1": 0.7065420560747664, "obj2": 0.25303925780085823}, {"determining": "( ( Max( ( PN / MRS ),( FirstVNF_CPU_Server - FirstVNF_Mem ) ) + PN ) * ( FirstVNF_RAM_Server / RRS ) )", "choosing": "( Min( MUR ,CS ) + Min( ( DS / CS ) ,MUR ) )", "obj1": 0.7308411214953271, "obj2": 0.1988129110830768}, {"determining": "( Min( ( ( AMS * AMS ) - Min( ARS ,FirstVNF_RAM_Server ) ) ,Min( Max( PN,Const ) ,( DDR - MDR ) ) ) + ( ( ( MRS + AMS ) / ( FirstVNF_RAM_Server * FirstVNF_Mem_Server ) ) - Max( ( FirstVNF_Mem / CRS ),( FirstVNF_Mem + FirstVNF_Mem ) ) ) )", "choosing": "( ( ( ( MUM + RRSe ) * ( MLU - CS ) ) / ( ( CS - DS ) / ( RCSe - MUC ) ) ) - ( ( ( MLU + CS ) + ( MUC - RMSe ) ) / ( ( RMSe + CS ) * ( MUM / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( RRS,( DDR / ( PN - MRS ) ) ) / ( ARS * BR ) )", "choosing": "( ( ( Min( RMSe ,RRSe ) / ( CS + RCSe ) ) - RRSe ) - Max( RRSe,( MLU - RMSe ) ) )", "obj1": 0.7233644859813084, "obj2": 0.24027474951783478}, {"determining": "( ( Max( ( ( Const + BR ) * ACS ),( PN / CRS ) ) - ( ( AMS - RRS ) - ( CRS + MDR ) ) ) * ( Min( ( AMS * MRS ) ,Min( FirstVNF_CPU ,ARS ) ) - ( ( PN / FirstVNF_Mem ) - Min( FirstVNF_RAM ,MDR ) ) ) )", "choosing": "( ( RMSe / Max( MLU,( DS / CS ) ) ) / ( CS - Max( ( ( DS + ( ( MUM + MLU ) / RRSe ) ) * Max( RCSe,RRSe ) ),( ( MUM * Max( MUR,( RMSe * Min( RCSe ,DS ) ) ) ) / MUR ) ) ) )", "obj1": 0.7401869158878505, "obj2": 0.2519447380634759}], "2": [{"determining": "( ( Max( ( FirstVNF_RAM * ACS ),( PN / CRS ) ) - ( ( ( Max( RRS,( DDR / ( PN - MRS ) ) ) / ( ARS * BR ) ) - RRS ) - ( CRS + MDR ) ) ) * ( Min( ( AMS * MRS ) ,Min( FirstVNF_CPU ,ARS ) ) - ( ( PN / FirstVNF_Mem ) - Min( FirstVNF_RAM ,MDR ) ) ) )", "choosing": "( ( RMSe / Max( ( ( ( Min( RMSe ,RRSe ) / ( CS + RCSe ) ) - RRSe ) - Max( RRSe,( MLU - RMSe ) ) ),( DS / CS ) ) ) / ( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_CPU_Server ,Min( Max( FirstVNF_RAM,AMS ) ,( Min( Const ,( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) ) * ( Min( FirstVNF_CPU_Server ,FirstVNF_RAM ) - ( MRS / RRS ) ) ) ) ) / ( Const - FirstVNF_CPU ) )", "choosing": "Max( ( DS + MLU ),( ( RMSe * MUR ) * ( DS + RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( BR + DDR ) / Min( AMS ,FirstVNF_CPU ) ),( ( ( ( MDR - FirstVNF_Mem_Server ) * Min( RRS ,Const ) ) + FirstVNF_CPU_Server ) + Min( CRS ,FirstVNF_CPU ) ) )", "choosing": "( ( ( RCSe + CS ) - ( RRSe - RMSe ) ) / DS )", "obj1": 0.616822429906542, "obj2": 0.2840631463850801}, {"determining": "( ( Min( Max( FirstVNF_RAM,BR ) ,Min( FirstVNF_RAM_Server ,RRS ) ) / Min( Max( ACS,FirstVNF_RAM ) ,( FirstVNF_CPU - RRS ) ) ) - Min( ( ( FirstVNF_RAM * FirstVNF_CPU ) + ( MDR - AMS ) ) ,( Max( MDR,CRS ) * FirstVNF_RAM ) ) )", "choosing": "Min( ( ( Min( RRSe ,RRSe ) + ( MUC * RRSe ) ) * ( ( MUM - MUC ) + Max( RRSe,MUM ) ) ) ,( ( ( ( ( CS * MUC ) / ( DS * RRSe ) ) / ( ( RMSe / DS ) / ( MLU * MUC ) ) ) * ( ( ( MUM - DS ) + ( DS / MUM ) ) + Max( ( RMSe + MLU ),( RRSe + MUC ) ) ) ) * Min( ( MLU + MUR ) ,Min( MLU ,RMSe ) ) ) )", "obj1": 0.9289719626168225, "obj2": 0.030161429420889153}, {"determining": "( ( Min( MRS ,DDR ) - ( AMS - FirstVNF_CPU_Server ) ) - ( ACS * BR ) )", "choosing": "( ( RRSe - MUR ) * MUM )", "obj1": 0.9869158878504672, "obj2": 0.011985418309893461}, {"determining": "( ( Min( MRS ,DDR ) - ( AMS - FirstVNF_CPU_Server ) ) / Min( PN ,FirstVNF_RAM_Server ) )", "choosing": "Min( ( DS / MUR ) ,( RRSe + DS ) )", "obj1": 0.8990654205607477, "obj2": 0.0847815679237724}, {"determining": "( ( CRS / ARS ) / ( Min( FirstVNF_RAM_Server ,AMS ) - FirstVNF_CPU ) )", "choosing": "Max( ( RRSe * DS ),( MLU + RCSe ) )", "obj1": 0.8579439252336448, "obj2": 0.11082967964446237}, {"determining": "( ( Min( Max( FirstVNF_RAM,BR ) ,Min( FirstVNF_RAM_Server ,RRS ) ) / Min( Max( ACS,FirstVNF_RAM ) ,( FirstVNF_CPU - RRS ) ) ) - Min( ( ( FirstVNF_RAM * FirstVNF_CPU ) + ( MDR - AMS ) ) ,( Max( MDR,CRS ) * ( FirstVNF_RAM_Server / ACS ) ) ) )", "choosing": "Min( ( ( Min( RRSe ,RRSe ) + ( MUC * RRSe ) ) * ( ( MUM - MUC ) + Max( RRSe,MUM ) ) ) ,( Min( ( MLU - MUR ) ,Max( DS,MUC ) ) * Min( ( MLU + MUR ) ,Min( MLU ,RMSe ) ) ) )", "obj1": 0.9121495327102803, "obj2": 0.03856845846723953}, {"determining": "( Min( FirstVNF_RAM_Server ,AMS ) - ARS )", "choosing": "( ( RRSe * DS ) / Min( MUM ,RMSe ) )", "obj1": 0.8728971962616823, "obj2": 0.10285176231864218}, {"determining": "( Max( FirstVNF_Mem,Min( Min( ARS ,ARS ) ,( ARS / PN ) ) ) * ( FirstVNF_RAM_Server - FirstVNF_Mem ) )", "choosing": "( Min( RCSe ,RCSe ) + ( RMSe - ( RMSe + MUR ) ) )", "obj1": 0.7869158878504673, "obj2": 0.1584100255183332}, {"determining": "( Min( FirstVNF_CPU_Server ,Min( Max( FirstVNF_RAM,AMS ) ,( Min( Const ,( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) ) * ( Min( FirstVNF_CPU_Server ,FirstVNF_RAM ) - ( MRS / RRS ) ) ) ) ) / ( Const - FirstVNF_CPU ) )", "choosing": "Max( ( DS + MLU ),( ( RMSe * MUR ) * ( DS + RMSe ) ) )", "obj1": 0.7551401869158878, "obj2": 0.161379918207855}, {"determining": "( ( Max( Min( PN ,ARS ),( FirstVNF_Mem_Server * DDR ) ) / ( Min( ACS ,FirstVNF_Mem_Server ) * ( CRS / ARS ) ) ) - Max( ( ( MDR * AMS ) / ( CRS * ACS ) ),Min( ( Const / FirstVNF_Mem ) ,( MRS / ACS ) ) ) )", "choosing": "( Min( DS ,( RMSe / ( RRSe / CS ) ) ) / ( CS / CS ) )", "obj1": 0.8074766355140187, "obj2": 0.1488531954345764}, {"determining": "( ( Min( MRS ,RRS ) - FirstVNF_CPU ) * Max( FirstVNF_CPU,FirstVNF_CPU ) )", "choosing": "Min( ( MUR / MUR ) ,( ( Max( MUR,( MLU / CS ) ) - RRSe ) / ( DS * RCSe ) ) )", "obj1": 0.8299065420560747, "obj2": 0.13096130130797137}, {"determining": "Max( MDR,( ( MRS + FirstVNF_CPU_Server ) + Min( CRS ,FirstVNF_CPU ) ) )", "choosing": "( ( ( MLU + ( DS * DS ) ) - ( RRSe - RMSe ) ) / ( Min( MUR ,DS ) * ( MLU * MUR ) ) )", "obj1": 0.6392523364485981, "obj2": 0.26479475945475645}, {"determining": "Min( Min( ( ( ( MDR * BR ) - ( FirstVNF_Mem_Server - FirstVNF_Mem ) ) / ( Max( BR,AMS ) / Max( BR,FirstVNF_CPU ) ) ) ,Min( ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) - Min( MDR ,FirstVNF_Mem_Server ) ) ,( ( AMS * FirstVNF_Mem_Server ) * ( CRS / Const ) ) ) ) ,Min( ARS ,PN ) )", "choosing": "( ( RCSe - ( Min( MLU ,RMSe ) * ( MUC + RRSe ) ) ) - ( ( ( Min( MUM ,MUR ) - Min( RCSe ,MUR ) ) / Max( Min( MLU ,MUC ),Min( RRSe ,DS ) ) ) / ( ( ( DS - MUM ) * ( MUR / MUC ) ) + Min( Min( RRSe ,RMSe ) ,( MUC + RRSe ) ) ) ) )", "obj1": 0.8934579439252337, "obj2": 0.08561090450214497}, {"determining": "( ( ( ( FirstVNF_RAM - FirstVNF_CPU ) / ( DDR - ARS ) ) * Max( ( MRS * FirstVNF_RAM_Server ),Const ) ) / Min( AMS ,Max( Max( ( ( FirstVNF_Mem / FirstVNF_CPU ) + ( ARS - MRS ) ),Min( Min( AMS ,FirstVNF_RAM ) ,Max( MRS,RRS ) ) ),Max( ( ( Const + FirstVNF_CPU_Server ) - ( FirstVNF_RAM_Server + BR ) ),Max( ( MDR + CRS ),( CRS * FirstVNF_RAM_Server ) ) ) ) ) )", "choosing": "Min( ( ( RCSe * ( MLU - ( Min( Min( RCSe ,RCSe ) ,( MUM + DS ) ) * ( Max( RCSe,RRSe ) - ( MUR * DS ) ) ) ) ) + MUM ) ,( RRSe / RMSe ) )", "obj1": 0.7158878504672898, "obj2": 0.19680588706092256}, {"determining": "( Max( ARS,FirstVNF_CPU_Server ) - Max( DDR,FirstVNF_RAM ) )", "choosing": "( Min( Max( RMSe,MLU ) ,( MUC / MUM ) ) - ( ( RRSe * RCSe ) * ( DS - MLU ) ) )", "obj1": 0.708411214953271, "obj2": 0.22242827943088095}, {"determining": "( ( ( FirstVNF_CPU * FirstVNF_CPU_Server ) + MDR ) - ( PN - FirstVNF_CPU ) )", "choosing": "Max( ( Max( MLU,CS ) * ( RRSe + DS ) ),Min( MLU ,( MUC / MLU ) ) )", "obj1": 0.7476635514018691, "obj2": 0.18123835656689175}, {"determining": "Min( ( FirstVNF_Mem * Max( ( CRS * DDR ),( DDR + MRS ) ) ) ,( FirstVNF_RAM + DDR ) )", "choosing": "( ( DS - RMSe ) - ( ( DS * MUM ) * CS ) )", "obj1": 0.7140186915887851, "obj2": 0.21191882520333377}, {"determining": "( ( ( FirstVNF_Mem_Server / DDR ) * ( Const - FirstVNF_RAM_Server ) ) * Min( ( ARS / MDR ) ,( MDR - Min( ( ( FirstVNF_CPU_Server + MDR ) * Min( FirstVNF_CPU_Server ,FirstVNF_RAM ) ) ,( Min( FirstVNF_RAM ,FirstVNF_Mem_Server ) - ( FirstVNF_CPU * PN ) ) ) ) ) )", "choosing": "Min( Max( ( RRSe - MUC ),( MUC * RCSe ) ) ,Min( Min( MUM ,DS ) ,MUM ) )", "obj1": 0.822429906542056, "obj2": 0.1380343259132373}, {"determining": "( Max( ( ( MDR / FirstVNF_RAM_Server ) / ( FirstVNF_Mem * ACS ) ),Max( Min( BR ,FirstVNF_RAM_Server ),( FirstVNF_Mem_Server + AMS ) ) ) + Max( ( ( ACS - DDR ) / Max( AMS,PN ) ),( ( FirstVNF_RAM_Server / Const ) - Min( CRS ,AMS ) ) ) )", "choosing": "( ( ( ( RCSe + ( Max( MUM,MUM ) * ( MLU - DS ) ) ) + MLU ) + MUC ) - ( RMSe / MUM ) )", "obj1": 0.6523364485981309, "obj2": 0.24998721687940736}, {"determining": "( Max( ( ( MDR / FirstVNF_RAM_Server ) / ( FirstVNF_Mem * ACS ) ),Max( Min( BR ,FirstVNF_RAM_Server ),( FirstVNF_Mem_Server + AMS ) ) ) + ( Min( ( FirstVNF_RAM / CRS ) ,( ACS * BR ) ) / ( ( ACS / RRS ) - Max( FirstVNF_Mem_Server,FirstVNF_Mem ) ) ) )", "choosing": "( ( ( ( RCSe + RMSe ) + MLU ) + MUC ) - ( RMSe / MUM ) )", "obj1": 0.6897196261682244, "obj2": 0.22708990753133956}, {"determining": "( ( ( Max( FirstVNF_CPU,PN ) * FirstVNF_RAM ) - ( AMS * Const ) ) / ( ( MDR * ARS ) / ( ACS - DDR ) ) )", "choosing": "( ( Min( ( MUR * CS ) ,Min( RRSe ,RMSe ) ) + Min( MUM ,MLU ) ) + ( ( MUM + MUC ) + ( MUM * DS ) ) )", "obj1": 0.7289719626168224, "obj2": 0.18346017214068436}, {"determining": "Max( ( ( MDR - FirstVNF_Mem_Server ) * Min( RRS ,Const ) ),Max( ( FirstVNF_CPU_Server * FirstVNF_RAM_Server ),( FirstVNF_Mem * CRS ) ) )", "choosing": "Min( ( MLU + ( DS * DS ) ) ,Min( RCSe ,( RCSe + CS ) ) )", "obj1": 0.6672897196261682, "obj2": 0.22968349559126913}, {"determining": "Max( ( ( BR + DDR ) / Min( AMS ,FirstVNF_CPU ) ),( ( MRS + FirstVNF_CPU_Server ) + Min( CRS ,FirstVNF_CPU ) ) )", "choosing": "( ( ( RCSe + CS ) - ( RRSe - RMSe ) ) / ( Min( MUR ,DS ) * ( MLU * MUR ) ) )", "obj1": 0.6261682242990654, "obj2": 0.272561314455281}, {"determining": "( ( Min( FirstVNF_RAM ,Min( FirstVNF_RAM_Server ,RRS ) ) / Min( Max( ACS,FirstVNF_RAM ) ,( FirstVNF_CPU - RRS ) ) ) - Min( ( ( FirstVNF_RAM * FirstVNF_CPU ) + ( MDR - AMS ) ) ,( Max( MDR,CRS ) * ( FirstVNF_RAM_Server / ACS ) ) ) )", "choosing": "Min( ( ( Min( RRSe ,RRSe ) + ( MUC * RRSe ) ) * ( ( MUM - MUC ) + Max( RRSe,MUM ) ) ) ,( Min( ( MLU - ( ( ( MUM - DS ) + ( DS / MUM ) ) + Max( ( RMSe + MLU ),( RRSe + MUC ) ) ) ) ,Max( DS,MUC ) ) * Min( ( MLU + MUR ) ,Min( MLU ,RMSe ) ) ) )", "obj1": 0.9158878504672897, "obj2": 0.03739635797936251}, {"determining": "( ( Max( ( FirstVNF_RAM_Server + MDR ),CRS ) / AMS ) * Min( PN ,ACS ) )", "choosing": "( ( DS * CS ) - ( RCSe + MUM ) )", "obj1": 0.6635514018691588, "obj2": 0.2389179019838547}, {"determining": "( Min( Const ,FirstVNF_Mem ) * ( MRS / AMS ) )", "choosing": "( ( CS + MUC ) - MUM )", "obj1": 0.680373831775701, "obj2": 0.22878021039320054}, {"determining": "Max( ( ( BR + DDR ) / Min( AMS ,FirstVNF_CPU ) ),( ( MRS + FirstVNF_CPU_Server ) + Min( DDR ,FirstVNF_CPU ) ) )", "choosing": "( ( ( RCSe + CS ) - ( RRSe / RRSe ) ) / ( Min( MUR ,DS ) * ( MLU * MUR ) ) )", "obj1": 0.6242990654205608, "obj2": 0.2746455008370211}, {"determining": "Max( ( CRS * ( FirstVNF_RAM + DDR ) ),( DDR + MRS ) )", "choosing": "( CS - ( MLU / DS ) )", "obj1": 0.7401869158878505, "obj2": 0.18213604595157842}, {"determining": "( ACS * ( MDR - FirstVNF_Mem_Server ) )", "choosing": "( ( ( CS * RRSe ) + ( CS / MUR ) ) - ( MUM * ( MUM * MUR ) ) )", "obj1": 0.9925233644859813, "obj2": 0.009329901493749015}, {"determining": "( ( ( CRS - FirstVNF_Mem_Server ) - ( DDR * FirstVNF_Mem_Server ) ) / ( FirstVNF_Mem_Server - FirstVNF_Mem_Server ) )", "choosing": "( Min( CS ,RCSe ) + ( ( CS - ( CS / MUC ) ) - MLU ) )", "obj1": 0.6616822429906543, "obj2": 0.24490497899839914}, {"determining": "( ( Max( FirstVNF_RAM,FirstVNF_RAM ) * ( FirstVNF_RAM + AMS ) ) * ( MDR - FirstVNF_Mem_Server ) )", "choosing": "( ( CS / ( ( RMSe - MUR ) - Min( RCSe ,MLU ) ) ) - ( MUM * ( MUM * MUR ) ) )", "obj1": 0.9962616822429906, "obj2": 0.0028476327385690407}, {"determining": "( ( ( ( BR - ACS ) - ( MRS * FirstVNF_CPU_Server ) ) - ( ( FirstVNF_Mem_Server * FirstVNF_RAM_Server ) - ( Min( DDR ,FirstVNF_CPU_Server ) / FirstVNF_CPU_Server ) ) ) / ( ( ( ACS + FirstVNF_RAM ) + ( RRS / MRS ) ) * ( ( DDR - ACS ) + ( AMS * BR ) ) ) )", "choosing": "( Max( ( ( MUC / CS ) - Max( MUM,RMSe ) ),( ( DS * MUR ) - ( CS - CS ) ) ) / ( Max( ( RCSe - Max( CS,RMSe ) ),Max( RMSe,RRSe ) ) - ( Min( MUC ,RRSe ) - ( MUM * MLU ) ) ) )", "obj1": 0.7252336448598131, "obj2": 0.1612898930704234}, {"determining": "Min( ( ( ( MDR * BR ) - ( FirstVNF_Mem_Server - FirstVNF_Mem ) ) / ( Min( ( BR + MDR ) ,Min( ARS ,PN ) ) / Max( BR,FirstVNF_CPU ) ) ) ,Min( ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) - Min( MDR ,FirstVNF_Mem_Server ) ) ,( ( AMS * FirstVNF_Mem_Server ) * ( CRS / Const ) ) ) )", "choosing": "( ( ( Min( MUM ,MUR ) - Min( RCSe ,MUR ) ) / Max( Min( MLU ,MUC ),Min( RRSe ,DS ) ) ) / ( ( ( ( DS + MUM ) - MUM ) * ( MUR / MUC ) ) + Min( Min( RRSe ,RMSe ) ,( MUC + RRSe ) ) ) )", "obj1": 0.8280373831775701, "obj2": 0.13436308897868318}, {"determining": "Min( Min( FirstVNF_Mem ,ARS ) ,( ARS / PN ) )", "choosing": "( ( RRSe + MUR ) / Min( RCSe ,RCSe ) )", "obj1": 0.6560747663551402, "obj2": 0.24943231626620344}, {"determining": "( Max( CRS,MRS ) - ( Const * FirstVNF_Mem ) )", "choosing": "Min( ( MLU * RMSe ) ,Min( CS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ACS * DDR ) - ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,CS ) - ( MUC / MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ACS ,( MRS - FirstVNF_CPU_Server ) ) ,( BR + Min( PN ,DDR ) ) )", "choosing": "( ( ( RMSe + MUM ) * ( RRSe / RRSe ) ) + ( ( MLU - MUM ) * ( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( RRS / Const ) - Min( MRS ,FirstVNF_CPU_Server ) ) + Min( ( Const - ARS ) ,( FirstVNF_RAM / RRS ) ) )", "choosing": "Max( ( ( RMSe - MUM ) / ( RRSe - MUM ) ),( ( MLU * RMSe ) * ( MUR / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_Mem,FirstVNF_RAM_Server ) + Min( MDR ,AMS ) ) - ( Min( FirstVNF_RAM ,PN ) + ( ACS + ACS ) ) )", "choosing": "( ( ( MUC * MUR ) * ( MUR + MLU ) ) * ( ( CS * RRSe ) + ( CS / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - Max( AMS,MRS ) ) / ( MDR / FirstVNF_CPU ) )", "choosing": "( ( ( MLU - MUM ) * ( CS * MLU ) ) * Min( ( MUR - MLU ) ,( MUR / MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MRS ,ARS ) - ( ( FirstVNF_CPU_Server - FirstVNF_Mem ) * Const ) ) / ( ( MDR * ARS ) / ( ACS - DDR ) ) )", "choosing": "( ( ( MUR / DS ) + Min( MUM ,MLU ) ) + ( RMSe / Max( Min( ( CS + ( MUR * DS ) ) ,( ( Min( ( RMSe - RCSe ) ,CS ) * MUC ) * MUR ) ),( ( RCSe / RCSe ) / Min( RRSe ,RRSe ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( FirstVNF_Mem ,PN ) / ( MDR - DDR ) ) ,( Min( BR ,FirstVNF_Mem_Server ) - ( DDR + FirstVNF_RAM_Server ) ) )", "choosing": "( Max( Max( CS,CS ),Max( CS,RMSe ) ) * ( ( MUR * RCSe ) - ( MUC / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( AMS * AMS ) - Min( ARS ,FirstVNF_RAM_Server ) ) ,Min( Max( PN,Const ) ,( DDR - MDR ) ) ) + ( ( ( MRS + AMS ) / ( FirstVNF_RAM_Server * FirstVNF_Mem_Server ) ) - Max( ( FirstVNF_Mem / CRS ),( FirstVNF_Mem + FirstVNF_Mem ) ) ) )", "choosing": "( ( ( ( MUM + RRSe ) * ( MLU - CS ) ) / ( ( CS - DS ) / ( RCSe - MUC ) ) ) - ( ( ( MLU + CS ) + ( MUC - RMSe ) ) / ( ( RMSe + CS ) * ( MUM / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MDR ,AMS ) / ( RRS + DDR ) ) / ( Const - FirstVNF_CPU ) )", "choosing": "Max( RMSe,( MLU + RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MDR ,AMS ) / ( ( CRS / ARS ) / ( Const - FirstVNF_CPU ) ) )", "choosing": "( ( MUC + RMSe ) * ( CS + ( MLU + RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( FirstVNF_RAM_Server + MDR ),CRS ) / ( FirstVNF_Mem_Server * ( Const / ( FirstVNF_CPU - ( Const + FirstVNF_CPU ) ) ) ) )", "choosing": "( ( MUC + RMSe ) * ( CS + Min( CS ,( MLU + ( Max( ( Max( RRSe,CS ) - MLU ),Max( DS,CS ) ) / ( MUC / DS ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( FirstVNF_RAM_Server + MDR ),CRS ) / ( FirstVNF_Mem_Server * ( Const / ( FirstVNF_CPU - ( Const + FirstVNF_CPU ) ) ) ) )", "choosing": "( ( MUC + RMSe ) * ( CS + Min( CS ,( MLU + ( Max( ( Max( RRSe,CS ) - MLU ),Max( DS,CS ) ) / ( MUC / DS ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,ACS ) / ( FirstVNF_Mem_Server * ( Const / ( FirstVNF_CPU - ( Const + FirstVNF_CPU ) ) ) ) )", "choosing": "( ( MUC + RMSe ) * ( CS + Min( CS ,( MLU + ( Max( ( Max( RRSe,CS ) - MLU ),Max( MUM,CS ) ) / ( MUC / DS ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( CRS,MRS ) - ( ( Max( BR,FirstVNF_RAM ) / ( ARS + FirstVNF_Mem_Server ) ) * FirstVNF_Mem ) )", "choosing": "Min( RMSe ,Min( CS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN + ( Max( CRS,MRS ) - ( Const * FirstVNF_Mem ) ) ) / ( DDR * DDR ) )", "choosing": "Min( MLU ,( RCSe + RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( CRS,MRS ) - ( Const * ( DDR * DDR ) ) )", "choosing": "Min( ( MLU * RMSe ) ,Min( ( MLU + RCSe ) ,( RCSe + RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,DDR ) - ( AMS - ( ACS * BR ) ) )", "choosing": "( ( MUM * RRSe ) - ( RMSe * RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ACS * DDR ) - ( FirstVNF_CPU_Server + ( DDR + MRS ) ) )", "choosing": "( Max( MLU,CS ) - ( ( DS * MUM ) - ( MLU / DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ARS ,ARS ) ,( ( ( ACS * DDR ) - ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) ) / PN ) )", "choosing": "( ( RRSe + MUR ) / MLU )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ACS ,( CRS - FirstVNF_CPU_Server ) ) ,( BR + Min( PN ,DDR ) ) )", "choosing": "( ( ( RMSe + MUM ) * ( MLU * MUR ) ) + ( ( MLU - MUM ) * ( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS * FirstVNF_Mem ) + Min( ( Const - ARS ) ,( FirstVNF_RAM / RRS ) ) )", "choosing": "Max( ( CS / ( RRSe - MUM ) ),( ( MLU * RMSe ) * ( MUR / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( RRS - MRS ) / ( Max( FirstVNF_RAM,FirstVNF_RAM ) * ( FirstVNF_RAM + AMS ) ) )", "choosing": "Min( ( ( ( ( CS / Min( RMSe ,MUC ) ) - ( MUM * ( MUM * MUR ) ) ) / MUC ) - ( RRSe + RCSe ) ) ,( ( RMSe - MUR ) - Min( RCSe ,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_Mem,FirstVNF_RAM_Server ) + Min( ( MDR - FirstVNF_Mem_Server ) ,AMS ) ) - ( Min( FirstVNF_RAM ,PN ) + ( ACS + ACS ) ) )", "choosing": "( ( ( MUC * MUR ) * ( MUR + MLU ) ) * ( ( CS * RRSe ) + ( MUM / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - Max( AMS,MRS ) ) / FirstVNF_RAM )", "choosing": "( ( ( MLU - MUM ) * ( CS * MLU ) ) * Min( ( MUR - MLU ) ,( MUR / ( ( CS * RRSe ) + ( CS / MUR ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MRS ,RRS ) - FirstVNF_CPU ) * Max( FirstVNF_CPU,FirstVNF_CPU ) )", "choosing": "Min( ( MUR / MUR ) ,( ( Max( MUR,( MLU / CS ) ) - RRSe ) / ( DS * RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( FirstVNF_Mem ,PN ) / ( ( DDR - FirstVNF_RAM ) - DDR ) ) ,( Min( BR ,FirstVNF_Mem_Server ) - ( DDR + FirstVNF_RAM_Server ) ) )", "choosing": "( Max( Max( CS,CS ),Max( CS,RMSe ) ) * ( MUR + RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ACS / ( DDR - ARS ) ) * Max( ( MRS * FirstVNF_RAM_Server ),Const ) ) / Min( AMS ,FirstVNF_CPU ) )", "choosing": "Min( DS ,( RRSe / RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( MDR * BR ) - ( FirstVNF_Mem_Server - ( ( MRS / ACS ) * ( FirstVNF_RAM_Server * ARS ) ) ) ) / ( Max( BR,AMS ) / Max( BR,FirstVNF_CPU ) ) ) ,Min( ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) - Min( MDR ,FirstVNF_Mem_Server ) ) ,( ( AMS * FirstVNF_Mem_Server ) * ( CRS / Const ) ) ) )", "choosing": "( ( Min( MLU ,DS ) * Max( DS,DS ) ) / ( ( ( DS - MUM ) * ( MUR / MUC ) ) + Min( Min( RRSe ,RMSe ) ,( MUC + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( AMS * AMS ) - Min( ( Max( ( PN / MRS ),( FirstVNF_CPU_Server - FirstVNF_Mem ) ) + PN ) ,FirstVNF_RAM_Server ) ) ,Min( Max( PN,Const ) ,( DDR - MDR ) ) ) + ( ( ( MRS + AMS ) / ( FirstVNF_RAM_Server * FirstVNF_Mem_Server ) ) - Max( ( FirstVNF_Mem / CRS ),( FirstVNF_Mem + FirstVNF_Mem ) ) ) )", "choosing": "( CS - ( ( ( MLU + CS ) + ( MUC - RMSe ) ) / ( ( RMSe + CS ) * ( MUM / MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}]}