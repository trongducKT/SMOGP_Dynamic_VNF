{"1": [{"determining": "( Max( FirstVNF_CPU_Server,ACS ) - ( Const * ARS ) )", "choosing": "( ( MUR + DS ) * ( MUR + RMSe ) )", "obj1": 0.47764227642276424, "obj2": 0.4202472339281251}, {"determining": "( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) )", "choosing": "( Min( MUR ,( ( RRSe * RCSe ) * ( MUC / RCSe ) ) ) / ( CS - MUR ) )", "obj1": 0.3353658536585366, "obj2": 0.5426760002121908}, {"determining": "( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "Min( Min( FirstVNF_Mem_Server ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( RCSe / MUC ) + Min( RCSe ,MUR ) )", "obj1": 0.37398373983739835, "obj2": 0.5057965647126617}, {"determining": "( Min( PN ,AMS ) / ( RRS * FirstVNF_RAM ) )", "choosing": "( Min( CS ,MUC ) + ( RMSe / CS ) )", "obj1": 0.4105691056910569, "obj2": 0.46771769402651375}, {"determining": "( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) )", "choosing": "Max( ( DS / MUR ),( DS - RMSe ) )", "obj1": 0.5264227642276422, "obj2": 0.3707725973758065}, {"determining": "( Max( MRS,FirstVNF_Mem_Server ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( MUM + MUC ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe - MLU ) / ( ( ( RCSe / Min( Max( Min( MLU ,RMSe ),CS ) ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) - MLU ) / MUR ) )", "obj1": 0.2845528455284553, "obj2": 0.6235844127666325}, {"determining": "Max( Min( MDR ,BR ),( ARS + FirstVNF_Mem ) )", "choosing": "( Max( RRSe,RCSe ) + ( RCSe * DS ) )", "obj1": 0.5, "obj2": 0.4037382871832168}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_RAM ) + Min( FirstVNF_Mem_Server ,DDR ) )", "choosing": "( ( RRSe - DS ) - ( CS - CS ) )", "obj1": 0.2682926829268293, "obj2": 0.6253357679844378}, {"determining": "Max( ( ACS * FirstVNF_CPU ),( Const * FirstVNF_Mem ) )", "choosing": "( Max( DS,MUC ) + ( MLU * MUR ) )", "obj1": 0.4634146341463415, "obj2": 0.44379335250452967}, {"determining": "Min( ( FirstVNF_CPU * FirstVNF_RAM ) ,Max( ACS,FirstVNF_CPU_Server ) )", "choosing": "( ( MUC + DS ) * Min( MUC ,RCSe ) )", "obj1": 0.4634146341463415, "obj2": 0.4256459771212945}, {"determining": "Min( Max( MDR,AMS ) ,( Const * PN ) )", "choosing": "Min( ( MLU * RCSe ) ,( MUM + RRSe ) )", "obj1": 0.4349593495934959, "obj2": 0.47598082208489745}, {"determining": "Max( Min( MDR ,PN ),( DDR * MDR ) )", "choosing": "( Max( RMSe,MUC ) + ( RCSe + CS ) )", "obj1": 0.37398373983739835, "obj2": 0.5455492879549679}, {"determining": "Max( Min( FirstVNF_Mem ,CRS ),( MRS * DDR ) )", "choosing": "Min( ( MLU * RCSe ) ,Min( DS ,MUR ) )", "obj1": 0.6321138211382114, "obj2": 0.2853233106461261}, {"determining": "( Max( ACS,DDR ) * ( FirstVNF_Mem / BR ) )", "choosing": "( ( CS - RCSe ) - ( RRSe + RRSe ) )", "obj1": 0.2886178861788618, "obj2": 0.650543513896301}, {"determining": "Min( ( FirstVNF_Mem_Server + FirstVNF_CPU_Server ) ,( DDR - ACS ) )", "choosing": "( Min( CS ,( RMSe - CS ) ) - ( RCSe + MUM ) )", "obj1": 0.9065040650406504, "obj2": 0.0990035653909965}, {"determining": "( Max( FirstVNF_Mem_Server,Const ) / ( DDR * RRS ) )", "choosing": "( ( MUM - MUR ) + Max( CS,MUR ) )", "obj1": 0.37601626016260165, "obj2": 0.5738428000840219}, {"determining": "( ( ARS * ARS ) - ( FirstVNF_CPU_Server * FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe + MUC ) / Max( CS,MUR ) )", "obj1": 0.4065040650406504, "obj2": 0.4793177639745336}, {"determining": "Min( Min( MRS ,MDR ) ,Max( FirstVNF_RAM_Server,FirstVNF_Mem ) )", "choosing": "( ( MUM - CS ) / Max( MLU,DS ) )", "obj1": 0.3861788617886179, "obj2": 0.4816199070946}, {"determining": "Max( ( FirstVNF_Mem_Server - PN ),( FirstVNF_RAM * PN ) )", "choosing": "( Max( CS,DS ) / ( MUC * MLU ) )", "obj1": 0.2886178861788618, "obj2": 0.6487167396892131}, {"determining": "Min( ( FirstVNF_Mem_Server + FirstVNF_Mem ) ,Max( RRS,DDR ) )", "choosing": "Min( ( MUC * RCSe ) ,Max( RCSe,RMSe ) )", "obj1": 0.37601626016260165, "obj2": 0.5080255634344624}, {"determining": "( Min( BR ,BR ) / ( FirstVNF_RAM * PN ) )", "choosing": "( ( MUR * RCSe ) * ( RCSe * RMSe ) )", "obj1": 0.4186991869918699, "obj2": 0.48824069182590707}, {"determining": "( Max( MRS,ARS ) * ( RRS * FirstVNF_RAM_Server ) )", "choosing": "( Min( RRSe ,RCSe ) - ( RMSe - MUM ) )", "obj1": 0.3861788617886179, "obj2": 0.49609997141898793}, {"determining": "( ( Const / AMS ) - ( MRS * DDR ) )", "choosing": "( ( MUM + MUR ) * Max( DS,DS ) )", "obj1": 0.5833333333333334, "obj2": 0.3155031042991125}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR + FirstVNF_CPU ) + ( DDR * CRS ) )", "choosing": "Max( ( MLU - MUM ),( MUC + MUC ) )", "obj1": 0.41260162601626016, "obj2": 0.4778705970785846}, {"determining": "( Max( CRS,ACS ) + Min( DDR ,BR ) )", "choosing": "( ( CS - MLU ) / ( RMSe * RCSe ) )", "obj1": 0.2459349593495935, "obj2": 0.6955626685946917}, {"determining": "( ( Const - RRS ) / Min( DDR ,RRS ) )", "choosing": "Min( ( RMSe + MUR ) ,( CS / RRSe ) )", "obj1": 0.3252032520325203, "obj2": 0.6483465582255459}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_RAM * ARS ) / ( AMS * FirstVNF_Mem ) )", "choosing": "( ( MUC / MLU ) / Max( DS,MUM ) )", "obj1": 0.2682926829268293, "obj2": 0.6127640770565935}, {"determining": "Min( ( FirstVNF_RAM + Const ) ,Min( Const ,FirstVNF_RAM ) )", "choosing": "Max( ( MUM / MUM ),( RCSe - MLU ) )", "obj1": 0.38414634146341464, "obj2": 0.526600147712564}, {"determining": "( Max( ARS,PN ) + ( BR - MRS ) )", "choosing": "( Min( MUM ,RMSe ) / ( RCSe - MLU ) )", "obj1": 0.2804878048780488, "obj2": 0.6118157495849121}, {"determining": "( ( MRS * MRS ) / Min( AMS ,PN ) )", "choosing": "( ( DS * MUM ) * ( RMSe / DS ) )", "obj1": 0.4166666666666667, "obj2": 0.5012154926072275}, {"determining": "( Max( Min( ACS ,FirstVNF_RAM_Server ),BR ) / ( BR * ( RRS + RRS ) ) )", "choosing": "Max( ( CS / ( MUC * RCSe ) ),( MUR / Min( MLU ,MLU ) ) )", "obj1": 0.24390243902439024, "obj2": 0.6774420055918592}, {"determining": "( ( Const / ( DDR * MDR ) ) + ( ( CRS / ACS ) + ( FirstVNF_RAM - FirstVNF_CPU ) ) )", "choosing": "( Max( ( CS - MLU ),Min( RMSe ,RMSe ) ) - ( MUR / CS ) )", "obj1": 0.3231707317073171, "obj2": 0.6352563039148857}, {"determining": "( ( ( FirstVNF_CPU_Server / BR ) - ( ARS * CRS ) ) + ( Min( FirstVNF_Mem_Server ,PN ) + ( FirstVNF_Mem_Server + MDR ) ) )", "choosing": "Max( ( ( MLU / RCSe ) - ( RMSe + MUR ) ),Max( Min( RCSe ,CS ),Min( MUR ,MLU ) ) )", "obj1": 0.4146341463414634, "obj2": 0.4947840991050314}, {"determining": "Max( ( ( Const - FirstVNF_RAM_Server ) - Min( RRS ,FirstVNF_RAM ) ),( ( FirstVNF_CPU_Server + Const ) * ( FirstVNF_RAM_Server - BR ) ) )", "choosing": "Min( ( ( MUR - RRSe ) / Max( CS,CS ) ) ,( ( CS / DS ) - ( MUR - RCSe ) ) )", "obj1": 0.3394308943089431, "obj2": 0.5681712020868188}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_Mem_Server ,AMS ) ) - ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) * FirstVNF_Mem ) )", "choosing": "Min( ( ( RRSe - CS ) * Max( MUR,MUC ) ) ,( ( RRSe * RRSe ) * Min( MLU ,( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) - ( Max( RRSe,MLU ) / MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem * BR ) / Max( FirstVNF_Mem,FirstVNF_RAM_Server ) ) + Min( ( ARS + MRS ) ,Max( MRS,FirstVNF_Mem_Server ) ) )", "choosing": "( ( Max( RCSe,MUR ) * Max( CS,RCSe ) ) + Min( DS ,( MUC + CS ) ) )", "obj1": 0.5020325203252033, "obj2": 0.41501614053114066}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.6199186991869918, "obj2": 0.342116263776711}, {"determining": "( Min( ( RRS * FirstVNF_RAM_Server ) ,( ACS * RRS ) ) / ( Min( FirstVNF_Mem_Server ,PN ) * ( MDR - FirstVNF_RAM_Server ) ) )", "choosing": "( ( DS / ( MUM / DS ) ) + ( DS * MUM ) )", "obj1": 0.5813008130081301, "obj2": 0.3209056580175497}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3363959491782824}, {"determining": "Max( ( ( FirstVNF_CPU - ( AMS / MRS ) ) * ( MRS - FirstVNF_Mem ) ),( ( FirstVNF_RAM - BR ) / ( PN + DDR ) ) )", "choosing": "( ( MLU * RMSe ) * ( Min( RMSe ,MLU ) * ( RMSe * DS ) ) )", "obj1": 0.5304878048780488, "obj2": 0.3629637039835435}, {"determining": "( ( ( CRS + MDR ) + ( BR - ARS ) ) / ( Min( ARS ,FirstVNF_CPU_Server ) / ( ARS * AMS ) ) )", "choosing": "( ( Min( DS ,MUC ) / ( CS - MUM ) ) + ( ( MLU - DS ) * Max( MUM,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( FirstVNF_RAM,FirstVNF_CPU_Server ) - Min( Const ,BR ) ) ,( ( Const - MDR ) - ( FirstVNF_RAM_Server + MRS ) ) )", "choosing": "Max( ( MUC * Max( MUR,MLU ) ),( ( RMSe + RMSe ) - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( AMS + PN ) ,( BR * MRS ) ) * ( ( ARS * FirstVNF_Mem ) + ( AMS * MRS ) ) )", "choosing": "( Min( MLU ,( RRSe - DS ) ) * Max( ( RCSe * MUM ),( CS - RCSe ) ) )", "obj1": 0.3252032520325203, "obj2": 0.5683546858898135}, {"determining": "Max( Max( FirstVNF_RAM_Server,( FirstVNF_RAM + MRS ) ),( BR + ( DDR * PN ) ) )", "choosing": "( ( ( MUC + RMSe ) * ( MUC - MLU ) ) / ( Max( MUC,MUC ) / ( RRSe - DS ) ) )", "obj1": 0.22560975609756098, "obj2": 0.6468310315275366}, {"determining": "( Max( BR,ARS ) + ( ( FirstVNF_RAM_Server + MDR ) + ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) ) )", "choosing": "( ( ( CS + RMSe ) / MUR ) - ( ( MUC * RMSe ) / CS ) )", "obj1": 0.2886178861788618, "obj2": 0.660585348506478}, {"determining": "( ( ARS / FirstVNF_RAM ) * ( ACS * ( FirstVNF_RAM - MRS ) ) )", "choosing": "Min( ( MUC * DS ) ,Max( DS,MLU ) )", "obj1": 0.5386178861788617, "obj2": 0.35266965976512477}, {"determining": "Min( ( ( FirstVNF_Mem + RRS ) * ( FirstVNF_CPU + FirstVNF_RAM_Server ) ) ,( ( RRS * ARS ) - Max( FirstVNF_RAM_Server,CRS ) ) )", "choosing": "( Min( Min( MUC ,RMSe ) ,( MUC / DS ) ) + ( ( MUC * MUC ) + Max( MUC,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,MRS ) / Max( MRS,RRS ) )", "choosing": "( Max( CS,RMSe ) - ( ( MLU - RCSe ) + MUR ) )", "obj1": 0.22764227642276422, "obj2": 0.6841646852110542}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( FirstVNF_CPU_Server - CRS ) ) )", "choosing": "Min( ( Max( DS,MUC ) + Min( MLU ,MLU ) ) ,( Min( DS ,RRSe ) / ( RMSe - DS ) ) )", "obj1": 0.4329268292682927, "obj2": 0.4619530025272726}, {"determining": "Max( ( ( Const + RRS ) - ( ACS + FirstVNF_CPU ) ),( ( AMS - FirstVNF_Mem_Server ) + ( FirstVNF_RAM_Server / FirstVNF_RAM ) ) )", "choosing": "( ( Min( RMSe ,MUC ) * ( RCSe + MUC ) ) * ( MUC - ( MUR - RCSe ) ) )", "obj1": 0.3821138211382114, "obj2": 0.5074778945895202}, {"determining": "( ( Max( MDR,BR ) * ( FirstVNF_RAM_Server - FirstVNF_RAM ) ) * ( ( PN * AMS ) + Const ) )", "choosing": "Min( Max( Max( DS,MLU ),( RRSe + RMSe ) ) ,Min( ( MUM + MUC ) ,( Min( RRSe ,( MLU + CS ) ) + RMSe ) ) )", "obj1": 0.35772357723577236, "obj2": 0.5451681110261271}, {"determining": "Max( ( ( MDR - BR ) - ( MRS / Const ) ),( FirstVNF_RAM - DDR ) )", "choosing": "( ( ( MUR / MUR ) / DS ) * Min( ( RCSe / DS ) ,Max( MLU,MUR ) ) )", "obj1": 0.4024390243902439, "obj2": 0.484943575148405}, {"determining": "Max( ( CRS / FirstVNF_RAM ),( FirstVNF_CPU_Server * FirstVNF_CPU ) )", "choosing": "Min( Max( ( MUM + RMSe ),Min( RMSe ,MUC ) ) ,Max( Max( MUR,MUR ),Max( MUM,DS ) ) )", "obj1": 0.40447154471544716, "obj2": 0.4975553073878755}, {"determining": "( ( ( RRS + AMS ) + ( MDR + FirstVNF_Mem_Server ) ) * ( FirstVNF_Mem - ACS ) )", "choosing": "( ( DS + DS ) - Min( MUM ,( ( RRSe - ( MUR * ( ( ( RRSe * MLU ) - MLU ) * RCSe ) ) ) * RMSe ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4644596195914926}, {"determining": "( Max( PN,FirstVNF_CPU ) * Max( ( CRS / FirstVNF_CPU_Server ),Min( FirstVNF_RAM_Server ,( Min( ( FirstVNF_RAM - ( FirstVNF_Mem - ACS ) ) ,Const ) * ( FirstVNF_CPU - DDR ) ) ) ) )", "choosing": "Max( Max( MLU,MLU ),( Max( MLU,MUR ) - Min( MUC ,RRSe ) ) )", "obj1": 0.42276422764227645, "obj2": 0.47667148582805097}, {"determining": "( ( Min( Const ,ACS ) - Min( AMS ,RRS ) ) - Max( Max( FirstVNF_Mem,FirstVNF_RAM_Server ),Min( FirstVNF_CPU ,FirstVNF_Mem ) ) )", "choosing": "Max( Min( ( MLU * RRSe ) ,DS ),( Max( MLU,RRSe ) + ( MLU * RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server * MDR ) - ( FirstVNF_Mem_Server / Const ) ) - ( Min( PN ,PN ) + ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) ) )", "choosing": "( ( MLU - ( MUR - MUC ) ) * ( MUM - ( MUC - DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN * ( AMS - FirstVNF_RAM ) ) + ( ( ( FirstVNF_CPU / Min( PN ,RRS ) ) / Const ) + FirstVNF_CPU ) )", "choosing": "( Min( ( DS / ( ( MLU * Max( Max( ( MUR + RMSe ),Min( MUM ,RMSe ) ),RMSe ) ) + CS ) ) ,( MUR * CS ) ) - ( Max( MUR,MUM ) - Max( RRSe,MUC ) ) )", "obj1": 0.3597560975609756, "obj2": 0.5122426137997189}, {"determining": "( ( Const * FirstVNF_RAM ) - ( ( FirstVNF_Mem + RRS ) - Min( FirstVNF_Mem_Server ,MRS ) ) )", "choosing": "Min( Min( ( DS + RCSe ) ,( RMSe + MUC ) ) ,( ( MUR * RMSe ) - Min( RMSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( RRS - AMS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( ( RCSe * MUM ) * Min( RMSe ,MUM ) ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( FirstVNF_Mem_Server,MRS ) ,( ARS * ARS ) ) * ( Min( ACS ,FirstVNF_RAM ) - ( BR * ACS ) ) )", "choosing": "Min( ( ( RMSe / MUM ) * RRSe ) ,( MUC + MLU ) )", "obj1": 0.4065040650406504, "obj2": 0.5089976715214065}, {"determining": "Max( ( ACS / FirstVNF_RAM ),Min( ( ACS / MRS ) ,ARS ) )", "choosing": "( ( ( RCSe + RRSe ) / ( DS + RCSe ) ) + ( Min( CS ,MUM ) + ( MUM + CS ) ) )", "obj1": 0.3170731707317073, "obj2": 0.6440889145025497}, {"determining": "Max( ( PN + ( MDR - DDR ) ),Max( MDR,ARS ) )", "choosing": "( ( ( ( RMSe / MUM ) / MUC ) * MUM ) + ( Min( CS ,Max( RRSe,MUR ) ) / MUC ) )", "obj1": 0.28252032520325204, "obj2": 0.6674697318452576}, {"determining": "( ( ( ( PN + FirstVNF_RAM ) - Min( RRS ,FirstVNF_Mem_Server ) ) + ( ( RRS / AMS ) - ( CRS / PN ) ) ) + ( Max( ( ARS / FirstVNF_Mem ),( ACS - AMS ) ) + ( Max( MDR,BR ) / Max( Const,FirstVNF_RAM_Server ) ) ) )", "choosing": "( Max( ( Min( DS ,MUM ) - Min( RRSe ,RMSe ) ),Max( ( MUC + DS ),( MUR + RMSe ) ) ) + ( Min( Max( RRSe,DS ) ,( MUM * MUR ) ) * ( ( CS - MUC ) + ( MUC + MUR ) ) ) )", "obj1": 0.4065040650406504, "obj2": 0.5068737660859675}, {"determining": "( ( Min( ( MRS - PN ) ,( ARS / DDR ) ) * Min( ( FirstVNF_RAM + PN ) ,Min( PN ,DDR ) ) ) * ( Min( Min( DDR ,Const ) ,( DDR * FirstVNF_CPU ) ) / ( ( BR / ARS ) - ( CRS - MRS ) ) ) )", "choosing": "Max( ( RRSe / RCSe ),( CS + Max( RRSe,( MUC * MUC ) ) ) )", "obj1": 0.8475609756097561, "obj2": 0.1678938875523856}, {"determining": "( ( FirstVNF_CPU / CRS ) / ( MDR - ACS ) )", "choosing": "Max( Min( RCSe ,( ( DS + RRSe ) + ( RMSe - MLU ) ) ),Min( CS ,( Max( DS,MUM ) / ( MLU * RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( Const - AMS ),Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) * ( ( PN * RRS ) / ( FirstVNF_CPU_Server - PN ) ) ) + Min( ( ( Const / FirstVNF_Mem ) - ( MDR / PN ) ) ,( ( MRS / FirstVNF_RAM_Server ) - Min( AMS ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( RMSe / RMSe ) / CS ) + ( ( MUR + Max( DS,MUR ) ) + Max( ( CS * RCSe ),( RMSe / RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( AMS,DDR ) ,( PN - ( FirstVNF_CPU_Server * Max( Const,RRS ) ) ) )", "choosing": "( ( CS / Min( ( MLU / MLU ) ,RMSe ) ) - ( MUR / MUM ) )", "obj1": 0.943089430894309, "obj2": 0.03710097999289731}, {"determining": "( Min( Min( ( DDR * Const ) ,( CRS + FirstVNF_CPU ) ) ,Max( Min( DDR ,CRS ),( FirstVNF_CPU - MRS ) ) ) - ( ( Max( FirstVNF_CPU_Server,FirstVNF_RAM ) * Max( DDR,FirstVNF_Mem_Server ) ) / Min( Min( BR ,MRS ) ,( FirstVNF_RAM / FirstVNF_Mem ) ) ) )", "choosing": "( ( Min( Max( MUR,MUC ) ,( DS + MUC ) ) + ( ( MUM - RMSe ) + Max( DS,MUC ) ) ) + ( ( ( MLU / RRSe ) / ( RRSe * MUC ) ) / ( ( DS - CS ) * ( DS * MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( Min( FirstVNF_RAM ,MRS ) ,( MDR * PN ) ) ,Max( ( FirstVNF_Mem * CRS ),( DDR - ARS ) ) ) + ( ( Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) + ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) / Max( Min( FirstVNF_CPU_Server ,Const ),( CRS / FirstVNF_CPU_Server ) ) ) )", "choosing": "Min( ( Min( MUR ,RRSe ) - RMSe ) ,( RRSe - ( ( DS * MUM ) / RRSe ) ) )", "obj1": 0.2886178861788618, "obj2": 0.5669810776158694}, {"determining": "( Max( ( Min( MDR ,Const ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Const ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( DS * DS ) ) ) / ( MLU / MUR ) )", "obj1": 0.9715447154471545, "obj2": 0.015113998439609975}, {"determining": "( Max( Max( Min( ACS ,MDR ),( AMS * RRS ) ),Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * ( Min( ( FirstVNF_RAM - FirstVNF_RAM_Server ) ,( Const / FirstVNF_RAM ) ) * ( ( Const / AMS ) / ( FirstVNF_RAM / FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( DS - Min( MUM ,( MLU + MUC ) ) ) * ( ( RMSe * ( RMSe - RCSe ) ) + Max( ( RMSe * MLU ),CS ) ) )", "obj1": 0.9410569105691057, "obj2": 0.0557241125324581}, {"determining": "( ( ( FirstVNF_CPU_Server * Max( FirstVNF_RAM,FirstVNF_Mem ) ) - ( CRS + PN ) ) * ( Max( PN,FirstVNF_CPU_Server ) - PN ) )", "choosing": "( Min( Max( Max( MUM,MLU ),( DS - RCSe ) ) ,( ( RMSe + MUR ) * ( DS + DS ) ) ) + Min( Min( ( MLU + CS ) ,( RMSe - MLU ) ) ,( Min( MUM ,RRSe ) * ( MUR + RMSe ) ) ) )", "obj1": 0.4166666666666667, "obj2": 0.4843990141851947}, {"determining": "( Min( Max( ( FirstVNF_RAM + AMS ),( CRS - Const ) ) ,( Max( BR,ARS ) - ( RRS - FirstVNF_CPU_Server ) ) ) - ( Max( ( BR / FirstVNF_Mem ),Min( CRS ,CRS ) ) - ( ( FirstVNF_CPU_Server + FirstVNF_RAM_Server ) / Min( FirstVNF_Mem_Server ,AMS ) ) ) )", "choosing": "( ( ( MUC * RRSe ) / Max( RRSe,MLU ) ) * ( RCSe + ( MUC * ( MUC / RMSe ) ) ) )", "obj1": 0.3353658536585366, "obj2": 0.5400144410128233}, {"determining": "( Max( Max( ( MDR - FirstVNF_RAM_Server ),( CRS * FirstVNF_Mem ) ),( ( AMS * MRS ) / Max( RRS,RRS ) ) ) + Min( ( Max( DDR,Const ) - ( MDR - FirstVNF_RAM ) ) ,( Min( PN ,MRS ) * Min( FirstVNF_Mem ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( Min( ( CS * RRSe ) ,Min( MUR ,MLU ) ) - ( Min( DS ,CS ) * ( MUR * CS ) ) ) + ( Max( Max( DS,RMSe ),Min( MUC ,RCSe ) ) / ( ( CS / MUM ) + Min( CS ,MUM ) ) ) )", "obj1": 0.3556910569105691, "obj2": 0.5617108147736298}, {"determining": "( Min( MRS ,( Min( FirstVNF_Mem ,DDR ) * Min( FirstVNF_Mem ,DDR ) ) ) - Max( Min( ( FirstVNF_CPU_Server * MDR ) ,MDR ),MRS ) )", "choosing": "( Min( MLU ,MUC ) * Max( RMSe,( RMSe * DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( ARS + AMS ),( FirstVNF_RAM - MDR ) ) * Max( ( CRS + FirstVNF_Mem ),Max( CRS,MDR ) ) ) * ( Max( FirstVNF_CPU_Server,Const ) / DDR ) )", "choosing": "Min( ( ( Max( MUM,RCSe ) * ( CS + MUM ) ) + ( ( MUM * MLU ) / ( MUR - RRSe ) ) ) ,Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_RAM / FirstVNF_RAM ) / ( CRS * FirstVNF_Mem_Server ) ) - ( ( MRS - FirstVNF_CPU ) + ( FirstVNF_RAM + Const ) ) ) * ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - Min( ( BR + ACS ) ,( FirstVNF_Mem + CRS ) ) ) )", "choosing": "( Min( ( MLU * ( MUM + Min( MUC ,( MLU / MLU ) ) ) ) ,MUC ) + Min( ( ( CS + RRSe ) + ( MUC - RCSe ) ) ,( Min( MLU ,RRSe ) - ( MUM - MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem + FirstVNF_RAM ) / ( DDR * FirstVNF_Mem ) )", "choosing": "( Min( RMSe ,RRSe ) * Min( CS ,MUC ) )", "obj1": 0.3902439024390244, "obj2": 0.5421478753858052}, {"determining": "( ( Min( RRS ,( CRS * FirstVNF_Mem_Server ) ) * ACS ) + ( Min( ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ,AMS ) - AMS ) )", "choosing": "( ( RMSe / ( ( MLU / CS ) / ( RCSe - RCSe ) ) ) * Max( ( ( DS / MUC ) / RRSe ),Max( MLU,Min( MUM ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR / ACS ) + ( FirstVNF_CPU_Server * AMS ) )", "choosing": "( ( ( Max( MLU,RMSe ) / RMSe ) + MLU ) - Max( CS,MUR ) )", "obj1": 0.3048780487804878, "obj2": 0.5707616662565953}, {"determining": "( ( MRS / Const ) - ( AMS + ARS ) )", "choosing": "( ( ( DS + ( MUM - MUM ) ) + ( ( MLU * CS ) * ( RCSe - CS ) ) ) * ( DS * ( MUC / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( RRS - BR ) * DDR ),( FirstVNF_CPU_Server + FirstVNF_CPU ) )", "choosing": "( ( ( Min( RCSe ,MUM ) - ( MUC * MLU ) ) + ( Max( MUR,MLU ) / ( CS + RCSe ) ) ) - ( ( ( MUR + CS ) - ( CS + RCSe ) ) - ( ( MLU / MLU ) + ( RMSe + MUR ) ) ) )", "obj1": 0.30691056910569103, "obj2": 0.5669399500112732}, {"determining": "Min( ( ARS / FirstVNF_RAM ) ,( FirstVNF_CPU_Server / FirstVNF_Mem_Server ) )", "choosing": "( Max( ( ( MLU * MUM ) / ( MUC - CS ) ),( ( CS * RCSe ) + ( RRSe / RMSe ) ) ) - ( ( Max( MUC,MUR ) / Max( RCSe,RCSe ) ) * ( Max( RCSe,MLU ) / Min( MUR ,RMSe ) ) ) )", "obj1": 0.34146341463414637, "obj2": 0.5526199309700488}, {"determining": "( ( Min( ( PN / Const ) ,( PN / ACS ) ) + ( ( FirstVNF_RAM / MRS ) + ( AMS * ARS ) ) ) - ( Max( ( BR + AMS ),( BR * FirstVNF_RAM ) ) + ( Min( FirstVNF_RAM ,DDR ) * Min( FirstVNF_RAM ,AMS ) ) ) )", "choosing": "( ( MLU + RMSe ) * ( RMSe + Max( MLU,( MUR + MLU ) ) ) )", "obj1": 0.4268292682926829, "obj2": 0.4890498530646337}, {"determining": "Min( Max( FirstVNF_CPU_Server,Max( FirstVNF_RAM_Server,Min( FirstVNF_CPU ,FirstVNF_Mem_Server ) ) ) ,Min( FirstVNF_RAM_Server ,CRS ) )", "choosing": "( ( ( MUC / MUR ) * MLU ) - ( MLU + ( RMSe * ( CS / MUR ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.5066013910475401}, {"determining": "( ( AMS + DDR ) / ( Min( ( RRS * CRS ) ,FirstVNF_CPU_Server ) * ( BR - ( RRS + AMS ) ) ) )", "choosing": "( ( ( RCSe * DS ) - ( ( MUR * MLU ) - ( MLU + RRSe ) ) ) - ( ( MLU / DS ) - ( ( MLU / MLU ) - ( CS + CS ) ) ) )", "obj1": 0.516260162601626, "obj2": 0.3665781126497454}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( AMS * Const ) * ( FirstVNF_RAM - CRS ) ) / Max( FirstVNF_Mem,ACS ) )", "choosing": "( Max( MLU,MUM ) * ( MLU / RRSe ) )", "obj1": 0.2967479674796748, "obj2": 0.5945221062304782}, {"determining": "( ( ( ( DDR + ARS ) * Min( CRS ,CRS ) ) / ( ( FirstVNF_RAM - RRS ) / ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ) ) + ( ( ( FirstVNF_RAM_Server + DDR ) * Min( FirstVNF_RAM_Server ,MDR ) ) + ( ( MDR - DDR ) - ( Const - Const ) ) ) )", "choosing": "( Min( Max( ( MUC / MUR ),Min( RCSe ,MUR ) ) ,Max( ( DS + MUM ),Min( DS ,MUM ) ) ) * Min( ( ( RRSe + CS ) * Min( MUR ,RCSe ) ) ,( ( CS - DS ) * ( MUR - CS ) ) ) )", "obj1": 0.5508130081300813, "obj2": 0.3877253737085066}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( ( ( ( FirstVNF_CPU_Server - FirstVNF_Mem ) + Max( FirstVNF_Mem,CRS ) ) + Max( Max( FirstVNF_RAM_Server,RRS ),( RRS / FirstVNF_Mem ) ) ) + Min( Max( ( FirstVNF_RAM_Server + AMS ),Min( Const ,Const ) ) ,Max( Max( CRS,Const ),( FirstVNF_Mem / Const ) ) ) )", "choosing": "( ( DS / MLU ) + Min( MUR ,( DS - DS ) ) )", "obj1": 0.5121951219512195, "obj2": 0.3778445776480657}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.37398373983739835, "obj2": 0.4604052367825234}, {"determining": "( ( ( Max( FirstVNF_CPU,FirstVNF_RAM ) + Max( ARS,MDR ) ) + ( ( FirstVNF_CPU - DDR ) / ( ARS * MRS ) ) ) / ( Min( ( AMS * CRS ) ,( FirstVNF_Mem_Server / ( ( DDR - MRS ) + ( FirstVNF_CPU * FirstVNF_RAM ) ) ) ) / Min( ( AMS - RRS ) ,Max( FirstVNF_Mem,CRS ) ) ) )", "choosing": "( ( ( Min( MUM ,MLU ) * Max( RRSe,CS ) ) * Min( Max( MUC,CS ) ,Min( RCSe ,DS ) ) ) / ( ( DS + RCSe ) * ( Max( RMSe,MUC ) * ( MUR + CS ) ) ) )", "obj1": 0.5772357723577236, "obj2": 0.3689454093435021}], "2": [{"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / FirstVNF_Mem_Server )", "choosing": "( ( ( MLU + RRSe ) / Min( DS ,( MUC + CS ) ) ) + ( MUM * MUR ) )", "obj1": 0.0975609756097561, "obj2": 0.748144497716822}, {"determining": "( ACS - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Const ) * Max( ARS,ACS ) ) ) )", "choosing": "( DS / ( MLU / MUR ) )", "obj1": 0.7113821138211383, "obj2": 0.22535551780250446}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( BR * ACS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( MUC + MLU ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 0.8882113821138211, "obj2": 0.06118925803540918}, {"determining": "( ( Min( ( MRS - PN ) ,( ARS / DDR ) ) * Min( ( FirstVNF_RAM + PN ) ,Min( PN ,DDR ) ) ) * ( Min( Min( DDR ,Const ) ,( DDR * FirstVNF_CPU ) ) / ( ( BR / ARS ) - ( CRS - MRS ) ) ) )", "choosing": "Max( ( RRSe / RCSe ),( CS + Max( RRSe,( MUC * MUC ) ) ) )", "obj1": 0.8475609756097561, "obj2": 0.1678938875523856}, {"determining": "( Min( ( FirstVNF_RAM + Const ) ,Min( Const ,FirstVNF_RAM ) ) / ( AMS * FirstVNF_Mem ) )", "choosing": "( ( MUM / MLU ) / Max( DS,MUM ) )", "obj1": 0.16869918699186992, "obj2": 0.7026482832994229}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "Min( ( Min( ACS ,MRS ) + ( FirstVNF_Mem * FirstVNF_RAM_Server ) ) ,( ( CRS * RRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - MUR ) ) / ( ( RRSe / MUC ) / Max( RMSe,MUR ) ) )", "obj1": 0.45528455284552843, "obj2": 0.3822475193054084}, {"determining": "( Max( ( Min( MDR ,Const ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( ( DS - Min( MUM ,( MLU + MUC ) ) ) * DS ) ) ) / ( MLU / MUR ) )", "obj1": 0.7560975609756098, "obj2": 0.18503489636898152}, {"determining": "Min( ( ARS / FirstVNF_RAM ) ,( FirstVNF_CPU_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( ( DS + ( MUM - MUM ) ) + ( ( MLU * CS ) * ( RCSe - CS ) ) ) * ( DS * ( MUC / RMSe ) ) )", "obj1": 0.5508130081300813, "obj2": 0.32575996479152886}, {"determining": "( ( ( RRS + AMS ) + ( FirstVNF_Mem_Server + MRS ) ) * ( ( FirstVNF_CPU + MDR ) - Min( Max( ( ( MDR - MRS ) - ( MRS / Const ) ),( ( FirstVNF_Mem - BR ) * ( FirstVNF_RAM_Server + FirstVNF_CPU ) ) ) ,FirstVNF_CPU ) ) )", "choosing": "( ( RCSe - MLU ) - Min( MUM ,Min( MUR ,CS ) ) )", "obj1": 0.24796747967479674, "obj2": 0.6074631267845835}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUR ) ) )", "obj1": 0.42073170731707316, "obj2": 0.40311266357622577}, {"determining": "( ( MRS / Const ) + ( FirstVNF_CPU_Server * AMS ) )", "choosing": "( ( ( Max( MLU,RMSe ) / RMSe ) + MLU ) - Max( CS,( DS * ( MUC / RMSe ) ) ) )", "obj1": 0.2967479674796748, "obj2": 0.5263120001768623}, {"determining": "( ( DDR * PN ) - ( MRS / FirstVNF_RAM ) )", "choosing": "Min( Min( DS ,RRSe ) ,( ( MUM + MUR ) * Max( DS,DS ) ) )", "obj1": 0.6036585365853658, "obj2": 0.2937963026625413}, {"determining": "( Min( ( AMS + PN ) ,( BR * MRS ) ) * ( ( DDR * PN ) + ( AMS * MRS ) ) )", "choosing": "( Min( MLU ,( RRSe - DS ) ) * Max( ( RCSe * MUM ),( ( MUC + RMSe ) - RCSe ) ) )", "obj1": 0.28252032520325204, "obj2": 0.5992371662850337}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( MDR * MDR ) ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( Max( ( DS * Min( CS ,MUM ) ),RCSe ) / ( Min( ( MUR * CS ) ,MUC ) + RMSe ) )", "obj1": 0.3699186991869919, "obj2": 0.4561319098030396}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( FirstVNF_CPU_Server - CRS ) ) )", "choosing": "( Max( CS,RMSe ) - ( ( MLU - RCSe ) + MUR ) )", "obj1": 0.21951219512195122, "obj2": 0.6833066096926897}, {"determining": "Max( Min( MDR ,BR ),( BR * ( ( Const + CRS ) / DDR ) ) )", "choosing": "( ( Max( Min( MLU ,CS ),MUM ) / ( DS * MUM ) ) + ( RCSe * DS ) )", "obj1": 0.19715447154471544, "obj2": 0.7005302150186707}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( MRS - CRS ) ) )", "choosing": "Min( ( MLU - RCSe ) ,( Min( DS ,RRSe ) / ( RMSe - DS ) ) )", "obj1": 0.9715447154471545, "obj2": 0.00676693498979753}, {"determining": "Max( Max( FirstVNF_RAM_Server,( FirstVNF_RAM + MRS ) ),( BR + ( DDR * PN ) ) )", "choosing": "( ( ( MUC + RMSe ) * ( MUC - MLU ) ) / ( Max( MUC,MUC ) / ( RRSe - DS ) ) )", "obj1": 0.22560975609756098, "obj2": 0.6468310315275366}, {"determining": "( Max( ( Min( MDR ,Max( Min( DDR ,CRS ),( FirstVNF_CPU - MRS ) ) ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Const ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( DS * MUM ) ) ) / ( MLU / MUR ) )", "obj1": 0.9532520325203252, "obj2": 0.02751568818013763}, {"determining": "Min( Min( FirstVNF_Mem_Server ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.3150406504065041, "obj2": 0.5047733037047423}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( Max( Max( Min( ACS ,MDR ),Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) ),Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * ( Min( ( FirstVNF_RAM - FirstVNF_RAM_Server ) ,( Const / FirstVNF_RAM ) ) * ( ( Const / AMS ) / ( FirstVNF_RAM / FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( DS - Min( MUM ,( MLU + MUC ) ) ) * ( ( RMSe * ( RMSe - RCSe ) ) + Max( ( ( Min( RRSe ,Min( RRSe ,( DS * DS ) ) ) / ( MLU / MUR ) ) * MLU ),CS ) ) )", "obj1": 0.9227642276422764, "obj2": 0.05392226286263176}, {"determining": "( Min( PN ,AMS ) / ( ( Const - BR ) * ( ( RRS - Max( FirstVNF_Mem,Const ) ) * MDR ) ) )", "choosing": "( Max( Max( ( Max( MUR,MUC ) + MUC ),MUM ),RRSe ) + ( CS / RMSe ) )", "obj1": 0.4532520325203252, "obj2": 0.39950628289886053}, {"determining": "( ( Min( ( MRS - PN ) ,( ARS / DDR ) ) * Min( ( FirstVNF_RAM + PN ) ,Min( PN ,DDR ) ) ) * ( Min( Min( DDR ,Const ) ,( DDR * FirstVNF_CPU ) ) / ( ( BR / ARS ) - ( CRS - MRS ) ) ) )", "choosing": "Max( ( RRSe / RCSe ),( CS + Max( RRSe,( MUC * MUC ) ) ) )", "obj1": 0.8475609756097561, "obj2": 0.1678938875523856}, {"determining": "( Min( Min( Min( FirstVNF_RAM ,MRS ) ,( MDR * PN ) ) ,Max( ( FirstVNF_Mem * CRS ),( DDR - ARS ) ) ) + ( ( Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) + ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) / Max( Min( FirstVNF_CPU_Server ,Const ),( CRS / FirstVNF_CPU_Server ) ) ) )", "choosing": "Min( ( Min( MUR ,RRSe ) - RMSe ) ,( RRSe - ( ( DS * MUM ) / RRSe ) ) )", "obj1": 0.2886178861788618, "obj2": 0.5669810776158694}, {"determining": "Max( ( ( CRS + MRS ) * ( FirstVNF_Mem - MRS ) ),( ( FirstVNF_RAM - BR ) / ( MRS + DDR ) ) )", "choosing": "( ( ( MUM * MLU ) / Min( RRSe ,RRSe ) ) * ( ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) * ( RMSe * DS ) ) )", "obj1": 0.5833333333333334, "obj2": 0.31278247272127147}, {"determining": "( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3475609756097561, "obj2": 0.47111783071412416}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - ( Const * ARS ) )", "choosing": "( ( ( DS / MUC ) - ( RMSe * CS ) ) * ( MUR + RMSe ) )", "obj1": 0.3313008130081301, "obj2": 0.49496454010961827}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( Min( ( RRS * FirstVNF_RAM_Server ) ,( ACS * RRS ) ) / ( Min( FirstVNF_Mem_Server ,PN ) * ( MDR - FirstVNF_RAM_Server ) ) )", "choosing": "( ( DS / ( MUM / DS ) ) + ( DS * MUM ) )", "obj1": 0.5813008130081301, "obj2": 0.3209056580175497}, {"determining": "( Min( Min( Min( FirstVNF_RAM ,MRS ) ,( MDR * PN ) ) ,Max( ( FirstVNF_Mem * CRS ),( DDR - ARS ) ) ) + ( ( Min( FirstVNF_RAM_Server ,FirstVNF_CPU ) + ( FirstVNF_RAM_Server * FirstVNF_RAM ) ) / Max( Min( FirstVNF_CPU_Server ,Const ),( CRS / FirstVNF_CPU_Server ) ) ) )", "choosing": "Min( ( Min( MUR ,RRSe ) - RMSe ) ,( RRSe - ( ( DS * MUM ) / RRSe ) ) )", "obj1": 0.2886178861788618, "obj2": 0.5669810776158694}, {"determining": "( Max( MRS,FirstVNF_Mem_Server ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( MUM + MUC ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "Min( Max( AMS,DDR ) ,( PN - ( FirstVNF_CPU_Server * Max( Const,RRS ) ) ) )", "choosing": "( ( CS / Min( ( MLU / MLU ) ,RMSe ) ) - ( MUR / MUM ) )", "obj1": 0.9410569105691057, "obj2": 0.03597958309915515}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( MDR * MDR ) ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) ) )", "choosing": "( Max( ( DS * Min( CS ,( RRSe / MUM ) ) ),RCSe ) / ( Min( ( MUR * CS ) ,MUC ) + RMSe ) )", "obj1": 0.3556910569105691, "obj2": 0.46975271987649586}, {"determining": "( Max( Max( Min( ACS ,MDR ),( AMS * RRS ) ),Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * ( Min( ( FirstVNF_RAM - FirstVNF_RAM_Server ) ,( Const / FirstVNF_RAM ) ) * ( ( Const / AMS ) / ( FirstVNF_RAM / FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Max( Max( MUM,MLU ),( DS - RCSe ) ) ,( ( RMSe + MUR ) * ( DS + DS ) ) ) + Min( Min( ( MLU + CS ) ,( RMSe - MLU ) ) ,( Min( MUM ,RRSe ) * ( MUR + RMSe ) ) ) )", "obj1": 0.9390243902439024, "obj2": 0.05072828607071186}, {"determining": "Max( Max( FirstVNF_RAM_Server,( FirstVNF_RAM + MRS ) ),( BR + ( DDR * PN ) ) )", "choosing": "( ( ( MUC + RMSe ) * ( MUC - MLU ) ) / ( Max( MUC,MUC ) / ( RRSe - DS ) ) )", "obj1": 0.22154471544715448, "obj2": 0.6590220588159006}, {"determining": "( ( PN / MRS ) - ( FirstVNF_CPU_Server * ( ( ARS * RRS ) + ( MRS * ( RRS * ARS ) ) ) ) )", "choosing": "( Min( Max( ( MLU * ( MLU + Min( Max( RCSe,( MLU - MUR ) ) ,RRSe ) ) ),( DS / CS ) ) ,DS ) / ( MUM + ( MUR + MUC ) ) )", "obj1": 0.23577235772357724, "obj2": 0.6559029418565396}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( ( ( DDR + ARS ) * Min( CRS ,CRS ) ) / ( ( FirstVNF_RAM - RRS ) / ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,DS ) )", "obj1": 0.9959349593495935, "obj2": 0.00265102406304421}, {"determining": "( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "( Max( FirstVNF_CPU_Server,ACS ) - ( Const * ARS ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_Mem_Server ,AMS ) ) - ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) * FirstVNF_Mem ) )", "choosing": "Min( ( ( RRSe - CS ) * Max( MUR,MUC ) ) ,( ( RRSe * RRSe ) * Min( MLU ,( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) - ( Max( RRSe,MLU ) / MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS + MDR ) + ( BR - ARS ) ) / ( Min( ARS ,FirstVNF_CPU_Server ) / ( ARS * AMS ) ) )", "choosing": "( ( Min( DS ,MUC ) / ( CS - MUM ) ) + ( ( MLU - DS ) * Max( MUM,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( FirstVNF_RAM,FirstVNF_CPU_Server ) - Min( Const ,BR ) ) ,( ( Const - MDR ) - ( FirstVNF_RAM_Server + MRS ) ) )", "choosing": "Max( ( MUC * Max( MUR,MLU ) ),( ( RMSe + RMSe ) - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_Mem + RRS ) * ( FirstVNF_CPU + FirstVNF_RAM_Server ) ) ,( ( RRS * ARS ) - Max( FirstVNF_RAM_Server,CRS ) ) )", "choosing": "( Min( Min( MUC ,RMSe ) ,( MUC / DS ) ) + ( ( MUC * MUC ) + Max( MUC,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( Const ,ACS ) - Min( AMS ,RRS ) ) - Max( Max( FirstVNF_Mem,FirstVNF_RAM_Server ),Min( FirstVNF_CPU ,FirstVNF_Mem ) ) )", "choosing": "Max( Min( ( MLU * RRSe ) ,DS ),( Max( MLU,RRSe ) + ( MLU * RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server * MDR ) - ( FirstVNF_Mem_Server / Const ) ) - ( Min( PN ,PN ) + ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) ) )", "choosing": "( ( MLU - ( MUR - MUC ) ) * ( MUM - ( MUC - DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_RAM ) - ( ( FirstVNF_Mem + RRS ) - Min( FirstVNF_Mem_Server ,MRS ) ) )", "choosing": "Min( Min( ( DS + RCSe ) ,( RMSe + MUC ) ) ,( ( MUR * RMSe ) - Min( RMSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( RRS - AMS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( ( RCSe * MUM ) * Min( RMSe ,MUM ) ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / CRS ) / ( MDR - ACS ) )", "choosing": "Max( Min( RCSe ,( ( DS + RRSe ) + ( RMSe - MLU ) ) ),Min( CS ,( Max( DS,MUM ) / ( MLU * RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( Const - AMS ),Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) * ( ( PN * RRS ) / ( FirstVNF_CPU_Server - PN ) ) ) + Min( ( ( Const / FirstVNF_Mem ) - ( MDR / PN ) ) ,( ( MRS / FirstVNF_RAM_Server ) - Min( AMS ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( RMSe / RMSe ) / CS ) + ( ( MUR + Max( DS,MUR ) ) + Max( ( CS * RCSe ),( RMSe / RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ( DDR * Const ) ,( CRS + FirstVNF_CPU ) ) ,Max( Min( DDR ,CRS ),( FirstVNF_CPU - MRS ) ) ) - ( ( Max( FirstVNF_CPU_Server,FirstVNF_RAM ) * Max( DDR,FirstVNF_Mem_Server ) ) / Min( Min( BR ,MRS ) ,( FirstVNF_RAM / FirstVNF_Mem ) ) ) )", "choosing": "( ( Min( Max( MUR,MUC ) ,( DS + MUC ) ) + ( ( MUM - RMSe ) + Max( DS,MUC ) ) ) + ( ( ( MLU / RRSe ) / ( RRSe * MUC ) ) / ( ( DS - CS ) * ( DS * MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,( Min( FirstVNF_Mem ,DDR ) * Min( FirstVNF_Mem ,DDR ) ) ) - Max( Min( ( FirstVNF_CPU_Server * MDR ) ,MDR ),MRS ) )", "choosing": "( Min( MLU ,MUC ) * Max( RMSe,( RMSe * DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( ARS + AMS ),( FirstVNF_RAM - MDR ) ) * Max( ( CRS + FirstVNF_Mem ),Max( CRS,MDR ) ) ) * ( Max( FirstVNF_CPU_Server,Const ) / DDR ) )", "choosing": "Min( ( ( Max( MUM,RCSe ) * ( CS + MUM ) ) + ( ( MUM * MLU ) / ( MUR - RRSe ) ) ) ,Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_RAM / FirstVNF_RAM ) / ( CRS * FirstVNF_Mem_Server ) ) - ( ( MRS - FirstVNF_CPU ) + ( FirstVNF_RAM + Const ) ) ) * ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - Min( ( BR + ACS ) ,( FirstVNF_Mem + CRS ) ) ) )", "choosing": "( Min( ( MLU * ( MUM + Min( MUC ,( MLU / MLU ) ) ) ) ,MUC ) + Min( ( ( CS + RRSe ) + ( MUC - RCSe ) ) ,( Min( MLU ,RRSe ) - ( MUM - MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( RRS ,( CRS * FirstVNF_Mem_Server ) ) * ACS ) + ( Min( ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ,AMS ) - AMS ) )", "choosing": "( ( RMSe / ( ( MLU / CS ) / ( RCSe - RCSe ) ) ) * Max( ( ( DS / MUC ) / RRSe ),Max( MLU,Min( MUM ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / Const ) - ( AMS + ARS ) )", "choosing": "( ( ( DS + ( MUM - MUM ) ) + ( ( MLU * CS ) * ( RCSe - CS ) ) ) * ( DS * ( MUC / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem_Server * BR ) ) / ( ( ( ARS * ( Const / ( Min( MDR ,MDR ) + BR ) ) ) + Min( RRS ,( FirstVNF_CPU + FirstVNF_RAM ) ) ) * ( MRS + ( ( MRS * DDR ) + BR ) ) ) )", "choosing": "( Min( Max( RMSe,( DS + ( MUM / Max( Min( ( MUC - MUC ) ,MUC ),( MLU - MLU ) ) ) ) ) ,RRSe ) - Max( MUC,( MUR * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - Max( BR,Const ) ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( RMSe + ( MUM - DS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU_Server ) / Min( ( MRS + FirstVNF_RAM_Server ) ,Min( ARS ,( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) * FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( MLU - RMSe ) / Max( MUR,RCSe ) ) + ( MLU + CS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ACS,Min( DDR ,( CRS + ARS ) ) ) / ( MDR - FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe - ( MLU * ( ( MUM * ( RRSe - MUC ) ) + RRSe ) ) ) - CS ) / RCSe ) / ( DS - RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe - MLU ) / ( ( ( RCSe / Min( Max( Min( MLU ,RMSe ),CS ) ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) - MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( MUM,Min( MLU ,CS ) ) / ( DS * MUM ) ) + ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe - MLU ) / ( ( ( RCSe / Min( Max( Min( MLU ,RMSe ),CS ) ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) - MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe - MLU ) / ( ( ( RCSe / Min( Max( Min( MLU ,RMSe ),CS ) ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) - MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( BR * ( ( Const + ( FirstVNF_RAM / CRS ) ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * DS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( AMS + ( ( FirstVNF_CPU_Server - Max( MRS,MDR ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MLU - RCSe ) / ( ( Min( ( RMSe - RRSe ) ,( MUC / ( MUM / MUR ) ) ) + MUR ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( BR * ( ( Const + FirstVNF_Mem ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( Max( Min( MLU ,CS ),MUM ) / ( DS * MUM ) ) - ( RCSe - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( BR * ( ( Max( DDR,DDR ) + CRS ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( ( ( RCSe * MLU ) * MUM ) / Max( Min( MLU ,CS ),MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( MDR / FirstVNF_Mem_Server ) ,( ( ARS + FirstVNF_CPU_Server ) + ( ( Min( FirstVNF_RAM ,DDR ) - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) )", "choosing": "( Max( ( RCSe * ( MUC + Max( ( ( MUC + RMSe ) / ( Max( RRSe,RRSe ) / CS ) ),MUM ) ) ),Min( MLU ,RCSe ) ) / ( MUR / ( MUR + ( RCSe * MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( MRS + ( ( FirstVNF_CPU_Server - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( Max( RRSe,RCSe ) + ( RCSe * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * PN ) - ( AMS / FirstVNF_RAM ) )", "choosing": "( Min( RRSe ,RCSe ) - ( RMSe - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * PN ) - ( AMS / FirstVNF_RAM ) )", "choosing": "Min( Min( DS ,RRSe ) ,Max( RMSe,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( DDR * CRS ) * PN ) - ( AMS / FirstVNF_RAM ) )", "choosing": "Min( MUC ,Max( RMSe,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * PN ) - ( AMS / FirstVNF_RAM ) )", "choosing": "Max( ( MLU - MUM ),( MUC + MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * FirstVNF_CPU ) )", "choosing": "Min( ( RMSe + MUR ) ,( CS / RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( Const - RRS ) / Min( DDR ,RRS ) ) ) )", "choosing": "( ( ( CS / RRSe ) - MUR ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * FirstVNF_CPU ) )", "choosing": "Min( ( RMSe + MUR ) ,( CS / RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_RAM * ARS ) / ( MRS - FirstVNF_CPU_Server ) )", "choosing": "( ( MUC / ( MLU / CS ) ) / Max( DS,MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * FirstVNF_CPU ) )", "choosing": "( ( MUM - MUR ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU_Server - Min( AMS ,FirstVNF_Mem_Server ) ) - ( BR * FirstVNF_Mem ) )", "choosing": "Min( Min( ( ( MUR - RRSe ) / Max( CS,CS ) ) ,( ( CS / DS ) - ( MUR - RCSe ) ) ) ,( ( RRSe * RRSe ) * Min( MLU ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( AMS ,FirstVNF_Mem_Server ) ) - ( BR * FirstVNF_Mem ) )", "choosing": "Min( ( ( MUR - RRSe ) / Max( CS,CS ) ) ,( ( CS / DS ) - ( MUR - RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( AMS ,FirstVNF_Mem_Server ) ) - ( ARS * FirstVNF_Mem ) )", "choosing": "Min( ( MUC + CS ) ,( ( RRSe * RRSe ) * Min( MLU ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( AMS ,FirstVNF_Mem_Server ) ) - ( BR * FirstVNF_Mem ) )", "choosing": "( ( Max( RCSe,MUR ) * Max( CS,RCSe ) ) + Min( DS ,( MUC + CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( DS / ( MUM / DS ) ) + ( DS * MUM ) )", "obj1": 1.0, "obj2": 0.0}], "3": [{"determining": "Max( ( ( MDR - BR ) - ( MRS / Const ) ),( FirstVNF_RAM - DDR ) )", "choosing": "( ( ( MUR / MUR ) / DS ) * Min( ( RCSe / DS ) ,Max( MLU,MUR ) ) )", "obj1": 0.08739837398373984, "obj2": 0.7533200353810915}, {"determining": "Min( ( ( ARS + FirstVNF_CPU_Server ) + ( ( Max( FirstVNF_RAM,Min( MDR ,MRS ) ) - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( Max( ( RCSe * ( MUC + Max( ( ( MUC + RMSe ) / MUM ),MUM ) ) ),Min( MLU ,RCSe ) ) / ( ( MUR + ( RCSe * DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( MDR - BR ) - ( MRS / Const ) ),( FirstVNF_RAM - DDR ) )", "choosing": "( ( ( MUR / MUR ) / DS ) * Min( ( RCSe / DS ) ,Max( MLU,MUR ) ) )", "obj1": 0.08739837398373984, "obj2": 0.7533200353810915}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( BR * ACS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( MUC + MLU ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 0.8882113821138211, "obj2": 0.06118925803540918}, {"determining": "( ( Min( ( MRS - PN ) ,( ARS / DDR ) ) * Min( ( FirstVNF_RAM + PN ) ,Min( PN ,DDR ) ) ) * ( Min( Min( DDR ,Const ) ,( DDR * FirstVNF_CPU ) ) / ( ( BR / ARS ) - ( CRS - MRS ) ) ) )", "choosing": "Max( ( RRSe / RCSe ),( CS + Max( RRSe,( MUC * MUC ) ) ) )", "obj1": 0.8475609756097561, "obj2": 0.1678938875523856}, {"determining": "( Min( ( FirstVNF_RAM + Const ) ,Min( Const ,FirstVNF_RAM ) ) / ( AMS * FirstVNF_Mem ) )", "choosing": "( ( MUM / MLU ) / Max( DS,MUM ) )", "obj1": 0.16869918699186992, "obj2": 0.7026482832994229}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / FirstVNF_Mem_Server )", "choosing": "( ( ( MLU + RRSe ) / Min( DS ,( MUC + CS ) ) ) + ( MUM * MUR ) )", "obj1": 0.0975609756097561, "obj2": 0.748144497716822}, {"determining": "( ACS - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Const ) * Max( ARS,ACS ) ) ) )", "choosing": "( DS / ( MLU / MUR ) )", "obj1": 0.7113821138211383, "obj2": 0.22535551780250446}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( Max( ( Min( MDR ,Const ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( ( DS - Min( MUM ,( MLU + MUC ) ) ) * DS ) ) ) / ( MLU / MUR ) )", "obj1": 0.7560975609756098, "obj2": 0.18503489636898152}, {"determining": "Min( ( ARS / FirstVNF_RAM ) ,( FirstVNF_CPU_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( ( DS + ( MUM - MUM ) ) + ( ( MLU * CS ) * ( RCSe - CS ) ) ) * ( DS * ( MUC / RMSe ) ) )", "obj1": 0.5508130081300813, "obj2": 0.32575996479152886}, {"determining": "( ( DDR * PN ) - ( MRS / FirstVNF_RAM ) )", "choosing": "Min( Min( DS ,RRSe ) ,( ( MUM + MUR ) * Max( DS,DS ) ) )", "obj1": 0.6036585365853658, "obj2": 0.2937963026625413}, {"determining": "( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( CS + DS ) + ( MUR + MUR ) ) )", "obj1": 0.23983739837398374, "obj2": 0.5733773238393233}, {"determining": "Min( ( Min( ACS ,MRS ) + ( ( ( FirstVNF_CPU - ( AMS / MRS ) ) * ( MRS - FirstVNF_Mem ) ) + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( DS * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.45934959349593496, "obj2": 0.3692322683207316}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( MDR * MDR ) ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( Max( ( DS * Min( CS ,MUM ) ),RCSe ) / ( Min( ( MUR * CS ) ,MUC ) + RMSe ) )", "obj1": 0.3699186991869919, "obj2": 0.4561319098030396}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "( CRS / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( Max( Min( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.21544715447154472, "obj2": 0.6912479397984368}, {"determining": "( Min( ( Const - MDR ) ,AMS ) / Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + RRSe )", "obj1": 0.6422764227642277, "obj2": 0.25160503069642387}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem_Server * BR ) ) / ( ( ( ARS * ( Const / ( Min( MDR ,MDR ) + BR ) ) ) + Min( RRS ,( FirstVNF_CPU + FirstVNF_RAM ) ) ) * ( MRS + ( ( MRS * DDR ) + BR ) ) ) )", "choosing": "( Min( Max( RMSe,( DS + ( MUM / Max( Min( ( MUC - MUC ) ,MUC ),( MLU - MLU ) ) ) ) ) ,RRSe ) - Max( MUC,( MUR * MUM ) ) )", "obj1": 0.23373983739837398, "obj2": 0.624976758301204}, {"determining": "( MDR / ( AMS * RRS ) )", "choosing": "( ( ( MUM - CS ) / Max( MLU,DS ) ) - ( RCSe + MUM ) )", "obj1": 0.25, "obj2": 0.5617411357852269}, {"determining": "( Max( ( Min( MDR ,Max( Min( DDR ,CRS ),( FirstVNF_CPU - MRS ) ) ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Const ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( DS * MUM ) ) ) / ( MLU / MUR ) )", "obj1": 0.9532520325203252, "obj2": 0.02751568818013763}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( BR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( MUC / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.40853658536585363, "obj2": 0.4201719346855681}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "Max( ( DS / MUR ),( DS - RMSe ) )", "obj1": 0.6666666666666666, "obj2": 0.22561717704084397}, {"determining": "( Max( ACS,( ( Const - CRS ) * ( CRS * FirstVNF_Mem_Server ) ) ) / ( DDR * ACS ) )", "choosing": "( ( MUM - ( RCSe + ( Max( ( RCSe - DS ),CS ) + ( ( Max( MUC,RRSe ) * DS ) * ( ( RMSe - RRSe ) + RRSe ) ) ) ) ) + ( Min( CS ,RCSe ) - ( RCSe + MUM ) ) )", "obj1": 0.21747967479674796, "obj2": 0.6557500270347877}, {"determining": "Max( Min( MDR ,BR ),( BR * ( ( Const + CRS ) / DDR ) ) )", "choosing": "( ( Max( Min( MLU ,CS ),MUM ) / ( DS * MUM ) ) + ( RCSe * DS ) )", "obj1": 0.19715447154471544, "obj2": 0.7005302150186707}, {"determining": "( ( Min( ( MRS - PN ) ,( ARS / DDR ) ) * Min( ( FirstVNF_RAM + PN ) ,Min( PN ,DDR ) ) ) * ( Min( Min( DDR ,Const ) ,( DDR * FirstVNF_CPU ) ) / ( ( BR / ARS ) - ( CRS - MRS ) ) ) )", "choosing": "Max( ( RRSe / RCSe ),( CS + Max( RRSe,( MUC * MUC ) ) ) )", "obj1": 0.8475609756097561, "obj2": 0.1678938875523856}, {"determining": "( Max( DDR,DDR ) * ( FirstVNF_Mem / BR ) )", "choosing": "( ( CS - ( CS - RCSe ) ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2682926829268293, "obj2": 0.5412706465811193}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( MRS - CRS ) ) )", "choosing": "Min( ( MLU - RCSe ) ,( Min( DS ,RRSe ) / ( RMSe - DS ) ) )", "obj1": 0.9715447154471545, "obj2": 0.00676693498979753}, {"determining": "( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * ( ( Const - MDR ) * ( AMS * AMS ) ) ) )", "choosing": "Max( ( DS / ( MUR + MUR ) ),( DS - RMSe ) )", "obj1": 0.6565040650406504, "obj2": 0.23290800040788195}, {"determining": "Max( ( ( CRS + MRS ) * ( FirstVNF_Mem - MRS ) ),( ( FirstVNF_RAM - BR ) / ( MRS + DDR ) ) )", "choosing": "( ( ( MUM * MLU ) / Min( RRSe ,RRSe ) ) * ( ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) * ( RMSe * DS ) ) )", "obj1": 0.5833333333333334, "obj2": 0.31278247272127147}, {"determining": "Max( Max( FirstVNF_RAM_Server,( FirstVNF_RAM + MRS ) ),( BR + ( DDR * PN ) ) )", "choosing": "( ( ( MUC + RMSe ) * ( MUC - MLU ) ) / ( Max( MUC,MUC ) / ( RRSe - DS ) ) )", "obj1": 0.22560975609756098, "obj2": 0.6468310315275366}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUR ) ) )", "obj1": 0.42073170731707316, "obj2": 0.40311266357622577}, {"determining": "( Max( Max( Min( ACS ,MDR ),Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) ),Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * ( Min( ( FirstVNF_RAM - FirstVNF_RAM_Server ) ,( Const / FirstVNF_RAM ) ) * ( ( Const / AMS ) / ( FirstVNF_RAM / FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( DS - Min( MUM ,( MLU + MUC ) ) ) * ( ( RMSe * ( RMSe - RCSe ) ) + Max( ( ( Min( RRSe ,Min( RRSe ,( DS * DS ) ) ) / ( MLU / MUR ) ) * MLU ),CS ) ) )", "obj1": 0.9227642276422764, "obj2": 0.05392226286263176}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( ( MRS / Const ) + ( FirstVNF_CPU_Server * AMS ) )", "choosing": "( ( ( Max( MLU,RMSe ) / RMSe ) + MLU ) - Max( CS,( DS * ( MUC / RMSe ) ) ) )", "obj1": 0.2967479674796748, "obj2": 0.5263120001768623}, {"determining": "( Min( ( RRS * FirstVNF_RAM_Server ) ,( ACS * RRS ) ) / ( Min( FirstVNF_Mem_Server ,PN ) * ( MDR - FirstVNF_RAM_Server ) ) )", "choosing": "( ( DS / ( MUM / DS ) ) + ( DS * MUM ) )", "obj1": 0.5813008130081301, "obj2": 0.3209056580175497}, {"determining": "Min( Min( FirstVNF_Mem_Server ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.3150406504065041, "obj2": 0.5047733037047423}, {"determining": "( DDR * ( FirstVNF_Mem / BR ) )", "choosing": "( ( ( RRSe + RRSe ) - RCSe ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2804878048780488, "obj2": 0.5388813445166549}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( Const * FirstVNF_CPU ) ) ,( FirstVNF_RAM + FirstVNF_Mem ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / ( Min( Max( Max( MUR,RRSe ),MUR ) ,MLU ) + Min( DS ,DS ) ) ) ) - ( RCSe * MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( Const + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * ( ( MUR * RCSe ) * ( RCSe * RMSe ) ) ) ,MUC ) ) )", "obj1": 0.3048780487804878, "obj2": 0.5188683231127035}, {"determining": "Min( ( Min( ACS ,MRS ) + ( FirstVNF_Mem * FirstVNF_RAM_Server ) ) ,( ( CRS * RRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - MUR ) ) / ( ( RRSe / MUC ) / Max( RMSe,MUR ) ) )", "obj1": 0.45528455284552843, "obj2": 0.3822475193054084}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( MDR * MDR ) ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) ) )", "choosing": "( Max( ( DS * Min( CS ,( RRSe / MUM ) ) ),RCSe ) / ( Min( ( MUR * CS ) ,MUC ) + RMSe ) )", "obj1": 0.3556910569105691, "obj2": 0.46975271987649586}, {"determining": "Max( ( ( FirstVNF_CPU - ( AMS / MRS ) ) * ( MRS - FirstVNF_Mem ) ),( ( FirstVNF_RAM - BR ) / ( PN + DDR ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.45121951219512196, "obj2": 0.3968625801983483}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * ( ( ( FirstVNF_CPU_Server - ARS ) / FirstVNF_CPU ) + CRS ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( RMSe - ( DS / Min( RRSe ,RMSe ) ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "Min( Max( AMS,DDR ) ,( PN - ( FirstVNF_CPU_Server * Max( Const,RRS ) ) ) )", "choosing": "( ( CS / Min( ( MLU / MLU ) ,RMSe ) ) - ( MUR / MUM ) )", "obj1": 0.9410569105691057, "obj2": 0.03597958309915515}, {"determining": "( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3475609756097561, "obj2": 0.47111783071412416}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( MUR + MUR ) ) )", "obj1": 0.23373983739837398, "obj2": 0.624976758301204}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "Min( ( FirstVNF_RAM - ARS ) ,( DDR * ACS ) )", "choosing": "( ( DS / MUR ) + ( RMSe / CS ) )", "obj1": 0.9369918699186992, "obj2": 0.044109705306474144}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( ( PN / FirstVNF_CPU ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( DS / MUR ) + DS ) * ( MUR + RMSe ) )", "obj1": 0.983739837398374, "obj2": 0.00595077585044013}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - ( Const * ARS ) )", "choosing": "( ( ( DS / MUC ) - ( RMSe * CS ) ) * ( MUR + RMSe ) )", "obj1": 0.3313008130081301, "obj2": 0.49496454010961827}, {"determining": "( ( ( ACS * ARS ) - Max( FirstVNF_CPU_Server,ACS ) ) - ( ( ( MRS * CRS ) * MRS ) - Min( PN ,PN ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( Min( MLU ,MUC ) + MUC ) / Min( ( ( MUC - MUM ) + DS ) ,MUC ) ) - ( Max( MUC,MLU ) / CS ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.9308943089430894, "obj2": 0.053243538261797015}, {"determining": "( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( ( ( DDR + ARS ) * Min( CRS ,CRS ) ) / ( ( FirstVNF_RAM - RRS ) / ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,DS ) )", "obj1": 0.9959349593495935, "obj2": 0.00265102406304421}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "( Max( FirstVNF_CPU_Server,ACS ) - ( Const * ARS ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_Mem_Server ,AMS ) ) - ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) * FirstVNF_Mem ) )", "choosing": "Min( ( ( RRSe - CS ) * Max( MUR,MUC ) ) ,( ( RRSe * RRSe ) * Min( MLU ,( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) - ( Max( RRSe,MLU ) / MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS + MDR ) + ( BR - ARS ) ) / ( Min( ARS ,FirstVNF_CPU_Server ) / ( ARS * AMS ) ) )", "choosing": "( ( Min( DS ,MUC ) / ( CS - MUM ) ) + ( ( MLU - DS ) * Max( MUM,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( FirstVNF_RAM,FirstVNF_CPU_Server ) - Min( Const ,BR ) ) ,( ( Const - MDR ) - ( FirstVNF_RAM_Server + MRS ) ) )", "choosing": "Max( ( MUC * Max( MUR,MLU ) ),( ( RMSe + RMSe ) - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_Mem + RRS ) * ( FirstVNF_CPU + FirstVNF_RAM_Server ) ) ,( ( RRS * ARS ) - Max( FirstVNF_RAM_Server,CRS ) ) )", "choosing": "( Min( Min( MUC ,RMSe ) ,( MUC / DS ) ) + ( ( MUC * MUC ) + Max( MUC,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( Const ,ACS ) - Min( AMS ,RRS ) ) - Max( Max( FirstVNF_Mem,FirstVNF_RAM_Server ),Min( FirstVNF_CPU ,FirstVNF_Mem ) ) )", "choosing": "Max( Min( ( MLU * RRSe ) ,DS ),( Max( MLU,RRSe ) + ( MLU * RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server * MDR ) - ( FirstVNF_Mem_Server / Const ) ) - ( Min( PN ,PN ) + ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) ) )", "choosing": "( ( MLU - ( MUR - MUC ) ) * ( MUM - ( MUC - DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_RAM ) - ( ( FirstVNF_Mem + RRS ) - Min( FirstVNF_Mem_Server ,MRS ) ) )", "choosing": "Min( Min( ( DS + RCSe ) ,( RMSe + MUC ) ) ,( ( MUR * RMSe ) - Min( RMSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( RRS - AMS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( ( RCSe * MUM ) * Min( RMSe ,MUM ) ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / CRS ) / ( MDR - ACS ) )", "choosing": "Max( Min( RCSe ,( ( DS + RRSe ) + ( RMSe - MLU ) ) ),Min( CS ,( Max( DS,MUM ) / ( MLU * RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( Const - AMS ),Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) * ( ( PN * RRS ) / ( FirstVNF_CPU_Server - PN ) ) ) + Min( ( ( Const / FirstVNF_Mem ) - ( MDR / PN ) ) ,( ( MRS / FirstVNF_RAM_Server ) - Min( AMS ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( RMSe / RMSe ) / CS ) + ( ( MUR + Max( DS,MUR ) ) + Max( ( CS * RCSe ),( RMSe / RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ( DDR * Const ) ,( CRS + FirstVNF_CPU ) ) ,Max( Min( DDR ,CRS ),( FirstVNF_CPU - MRS ) ) ) - ( ( Max( FirstVNF_CPU_Server,FirstVNF_RAM ) * Max( DDR,FirstVNF_Mem_Server ) ) / Min( Min( BR ,MRS ) ,( FirstVNF_RAM / FirstVNF_Mem ) ) ) )", "choosing": "( ( Min( Max( MUR,MUC ) ,( DS + MUC ) ) + ( ( MUM - RMSe ) + Max( DS,MUC ) ) ) + ( ( ( MLU / RRSe ) / ( RRSe * MUC ) ) / ( ( DS - CS ) * ( DS * MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,( Min( FirstVNF_Mem ,DDR ) * Min( FirstVNF_Mem ,DDR ) ) ) - Max( Min( ( FirstVNF_CPU_Server * MDR ) ,MDR ),MRS ) )", "choosing": "( Min( MLU ,MUC ) * Max( RMSe,( RMSe * DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( ARS + AMS ),( FirstVNF_RAM - MDR ) ) * Max( ( CRS + FirstVNF_Mem ),Max( CRS,MDR ) ) ) * ( Max( FirstVNF_CPU_Server,Const ) / DDR ) )", "choosing": "Min( ( ( Max( MUM,RCSe ) * ( CS + MUM ) ) + ( ( MUM * MLU ) / ( MUR - RRSe ) ) ) ,Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_RAM / FirstVNF_RAM ) / ( CRS * FirstVNF_Mem_Server ) ) - ( ( MRS - FirstVNF_CPU ) + ( FirstVNF_RAM + Const ) ) ) * ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - Min( ( BR + ACS ) ,( FirstVNF_Mem + CRS ) ) ) )", "choosing": "( Min( ( MLU * ( MUM + Min( MUC ,( MLU / MLU ) ) ) ) ,MUC ) + Min( ( ( CS + RRSe ) + ( MUC - RCSe ) ) ,( Min( MLU ,RRSe ) - ( MUM - MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( RRS ,( CRS * FirstVNF_Mem_Server ) ) * ACS ) + ( Min( ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ,AMS ) - AMS ) )", "choosing": "( ( RMSe / ( ( MLU / CS ) / ( RCSe - RCSe ) ) ) * Max( ( ( DS / MUC ) / RRSe ),Max( MLU,Min( MUM ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / Const ) - ( AMS + ARS ) )", "choosing": "( ( ( DS + ( MUM - MUM ) ) + ( ( MLU * CS ) * ( RCSe - CS ) ) ) * ( DS * ( MUC / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem_Server * BR ) ) / ( ( ( ARS * ( Const / ( Min( MDR ,MDR ) + BR ) ) ) + Min( RRS ,( FirstVNF_CPU + FirstVNF_RAM ) ) ) * ( MRS + ( ( MRS * DDR ) + BR ) ) ) )", "choosing": "( Min( Max( RMSe,( DS + ( MUM / Max( Min( ( MUC - MUC ) ,MUC ),( MLU - MLU ) ) ) ) ) ,RRSe ) - Max( MUC,( MUR * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - Max( BR,Const ) ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( RMSe + ( MUM - DS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU_Server ) / Min( ( MRS + FirstVNF_RAM_Server ) ,Min( ARS ,( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) * FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( MLU - RMSe ) / Max( MUR,RCSe ) ) + ( MLU + CS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ACS,Min( DDR ,( CRS + ARS ) ) ) / ( MDR - FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe - ( MLU * ( ( MUM * ( RRSe - MUC ) ) + RRSe ) ) ) - CS ) / RCSe ) / ( DS - RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe - MLU ) / ( ( ( RCSe / Min( Max( Min( MLU ,RMSe ),CS ) ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) - MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( MUM,Min( MLU ,CS ) ) / ( DS * MUM ) ) + ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe - MLU ) / ( ( ( RCSe / Min( Max( Min( MLU ,RMSe ),CS ) ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) - MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe - MLU ) / ( ( ( RCSe / Min( Max( Min( MLU ,RMSe ),CS ) ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) - MLU ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( BR * ( ( Const + ( FirstVNF_RAM / CRS ) ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * DS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( AMS + ( ( FirstVNF_CPU_Server - Max( MRS,MDR ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MLU - RCSe ) / ( ( Min( ( RMSe - RRSe ) ,( MUC / ( MUM / MUR ) ) ) + MUR ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( BR * ( ( Const + FirstVNF_Mem ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( Max( Min( MLU ,CS ),MUM ) / ( DS * MUM ) ) - ( RCSe - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( BR * ( ( Max( DDR,DDR ) + CRS ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( ( ( RCSe * MLU ) * MUM ) / Max( Min( MLU ,CS ),MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( MDR / FirstVNF_Mem_Server ) ,( ( ARS + FirstVNF_CPU_Server ) + ( ( Min( FirstVNF_RAM ,DDR ) - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) )", "choosing": "( Max( ( RCSe * ( MUC + Max( ( ( MUC + RMSe ) / ( Max( RRSe,RRSe ) / CS ) ),MUM ) ) ),Min( MLU ,RCSe ) ) / ( MUR / ( MUR + ( RCSe * MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( MRS + ( ( FirstVNF_CPU_Server - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( Max( RRSe,RCSe ) + ( RCSe * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * PN ) - ( AMS / FirstVNF_RAM ) )", "choosing": "( Min( RRSe ,RCSe ) - ( RMSe - MUM ) )", "obj1": 1.0, "obj2": 0.0}], "4": [{"determining": "Max( ( ( MDR - BR ) - ( MRS / Const ) ),( FirstVNF_RAM - DDR ) )", "choosing": "( ( ( MUR / MUR ) / DS ) * Min( ( RCSe / DS ) ,Max( MLU,MUR ) ) )", "obj1": 0.08739837398373984, "obj2": 0.7533200353810915}, {"determining": "( Min( PN ,AMS ) / ( ( Const - BR ) * ( ( RRS - Max( FirstVNF_Mem,Const ) ) * MDR ) ) )", "choosing": "( Max( Max( ( Max( MUR,MUC ) + MUC ),MUM ),RRSe ) + ( CS / RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ARS + FirstVNF_CPU_Server ) + ( ( Max( FirstVNF_RAM,Min( MDR ,MRS ) ) - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( Max( ( RCSe * ( MUC + Max( ( ( MUC + RMSe ) / MUM ),MUM ) ) ),Min( MLU ,RCSe ) ) / ( ( MUR + ( RCSe * DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( MDR - BR ) - ( MRS / Const ) ),( FirstVNF_RAM - DDR ) )", "choosing": "( ( ( MUR / MUR ) / DS ) * Min( ( RCSe / DS ) ,Max( MLU,MUR ) ) )", "obj1": 0.08739837398373984, "obj2": 0.7533200353810915}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( DS / MUC ) - ( CS * CS ) )", "obj1": 0.5121951219512195, "obj2": 0.2680251127676467}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - ( RMSe * Max( MLU,CS ) ) )", "obj1": 0.8556910569105691, "obj2": 0.13847349197709527}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( BR * ACS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( MUC + MLU ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 0.8882113821138211, "obj2": 0.06118925803540918}, {"determining": "( FirstVNF_RAM - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) ) ) - ( CS * CS ) )", "obj1": 0.6869918699186992, "obj2": 0.21217363293844288}, {"determining": "Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.13617886178861788, "obj2": 0.7402263339198285}, {"determining": "( Max( ( Min( MDR ,Const ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( ( DS - Min( MUM ,( MLU + MUC ) ) ) * DS ) ) ) / ( MLU / MUR ) )", "obj1": 0.7560975609756098, "obj2": 0.18503489636898152}, {"determining": "( ( Min( FirstVNF_RAM ,( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) ) ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ) )", "obj1": 0.22357723577235772, "obj2": 0.6031957492945325}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( ( ( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / Min( MLU ,( MUM / RCSe ) ) ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( MUR + MUR ) ) )", "obj1": 0.21138211382113822, "obj2": 0.6482703461140525}, {"determining": "( ( ( BR * ( ( Const + ( FirstVNF_RAM / CRS ) ) / Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) ) ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * Max( Min( MLU ,RMSe ),CS ) ) ) - ( CS - CS ) )", "obj1": 0.1910569105691057, "obj2": 0.6583607509562333}, {"determining": "( ( Max( FirstVNF_CPU_Server,ACS ) - ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) * ARS ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - RMSe )", "obj1": 0.8008130081300813, "obj2": 0.17806978896258718}, {"determining": "Min( ( Min( ACS ,MRS ) + ( ( ( FirstVNF_CPU - ( AMS / MRS ) ) * ( MRS - FirstVNF_Mem ) ) + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( DS * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.45934959349593496, "obj2": 0.3692322683207316}, {"determining": "( Min( ( FirstVNF_RAM + Const ) ,Min( Const ,FirstVNF_RAM ) ) / ( AMS * FirstVNF_Mem ) )", "choosing": "( ( MUM / MLU ) / Max( DS,MUM ) )", "obj1": 0.16869918699186992, "obj2": 0.7026482832994229}, {"determining": "( ( Min( ( MRS - PN ) ,( ARS / DDR ) ) * Min( ( FirstVNF_RAM + PN ) ,Min( PN ,DDR ) ) ) * ( Min( Min( DDR ,Const ) ,( DDR * FirstVNF_CPU ) ) / ( ( BR / ARS ) - ( CRS - MRS ) ) ) )", "choosing": "Max( ( RRSe / RCSe ),( CS + Max( RRSe,( MUC * MUC ) ) ) )", "obj1": 0.8475609756097561, "obj2": 0.1678938875523856}, {"determining": "( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( CS + DS ) + ( MUR + MUR ) ) )", "obj1": 0.23983739837398374, "obj2": 0.5733773238393233}, {"determining": "( ( MRS * ( Const - BR ) ) / ( AMS * RRS ) )", "choosing": "( Max( ( MUM * MUM ),MLU ) - ( ( Max( MLU,DS ) + ( Max( MLU,DS ) / RMSe ) ) + MUM ) )", "obj1": 0.17276422764227642, "obj2": 0.6979201598645773}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( MDR / ( AMS * RRS ) )", "choosing": "( ( ( MUM - CS ) / Max( MLU,DS ) ) - ( RCSe + MUM ) )", "obj1": 0.25, "obj2": 0.5617411357852269}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) )", "choosing": "( ( ( ( DS / MUC ) - ( CS * CS ) ) / MUC ) - ( CS * CS ) )", "obj1": 0.4065040650406504, "obj2": 0.4097983968534088}, {"determining": "( Max( DDR,DDR ) * ( FirstVNF_Mem / BR ) )", "choosing": "( ( CS - ( CS - RCSe ) ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2682926829268293, "obj2": 0.5412706465811193}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "Max( ( DS / MUR ),( DS - RMSe ) )", "obj1": 0.6666666666666666, "obj2": 0.22561717704084397}, {"determining": "( Min( ( Const - MDR ) ,AMS ) / Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + RRSe )", "obj1": 0.6422764227642277, "obj2": 0.25160503069642387}, {"determining": "( Max( Max( Min( ACS ,MDR ),Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) ),Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * ( Min( ( FirstVNF_RAM - FirstVNF_RAM_Server ) ,( Const / FirstVNF_RAM ) ) * ( ( Const / AMS ) / ( FirstVNF_RAM / FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( DS - Min( MUM ,( MLU + MUC ) ) ) * ( ( RMSe * ( RMSe - RCSe ) ) + Max( ( ( Min( RRSe ,Min( RRSe ,( DS * DS ) ) ) / ( MLU / MUR ) ) * MLU ),CS ) ) )", "obj1": 0.9227642276422764, "obj2": 0.05392226286263176}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( ( PN / ( RRS * PN ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) - ( CS * CS ) )", "obj1": 0.37398373983739835, "obj2": 0.4444295956615274}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( MDR * MDR ) ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( Max( ( DS * Min( CS ,MUM ) ),RCSe ) / ( Min( ( MUR * CS ) ,MUC ) + RMSe ) )", "obj1": 0.3699186991869919, "obj2": 0.4561319098030396}, {"determining": "( DDR * ( FirstVNF_Mem / BR ) )", "choosing": "( ( ( RRSe + RRSe ) - RCSe ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2804878048780488, "obj2": 0.5388813445166549}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( MRS - CRS ) ) )", "choosing": "Min( ( MLU - RCSe ) ,( Min( DS ,RRSe ) / ( RMSe - DS ) ) )", "obj1": 0.9715447154471545, "obj2": 0.00676693498979753}, {"determining": "( ( Max( FirstVNF_CPU_Server,ACS ) - ( PN / PN ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MUM - Min( RMSe ,RRSe ) ) ,MUC ) ) - ( MUR - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.9654471544715447, "obj2": 0.02747113706154409}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUR ) ) )", "obj1": 0.42073170731707316, "obj2": 0.40311266357622577}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( ( MRS / Const ) + ( FirstVNF_CPU_Server * AMS ) )", "choosing": "( ( ( Max( MLU,RMSe ) / RMSe ) + MLU ) - Max( CS,( DS * ( MUC / RMSe ) ) ) )", "obj1": 0.2967479674796748, "obj2": 0.5263120001768623}, {"determining": "( Const + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * ( ( MUR * RCSe ) * ( RCSe * RMSe ) ) ) ,MUC ) ) )", "obj1": 0.3048780487804878, "obj2": 0.5188683231127035}, {"determining": "( ( Const - MDR ) * PN )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + ( MUR + MUR ) )", "obj1": 0.6443089430894309, "obj2": 0.23759813304957517}, {"determining": "( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * ( ( Const - MDR ) * ( AMS * AMS ) ) ) )", "choosing": "Max( ( DS / ( MUR + MUR ) ),( DS - RMSe ) )", "obj1": 0.6565040650406504, "obj2": 0.23290800040788195}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "Min( Min( ( ( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( DS - ( CS * CS ) )", "obj1": 0.44715447154471544, "obj2": 0.3847803077870774}, {"determining": "Min( Min( FirstVNF_Mem_Server ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.3150406504065041, "obj2": 0.5047733037047423}, {"determining": "( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3475609756097561, "obj2": 0.47111783071412416}, {"determining": "Min( ( Min( ACS ,MRS ) + ( FirstVNF_Mem * FirstVNF_RAM_Server ) ) ,( ( CRS * RRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - MUR ) ) / ( ( RRSe / MUC ) / Max( RMSe,MUR ) ) )", "obj1": 0.45528455284552843, "obj2": 0.3822475193054084}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( PN / FirstVNF_CPU ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( DS / MUR ) + DS ) * ( MUR + RMSe ) )", "obj1": 0.983739837398374, "obj2": 0.00595077585044013}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( ( PN / ( RRS * FirstVNF_RAM ) ) ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( ( CS * CS ) - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.44308943089430897, "obj2": 0.3996053357036442}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - ( Const * ARS ) )", "choosing": "( ( ( DS / MUC ) - ( RMSe * CS ) ) * ( MUR + RMSe ) )", "obj1": 0.3313008130081301, "obj2": 0.49496454010961827}, {"determining": "( Min( PN ,AMS ) / ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.33739837398373984, "obj2": 0.48076472355274674}, {"determining": "Min( Max( AMS,DDR ) ,( PN - ( FirstVNF_CPU_Server * Max( Const,RRS ) ) ) )", "choosing": "( ( CS / Min( ( MLU / MLU ) ,RMSe ) ) - ( MUR / MUM ) )", "obj1": 0.9410569105691057, "obj2": 0.03597958309915515}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "Min( ( FirstVNF_RAM - ARS ) ,( DDR * ACS ) )", "choosing": "( ( DS / MUR ) + ( RMSe / CS ) )", "obj1": 0.9369918699186992, "obj2": 0.044109705306474144}, {"determining": "( Max( ( Min( MDR ,Max( Min( DDR ,CRS ),( FirstVNF_CPU - MRS ) ) ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Const ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( DS * MUM ) ) ) / ( MLU / MUR ) )", "obj1": 0.9532520325203252, "obj2": 0.02751568818013763}, {"determining": "( ( ( BR * ( ( AMS + ( ( FirstVNF_CPU_Server - Max( MRS,MDR ) ) / DDR ) ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * ( Min( ( RMSe - RRSe ) ,( MUC / ( MUM / MUR ) ) ) + MUR ) ) ) - ( CS - CS ) )", "obj1": 0.9451219512195121, "obj2": 0.029486855855221483}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( ( ( DDR + ARS ) * Min( CRS ,CRS ) ) / ( ( FirstVNF_RAM - RRS ) / ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,DS ) )", "obj1": 0.9959349593495935, "obj2": 0.00265102406304421}, {"determining": "( ( Min( ( MRS - PN ) ,( ARS / DDR ) ) * Min( ( FirstVNF_RAM + PN ) ,Min( PN ,DDR ) ) ) * ( Min( Min( DDR ,Const ) ,( DDR * FirstVNF_CPU ) ) / ( ( BR / ARS ) - ( CRS - MRS ) ) ) )", "choosing": "Max( ( RRSe / RCSe ),( CS + Max( RRSe,( MUC * MUC ) ) ) )", "obj1": 0.8475609756097561, "obj2": 0.1678938875523856}, {"determining": "( Min( PN ,AMS ) / ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * BR ) ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.31910569105691056, "obj2": 0.5035210217055186}, {"determining": "( ( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - ( ( BR + FirstVNF_Mem ) / PN ) ) - ( Max( Min( ARS ,PN ),ACS ) * Min( FirstVNF_Mem ,( CRS + CRS ) ) ) )", "choosing": "( ( RMSe / ( ( ( ( ( MUM + ( MUR * MUC ) ) + MLU ) / ( ( MLU * RCSe ) * MUC ) ) - ( MUR + Max( MLU,( ( RRSe - RCSe ) - RCSe ) ) ) ) + MLU ) ) - ( RMSe * CS ) )", "obj1": 0.3008130081300813, "obj2": 0.5241501062871604}, {"determining": "( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( DDR * ACS ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * ( ( ( FirstVNF_CPU_Server - ARS ) / FirstVNF_CPU ) + CRS ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( RMSe - ( DS / Min( RRSe ,RMSe ) ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MUM - Min( MUR ,RRSe ) ) ,MUC ) ) - ( MUR - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.9349593495934959, "obj2": 0.05063914487291435}, {"determining": "( ( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MUM - Min( MUR ,RMSe ) ) ,MUC ) ) - ( MUR - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.9308943089430894, "obj2": 0.0525442984678171}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "( Min( Max( FirstVNF_Mem,( ( FirstVNF_RAM / DDR ) * ( FirstVNF_Mem + ( Max( MRS,FirstVNF_RAM_Server ) / CRS ) ) ) ) ,FirstVNF_CPU ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( Min( RMSe ,( CS * ( DS - RMSe ) ) ) / MUC ) ) - ( RRSe - RCSe ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( Const * FirstVNF_CPU ) ) ,( FirstVNF_RAM + FirstVNF_Mem ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / ( Min( Max( Max( MUR,RRSe ),MUR ) ,MLU ) + Min( DS ,DS ) ) ) ) - ( RCSe * MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( Max( FirstVNF_CPU_Server,ACS ) - ( Const * ARS ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_Mem_Server ,AMS ) ) - ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) * FirstVNF_Mem ) )", "choosing": "Min( ( ( RRSe - CS ) * Max( MUR,MUC ) ) ,( ( RRSe * RRSe ) * Min( MLU ,( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) - ( Max( RRSe,MLU ) / MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS + MDR ) + ( BR - ARS ) ) / ( Min( ARS ,FirstVNF_CPU_Server ) / ( ARS * AMS ) ) )", "choosing": "( ( Min( DS ,MUC ) / ( CS - MUM ) ) + ( ( MLU - DS ) * Max( MUM,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( FirstVNF_RAM,FirstVNF_CPU_Server ) - Min( Const ,BR ) ) ,( ( Const - MDR ) - ( FirstVNF_RAM_Server + MRS ) ) )", "choosing": "Max( ( MUC * Max( MUR,MLU ) ),( ( RMSe + RMSe ) - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_Mem + RRS ) * ( FirstVNF_CPU + FirstVNF_RAM_Server ) ) ,( ( RRS * ARS ) - Max( FirstVNF_RAM_Server,CRS ) ) )", "choosing": "( Min( Min( MUC ,RMSe ) ,( MUC / DS ) ) + ( ( MUC * MUC ) + Max( MUC,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( Const ,ACS ) - Min( AMS ,RRS ) ) - Max( Max( FirstVNF_Mem,FirstVNF_RAM_Server ),Min( FirstVNF_CPU ,FirstVNF_Mem ) ) )", "choosing": "Max( Min( ( MLU * RRSe ) ,DS ),( Max( MLU,RRSe ) + ( MLU * RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server * MDR ) - ( FirstVNF_Mem_Server / Const ) ) - ( Min( PN ,PN ) + ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) ) )", "choosing": "( ( MLU - ( MUR - MUC ) ) * ( MUM - ( MUC - DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_RAM ) - ( ( FirstVNF_Mem + RRS ) - Min( FirstVNF_Mem_Server ,MRS ) ) )", "choosing": "Min( Min( ( DS + RCSe ) ,( RMSe + MUC ) ) ,( ( MUR * RMSe ) - Min( RMSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( RRS - AMS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( ( RCSe * MUM ) * Min( RMSe ,MUM ) ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / CRS ) / ( MDR - ACS ) )", "choosing": "Max( Min( RCSe ,( ( DS + RRSe ) + ( RMSe - MLU ) ) ),Min( CS ,( Max( DS,MUM ) / ( MLU * RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( Const - AMS ),Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) * ( ( PN * RRS ) / ( FirstVNF_CPU_Server - PN ) ) ) + Min( ( ( Const / FirstVNF_Mem ) - ( MDR / PN ) ) ,( ( MRS / FirstVNF_RAM_Server ) - Min( AMS ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( RMSe / RMSe ) / CS ) + ( ( MUR + Max( DS,MUR ) ) + Max( ( CS * RCSe ),( RMSe / RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( ( DDR * Const ) ,( CRS + FirstVNF_CPU ) ) ,Max( Min( DDR ,CRS ),( FirstVNF_CPU - MRS ) ) ) - ( ( Max( FirstVNF_CPU_Server,FirstVNF_RAM ) * Max( DDR,FirstVNF_Mem_Server ) ) / Min( Min( BR ,MRS ) ,( FirstVNF_RAM / FirstVNF_Mem ) ) ) )", "choosing": "( ( Min( Max( MUR,MUC ) ,( DS + MUC ) ) + ( ( MUM - RMSe ) + Max( DS,MUC ) ) ) + ( ( ( MLU / RRSe ) / ( RRSe * MUC ) ) / ( ( DS - CS ) * ( DS * MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( MRS ,( Min( FirstVNF_Mem ,DDR ) * Min( FirstVNF_Mem ,DDR ) ) ) - Max( Min( ( FirstVNF_CPU_Server * MDR ) ,MDR ),MRS ) )", "choosing": "( Min( MLU ,MUC ) * Max( RMSe,( RMSe * DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( ARS + AMS ),( FirstVNF_RAM - MDR ) ) * Max( ( CRS + FirstVNF_Mem ),Max( CRS,MDR ) ) ) * ( Max( FirstVNF_CPU_Server,Const ) / DDR ) )", "choosing": "Min( ( ( Max( MUM,RCSe ) * ( CS + MUM ) ) + ( ( MUM * MLU ) / ( MUR - RRSe ) ) ) ,Max( MUR,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( FirstVNF_RAM / FirstVNF_RAM ) / ( CRS * FirstVNF_Mem_Server ) ) - ( ( MRS - FirstVNF_CPU ) + ( FirstVNF_RAM + Const ) ) ) * ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - Min( ( BR + ACS ) ,( FirstVNF_Mem + CRS ) ) ) )", "choosing": "( Min( ( MLU * ( MUM + Min( MUC ,( MLU / MLU ) ) ) ) ,MUC ) + Min( ( ( CS + RRSe ) + ( MUC - RCSe ) ) ,( Min( MLU ,RRSe ) - ( MUM - MLU ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( RRS ,( CRS * FirstVNF_Mem_Server ) ) * ACS ) + ( Min( ( FirstVNF_RAM_Server - FirstVNF_RAM_Server ) ,AMS ) - AMS ) )", "choosing": "( ( RMSe / ( ( MLU / CS ) / ( RCSe - RCSe ) ) ) * Max( ( ( DS / MUC ) / RRSe ),Max( MLU,Min( MUM ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS / Const ) - ( AMS + ARS ) )", "choosing": "( ( ( DS + ( MUM - MUM ) ) + ( ( MLU * CS ) * ( RCSe - CS ) ) ) * ( DS * ( MUC / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem_Server * BR ) ) / ( ( ( ARS * ( Const / ( Min( MDR ,MDR ) + BR ) ) ) + Min( RRS ,( FirstVNF_CPU + FirstVNF_RAM ) ) ) * ( MRS + ( ( MRS * DDR ) + BR ) ) ) )", "choosing": "( Min( Max( RMSe,( DS + ( MUM / Max( Min( ( MUC - MUC ) ,MUC ),( MLU - MLU ) ) ) ) ) ,RRSe ) - Max( MUC,( MUR * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - Max( BR,Const ) ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( RMSe + ( MUM - DS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU_Server ) / Min( ( MRS + FirstVNF_RAM_Server ) ,Min( ARS ,( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) * FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( MLU - RMSe ) / Max( MUR,RCSe ) ) + ( MLU + CS ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ACS,Min( DDR ,( CRS + ARS ) ) ) / ( MDR - FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe - ( MLU * ( ( MUM * ( RRSe - MUC ) ) + RRSe ) ) ) - CS ) / RCSe ) / ( DS - RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}], "5": [{"determining": "( ( Const - FirstVNF_RAM_Server ) / ( ( Const - FirstVNF_RAM_Server ) + ARS ) )", "choosing": "( Min( ( ( CS * ( Max( MLU,RCSe ) + ( ( RCSe + MUM ) - CS ) ) ) + Min( MLU ,( RMSe / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( MUR + ( ( Min( RCSe ,RRSe ) + ( ( ( MUR + RRSe ) - Max( MUR,RMSe ) ) - MLU ) ) - ( MLU / Max( Min( MUR ,( RMSe - CS ) ),Min( RMSe ,( DS - RRSe ) ) ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,AMS ) / ( ( Const - BR ) * ( ( RRS - Max( FirstVNF_Mem,Const ) ) * MDR ) ) )", "choosing": "( Max( Max( ( Max( MUR,MUC ) + MUC ),MUM ),RRSe ) + ( CS / RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / PN ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - ( DS * MUR ) ) - ( RRSe - MLU ) )", "obj1": 0.08333333333333333, "obj2": 0.7522613796201993}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( DS / MUC ) - ( CS * CS ) )", "obj1": 0.5121951219512195, "obj2": 0.2680251127676467}, {"determining": "( FirstVNF_RAM - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) ) ) - ( CS * CS ) )", "obj1": 0.6869918699186992, "obj2": 0.21217363293844288}, {"determining": "( ( PN - Min( FirstVNF_Mem ,CRS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MLU * RCSe ) ,MUC ) ) - ( MUR - Max( MLU,Min( ( MLU * RCSe ) ,MUC ) ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.7926829268292683, "obj2": 0.14288124584200249}, {"determining": "( ( ( BR * ( ( Const + ( FirstVNF_RAM / CRS ) ) / Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) ) ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * Max( Min( MLU ,RMSe ),CS ) ) ) - ( CS - CS ) )", "obj1": 0.1910569105691057, "obj2": 0.6583607509562333}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( RMSe / ( ( ( MUR / MUC ) - ( RMSe * CS ) ) + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MUM - Min( MUR ,RRSe ) ) ,MUC ) ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.8699186991869918, "obj2": 0.11300774917667938}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( BR * ACS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( MUC + MLU ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 0.8882113821138211, "obj2": 0.06118925803540918}, {"determining": "( Max( ( Min( MDR ,Const ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( ( DS - Min( MUM ,( MLU + MUC ) ) ) * DS ) ) ) / ( MLU / MUR ) )", "obj1": 0.7560975609756098, "obj2": 0.18503489636898152}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.5548780487804879, "obj2": 0.25756171460070876}, {"determining": "( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( CS + DS ) + ( MUR + MUR ) ) )", "obj1": 0.23983739837398374, "obj2": 0.5733773238393233}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - ( RMSe * Max( MLU,CS ) ) )", "obj1": 0.8556910569105691, "obj2": 0.13847349197709527}, {"determining": "Min( ( Min( ACS ,MRS ) + ( ( ( FirstVNF_CPU - ( AMS / MRS ) ) * ( MRS - FirstVNF_Mem ) ) + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( DS * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.45934959349593496, "obj2": 0.3692322683207316}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * FirstVNF_Mem_Server ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),Min( BR ,ARS ) ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( MUR * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.19715447154471544, "obj2": 0.6025375858203748}, {"determining": "( ( MRS * ( Const - BR ) ) / ( AMS * RRS ) )", "choosing": "( Max( ( MUM * MUM ),MLU ) - ( ( Max( MLU,DS ) + ( Max( MLU,DS ) / RMSe ) ) + MUM ) )", "obj1": 0.17276422764227642, "obj2": 0.6979201598645773}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Min( ( DS / MUC ) ,MUC ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.1524390243902439, "obj2": 0.7154211387585561}, {"determining": "( MDR / ( AMS * RRS ) )", "choosing": "( ( ( MUM - CS ) / Max( MLU,DS ) ) - ( RCSe + MUM ) )", "obj1": 0.25, "obj2": 0.5617411357852269}, {"determining": "( ( AMS + FirstVNF_CPU_Server ) / Max( FirstVNF_Mem_Server,MDR ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1951219512195122, "obj2": 0.6060092415113906}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * CRS ) + MRS ),( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.12398373983739837, "obj2": 0.7235131653704097}, {"determining": "( Max( DDR,DDR ) * ( FirstVNF_Mem / BR ) )", "choosing": "( ( CS - ( CS - RCSe ) ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2682926829268293, "obj2": 0.5412706465811193}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "Max( ( DS / MUR ),( DS - RMSe ) )", "obj1": 0.6666666666666666, "obj2": 0.22561717704084397}, {"determining": "( Min( ( Const - MDR ) ,AMS ) / Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + RRSe )", "obj1": 0.6422764227642277, "obj2": 0.25160503069642387}, {"determining": "( Max( Max( Min( ACS ,MDR ),Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) ),Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * ( Min( ( FirstVNF_RAM - FirstVNF_RAM_Server ) ,( Const / FirstVNF_RAM ) ) * ( ( Const / AMS ) / ( FirstVNF_RAM / FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( DS - Min( MUM ,( MLU + MUC ) ) ) * ( ( RMSe * ( RMSe - RCSe ) ) + Max( ( ( Min( RRSe ,Min( RRSe ,( DS * DS ) ) ) / ( MLU / MUR ) ) * MLU ),CS ) ) )", "obj1": 0.9227642276422764, "obj2": 0.05392226286263176}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( MRS - CRS ) ) )", "choosing": "Min( ( MLU - RCSe ) ,( Min( DS ,RRSe ) / ( RMSe - DS ) ) )", "obj1": 0.9715447154471545, "obj2": 0.00676693498979753}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( MDR * MDR ) ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( Max( ( DS * Min( CS ,MUM ) ),RCSe ) / ( Min( ( MUR * CS ) ,MUC ) + RMSe ) )", "obj1": 0.3699186991869919, "obj2": 0.4561319098030396}, {"determining": "( ( AMS * AMS ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / ( MUR + MUR ) ) - ( RMSe * CS ) )", "obj1": 0.28252032520325204, "obj2": 0.5180467679462307}, {"determining": "( DDR * ( FirstVNF_Mem / BR ) )", "choosing": "( ( ( RRSe + RRSe ) - RCSe ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2804878048780488, "obj2": 0.5388813445166549}, {"determining": "( Min( ( FirstVNF_RAM + Const ) ,Min( Const ,FirstVNF_RAM ) ) / ( AMS * FirstVNF_Mem ) )", "choosing": "( ( MUM / MLU ) / Max( DS,MUM ) )", "obj1": 0.16869918699186992, "obj2": 0.7026482832994229}, {"determining": "( ( PN / ( RRS * ( PN / ( RRS * FirstVNF_RAM ) ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( DS / MUC ) - ( CS * CS ) ) / MUC ) - ( CS * CS ) )", "obj1": 0.4065040650406504, "obj2": 0.4097983968534088}, {"determining": "( ( Const - MDR ) * PN )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + ( MUR + MUR ) )", "obj1": 0.6443089430894309, "obj2": 0.23759813304957517}, {"determining": "( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * ( ( Const - MDR ) * ( AMS * AMS ) ) ) )", "choosing": "Max( ( DS / ( MUR + MUR ) ),( DS - RMSe ) )", "obj1": 0.6565040650406504, "obj2": 0.23290800040788195}, {"determining": "Min( Min( ( ( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( DS - ( CS * CS ) )", "obj1": 0.44715447154471544, "obj2": 0.3847803077870774}, {"determining": "( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3475609756097561, "obj2": 0.47111783071412416}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "( ( PN / ( RRS * PN ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) - ( CS * CS ) )", "obj1": 0.37398373983739835, "obj2": 0.4444295956615274}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * FirstVNF_Mem ) ) ,( DDR * ACS ) )", "choosing": "( ( ( ( ( RMSe + RRSe ) / MUC ) / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.30284552845528456, "obj2": 0.5179788259678275}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( ( PN / ( RRS * FirstVNF_RAM ) ) - ( ( PN / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / MUC ) - ( CS * ( CS * CS ) ) )", "obj1": 0.3821138211382114, "obj2": 0.4398599904160839}, {"determining": "Min( ( Min( ACS ,MRS ) + ( FirstVNF_Mem * FirstVNF_RAM_Server ) ) ,( ( CRS * RRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - MUR ) ) / ( ( RRSe / MUC ) / Max( RMSe,MUR ) ) )", "obj1": 0.45528455284552843, "obj2": 0.3822475193054084}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.11178861788617886, "obj2": 0.7443584363564283}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( ( ( BR * ( ( AMS + ( ( FirstVNF_CPU_Server - Max( MRS,MDR ) ) / DDR ) ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * ( Min( ( RMSe - RRSe ) ,( MUC / ( MUM / MUR ) ) ) + MUR ) ) ) - ( CS - CS ) )", "obj1": 0.9451219512195121, "obj2": 0.029486855855221483}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUR ) ) )", "obj1": 0.42073170731707316, "obj2": 0.40311266357622577}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( ( PN / ( RRS * FirstVNF_RAM ) ) ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( ( CS * CS ) - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.44308943089430897, "obj2": 0.3996053357036442}, {"determining": "( ACS - ( ( ACS * ARS ) - MDR ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / ( ( MLU + MUC ) + MUC ) ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.3130081300813008, "obj2": 0.5168846041058925}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9532520325203252, "obj2": 0.02185434583633043}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - ( Const * ARS ) )", "choosing": "( ( ( DS / MUC ) - ( RMSe * CS ) ) * ( MUR + RMSe ) )", "obj1": 0.3313008130081301, "obj2": 0.49496454010961827}, {"determining": "( ( PN / FirstVNF_CPU ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( DS / MUR ) + DS ) * ( MUR + RMSe ) )", "obj1": 0.983739837398374, "obj2": 0.00595077585044013}, {"determining": "( Min( PN ,AMS ) / ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.33739837398373984, "obj2": 0.48076472355274674}, {"determining": "( Min( Max( FirstVNF_Mem,( ( FirstVNF_RAM / DDR ) * ( FirstVNF_Mem + ( Max( MRS,FirstVNF_RAM_Server ) / CRS ) ) ) ) ,FirstVNF_CPU ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( Min( RMSe ,( CS * ( DS - RMSe ) ) ) / MUC ) ) - ( RRSe - RCSe ) )", "obj1": 0.9532520325203252, "obj2": 0.02185434583633043}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) )", "choosing": "( ( ( ( DS / MUC ) - ( CS * CS ) ) / MUC ) - ( CS * CS ) )", "obj1": 0.4065040650406504, "obj2": 0.4097983968534088}, {"determining": "Min( Max( AMS,DDR ) ,( PN - ( FirstVNF_CPU_Server * Max( Const,RRS ) ) ) )", "choosing": "( ( CS / Min( ( MLU / MLU ) ,RMSe ) ) - ( MUR / MUM ) )", "obj1": 0.9410569105691057, "obj2": 0.03597958309915515}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ( ACS * ACS ) ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,Min( RCSe ,( DS * MUR ) ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.0975609756097561, "obj2": 0.7468371404361962}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) ) )", "choosing": "( ( Max( MUM,Min( MLU ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) / ( DS * MUM ) ) + ( CS - CS ) )", "obj1": 0.11991869918699187, "obj2": 0.7382499881790435}, {"determining": "Min( ( FirstVNF_RAM - ARS ) ,( DDR * ACS ) )", "choosing": "( ( DS / MUR ) + ( RMSe / CS ) )", "obj1": 0.9369918699186992, "obj2": 0.044109705306474144}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "Min( Min( FirstVNF_Mem_Server ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.3150406504065041, "obj2": 0.5047733037047423}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) )", "choosing": "( ( DS / CS ) - ( CS * CS ) )", "obj1": 0.4247967479674797, "obj2": 0.40078833032610045}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - ( RMSe * Max( MLU,CS ) ) )", "obj1": 0.8556910569105691, "obj2": 0.13847349197709527}, {"determining": "( Min( PN ,AMS ) / ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * BR ) ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.31910569105691056, "obj2": 0.5035210217055186}, {"determining": "( ( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MUM - Min( MUR ,RMSe ) ) ,MUC ) ) - ( MUR - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.9308943089430894, "obj2": 0.0525442984678171}, {"determining": "( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) - DDR ) )", "choosing": "( ( DS / MUC ) - ( ( DS / MUC ) * CS ) )", "obj1": 0.9939024390243902, "obj2": 0.0027544088968883716}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( DDR * ACS ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MUM - Min( MUR ,RRSe ) ) ,MUC ) ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.9349593495934959, "obj2": 0.04974709065836435}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * ( ( ( FirstVNF_CPU_Server - ARS ) / FirstVNF_CPU ) + CRS ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( RMSe - ( DS / Min( RRSe ,RMSe ) ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * CS ) )", "obj1": 0.11788617886178862, "obj2": 0.7383436855385075}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * FirstVNF_Mem_Server ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),FirstVNF_CPU ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1951219512195122, "obj2": 0.6060092415113906}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( DDR * ACS ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( ( ( Const + CRS ) / DDR ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( Max( Min( MLU ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) ) + ( MUM * MUR ) )", "obj1": 0.9959349593495935, "obj2": 0.002251869251161595}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * CS ) )", "obj1": 0.11788617886178862, "obj2": 0.7383436855385075}, {"determining": "( Max( FirstVNF_CPU_Server,ACS ) - ( Const * ARS ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.32926829268292684, "obj2": 0.5005168188587477}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "Min( ( ( ARS + FirstVNF_CPU_Server ) + ( ( Max( FirstVNF_RAM,Min( MDR ,MRS ) ) - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( Max( ( RCSe * ( MUC + Max( ( ( MUC + RMSe ) / MUM ),MUM ) ) ),Min( MLU ,RCSe ) ) / ( ( MUR + ( RCSe * DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_Mem_Server ,AMS ) ) - ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) * FirstVNF_Mem ) )", "choosing": "Min( ( ( RRSe - CS ) * Max( MUR,MUC ) ) ,( ( RRSe * RRSe ) * Min( MLU ,( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) - ( Max( RRSe,MLU ) / MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS + MDR ) + ( BR - ARS ) ) / ( Min( ARS ,FirstVNF_CPU_Server ) / ( ARS * AMS ) ) )", "choosing": "( ( Min( DS ,MUC ) / ( CS - MUM ) ) + ( ( MLU - DS ) * Max( MUM,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( FirstVNF_RAM,FirstVNF_CPU_Server ) - Min( Const ,BR ) ) ,( ( Const - MDR ) - ( FirstVNF_RAM_Server + MRS ) ) )", "choosing": "Max( ( MUC * Max( MUR,MLU ) ),( ( RMSe + RMSe ) - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_Mem + RRS ) * ( FirstVNF_CPU + FirstVNF_RAM_Server ) ) ,( ( RRS * ARS ) - Max( FirstVNF_RAM_Server,CRS ) ) )", "choosing": "( Min( Min( MUC ,RMSe ) ,( MUC / DS ) ) + ( ( MUC * MUC ) + Max( MUC,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( Const ,ACS ) - Min( AMS ,RRS ) ) - Max( Max( FirstVNF_Mem,FirstVNF_RAM_Server ),Min( FirstVNF_CPU ,FirstVNF_Mem ) ) )", "choosing": "Max( Min( ( MLU * RRSe ) ,DS ),( Max( MLU,RRSe ) + ( MLU * RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server * MDR ) - ( FirstVNF_Mem_Server / Const ) ) - ( Min( PN ,PN ) + ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) ) )", "choosing": "( ( MLU - ( MUR - MUC ) ) * ( MUM - ( MUC - DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_RAM ) - ( ( FirstVNF_Mem + RRS ) - Min( FirstVNF_Mem_Server ,MRS ) ) )", "choosing": "Min( Min( ( DS + RCSe ) ,( RMSe + MUC ) ) ,( ( MUR * RMSe ) - Min( RMSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( RRS - AMS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( ( RCSe * MUM ) * Min( RMSe ,MUM ) ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / CRS ) / ( MDR - ACS ) )", "choosing": "Max( Min( RCSe ,( ( DS + RRSe ) + ( RMSe - MLU ) ) ),Min( CS ,( Max( DS,MUM ) / ( MLU * RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( ( Const - AMS ),Min( FirstVNF_Mem ,FirstVNF_CPU_Server ) ) * ( ( PN * RRS ) / ( FirstVNF_CPU_Server - PN ) ) ) + Min( ( ( Const / FirstVNF_Mem ) - ( MDR / PN ) ) ,( ( MRS / FirstVNF_RAM_Server ) - Min( AMS ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( ( RMSe / RMSe ) / CS ) + ( ( MUR + Max( DS,MUR ) ) + Max( ( CS * RCSe ),( RMSe / RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}], "6": [{"determining": "( ( ARS * RRS ) - ( FirstVNF_CPU_Server * ( ( ARS * RRS ) + MRS ) ) )", "choosing": "( Min( Max( ( MLU * ( MLU + Min( Max( MUC,( MLU - MUR ) ) ,RRSe ) ) ),( DS / CS ) ) ,DS ) / ( MLU + Min( Max( MUC,( MLU - MUR ) ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_RAM_Server ) / ( ( Const - FirstVNF_RAM_Server ) + ARS ) )", "choosing": "( Min( ( ( CS * ( Max( MLU,RCSe ) + ( ( RCSe + MUM ) - CS ) ) ) + Min( MLU ,( RMSe / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( MUR + ( ( Min( RCSe ,RRSe ) + ( ( ( MUR + RRSe ) - Max( MUR,RMSe ) ) - MLU ) ) - ( MLU / Max( Min( MUR ,( RMSe - CS ) ),Min( RMSe ,( DS - RRSe ) ) ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / PN ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - ( DS * MUR ) ) - ( RRSe - MLU ) )", "obj1": 0.08333333333333333, "obj2": 0.7522613796201993}, {"determining": "( Max( FirstVNF_RAM_Server,Max( FirstVNF_CPU_Server,( ( ( FirstVNF_CPU_Server - MDR ) + FirstVNF_RAM_Server ) / Min( ( ARS / FirstVNF_Mem_Server ) ,( MRS / PN ) ) ) ) ) / ( ( Const - FirstVNF_RAM_Server ) + ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6131278575447142}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * CRS ) + MRS ),( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.12398373983739837, "obj2": 0.7235131653704097}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( DS / MUC ) - ( CS * CS ) )", "obj1": 0.5121951219512195, "obj2": 0.2680251127676467}, {"determining": "( FirstVNF_RAM - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) ) ) - ( CS * CS ) )", "obj1": 0.6869918699186992, "obj2": 0.21217363293844288}, {"determining": "( ( PN - Min( FirstVNF_Mem ,CRS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MLU * RCSe ) ,MUC ) ) - ( MUR - Max( MLU,Min( ( MLU * RCSe ) ,MUC ) ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.7926829268292683, "obj2": 0.14288124584200249}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( RMSe / ( ( ( MUR / MUC ) - ( RMSe * CS ) ) + ( ( ( ( MLU + MUC ) + MUC ) / Min( ( MUM - Min( MUR ,RRSe ) ) ,MUC ) ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.8699186991869918, "obj2": 0.11300774917667938}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( BR * ACS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( MUC + MLU ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 0.8882113821138211, "obj2": 0.06118925803540918}, {"determining": "( Max( ( Min( MDR ,Const ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( ( DS - Min( MUM ,( MLU + MUC ) ) ) * DS ) ) ) / ( MLU / MUR ) )", "obj1": 0.7560975609756098, "obj2": 0.18503489636898152}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.5548780487804879, "obj2": 0.25756171460070876}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - ( RMSe * Max( MLU,CS ) ) )", "obj1": 0.8556910569105691, "obj2": 0.13847349197709527}, {"determining": "Min( ( Min( ACS ,MRS ) + ( ( ( FirstVNF_CPU - ( AMS / MRS ) ) * ( MRS - FirstVNF_Mem ) ) + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( DS * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.45934959349593496, "obj2": 0.3692322683207316}, {"determining": "( Max( Max( Min( ACS ,MDR ),Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) ),Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * ( Min( ( FirstVNF_RAM - FirstVNF_RAM_Server ) ,( Const / FirstVNF_RAM ) ) * ( ( Const / AMS ) / ( FirstVNF_RAM / FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( DS - Min( MUM ,( MLU + MUC ) ) ) * ( ( RMSe * ( RMSe - RCSe ) ) + Max( ( ( Min( RRSe ,Min( RRSe ,( DS * DS ) ) ) / ( MLU / MUR ) ) * MLU ),CS ) ) )", "obj1": 0.9227642276422764, "obj2": 0.05392226286263176}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * FirstVNF_Mem_Server ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),FirstVNF_RAM_Server ) )", "choosing": "( Min( Min( MLU ,( RMSe / RCSe ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.21341463414634146, "obj2": 0.5836731723641538}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) / FirstVNF_CPU_Server ) / Min( BR ,ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( CS + DS ) + ( MUR + MUR ) ) )", "obj1": 0.23983739837398374, "obj2": 0.5733773238393233}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "( ( AMS + FirstVNF_CPU_Server ) / Max( FirstVNF_Mem_Server,MDR ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1951219512195122, "obj2": 0.6060092415113906}, {"determining": "( MDR / ( AMS * RRS ) )", "choosing": "( ( ( MUM - CS ) / Max( MLU,DS ) ) - ( RCSe + MUM ) )", "obj1": 0.25, "obj2": 0.5617411357852269}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "Max( ( DS / MUR ),( DS - RMSe ) )", "obj1": 0.6666666666666666, "obj2": 0.22561717704084397}, {"determining": "( Min( ( Const - MDR ) ,AMS ) / Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + RRSe )", "obj1": 0.6422764227642277, "obj2": 0.25160503069642387}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( MDR * MDR ) ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( Max( ( DS * Min( CS ,MUM ) ),RCSe ) / ( Min( ( MUR * CS ) ,MUC ) + RMSe ) )", "obj1": 0.3699186991869919, "obj2": 0.4561319098030396}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),FirstVNF_CPU ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + CS ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.19715447154471544, "obj2": 0.5997317710589479}, {"determining": "( Max( FirstVNF_CPU_Server,ACS ) - ( ( BR / DDR ) - ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) ) )", "choosing": "( ( RMSe / ( MLU + ( Max( MLU,CS ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.266260162601626, "obj2": 0.5485937850689605}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( MRS - CRS ) ) )", "choosing": "Min( ( MLU - RCSe ) ,( Min( DS ,RRSe ) / ( RMSe - DS ) ) )", "obj1": 0.9715447154471545, "obj2": 0.00676693498979753}, {"determining": "( ( ( ACS * ARS ) - Max( FirstVNF_CPU_Server,ACS ) ) - ( ( ( MRS * CRS ) * MRS ) - Min( PN ,PN ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( Min( MLU ,MUC ) + MUC ) / Min( ( ( MUC - MUM ) + DS ) ,MUC ) ) - ( Max( MUC,MLU ) / CS ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.2764227642276423, "obj2": 0.5296699749820317}, {"determining": "( Max( ACS,ACS ) / ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( ( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) - CS ) / RCSe ) / ( MLU - RMSe ) )", "obj1": 0.9308943089430894, "obj2": 0.03404081676176857}, {"determining": "( ( AMS * AMS ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / ( MUR + MUR ) ) - ( RMSe * CS ) )", "obj1": 0.28252032520325204, "obj2": 0.5180467679462307}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) )", "choosing": "( ( ( ( DS / MUC ) - ( CS * CS ) ) / MUC ) - ( CS * CS ) )", "obj1": 0.4065040650406504, "obj2": 0.4097983968534088}, {"determining": "( ( Const - MDR ) * PN )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + ( MUR + MUR ) )", "obj1": 0.6443089430894309, "obj2": 0.23759813304957517}, {"determining": "( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * ( ( Const - MDR ) * ( AMS * AMS ) ) ) )", "choosing": "Max( ( DS / ( MUR + MUR ) ),( DS - RMSe ) )", "obj1": 0.6565040650406504, "obj2": 0.23290800040788195}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( ( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) ) - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / ( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) ) ) ) - ( RRSe - MLU ) )", "obj1": 0.9573170731707317, "obj2": 0.019748701604003077}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - ( Const * ARS ) )", "choosing": "( ( ( DS / MUC ) - ( RMSe * CS ) ) * ( MUR + RMSe ) )", "obj1": 0.3313008130081301, "obj2": 0.49496454010961827}, {"determining": "Min( Min( ( ( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( DS - ( CS * CS ) )", "obj1": 0.44715447154471544, "obj2": 0.3847803077870774}, {"determining": "( Max( DDR,DDR ) * ( FirstVNF_Mem / BR ) )", "choosing": "( ( CS - ( CS - RCSe ) ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2682926829268293, "obj2": 0.5412706465811193}, {"determining": "( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3475609756097561, "obj2": 0.47111783071412416}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "( ( PN / ( RRS * PN ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) - ( CS * CS ) )", "obj1": 0.37398373983739835, "obj2": 0.4444295956615274}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * FirstVNF_Mem ) ) ,( DDR * ACS ) )", "choosing": "( ( ( ( ( RMSe + RRSe ) / MUC ) / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.30284552845528456, "obj2": 0.5179788259678275}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( ( PN / ( RRS * FirstVNF_RAM ) ) - ( ( PN / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( DS / MUC ) - ( CS * ( CS * CS ) ) )", "obj1": 0.3821138211382114, "obj2": 0.4398599904160839}, {"determining": "Min( ( Min( ACS ,MRS ) + ( FirstVNF_Mem * FirstVNF_RAM_Server ) ) ,( ( CRS * RRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - MUR ) ) / ( ( RRSe / MUC ) / Max( RMSe,MUR ) ) )", "obj1": 0.45528455284552843, "obj2": 0.3822475193054084}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.11178861788617886, "obj2": 0.7443584363564283}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( PN + FirstVNF_Mem ) + ( AMS / ACS ) ) * ( Max( MRS,FirstVNF_Mem ) * Max( FirstVNF_RAM_Server,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3882113821138211, "obj2": 0.4304546446474006}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUR ) ) )", "obj1": 0.42073170731707316, "obj2": 0.40311266357622577}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( ( PN / ( RRS * FirstVNF_RAM ) ) ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( ( CS * CS ) - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.44308943089430897, "obj2": 0.3996053357036442}, {"determining": "( ACS - ( ( ACS * ARS ) - MDR ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / ( ( MLU + MUC ) + MUC ) ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.3130081300813008, "obj2": 0.5168846041058925}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ( Const * ARS ) ) ) * ACS ) )", "choosing": "( ( ( ( MUM - Min( MUR ,RRSe ) ) / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.31910569105691056, "obj2": 0.4991623657386891}, {"determining": "Min( Min( FirstVNF_Mem_Server ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.3150406504065041, "obj2": 0.5047733037047423}, {"determining": "( Min( PN ,AMS ) / ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.33739837398373984, "obj2": 0.48076472355274674}, {"determining": "( ( PN / ( RRS * ( PN / ( RRS * FirstVNF_RAM ) ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( DS / MUC ) - ( CS * CS ) ) / MUC ) - ( CS * CS ) )", "obj1": 0.4065040650406504, "obj2": 0.4097983968534088}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ( ACS * ACS ) ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,Min( RCSe ,( DS * MUR ) ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.0975609756097561, "obj2": 0.7468371404361962}, {"determining": "( ( PN / FirstVNF_CPU ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( DS / MUR ) + DS ) * ( MUR + RMSe ) )", "obj1": 0.983739837398374, "obj2": 0.00595077585044013}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) ) )", "choosing": "( ( Max( MUM,Min( MLU ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) / ( DS * MUM ) ) + ( CS - CS ) )", "obj1": 0.11991869918699187, "obj2": 0.7382499881790435}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - ( RMSe * Max( MLU,CS ) ) )", "obj1": 0.8556910569105691, "obj2": 0.13847349197709527}, {"determining": "( ( ( BR * ( ( AMS + ( ( FirstVNF_CPU_Server - Max( MRS,MDR ) ) / DDR ) ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * ( Min( ( RMSe - RRSe ) ,( MUC / ( MUM / MUR ) ) ) + MUR ) ) ) - ( CS - CS ) )", "obj1": 0.9451219512195121, "obj2": 0.029486855855221483}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9491869918699187, "obj2": 0.023172280815469577}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( DDR * ACS ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) )", "choosing": "( ( DS / CS ) - ( CS * CS ) )", "obj1": 0.4247967479674797, "obj2": 0.40078833032610045}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) - DDR ) )", "choosing": "( ( DS / ( DS / MUC ) ) - ( CS * CS ) )", "obj1": 0.991869918699187, "obj2": 0.003687151082297528}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9369918699186992, "obj2": 0.031073697266759202}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * ( ( ( FirstVNF_CPU_Server - ARS ) / FirstVNF_CPU ) + CRS ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( RMSe - ( DS / Min( RRSe ,RMSe ) ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * FirstVNF_Mem_Server ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),FirstVNF_CPU ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1951219512195122, "obj2": 0.6060092415113906}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9390243902439024, "obj2": 0.029535100138646003}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * CS ) )", "obj1": 0.11788617886178862, "obj2": 0.7383436855385075}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( DDR * ACS ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9532520325203252, "obj2": 0.02185434583633043}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( ( ( Const + CRS ) / DDR ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( Max( Min( MLU ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) ) + ( MUM * MUR ) )", "obj1": 0.9959349593495935, "obj2": 0.002251869251161595}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * CS ) )", "obj1": 0.11788617886178862, "obj2": 0.7383436855385075}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9532520325203252, "obj2": 0.02185434583633043}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) )", "choosing": "( ( DS / CS ) - ( CS * CS ) )", "obj1": 0.4247967479674797, "obj2": 0.40078833032610045}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( ( MUM - Min( MUR ,MUC ) ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.11991869918699187, "obj2": 0.7382499881790435}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) - DDR ) )", "choosing": "( ( DS / MUC ) - ( CS * CS ) )", "obj1": 0.9939024390243902, "obj2": 0.0027544088968883716}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) - DDR ) )", "choosing": "( ( DS / MUC ) - ( ( DS / MUC ) * CS ) )", "obj1": 0.9939024390243902, "obj2": 0.0027544088968883716}, {"determining": "( Min( PN ,AMS ) / ( ( Const - BR ) * ( ( RRS - Max( FirstVNF_Mem,Const ) ) * MDR ) ) )", "choosing": "( Max( Max( ( Max( MUR,MUC ) + MUC ),MUM ),RRSe ) + ( CS / RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ARS + FirstVNF_CPU_Server ) + ( ( Max( FirstVNF_RAM,Min( MDR ,MRS ) ) - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( Max( ( RCSe * ( MUC + Max( ( ( MUC + RMSe ) / MUM ),MUM ) ) ),Min( MLU ,RCSe ) ) / ( ( MUR + ( RCSe * DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_Mem_Server ,AMS ) ) - ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) * FirstVNF_Mem ) )", "choosing": "Min( ( ( RRSe - CS ) * Max( MUR,MUC ) ) ,( ( RRSe * RRSe ) * Min( MLU ,( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) - ( Max( RRSe,MLU ) / MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS + MDR ) + ( BR - ARS ) ) / ( Min( ARS ,FirstVNF_CPU_Server ) / ( ARS * AMS ) ) )", "choosing": "( ( Min( DS ,MUC ) / ( CS - MUM ) ) + ( ( MLU - DS ) * Max( MUM,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( FirstVNF_RAM,FirstVNF_CPU_Server ) - Min( Const ,BR ) ) ,( ( Const - MDR ) - ( FirstVNF_RAM_Server + MRS ) ) )", "choosing": "Max( ( MUC * Max( MUR,MLU ) ),( ( RMSe + RMSe ) - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( FirstVNF_Mem + RRS ) * ( FirstVNF_CPU + FirstVNF_RAM_Server ) ) ,( ( RRS * ARS ) - Max( FirstVNF_RAM_Server,CRS ) ) )", "choosing": "( Min( Min( MUC ,RMSe ) ,( MUC / DS ) ) + ( ( MUC * MUC ) + Max( MUC,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( Const ,ACS ) - Min( AMS ,RRS ) ) - Max( Max( FirstVNF_Mem,FirstVNF_RAM_Server ),Min( FirstVNF_CPU ,FirstVNF_Mem ) ) )", "choosing": "Max( Min( ( MLU * RRSe ) ,DS ),( Max( MLU,RRSe ) + ( MLU * RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM_Server * MDR ) - ( FirstVNF_Mem_Server / Const ) ) - ( Min( PN ,PN ) + ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) ) )", "choosing": "( ( MLU - ( MUR - MUC ) ) * ( MUM - ( MUC - DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * FirstVNF_RAM ) - ( ( FirstVNF_Mem + RRS ) - Min( FirstVNF_Mem_Server ,MRS ) ) )", "choosing": "Min( Min( ( DS + RCSe ) ,( RMSe + MUC ) ) ,( ( MUR * RMSe ) - Min( RMSe ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}], "7": [{"determining": "( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) - ( Max( ( FirstVNF_CPU / ARS ),BR ) - ( ( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) ) - ( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) - ( ( PN / PN ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) ) ) ) )", "choosing": "( ( ( ( RMSe * CS ) - ( DS - Min( ( MUC / Min( ( RMSe * CS ) ,RCSe ) ) ,RCSe ) ) ) / MUC ) - ( RMSe * CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * RRS ) - ( FirstVNF_CPU_Server * ( ( ARS * RRS ) + MRS ) ) )", "choosing": "( Min( Max( ( MLU * ( MLU + Min( Max( MUC,( MLU - MUR ) ) ,RRSe ) ) ),( DS / CS ) ) ,DS ) / ( MLU + Min( Max( MUC,( MLU - MUR ) ) ,RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / PN ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - ( DS * MUR ) ) - ( RRSe - MLU ) )", "obj1": 0.08333333333333333, "obj2": 0.7522613796201993}, {"determining": "( Max( FirstVNF_RAM_Server,Max( FirstVNF_CPU_Server,( ( ( FirstVNF_CPU_Server - MDR ) + FirstVNF_RAM_Server ) / Min( ( ARS / FirstVNF_Mem_Server ) ,( MRS / PN ) ) ) ) ) / ( ( Const - FirstVNF_RAM_Server ) + ARS ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6131278575447142}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( ( DS / MUC ) - ( CS * CS ) )", "obj1": 0.5121951219512195, "obj2": 0.2680251127676467}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - ( RMSe * Max( MLU,CS ) ) )", "obj1": 0.8556910569105691, "obj2": 0.13847349197709527}, {"determining": "( ( PN / ( RRS * FirstVNF_RAM ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * ( CS * CS ) ) )", "obj1": 0.14227642276422764, "obj2": 0.7196726009340849}, {"determining": "( ( ( BR * ( ( Const + FirstVNF_Mem ) / DDR ) ) - ( MDR / FirstVNF_RAM_Server ) ) / ( FirstVNF_RAM_Server * Const ) )", "choosing": "( ( Max( ( ( Min( ( RMSe - RRSe ) ,( MUC / ( MUM / MUR ) ) ) + MUR ) / MUR ),MUM ) / ( DS * MUM ) ) - ( RCSe - CS ) )", "obj1": 0.8638211382113821, "obj2": 0.08382947398540584}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 0.7845528455284553, "obj2": 0.1391281553820257}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.5548780487804879, "obj2": 0.25756171460070876}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 0.7215447154471545, "obj2": 0.21104088405829077}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( CS * CS ) )", "obj1": 0.3638211382113821, "obj2": 0.4393826067559175}, {"determining": "Min( ( Min( ACS ,MRS ) + ( ( ( FirstVNF_CPU - ( AMS / MRS ) ) * ( MRS - FirstVNF_Mem ) ) + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( DS * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.45934959349593496, "obj2": 0.3692322683207316}, {"determining": "( Max( ( Min( MDR ,Const ) / ( MRS + FirstVNF_RAM ) ),( ( PN / Const ) / ( FirstVNF_CPU_Server - MRS ) ) ) - ( Min( ( FirstVNF_RAM / CRS ) ,Min( ARS ,FirstVNF_Mem ) ) + ( Min( FirstVNF_Mem ,Min( ( FirstVNF_RAM_Server - ACS ) ,( ACS * FirstVNF_Mem ) ) ) * Max( ARS,ACS ) ) ) )", "choosing": "( Min( RRSe ,Min( RRSe ,( ( DS - Min( MUM ,( MLU + MUC ) ) ) * DS ) ) ) / ( MLU / MUR ) )", "obj1": 0.7560975609756098, "obj2": 0.18503489636898152}, {"determining": "( ( PN / ( RRS * PN ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) - ( CS * CS ) )", "obj1": 0.3882113821138211, "obj2": 0.42048386424343626}, {"determining": "( Min( ( FirstVNF_Mem + BR ) ,( BR * ACS ) ) - ( ( MDR / FirstVNF_Mem_Server ) * ( MDR + Const ) ) )", "choosing": "Max( ( MUC + MLU ),( ( RMSe * MLU ) - ( CS * CS ) ) )", "obj1": 0.8882113821138211, "obj2": 0.06118925803540918}, {"determining": "Min( ( Min( ACS ,MRS ) + ( AMS + PN ) ) ,( ( RRS * CRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - CS ) ) / ( ( RRSe / MUC ) / ( RRSe / Max( ( ( ( MUR * MUR ) * ( Max( RRSe,DS ) - ( MUM / MLU ) ) ) - RMSe ),RCSe ) ) ) )", "obj1": 0.483739837398374, "obj2": 0.3314304092025771}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * FirstVNF_Mem_Server ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),FirstVNF_RAM_Server ) )", "choosing": "( Min( Min( MLU ,( RMSe / RCSe ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.21341463414634146, "obj2": 0.5836731723641538}, {"determining": "( FirstVNF_RAM - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) ) ) - ( CS * CS ) )", "obj1": 0.6869918699186992, "obj2": 0.21217363293844288}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * FirstVNF_Mem_Server ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_CPU_Server ),FirstVNF_CPU ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( ( Min( ( RCSe - MUM ) ,RMSe ) * CS ) ,DS ) + CS ) ) )", "obj1": 0.23170731707317074, "obj2": 0.5683643983132098}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ACS ) ,( ( BR / DDR ) - MDR ) ) ,( ARS - DDR ) )", "choosing": "( ( Max( ( ( MLU + MLU ) + MUC ),( DS - RMSe ) ) / MUC ) + Min( ( DS - RMSe ) ,MUR ) )", "obj1": 0.9044715447154471, "obj2": 0.05316190556025567}, {"determining": "( MDR / ( AMS * RRS ) )", "choosing": "( ( ( MUM - CS ) / Max( MLU,DS ) ) - ( RCSe + MUM ) )", "obj1": 0.25, "obj2": 0.5617411357852269}, {"determining": "( ( AMS + FirstVNF_CPU_Server ) / Max( FirstVNF_Mem_Server,MDR ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1951219512195122, "obj2": 0.6060092415113906}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "Max( ( DS / MUR ),( DS - RMSe ) )", "obj1": 0.6666666666666666, "obj2": 0.22561717704084397}, {"determining": "( Min( ( Const - MDR ) ,AMS ) / Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + RRSe )", "obj1": 0.6422764227642277, "obj2": 0.25160503069642387}, {"determining": "( ( MRS - ( MDR - FirstVNF_CPU_Server ) ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,( MLU * ( ( MUM * ( RRSe - MUC ) ) + RRSe ) ) ) ) * ( MLU / CS ) )", "obj1": 0.9227642276422764, "obj2": 0.04082108797052692}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),FirstVNF_CPU ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + CS ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.19715447154471544, "obj2": 0.5997317710589479}, {"determining": "( Max( FirstVNF_CPU_Server,ACS ) - ( ( BR / DDR ) - ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) ) )", "choosing": "( ( RMSe / ( MLU + ( Max( MLU,CS ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.266260162601626, "obj2": 0.5485937850689605}, {"determining": "( ( ( ACS * ARS ) - Max( FirstVNF_CPU_Server,ACS ) ) - ( ( ( MRS * CRS ) * MRS ) - Min( PN ,PN ) ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( Min( MLU ,MUC ) + MUC ) / Min( ( ( MUC - MUM ) + DS ) ,MUC ) ) - ( Max( MUC,MLU ) / CS ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.2764227642276423, "obj2": 0.5296699749820317}, {"determining": "( ( AMS * AMS ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / ( MUR + MUR ) ) - ( RMSe * CS ) )", "obj1": 0.28252032520325204, "obj2": 0.5180467679462307}, {"determining": "( ( Const - MDR ) * PN )", "choosing": "( Min( ( DS / MUC ) ,MUC ) + ( MUR + MUR ) )", "obj1": 0.6443089430894309, "obj2": 0.23759813304957517}, {"determining": "( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * ( ( Const - MDR ) * ( AMS * AMS ) ) ) )", "choosing": "Max( ( DS / ( MUR + MUR ) ),( DS - RMSe ) )", "obj1": 0.6565040650406504, "obj2": 0.23290800040788195}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) - ( Const * ARS ) )", "choosing": "( ( ( DS / MUC ) - ( RMSe * CS ) ) * ( MUR + RMSe ) )", "obj1": 0.3313008130081301, "obj2": 0.49496454010961827}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "Min( Min( ( ( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) )", "choosing": "( DS - ( CS * CS ) )", "obj1": 0.44715447154471544, "obj2": 0.3847803077870774}, {"determining": "( Max( DDR,DDR ) * ( FirstVNF_Mem / BR ) )", "choosing": "( ( CS - ( CS - RCSe ) ) - ( RRSe + ( Max( RMSe,MUC ) + ( RCSe + CS ) ) ) )", "obj1": 0.2682926829268293, "obj2": 0.5412706465811193}, {"determining": "( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUC ) ) )", "obj1": 0.3475609756097561, "obj2": 0.47111783071412416}, {"determining": "( ( Const - MDR ) * ( AMS * AMS ) )", "choosing": "( ( RRSe + DS ) + ( MUR + MUR ) )", "obj1": 0.6117886178861789, "obj2": 0.2562598528431283}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * FirstVNF_Mem ) ) ,( DDR * ACS ) )", "choosing": "( ( ( ( ( RMSe + RRSe ) / MUC ) / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.30284552845528456, "obj2": 0.5179788259678275}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * CRS ) + MRS ),( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.12398373983739837, "obj2": 0.7235131653704097}, {"determining": "Min( ( Min( ACS ,MRS ) + ( FirstVNF_Mem * FirstVNF_RAM_Server ) ) ,( ( CRS * RRS ) - ( ACS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( DS / CS ) ,( RRSe - MUR ) ) / ( ( RRSe / MUC ) / Max( RMSe,MUR ) ) )", "obj1": 0.45528455284552843, "obj2": 0.3822475193054084}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.11178861788617886, "obj2": 0.7443584363564283}, {"determining": "( Min( Max( FirstVNF_Mem,( ( FirstVNF_RAM / DDR ) * ( FirstVNF_Mem + BR ) ) ) ,MDR ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + ( CS * Max( MUC,CS ) ) ) / MUC ) ) - ( RRSe - RCSe ) )", "obj1": 0.9695121951219512, "obj2": 0.010987740526803548}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( ( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) ) - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / ( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) ) ) ) - ( RRSe - MLU ) )", "obj1": 0.9573170731707317, "obj2": 0.019748701604003077}, {"determining": "( ( ( ( ACS * Const ) / ( FirstVNF_RAM - DDR ) ) / Max( ( ARS * Min( MDR ,FirstVNF_RAM_Server ) ),Const ) ) + ( ( ( ( FirstVNF_Mem * FirstVNF_Mem ) - Max( FirstVNF_RAM_Server,BR ) ) / Max( Min( DDR ,DDR ),Min( DDR ,FirstVNF_Mem_Server ) ) ) * Min( ( ( DDR - Const ) * ( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ,Min( ( MRS - MDR ) ,Max( FirstVNF_Mem,ACS ) ) ) ) )", "choosing": "( ( RRSe / CS ) / ( MUC + Min( ( MUR * CS ) ,MUR ) ) )", "obj1": 0.42073170731707316, "obj2": 0.40311266357622577}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( ( PN / ( RRS * FirstVNF_RAM ) ) ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( ( CS * CS ) - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.44308943089430897, "obj2": 0.3996053357036442}, {"determining": "( ACS - ( ( ACS * ARS ) - MDR ) )", "choosing": "( ( RMSe / ( MLU + ( ( ( ( MLU + MUC ) + MUC ) / ( ( MLU + MUC ) + MUC ) ) - ( MLU - Max( MLU,CS ) ) ) ) ) - ( RMSe * CS ) )", "obj1": 0.3130081300813008, "obj2": 0.5168846041058925}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ( Const * ARS ) ) ) * ACS ) )", "choosing": "( ( ( ( MUM - Min( MUR ,RRSe ) ) / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.31910569105691056, "obj2": 0.4991623657386891}, {"determining": "Min( Min( FirstVNF_Mem_Server ,ACS ) ,( ARS - DDR ) )", "choosing": "( ( DS / MUC ) - ( RMSe * CS ) )", "obj1": 0.3150406504065041, "obj2": 0.5047733037047423}, {"determining": "( ( PN / ( RRS * ( PN / ( RRS * FirstVNF_RAM ) ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( DS / MUC ) - ( CS * CS ) ) / MUC ) - ( CS * CS ) )", "obj1": 0.4065040650406504, "obj2": 0.4097983968534088}, {"determining": "( Min( PN ,AMS ) / ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.33739837398373984, "obj2": 0.48076472355274674}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ) )", "choosing": "( ( ( ( DS / MUC ) - ( CS * CS ) ) / MUC ) - ( CS * CS ) )", "obj1": 0.4065040650406504, "obj2": 0.4097983968534088}, {"determining": "( Max( ACS,ACS ) / ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( ( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) - CS ) / RCSe ) / ( MLU - RMSe ) )", "obj1": 0.9308943089430894, "obj2": 0.03404081676176857}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ( ACS * ACS ) ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,Min( RCSe ,( DS * MUR ) ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.0975609756097561, "obj2": 0.7468371404361962}, {"determining": "( ( PN / FirstVNF_CPU ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( DS / MUR ) + DS ) * ( MUR + RMSe ) )", "obj1": 0.983739837398374, "obj2": 0.00595077585044013}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,( ACS * ARS ) ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * MUC ) * CS ) )", "obj1": 0.13211382113821138, "obj2": 0.722110942106989}, {"determining": "Min( Min( AMS ,DDR ) ,( FirstVNF_RAM * ( MRS - CRS ) ) )", "choosing": "Min( ( MLU - RCSe ) ,( Min( DS ,RRSe ) / ( RMSe - DS ) ) )", "obj1": 0.9715447154471545, "obj2": 0.00676693498979753}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( ( ( FirstVNF_CPU_Server * CRS ) + MRS ) ,( CRS / FirstVNF_RAM_Server ) ) )", "choosing": "( ( Max( MUM,Min( MLU ,Min( MUM ,( RRSe / Max( RRSe,RCSe ) ) ) ) ) / ( DS * MUM ) ) + ( CS - CS ) )", "obj1": 0.11991869918699187, "obj2": 0.7382499881790435}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( DS / MUC ) - ( CS * DS ) )", "obj1": 0.3516260162601626, "obj2": 0.465420669582945}, {"determining": "( ( ( BR * ( ( AMS + ( ( FirstVNF_CPU_Server - Max( MRS,MDR ) ) / DDR ) ) / DDR ) ) - FirstVNF_CPU_Server ) / ( FirstVNF_CPU * Const ) )", "choosing": "( ( Max( Min( MLU ,( CS / RCSe ) ),MUM ) / ( DS * ( Min( ( RMSe - RRSe ) ,( MUC / ( MUM / MUR ) ) ) + MUR ) ) ) - ( CS - CS ) )", "obj1": 0.9451219512195121, "obj2": 0.029486855855221483}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9491869918699187, "obj2": 0.023172280815469577}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( DDR * ACS ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) )", "choosing": "( ( DS / CS ) - ( CS * CS ) )", "obj1": 0.4247967479674797, "obj2": 0.40078833032610045}, {"determining": "( ( ( ( BR / ARS ) / FirstVNF_CPU ) / ( FirstVNF_Mem_Server - FirstVNF_RAM_Server ) ) - ( Min( MRS ,RRS ) * ( PN + ACS ) ) )", "choosing": "( Min( RRSe ,CS ) + ( ( MUR + ( ( ( Max( MUR,Max( MUM,MUC ) ) - ( MUC + ( CS - MLU ) ) ) / RRSe ) * ( Min( RCSe ,MUR ) * CS ) ) ) * Max( MUC,( MUR * MLU ) ) ) )", "obj1": 0.7723577235772358, "obj2": 0.1831058609413835}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) - DDR ) )", "choosing": "( ( DS / ( DS / MUC ) ) - ( CS * CS ) )", "obj1": 0.991869918699187, "obj2": 0.003687151082297528}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9369918699186992, "obj2": 0.031073697266759202}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,ACS ) - ( Const * ARS ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) - ( ACS * ARS ) ) - ( ( ( Max( FirstVNF_CPU_Server,ACS ) - ( Const * ARS ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) ) - ( ACS * ARS ) ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * CS ) )", "obj1": 0.1402439024390244, "obj2": 0.7200869715541115}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 0.7845528455284553, "obj2": 0.1391281553820257}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * ( ( ( FirstVNF_CPU_Server - ARS ) / FirstVNF_CPU ) + CRS ) ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( RMSe - ( DS / Min( RRSe ,RMSe ) ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( ( ( FirstVNF_CPU * ARS ) * FirstVNF_Mem_Server ) / Max( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ),FirstVNF_CPU ) )", "choosing": "( Min( ( ( CS * CS ) + Min( MLU ,( MUM / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( Min( Min( ( Max( ( RRSe / DS ),( DS + MUM ) ) * RRSe ) ,MLU ) ,DS ) + CS ) ) )", "obj1": 0.1951219512195122, "obj2": 0.6060092415113906}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9390243902439024, "obj2": 0.029535100138646003}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * CS ) )", "obj1": 0.11788617886178862, "obj2": 0.7383436855385075}, {"determining": "( Min( DDR ,PN ) * ( ( ( ACS * ACS ) * BR ) / FirstVNF_Mem ) )", "choosing": "( ( ( RRSe / Min( RCSe ,( DS * MUR ) ) ) - RCSe ) - ( RRSe - MLU ) )", "obj1": 0.09146341463414634, "obj2": 0.7475959724425648}, {"determining": "( DDR - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUR / MUC ) - ( RMSe * Max( MLU,CS ) ) )", "obj1": 0.8556910569105691, "obj2": 0.13847349197709527}, {"determining": "( ( ( FirstVNF_CPU * Const ) / ( RRS * FirstVNF_RAM ) ) - Min( FirstVNF_Mem ,FirstVNF_Mem_Server ) )", "choosing": "( ( ( Max( ( DS / MUR ),( DS - RMSe ) ) / MUC ) + Min( RCSe ,MUR ) ) - ( CS * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.3996790512273982}, {"determining": "Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,( DDR * ACS ) )", "choosing": "( ( ( DS / MUR ) + ( RMSe / CS ) ) - ( RCSe + MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4829810293918322}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9532520325203252, "obj2": 0.02185434583633043}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( ( ( Const + CRS ) / DDR ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( Max( Min( MLU ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) ) + ( MUM * MUR ) )", "obj1": 0.9959349593495935, "obj2": 0.002251869251161595}, {"determining": "( ( PN / ( RRS * ( Const * FirstVNF_Mem_Server ) ) ) - Min( MRS ,FirstVNF_Mem_Server ) )", "choosing": "( ( MUC / DS ) - ( ( RRSe * ( CS - Max( MUM,RRSe ) ) ) * CS ) )", "obj1": 0.11788617886178862, "obj2": 0.7383436855385075}, {"determining": "( Min( Max( FirstVNF_Mem,( FirstVNF_RAM_Server * ( FirstVNF_Mem + BR ) ) ) ,PN ) * ( ACS / ( Const - DDR ) ) )", "choosing": "( ( RCSe - ( ( RMSe + RRSe ) / MUC ) ) - ( RRSe - MLU ) )", "obj1": 0.9532520325203252, "obj2": 0.02185434583633043}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) )", "choosing": "( ( DS / CS ) - ( CS * CS ) )", "obj1": 0.4247967479674797, "obj2": 0.40078833032610045}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ( Max( FirstVNF_CPU_Server,ACS ) - ( ACS * ARS ) ) ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( ( MUM - Min( MUR ,MUC ) ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 0.11991869918699187, "obj2": 0.7382499881790435}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) - DDR ) )", "choosing": "( ( DS / MUC ) - ( ( DS / MUC ) * CS ) )", "obj1": 0.9939024390243902, "obj2": 0.0027544088968883716}, {"determining": "( ( Max( Min( DDR ,ACS ),Min( MDR ,FirstVNF_RAM_Server ) ) - ( ( FirstVNF_Mem * MDR ) / Max( FirstVNF_RAM,BR ) ) ) - Max( ( Min( FirstVNF_CPU ,FirstVNF_RAM_Server ) * Max( AMS,MDR ) ),Min( ( FirstVNF_RAM * FirstVNF_CPU_Server ) ,( Const / CRS ) ) ) )", "choosing": "Max( ( Max( ( RMSe + RRSe ),( MLU - RMSe ) ) * ( ( MUR - MLU ) / ( RCSe / MUM ) ) ),Min( ( ( MUM + CS ) + ( RRSe / MUM ) ) ,( ( RCSe * RMSe ) / Max( CS,RRSe ) ) ) )", "obj1": 0.9979674796747967, "obj2": 0.0007750556015560908}, {"determining": "Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( Min( Min( ( ( FirstVNF_CPU_Server - BR ) * ( FirstVNF_CPU * Const ) ) ,ACS ) ,( ARS - DDR ) ) - DDR ) )", "choosing": "( ( DS / MUC ) - ( CS * CS ) )", "obj1": 0.9939024390243902, "obj2": 0.0027544088968883716}, {"determining": "( ( Const - FirstVNF_RAM_Server ) / ( ( Const - FirstVNF_RAM_Server ) + ARS ) )", "choosing": "( Min( ( ( CS * ( Max( MLU,RCSe ) + ( ( RCSe + MUM ) - CS ) ) ) + Min( MLU ,( RMSe / RCSe ) ) ) ,RRSe ) - ( ( RRSe + DS ) + ( MUR + ( ( Min( RCSe ,RRSe ) + ( ( ( MUR + RRSe ) - Max( MUR,RMSe ) ) - MLU ) ) - ( MLU / Max( Min( MUR ,( RMSe - CS ) ),Min( RMSe ,( DS - RRSe ) ) ) ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( PN ,AMS ) / ( ( Const - BR ) * ( ( RRS - Max( FirstVNF_Mem,Const ) ) * MDR ) ) )", "choosing": "( Max( Max( ( Max( MUR,MUC ) + MUC ),MUM ),RRSe ) + ( CS / RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ARS + FirstVNF_CPU_Server ) + ( ( Max( FirstVNF_RAM,Min( MDR ,MRS ) ) - ( FirstVNF_Mem_Server / MRS ) ) / DDR ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( Max( ( RCSe * ( MUC + Max( ( ( MUC + RMSe ) / MUM ),MUM ) ) ),Min( MLU ,RCSe ) ) / ( ( MUR + ( RCSe * DS ) ) / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - FirstVNF_CPU_Server ) - Max( BR,ARS ) )", "choosing": "( Max( ( ( RCSe * MUM ) + Max( MUC,RMSe ) ),MLU ) - ( RCSe * RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,( ( CRS - ARS ) * FirstVNF_Mem ) ) / Min( FirstVNF_RAM_Server ,Const ) )", "choosing": "( ( Max( Min( Max( ( ( Max( RRSe,DS ) + CS ) + RRSe ),( ( Max( MUM,RCSe ) * RRSe ) - ( MUM - ( DS * DS ) ) ) ) ,CS ),MUM ) / ( DS * MUM ) ) - ( CS - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ( ( DDR - ACS ) - PN ) ) / ( FirstVNF_Mem_Server - PN ) ) - ( AMS / FirstVNF_Mem ) )", "choosing": "Min( Max( ( ( MLU - Max( RRSe,MUC ) ) - MLU ),MUC ) ,Min( DS ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - FirstVNF_CPU_Server ) * ( PN * ( ( ( Const - DDR ) + BR ) * MDR ) ) )", "choosing": "( ( MUM - Max( RMSe,Min( MUM ,CS ) ) ) * ( MLU / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_Mem_Server ,AMS ) ) - ( Max( ( Max( FirstVNF_RAM,CRS ) + ( PN + ARS ) ),FirstVNF_CPU ) * FirstVNF_Mem ) )", "choosing": "Min( ( ( RRSe - CS ) * Max( MUR,MUC ) ) ,( ( RRSe * RRSe ) * Min( MLU ,( ( ( ( CS - ( MUM - MLU ) ) / ( RCSe / ( MUC + RMSe ) ) ) * Min( ( ( RCSe * CS ) + Max( DS,CS ) ) ,Max( Max( MUC,RMSe ),( MLU * MUC ) ) ) ) - ( Max( RRSe,MLU ) / MUM ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( DDR / FirstVNF_Mem ) ,( FirstVNF_CPU * PN ) ) / ( Max( FirstVNF_CPU,FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MLU + RRSe ) / Max( MUM,MUR ) ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( CRS + MDR ) + ( BR - ARS ) ) / ( Min( ARS ,FirstVNF_CPU_Server ) / ( ARS * AMS ) ) )", "choosing": "( ( Min( DS ,MUC ) / ( CS - MUM ) ) + ( ( MLU - DS ) * Max( MUM,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}]}