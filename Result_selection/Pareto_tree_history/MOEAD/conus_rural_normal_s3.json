{"1": [{"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ACS ) )", "choosing": "Min( ( DS / DS ) ,( RRSe * MUC ) )", "obj1": 0.3821138211382114, "obj2": 0.5005330589361957}, {"determining": "Min( Max( PN,DDR ) ,( CRS - ACS ) )", "choosing": "( ( ( ( DS * CS ) / ( MUC * MLU ) ) * ( ( MUR / RCSe ) * ( RMSe * RCSe ) ) ) - ( Max( ( MUR * MLU ),Max( CS,MUC ) ) + ( ( MUC - RRSe ) + ( MUM + MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem * FirstVNF_CPU ) / Max( FirstVNF_Mem_Server,DDR ) )", "choosing": "Max( ( MUM * RCSe ),( MUR + DS ) )", "obj1": 0.5223577235772358, "obj2": 0.3881893529957169}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RCSe ) * Min( RRSe ,RCSe ) )", "obj1": 0.6056910569105691, "obj2": 0.3029648618089854}, {"determining": "Max( Min( CRS ,MRS ),Max( FirstVNF_CPU_Server,RRS ) )", "choosing": "( ( MUR * MUC ) * Max( MUR,MUM ) )", "obj1": 0.3780487804878049, "obj2": 0.49765701519336325}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( DS / RCSe ) )", "obj1": 0.4613821138211382, "obj2": 0.4467956618968182}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.39227642276422764, "obj2": 0.4989974734765422}, {"determining": "Min( Min( FirstVNF_RAM ,( Const * FirstVNF_Mem_Server ) ) ,( ACS / FirstVNF_Mem ) )", "choosing": "Min( ( MUC * MUR ) ,( RMSe / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( Min( RRS ,MDR ) ,FirstVNF_CPU_Server ) ,( FirstVNF_RAM_Server - MDR ) ) * ( FirstVNF_CPU - ( MRS - ( FirstVNF_CPU_Server / ACS ) ) ) )", "choosing": "( ( RMSe / ( RCSe + ( Min( MUR ,( MLU + MUC ) ) - MUM ) ) ) * ( RMSe * ( ( Max( MUM,DS ) * MUM ) - MLU ) ) )", "obj1": 0.1991869918699187, "obj2": 0.6872964725574955}, {"determining": "Max( ( MDR - BR ),( RRS - CRS ) )", "choosing": "( ( CS * RCSe ) / ( MUC + RRSe ) )", "obj1": 0.34959349593495936, "obj2": 0.5972446642631487}, {"determining": "Min( ( BR + PN ) ,( CRS / RRS ) )", "choosing": "Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) )", "obj1": 0.40040650406504064, "obj2": 0.5012024456797777}, {"determining": "( ( RRS / CRS ) / Max( ( ( FirstVNF_RAM * AMS ) * FirstVNF_Mem ),Const ) )", "choosing": "Max( Min( RRSe ,Max( ( CS - ( MUC * Min( ( MUC * ( MUR - MUM ) ) ,MLU ) ) ),Min( Max( ( MLU / MUC ),MUR ) ,RMSe ) ) ),( CS / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const / ( PN * Min( FirstVNF_CPU ,FirstVNF_Mem_Server ) ) ) + Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) )", "choosing": "( ( MLU - MUC ) * ( DS - RCSe ) )", "obj1": 0.5995934959349594, "obj2": 0.29607395802072617}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_RAM ) - Min( FirstVNF_Mem ,MDR ) )", "choosing": "( Max( DS,MUM ) - ( MUM + MUC ) )", "obj1": 0.32113821138211385, "obj2": 0.5944187884052877}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_RAM_Server,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,RCSe ) )", "obj1": 0.5975609756097561, "obj2": 0.29420805384415166}, {"determining": "( ( MDR + FirstVNF_Mem_Server ) / ( MRS + FirstVNF_RAM_Server ) )", "choosing": "Max( Max( RRSe,DS ),Min( MUM ,MLU ) )", "obj1": 0.3882113821138211, "obj2": 0.5096495072485271}, {"determining": "Min( ( FirstVNF_Mem + FirstVNF_Mem ) ,( MDR * ACS ) )", "choosing": "Max( ( CS + RMSe ),( CS / RMSe ) )", "obj1": 0.3516260162601626, "obj2": 0.5914968565587042}, {"determining": "( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) )", "choosing": "Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( FirstVNF_CPU_Server * AMS ) ,( FirstVNF_RAM_Server + ARS ) ) + ( Max( Const,ARS ) - ( FirstVNF_CPU + FirstVNF_RAM_Server ) ) )", "choosing": "Min( ( Min( DS ,MUR ) - ( RCSe + MLU ) ) ,( Min( DS ,RRSe ) + Min( CS ,CS ) ) )", "obj1": 0.34552845528455284, "obj2": 0.5327412210759358}, {"determining": "Min( ( MRS * AMS ) ,( RRS * FirstVNF_RAM_Server ) )", "choosing": "( ( Max( MUC,MUC ) * CS ) - Min( ( MLU - MUR ) ,( MLU - DS ) ) )", "obj1": 0.2682926829268293, "obj2": 0.654292262867225}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( Max( Const,( Const / AMS ) ) / ( PN + DDR ) )", "choosing": "( ( ( MUM - MUR ) * RMSe ) / ( Max( MUM,DS ) + ( MLU / RRSe ) ) )", "obj1": 0.34146341463414637, "obj2": 0.5735955756364556}, {"determining": "Min( Max( CRS,MRS ) ,Max( FirstVNF_Mem_Server,FirstVNF_CPU_Server ) )", "choosing": "( ( Min( MUC ,CS ) / Max( RCSe,MUM ) ) - ( ( RRSe * CS ) / ( CS * MUC ) ) )", "obj1": 0.29065040650406504, "obj2": 0.6134207750151863}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / RRS ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - CS ) ) )", "obj1": 0.3353658536585366, "obj2": 0.5202846460209257}, {"determining": "( ( Max( FirstVNF_RAM,FirstVNF_RAM ) * ( ARS - MRS ) ) * ( Min( MDR ,BR ) * ( CRS + MRS ) ) )", "choosing": "Max( Max( RRSe,RCSe ),( RRSe / MUR ) )", "obj1": 0.34146341463414637, "obj2": 0.5730593394601723}, {"determining": "( ( ( FirstVNF_Mem_Server * FirstVNF_CPU ) * ( ARS + CRS ) ) / ( Max( MDR,FirstVNF_RAM ) + ( ACS + BR ) ) )", "choosing": "( ( MUM / ( RMSe * RCSe ) ) + ( ( MUC / MUM ) + Min( MUM ,MUC ) ) )", "obj1": 0.34959349593495936, "obj2": 0.5539745441915196}, {"determining": "( ( Max( FirstVNF_RAM_Server,PN ) - FirstVNF_Mem_Server ) + ( Const - MDR ) )", "choosing": "( ( ( MLU - RMSe ) * ( MUC * DS ) ) - Min( ( DS + MUC ) ,Max( RCSe,MLU ) ) )", "obj1": 0.2682926829268293, "obj2": 0.609871641437085}, {"determining": "( Min( RRS ,FirstVNF_CPU ) * ( ( FirstVNF_Mem_Server / FirstVNF_CPU_Server ) * Max( DDR,Const ) ) )", "choosing": "( Min( ( CS * RMSe ) ,( RCSe * RMSe ) ) * Min( ( CS + CS ) ,( DS / RRSe ) ) )", "obj1": 0.49796747967479676, "obj2": 0.42504837623392117}, {"determining": "( ( ( ACS + CRS ) - ( ARS - FirstVNF_CPU_Server ) ) - ( ( ACS - BR ) * ( RRS * FirstVNF_Mem_Server ) ) )", "choosing": "( ( MUM - ( MUC / MUC ) ) - Max( ( RMSe + MUM ),( DS + MUC ) ) )", "obj1": 0.3170731707317073, "obj2": 0.607390594337344}, {"determining": "Max( Max( CRS,FirstVNF_CPU_Server ),Max( ( FirstVNF_CPU_Server + MRS ),ARS ) )", "choosing": "( Min( ( MUM / DS ) ,RMSe ) - ( ( MUM - MUC ) * ( MUM - RMSe ) ) )", "obj1": 0.3719512195121951, "obj2": 0.5485450667693873}, {"determining": "Max( ( PN * ( FirstVNF_Mem / DDR ) ),( ( ( ( ( ARS / DDR ) + ( ACS - ( ( FirstVNF_Mem - FirstVNF_Mem ) / PN ) ) ) - ARS ) / Max( BR,AMS ) ) / FirstVNF_Mem ) )", "choosing": "( Max( ( DS - MUM ),( RMSe * ( MUR - MUM ) ) ) + Min( ( Max( Max( CS,MUR ),( ( RRSe + DS ) * MLU ) ) / DS ) ,( RMSe * RCSe ) ) )", "obj1": 0.1565040650406504, "obj2": 0.7237725482439334}, {"determining": "Max( ( AMS - Min( AMS ,Const ) ),( MRS - ARS ) )", "choosing": "( ( Min( CS ,MLU ) / ( RCSe - MLU ) ) * ( ( RRSe * MUC ) + RCSe ) )", "obj1": 0.29878048780487804, "obj2": 0.5840474845169579}, {"determining": "Min( Max( ( FirstVNF_RAM / FirstVNF_Mem_Server ),( Const - ARS ) ) ,( ( DDR - FirstVNF_Mem_Server ) - ( MDR / MDR ) ) )", "choosing": "Max( ( ( DS / RMSe ) / Max( MLU,RMSe ) ),Max( ( MUM + RRSe ),( MUR - MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( BR - FirstVNF_Mem_Server ),( Min( FirstVNF_CPU_Server ,ARS ) * AMS ) )", "choosing": "( ( CS + MLU ) / ( RRSe - RCSe ) )", "obj1": 0.32723577235772355, "obj2": 0.5649788982006666}, {"determining": "( Min( ( PN - DDR ) ,( MDR + MRS ) ) - ( FirstVNF_Mem_Server * FirstVNF_Mem ) )", "choosing": "Max( Min( ( MUR - DS ) ,MUR ),( MLU + MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,( FirstVNF_CPU * Const ) ) * ( MDR - MRS ) )", "choosing": "Max( Max( ( RCSe + Max( RRSe,DS ) ),MUM ),( ( RMSe * MUR ) / DS ) )", "obj1": 0.13617886178861788, "obj2": 0.7322415123465469}, {"determining": "Min( ( ( ( MDR + AMS ) - Max( FirstVNF_CPU,MDR ) ) + ( ( MDR / RRS ) / Max( FirstVNF_CPU_Server,ACS ) ) ) ,( ( ( Const + FirstVNF_CPU_Server ) / ( CRS / FirstVNF_RAM_Server ) ) * ( Min( ARS ,ACS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.34959349593495936, "obj2": 0.5371077210723815}, {"determining": "( ( FirstVNF_RAM_Server * DDR ) + Max( ( MDR / MDR ),FirstVNF_RAM ) )", "choosing": "Max( ( Min( MUM ,MLU ) - MLU ),Max( CS,RRSe ) )", "obj1": 0.32926829268292684, "obj2": 0.5886285906550839}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "( Min( ( ARS * ( MDR - ( RRS / MDR ) ) ) ,BR ) + Min( Min( FirstVNF_CPU ,FirstVNF_Mem_Server ) ,MRS ) )", "choosing": "Max( ( CS / MUR ),Max( ( ( ( Min( Max( RMSe,MUM ) ,( ( RMSe + MLU ) / ( MUC * CS ) ) ) + ( RRSe / DS ) ) * DS ) / ( MUR - ( ( MUM - MUM ) + ( MLU + RMSe ) ) ) ),MLU ) )", "obj1": 0.30691056910569103, "obj2": 0.6403600722569246}, {"determining": "( ( ( ( FirstVNF_RAM * FirstVNF_CPU ) + ( FirstVNF_Mem_Server + MRS ) ) - Max( ( PN * ACS ),( FirstVNF_CPU_Server * Const ) ) ) * ( ( Max( Min( DDR ,ARS ),FirstVNF_CPU_Server ) / ( FirstVNF_RAM * FirstVNF_Mem ) ) + ( ( MDR / ARS ) - ( AMS * FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( RRSe * MLU ) + ( MUC / MLU ) ) - Min( MLU ,CS ) ) + ( ( ( MUC - RCSe ) * ( RMSe + RRSe ) ) / Min( Max( DS,DS ) ,( MUC / MUC ) ) ) )", "obj1": 0.3008130081300813, "obj2": 0.6095116114109957}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Const + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( MUC / ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ) )", "obj1": 0.32926829268292684, "obj2": 0.5557975264447116}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * ( Max( ( MDR * RRS ),Max( ACS,AMS ) ) + ( ( DDR * FirstVNF_CPU ) + ( DDR + ACS ) ) ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.5670731707317073, "obj2": 0.3303175249644268}, {"determining": "( ( Min( Min( FirstVNF_CPU ,PN ) ,( FirstVNF_RAM_Server - RRS ) ) - ( Min( PN ,ARS ) + ( ARS / RRS ) ) ) - Min( Min( ( RRS * FirstVNF_RAM ) ,( FirstVNF_CPU_Server - RRS ) ) ,( ( DDR * BR ) - ( ARS / FirstVNF_Mem ) ) ) )", "choosing": "( Max( ( ( DS * MUM ) + Max( RMSe,CS ) ),( ( DS * RRSe ) - Max( DS,RMSe ) ) ) / ( ( ( RRSe * RRSe ) + ( MUR + MUM ) ) - Max( ( MUR - MUR ),( MUC * RMSe ) ) ) )", "obj1": 0.4166666666666667, "obj2": 0.47981514417173415}, {"determining": "( ( Max( ( RRS * FirstVNF_RAM_Server ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( RRS ,CRS ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( Min( MLU ,CS ) - ( MUM * RMSe ) ) - ( Max( MUM,MUR ) + Max( RMSe,RCSe ) ) ) / ( ( Max( RRSe,MUC ) + ( MLU + CS ) ) * Min( ( MUC - CS ) ,( RRSe * ( MUM * MUM ) ) ) ) )", "obj1": 0.27439024390243905, "obj2": 0.6049835262655616}, {"determining": "( ( Max( ( RRS + AMS ),Min( DDR ,MRS ) ) + ( ( FirstVNF_Mem_Server * ARS ) / ( ACS - FirstVNF_Mem_Server ) ) ) - Max( ( Min( MRS ,ARS ) * Max( CRS,AMS ) ),( ( FirstVNF_Mem_Server + FirstVNF_CPU_Server ) / Max( MDR,CRS ) ) ) )", "choosing": "( Max( ( ( MLU - RRSe ) + ( MUM * MLU ) ),( Max( MUR,MLU ) - Min( RRSe ,MUC ) ) ) - ( ( ( DS - MUR ) * ( CS + MUC ) ) * Max( ( DS - DS ),( MUC + MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 0.258130081300813, "obj2": 0.627733174901464}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "Min( ( Max( ( MRS / MRS ),BR ) / MRS ) ,Min( FirstVNF_RAM_Server ,( FirstVNF_RAM * ( Const / CRS ) ) ) )", "choosing": "Max( ( ( MUR / Min( MLU ,RCSe ) ) + Max( CS,( MLU - CS ) ) ),( ( MUC / DS ) * Max( ( Min( Min( Max( MLU,( CS * RMSe ) ) ,( MUC * Min( RRSe ,RRSe ) ) ) ,RMSe ) + RRSe ),Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "Min( ( ( ( BR / ACS ) - ( CRS * BR ) ) - ( ( AMS * FirstVNF_Mem ) - ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) ) ) ,( ( ( Const + CRS ) + Max( FirstVNF_CPU_Server,ACS ) ) * ( Max( MDR,PN ) - ( PN * BR ) ) ) )", "choosing": "Max( ( ( MUM - MUM ) + MUC ),( DS - MUC ) )", "obj1": 0.5142276422764228, "obj2": 0.39441249161730896}], "2": [{"determining": "Min( Max( PN,DDR ) ,( CRS - ACS ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( Min( RRS ,MDR ) ,FirstVNF_CPU_Server ) ,( FirstVNF_RAM_Server - MDR ) ) * ( FirstVNF_CPU - ( MRS - ( FirstVNF_CPU_Server / ACS ) ) ) )", "choosing": "( ( RMSe / ( RCSe + ( Min( MUR ,( MLU + MUC ) ) - MUM ) ) ) * ( RMSe * ( ( Max( MUM,DS ) * MUM ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "Min( Max( PN,DDR ) ,( CRS - ACS ) )", "choosing": "( ( ( ( DS * CS ) / ( MUC * MLU ) ) * ( ( MUR / RCSe ) * ( RMSe * RCSe ) ) ) - ( Max( ( MUR * MLU ),Max( CS,MUC ) ) + ( ( MUC - RRSe ) + ( MUM + MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( CRS + FirstVNF_CPU_Server ) * RRS ) - FirstVNF_CPU ) * Min( Const ,Max( ( MRS - MDR ),Min( ( FirstVNF_Mem * Max( ( ARS / ( MRS / FirstVNF_RAM ) ),DDR ) ) ,( RRS - ( ( Max( ACS,ACS ) / Max( FirstVNF_RAM_Server,PN ) ) + PN ) ) ) ) ) )", "choosing": "( ( DS - DS ) * Min( ( ( DS + MUR ) - ( RRSe / ( DS + ( MUM + RRSe ) ) ) ) ,MLU ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,( FirstVNF_CPU_Server * ( RRS - FirstVNF_CPU ) ) ) / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,MUC ) - ( DS + MUC ) ) ),( Max( ( CS / MUR ),Max( Min( Min( MUR ,MLU ) ,RMSe ),MLU ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7560975609756098, "obj2": 0.23983783813515155}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( Max( ( RRS * FirstVNF_RAM_Server ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( ( ( Max( ( RRS + AMS ),Min( DDR ,MRS ) ) + ( ( FirstVNF_Mem_Server * ARS ) / ( ACS - FirstVNF_Mem_Server ) ) ) - Max( ( Min( MRS ,ARS ) * Max( CRS,AMS ) ),( ( FirstVNF_Mem_Server + FirstVNF_CPU_Server ) / Max( MDR,CRS ) ) ) ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( ( ( ( DS - MUR ) * ( CS + MUC ) ) * Max( ( DS - DS ),( MUC + MUC ) ) ) - ( MUM * RMSe ) ) - ( Max( MUM,MUR ) - Max( RMSe,RCSe ) ) ) / ( ( Max( RRSe,MUC ) + ( MLU + CS ) ) * Min( ( MUC - CS ) ,( MUC / RRSe ) ) ) )", "obj1": 0.3556910569105691, "obj2": 0.5062671066865124}, {"determining": "( ( Min( Min( FirstVNF_CPU ,PN ) ,( FirstVNF_RAM_Server - RRS ) ) - ( Min( PN ,ARS ) + ( ARS / RRS ) ) ) - Min( Min( ( RRS * FirstVNF_RAM ) ,( FirstVNF_CPU_Server - RRS ) ) ,( ( DDR * BR ) - ( ARS / FirstVNF_Mem ) ) ) )", "choosing": "( Max( ( ( DS * MUM ) + Max( RMSe,CS ) ),( ( DS * RRSe ) - Max( DS,RMSe ) ) ) / ( ( ( RRSe * RRSe ) + ( MUR + MUM ) ) - Max( ( MUR - MUR ),( MUC * RMSe ) ) ) )", "obj1": 0.4166666666666667, "obj2": 0.47981514417173415}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( Max( AMS,BR ) * Max( ARS,DDR ) ) + BR ) )", "choosing": "( ( RMSe / ( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) ) / Min( ( MUR - Max( MLU,RCSe ) ) ,MUC ) )", "obj1": 0.23983739837398374, "obj2": 0.6373331811811861}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * ( Max( ( MDR * RRS ),Max( ACS,AMS ) ) + ( ( DDR * FirstVNF_CPU ) + ( DDR + ACS ) ) ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.5670731707317073, "obj2": 0.3303175249644268}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,Max( FirstVNF_CPU_Server,RRS ) )", "choosing": "Min( ( RRSe - DS ) ,Max( MUR,MUM ) )", "obj1": 0.20934959349593496, "obj2": 0.6553566189962233}, {"determining": "( ( Max( ( PN / FirstVNF_CPU ),( ( Const + FirstVNF_Mem ) - FirstVNF_CPU ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * ( Max( ( MDR * RRS ),Max( ACS,AMS ) ) + ( ( DDR * FirstVNF_CPU ) + ( DDR + ACS ) ) ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( MUC / ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ) ) ) )", "obj1": 0.5223577235772358, "obj2": 0.36756830586090455}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Const + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.5, "obj2": 0.3867246119998736}, {"determining": "Max( FirstVNF_CPU,Max( FirstVNF_CPU_Server,RRS ) )", "choosing": "( ( Max( ( MUM * RCSe ),( MUR + DS ) ) * MUC ) * Max( MUR,MUM ) )", "obj1": 0.4878048780487805, "obj2": 0.40057983317824913}, {"determining": "( ( FirstVNF_Mem * FirstVNF_CPU ) / Max( FirstVNF_Mem_Server,DDR ) )", "choosing": "Max( ( MUM * RCSe ),( MUR + DS ) )", "obj1": 0.4695121951219512, "obj2": 0.41507689667624403}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.3008130081300813, "obj2": 0.5420438324121847}, {"determining": "( ( ( ( FirstVNF_RAM * FirstVNF_CPU ) + ( FirstVNF_Mem_Server + MRS ) ) - Max( ( PN * ACS ),( FirstVNF_CPU_Server * Const ) ) ) * ( ( Max( Min( DDR ,ARS ),FirstVNF_CPU_Server ) / ( FirstVNF_RAM * FirstVNF_Mem ) ) + ( ( MDR / ARS ) - ( AMS * FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( RRSe * MLU ) + ( MUC / MLU ) ) - Min( MLU ,CS ) ) + ( ( ( MUC - RCSe ) * ( RMSe + RRSe ) ) / Min( Max( DS,DS ) ,( MUC / MUC ) ) ) )", "obj1": 0.29471544715447157, "obj2": 0.5688555980424058}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * ( Max( ( MDR * RRS ),Max( ACS,AMS ) ) + ( ( DDR * FirstVNF_CPU ) + ( DDR + ACS ) ) ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.5670731707317073, "obj2": 0.3303175249644268}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.5345528455284553, "obj2": 0.351478346364074}, {"determining": "( ( Max( FirstVNF_RAM_Server,PN ) - ( ( ( FirstVNF_Mem_Server * FirstVNF_CPU ) * ( ARS + CRS ) ) / ( Max( MDR,FirstVNF_RAM ) + ( ACS + BR ) ) ) ) + ( Const - MDR ) )", "choosing": "( ( ( ( RMSe * RCSe ) - RMSe ) * ( MUC * DS ) ) - Min( ( DS + MUC ) ,Max( RCSe,MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6754436025637707}, {"determining": "( Min( FirstVNF_Mem ,FirstVNF_RAM ) - Min( FirstVNF_CPU_Server ,MDR ) )", "choosing": "( Max( DS,MUM ) - ( RCSe / MUC ) )", "obj1": 0.40447154471544716, "obj2": 0.48430185418102245}, {"determining": "Max( ( PN * MDR ),( Const - FirstVNF_Mem ) )", "choosing": "( Max( ( RMSe / DS ),Min( CS ,MUC ) ) + Max( ( RMSe - MUM ),( RMSe * MUM ) ) )", "obj1": 0.1402439024390244, "obj2": 0.7265980693954479}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( Min( DDR ,( FirstVNF_CPU * Const ) ) * ( MDR - Min( ( PN - DDR ) ,( MDR + MRS ) ) ) )", "choosing": "Max( Max( ( RCSe + Max( RRSe,DS ) ),MUM ),( ( ( MLU + MLU ) * MUR ) / DS ) )", "obj1": 0.1565040650406504, "obj2": 0.718903299125455}, {"determining": "Max( Min( FirstVNF_CPU ,FirstVNF_RAM ),( RRS - CRS ) )", "choosing": "( MUR / ( MUC + RRSe ) )", "obj1": 0.26422764227642276, "obj2": 0.6153906576968201}, {"determining": "( ( Max( ( FirstVNF_CPU / ( BR / Min( RRS ,BR ) ) ),PN ) / PN ) * Min( Max( DDR,FirstVNF_Mem ) ,ARS ) )", "choosing": "( ( MUC - ( MLU - MUM ) ) * Max( ( MUM * MUC ),( ( RCSe * ( ( MLU - ( MUR + RRSe ) ) - RMSe ) ) + ( Min( MUC ,( MLU + MUC ) ) - RRSe ) ) ) )", "obj1": 0.11382113821138211, "obj2": 0.7310075646692816}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.5345528455284553, "obj2": 0.351478346364074}, {"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 0.258130081300813, "obj2": 0.627733174901464}, {"determining": "Max( ( AMS - Min( AMS ,Const ) ),( Max( ( FirstVNF_CPU_Server + MRS ),ARS ) - ARS ) )", "choosing": "( ( MUM / DS ) * ( ( RRSe * MUC ) + RCSe ) )", "obj1": 0.18292682926829268, "obj2": 0.6981591016381771}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) )", "obj1": 0.37398373983739835, "obj2": 0.4991992030249691}, {"determining": "( ( Min( Min( FirstVNF_CPU ,PN ) ,( FirstVNF_RAM_Server - RRS ) ) - ( Min( PN ,ARS ) + ( ARS / RRS ) ) ) - Min( Min( ( RRS * FirstVNF_RAM ) ,( FirstVNF_CPU_Server - RRS ) ) ,( ( DDR * BR ) - ( ARS / FirstVNF_Mem ) ) ) )", "choosing": "( Max( ( ( DS * MUM ) + Max( RMSe,CS ) ),( ( DS * RRSe ) - Max( DS,RMSe ) ) ) / ( ( ( RRSe * RRSe ) + ( MUR + MUM ) ) - Max( ( MUR - MUR ),( MUC * RMSe ) ) ) )", "obj1": 0.4166666666666667, "obj2": 0.47981514417173415}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( Max( AMS,BR ) * ( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( RRS / ARS ) ) ) + BR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( MUR - Max( MLU,RCSe ) ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.18902439024390244, "obj2": 0.6950605517198603}, {"determining": "Max( ( PN * MDR ),( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( Min( CS ,MLU ) / ( RCSe - MLU ) ) * ( ( RRSe * MUC ) + RCSe ) )", "obj1": 0.2682926829268293, "obj2": 0.6019598897320816}, {"determining": "( ( Max( ( RRS * FirstVNF_RAM_Server ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( ( BR * FirstVNF_Mem_Server ) ,( Const + FirstVNF_RAM_Server ) ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( Min( MLU ,CS ) - ( MUM * RMSe ) ) - ( Max( MUM,MUR ) - Max( RMSe,RCSe ) ) ) / ( ( Max( RRSe,MUC ) + ( MLU + CS ) ) * Min( ( MUC - CS ) ,( MUC / RRSe ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5816302275002911}, {"determining": "Max( Max( ( AMS - Min( AMS ,Const ) ),( MRS - ARS ) ),( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( Max( ( RMSe / DS ),( CS + MUM ) ) + ( ( RRSe * MUC ) + RCSe ) )", "obj1": 0.15040650406504066, "obj2": 0.7247965779873883}, {"determining": "( Min( Min( Min( RRS ,MDR ) ,FirstVNF_CPU_Server ) ,( FirstVNF_RAM_Server - MDR ) ) * ( FirstVNF_CPU - ( MRS - ( FirstVNF_CPU_Server / ACS ) ) ) )", "choosing": "( ( RMSe / ( RCSe + ( Min( MUR ,( MLU + MUC ) ) - MUM ) ) ) * ( RMSe * ( ( Max( MUM,DS ) * MUM ) - MLU ) ) )", "obj1": 0.1991869918699187, "obj2": 0.6872964725574955}, {"determining": "( ( ( FirstVNF_Mem_Server * FirstVNF_CPU ) * ( ARS + CRS ) ) / ( Max( MDR,FirstVNF_RAM ) + ( ACS + BR ) ) )", "choosing": "( ( MUM / ( RMSe * RCSe ) ) + ( ( MUC / MUM ) + Min( MUM ,MUC ) ) )", "obj1": 0.2845528455284553, "obj2": 0.5846229753710058}, {"determining": "Min( Max( PN,DDR ) ,( Max( MDR,PN ) - ( PN * BR ) ) )", "choosing": "( ( MUC * ( ( MUR / RCSe ) * ( RMSe * RCSe ) ) ) - ( Max( ( MUR * MLU ),Max( CS,MUC ) ) + ( ( MUC - RRSe ) + ( MUM + MUC ) ) ) )", "obj1": 0.28252032520325204, "obj2": 0.5933641373862814}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( MLU,RCSe ) ) ,MUC ) )", "obj1": 0.258130081300813, "obj2": 0.627733174901464}, {"determining": "( Min( FirstVNF_Mem ,CRS ) * Max( FirstVNF_Mem_Server,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * RRSe ) )", "obj1": 0.1991869918699187, "obj2": 0.6872964725574955}, {"determining": "Max( ( MRS - ( PN - FirstVNF_RAM_Server ) ),Max( ( FirstVNF_RAM_Server + MRS ),ARS ) )", "choosing": "( ( MUM - ( MUC / MUC ) ) - Max( ( RMSe + MUM ),( DS + MUC ) ) )", "obj1": 0.27235772357723576, "obj2": 0.5991273234440345}, {"determining": "Max( Min( CRS ,MRS ),Max( FirstVNF_CPU_Server,RRS ) )", "choosing": "( ( MUR * MUC ) * Max( MUR,MUM ) )", "obj1": 0.3780487804878049, "obj2": 0.49765701519336325}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}], "3": [{"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( PN,DDR ) ,( CRS - ACS ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Min( CRS ,( ACS / FirstVNF_Mem ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.08943089430894309, "obj2": 0.747558381060394}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,( FirstVNF_CPU_Server * ( RRS - FirstVNF_CPU ) ) ) / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,MUC ) - ( DS + MUC ) ) ),( Max( ( CS / MUR ),Max( Min( Min( MUR ,MLU ) ,RMSe ),MLU ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7560975609756098, "obj2": 0.23983783813515155}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - CS ) ) )", "obj1": 0.35365853658536583, "obj2": 0.4958581606469861}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( Max( AMS,BR ) * Max( ARS,DDR ) ) + BR ) )", "choosing": "( ( RMSe / ( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) ) / Min( ( MUR - Max( MLU,RCSe ) ) ,MUC ) )", "obj1": 0.23983739837398374, "obj2": 0.6373331811811861}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Const + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.5, "obj2": 0.3867246119998736}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.43089430894308944, "obj2": 0.4638988030478627}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,Max( FirstVNF_CPU_Server,RRS ) )", "choosing": "Min( ( RRSe - DS ) ,Max( MUR,MUM ) )", "obj1": 0.20934959349593496, "obj2": 0.6553566189962233}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MUC * DS ) / Max( CS,RCSe ) )", "obj1": 0.5752032520325203, "obj2": 0.31398357188806303}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( Max( ( PN / FirstVNF_CPU ),( ( Const + FirstVNF_Mem ) - FirstVNF_CPU ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * ( Max( ( MDR * RRS ),Max( ACS,AMS ) ) + ( ( DDR * FirstVNF_CPU ) + ( DDR + ACS ) ) ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( MUC / ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ) ) ) )", "obj1": 0.5223577235772358, "obj2": 0.36756830586090455}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.3008130081300813, "obj2": 0.5420438324121847}, {"determining": "( ( ( ( FirstVNF_RAM * FirstVNF_CPU ) + ( FirstVNF_Mem_Server + MRS ) ) - Max( ( PN * ACS ),( FirstVNF_CPU_Server * Const ) ) ) * ( ( Max( Min( DDR ,ARS ),FirstVNF_CPU_Server ) / ( FirstVNF_RAM * FirstVNF_Mem ) ) + ( ( MDR / ARS ) - ( AMS * FirstVNF_RAM ) ) ) )", "choosing": "( ( ( ( RRSe * MLU ) + ( MUC / MLU ) ) - Min( MLU ,CS ) ) + ( ( ( MUC - RCSe ) * ( RMSe + RRSe ) ) / Min( Max( DS,DS ) ,( MUC / MUC ) ) ) )", "obj1": 0.29471544715447157, "obj2": 0.5688555980424058}, {"determining": "( ( FirstVNF_Mem * FirstVNF_CPU ) / Max( FirstVNF_Mem_Server,DDR ) )", "choosing": "Max( ( MUM * RCSe ),( MUR + DS ) )", "obj1": 0.4695121951219512, "obj2": 0.41507689667624403}, {"determining": "( ( Max( ( FirstVNF_CPU / ( BR / Min( RRS ,BR ) ) ),PN ) / PN ) * Min( Max( DDR,FirstVNF_Mem ) ,ARS ) )", "choosing": "( ( MUC - ( MLU - MUM ) ) * Max( ( MUM * MUC ),( ( RCSe * ( ( MLU - ( MUR + RRSe ) ) - RMSe ) ) + ( Min( MUC ,( MLU + MUC ) ) - RRSe ) ) ) )", "obj1": 0.24796747967479674, "obj2": 0.6185074266811756}, {"determining": "( Min( MRS ,FirstVNF_Mem ) + ( FirstVNF_RAM + ( DDR / Max( FirstVNF_CPU,MDR ) ) ) )", "choosing": "( ( MUR - MLU ) * Max( ( MUR / ( MLU / ( ( MLU / MUR ) * Min( Max( MUC,CS ) ,CS ) ) ) ),Min( RRSe ,DS ) ) )", "obj1": 0.26422764227642276, "obj2": 0.6117393896729099}, {"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) ) )", "choosing": "Min( DS ,( MUC * MUC ) )", "obj1": 0.6117886178861789, "obj2": 0.2896031378272735}, {"determining": "( ( Max( ( RRS * Min( FirstVNF_Mem ,MDR ) ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( ( BR * FirstVNF_Mem_Server ) ,( Const + FirstVNF_RAM_Server ) ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( Min( MLU ,CS ) - ( RCSe * RMSe ) ) - ( Max( MUM,MUR ) - Max( RMSe,RCSe ) ) ) / ( ( Max( RRSe,MUC ) + ( MLU + CS ) ) * Min( ( MUC - CS ) ,( MUC / RRSe ) ) ) )", "obj1": 0.2682926829268293, "obj2": 0.5904921628621312}, {"determining": "( ( Max( FirstVNF_RAM_Server,PN ) - ( ( ( FirstVNF_Mem_Server * FirstVNF_CPU ) * ( ARS + CRS ) ) / ( Max( MDR,FirstVNF_RAM ) + ( ACS + BR ) ) ) ) + ( Const - MDR ) )", "choosing": "( ( ( ( RMSe * RCSe ) - RMSe ) * ( MUC * DS ) ) - Min( ( DS + MUC ) ,Max( RCSe,MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6754436025637707}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( Min( CRS ,( ACS / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.3383334215675744}, {"determining": "( FirstVNF_Mem * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * RCSe ) ) ) - MLU ) ) )", "obj1": 0.13617886178861788, "obj2": 0.7265591855689806}, {"determining": "( ( FirstVNF_RAM_Server * FirstVNF_RAM ) + Max( ACS,Const ) )", "choosing": "Min( Max( RCSe,RCSe ) ,Min( MUC ,MUC ) )", "obj1": 0.42276422764227645, "obj2": 0.46847916812382384}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * CRS )", "choosing": "( ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.10569105691056911, "obj2": 0.7421320690376644}, {"determining": "( AMS + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Min( DS ,( RRSe * ( ( DS / RCSe ) * Min( RRSe ,RCSe ) ) ) )", "obj1": 0.5508130081300813, "obj2": 0.35062376599846673}, {"determining": "( FirstVNF_RAM + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( MUC,DS ),RCSe ) )", "obj1": 0.39634146341463417, "obj2": 0.4826124158022972}, {"determining": "Max( ( AMS - Min( AMS ,Const ) ),( Max( ( FirstVNF_CPU_Server + MRS ),ARS ) - ARS ) )", "choosing": "( ( MUM / DS ) * ( ( RRSe * MUC ) + RCSe ) )", "obj1": 0.18292682926829268, "obj2": 0.6981591016381771}, {"determining": "( ( ( FirstVNF_Mem_Server * FirstVNF_CPU ) * ( ARS + CRS ) ) / ( Max( MDR,FirstVNF_RAM ) + ( ACS + BR ) ) )", "choosing": "( ( MUM / ( RMSe * RCSe ) ) + ( ( MUC / MUM ) + Min( MUM ,MUC ) ) )", "obj1": 0.2845528455284553, "obj2": 0.5846229753710058}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( ( ( FirstVNF_Mem * FirstVNF_CPU ) / Min( CRS ,MRS ) ) + ( FirstVNF_RAM / ACS ) )", "choosing": "( ( DS / RCSe ) * MUR )", "obj1": 0.5304878048780488, "obj2": 0.3634647634324219}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.5345528455284553, "obj2": 0.351478346364074}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( Max( AMS,BR ) * ( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( RRS / ARS ) ) ) + BR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( MUR - Max( MLU,RCSe ) ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.18902439024390244, "obj2": 0.6950605517198603}, {"determining": "( Min( ( CRS / RRS ) ,( ACS / FirstVNF_Mem ) ) * Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * RMSe ) ) ) - MLU ) ) )", "obj1": 0.16056910569105692, "obj2": 0.7163249316565201}, {"determining": "( Max( ARS,Max( ARS,CRS ) ) + ( FirstVNF_RAM / ACS ) )", "choosing": "( DS * Min( RRSe ,RCSe ) )", "obj1": 0.573170731707317, "obj2": 0.3259261790683327}, {"determining": "( Min( CRS ,BR ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( DS + DS ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11991869918699187, "obj2": 0.7299181217204279}, {"determining": "( ( Max( ( RRS * FirstVNF_RAM_Server ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( ( BR * FirstVNF_Mem_Server ) ,( Const + FirstVNF_RAM_Server ) ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( Min( MLU ,CS ) - ( MUM * RMSe ) ) - ( Max( MUM,MUR ) - Max( RMSe,RCSe ) ) ) / ( ( Max( RRSe,MUC ) + ( MLU + CS ) ) * Min( ( MUC - CS ) ,( MUC / RRSe ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5816302275002911}, {"determining": "Max( Max( ( AMS - Min( AMS ,Const ) ),( MRS - ARS ) ),( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( Max( ( RMSe / DS ),( CS + MUM ) ) + ( ( RRSe * MUC ) + RCSe ) )", "obj1": 0.15040650406504066, "obj2": 0.7247965779873883}, {"determining": "( Min( Min( Min( RRS ,MDR ) ,FirstVNF_CPU_Server ) ,( FirstVNF_RAM_Server - MDR ) ) * ( FirstVNF_CPU - ( MRS - ( FirstVNF_CPU_Server / ACS ) ) ) )", "choosing": "( ( RMSe / ( RCSe + ( Min( MUR ,( MLU + MUC ) ) - MUM ) ) ) * ( RMSe * ( ( Max( MUM,DS ) * MUM ) - MLU ) ) )", "obj1": 0.1991869918699187, "obj2": 0.6872964725574955}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Min( ( BR + PN ) ,PN ) )", "choosing": "( Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) ) * Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) ) )", "obj1": 0.3902439024390244, "obj2": 0.4887189382239134}, {"determining": "( Min( FirstVNF_Mem ,BR ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( ( MUC * DS ) * MUM ) - ( MUC * DS ) )", "obj1": 0.9979674796747967, "obj2": 0.0006785456116775268}], "4": [{"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( RMSe * MUM ) - ( MUC * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Min( CRS ,( ACS / FirstVNF_Mem ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.08943089430894309, "obj2": 0.747558381060394}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9308943089430894, "obj2": 0.03360699005642911}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,( FirstVNF_CPU_Server * ( RRS - FirstVNF_CPU ) ) ) / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,MUC ) - ( DS + MUC ) ) ),( Max( ( CS / MUR ),Max( Min( Min( MUR ,MLU ) ,RMSe ),MLU ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7560975609756098, "obj2": 0.23983783813515155}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "( Max( CRS,MDR ) + ( MRS - Const ) )", "choosing": "Max( Min( DS ,( RCSe - ( ( DS - Max( MLU,MLU ) ) * MUR ) ) ),( MUM - MUM ) )", "obj1": 0.9308943089430894, "obj2": 0.03360699005642911}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - CS ) ) )", "obj1": 0.35365853658536583, "obj2": 0.4958581606469861}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( Max( AMS,BR ) * Max( ARS,DDR ) ) + BR ) )", "choosing": "( ( RMSe / ( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) ) / Min( ( MUR - Max( MLU,RCSe ) ) ,MUC ) )", "obj1": 0.23983739837398374, "obj2": 0.6373331811811861}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - DDR )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( ( Max( MUM,( RRSe / CS ) ) + RRSe ) / MUM ),RCSe ) ) ,MUC ) )", "obj1": 0.42886178861788615, "obj2": 0.4517081495916797}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,Max( FirstVNF_CPU_Server,RRS ) )", "choosing": "Min( ( RRSe - DS ) ,Max( MUR,MUM ) )", "obj1": 0.20934959349593496, "obj2": 0.6553566189962233}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Const + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.5, "obj2": 0.3867246119998736}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.5345528455284553, "obj2": 0.351478346364074}, {"determining": "( ( Max( ( FirstVNF_CPU / ( BR / Min( RRS ,BR ) ) ),PN ) / PN ) * Min( Max( DDR,FirstVNF_Mem ) ,ARS ) )", "choosing": "( ( MUC - ( MLU - MUM ) ) * Max( ( MUM * MUC ),( ( RCSe * ( ( MLU - ( MUR + RRSe ) ) - RMSe ) ) + ( Min( MUC ,( MLU + MUC ) ) - RRSe ) ) ) )", "obj1": 0.24796747967479674, "obj2": 0.6185074266811756}, {"determining": "Min( Min( FirstVNF_CPU ,FirstVNF_RAM ) ,( FirstVNF_CPU * AMS ) )", "choosing": "Min( Min( RRSe ,RCSe ) ,( MLU - RMSe ) )", "obj1": 0.28252032520325204, "obj2": 0.5814729180575162}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MUC * DS ) / Max( CS,RCSe ) )", "obj1": 0.5752032520325203, "obj2": 0.31398357188806303}, {"determining": "( ( ( Min( MRS ,Max( MDR,( AMS - PN ) ) ) / RRS ) + FirstVNF_CPU ) + Min( Min( FirstVNF_CPU ,FirstVNF_RAM ) ,( RRS - FirstVNF_CPU_Server ) ) )", "choosing": "( Min( ( MUR + RMSe ) ,Max( MLU,Max( ( MUC / ( RCSe - RMSe ) ),( ( ( ( DS / RRSe ) - RRSe ) + CS ) / MUR ) ) ) ) * Min( RRSe ,RCSe ) )", "obj1": 0.2926829268292683, "obj2": 0.5613285008766982}, {"determining": "( ( FirstVNF_Mem * FirstVNF_CPU ) / Max( FirstVNF_Mem_Server,DDR ) )", "choosing": "Max( ( MUM * RCSe ),( MUR + DS ) )", "obj1": 0.4695121951219512, "obj2": 0.41507689667624403}, {"determining": "( ( ( FirstVNF_Mem * ( ( ( FirstVNF_Mem * DDR ) / ( RRS + MDR ) ) + ( Min( RRS ,Const ) / FirstVNF_RAM ) ) ) / ( RRS + MDR ) ) + ( Min( RRS ,Const ) / FirstVNF_RAM ) )", "choosing": "Min( ( MLU - RCSe ) ,( DS + RMSe ) )", "obj1": 0.2601626016260163, "obj2": 0.6036883540021274}, {"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) ) )", "choosing": "Min( DS ,( MUC * MUC ) )", "obj1": 0.6117886178861789, "obj2": 0.2896031378272735}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.3008130081300813, "obj2": 0.5420438324121847}, {"determining": "( ( FirstVNF_RAM_Server * FirstVNF_RAM ) + Max( ACS,Const ) )", "choosing": "Min( Max( RCSe,RCSe ) ,Min( MUC ,MUC ) )", "obj1": 0.42276422764227645, "obj2": 0.46847916812382384}, {"determining": "( ( Max( ( RRS * Min( FirstVNF_Mem ,MDR ) ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( ( BR * FirstVNF_Mem_Server ) ,( Const + FirstVNF_RAM_Server ) ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( Min( MLU ,CS ) - ( RCSe * RMSe ) ) - ( Max( MUM,MUR ) - Max( RMSe,RCSe ) ) ) / ( ( Max( RRSe,MUC ) + ( MLU + CS ) ) * Min( ( MUC - CS ) ,( MUC / RRSe ) ) ) )", "obj1": 0.2682926829268293, "obj2": 0.5904921628621312}, {"determining": "( ( Max( FirstVNF_RAM_Server,PN ) - ( ( ( FirstVNF_Mem_Server * FirstVNF_CPU ) * ( ARS + CRS ) ) / ( Max( MDR,FirstVNF_RAM ) + ( ACS + BR ) ) ) ) + ( Const - MDR ) )", "choosing": "( ( ( ( RMSe * RCSe ) - RMSe ) * ( MUC * DS ) ) - Min( ( DS + MUC ) ,Max( RCSe,MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6754436025637707}, {"determining": "( Min( ( CRS / RRS ) ,( ACS / FirstVNF_Mem ) ) * Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * RMSe ) ) ) - MLU ) ) )", "obj1": 0.16056910569105692, "obj2": 0.7163249316565201}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) * AMS ) )", "choosing": "( ( DS / RCSe ) * Min( RRSe ,RCSe ) )", "obj1": 0.5894308943089431, "obj2": 0.31371200281124945}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( Max( ARS,CRS ) + ( FirstVNF_RAM / ACS ) ) + ( FirstVNF_CPU * AMS ) ) )", "choosing": "( ( DS / RCSe ) * DS )", "obj1": 0.508130081300813, "obj2": 0.3719119940696253}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( Min( CRS ,( ACS / AMS ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * CS ) ) ) - MLU ) ) )", "obj1": 0.13414634146341464, "obj2": 0.7167125643082167}, {"determining": "( Min( Min( Min( RRS ,MDR ) ,FirstVNF_CPU_Server ) ,( FirstVNF_RAM_Server - MDR ) ) * ( FirstVNF_CPU - ( MRS - ( FirstVNF_CPU_Server / ACS ) ) ) )", "choosing": "( ( RMSe / ( RCSe + ( Min( MUR ,( MLU + MUC ) ) - MUM ) ) ) * ( RMSe * ( ( Max( MUM,DS ) * MUM ) - MLU ) ) )", "obj1": 0.1991869918699187, "obj2": 0.6872964725574955}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * CRS )", "choosing": "( ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.10569105691056911, "obj2": 0.7421320690376644}, {"determining": "( FirstVNF_RAM + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( MUC,DS ),RCSe ) )", "obj1": 0.39634146341463417, "obj2": 0.4826124158022972}, {"determining": "Max( ( AMS - Min( AMS ,Const ) ),( Max( ( FirstVNF_CPU_Server + MRS ),ARS ) - ARS ) )", "choosing": "( ( MUM / DS ) * ( ( RRSe * MUC ) + RCSe ) )", "obj1": 0.18292682926829268, "obj2": 0.6981591016381771}, {"determining": "( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RCSe ) * Min( RRSe ,( ( DS / RCSe ) * Min( RRSe ,RCSe ) ) ) )", "obj1": 0.5264227642276422, "obj2": 0.3615903000997028}, {"determining": "( ( Max( ( PN / FirstVNF_CPU ),( ( Const + FirstVNF_Mem ) - FirstVNF_CPU ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * ( Max( ( MDR * RRS ),Max( ACS,AMS ) ) + ( ( DDR * FirstVNF_CPU ) + ( DDR + ACS ) ) ) )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( Max( RCSe,MUM ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( MUC / ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ) ) ) )", "obj1": 0.5223577235772358, "obj2": 0.36756830586090455}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( Max( AMS,BR ) * ( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( RRS / ARS ) ) ) + BR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( MUR - Max( MLU,RCSe ) ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.18902439024390244, "obj2": 0.6950605517198603}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( DS + DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.13211382113821138, "obj2": 0.728198888303189}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Min( ( BR + PN ) ,PN ) )", "choosing": "( Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) ) * Min( Min( RMSe ,RCSe ) ,( MUC / RRSe ) ) )", "obj1": 0.3902439024390244, "obj2": 0.4887189382239134}, {"determining": "( Min( FirstVNF_Mem ,BR ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( ( MUC * DS ) * MUM ) - ( MUC * DS ) )", "obj1": 0.9979674796747967, "obj2": 0.0006785456116775268}], "5": [{"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( RMSe * MUM ) - ( MUC * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Min( CRS ,( ACS / FirstVNF_Mem ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.08943089430894309, "obj2": 0.747558381060394}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,( FirstVNF_CPU_Server * ( RRS - FirstVNF_CPU ) ) ) / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,MUC ) - ( DS + MUC ) ) ),( Max( ( CS / MUR ),Max( Min( Min( MUR ,MLU ) ,RMSe ),MLU ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7560975609756098, "obj2": 0.23983783813515155}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( ( Max( ( RRS * FirstVNF_RAM_Server ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( RRS ,CRS ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.26422764227642276, "obj2": 0.5486962776101368}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( ( FirstVNF_Mem * ( ( ( FirstVNF_Mem * DDR ) / ( RRS + MDR ) ) + ( Min( RRS ,Const ) / FirstVNF_RAM ) ) ) / ( RRS + MDR ) ) + ( Min( RRS ,Const ) / FirstVNF_RAM ) )", "choosing": "Min( ( MLU - RCSe ) ,( DS + RMSe ) )", "obj1": 0.2601626016260163, "obj2": 0.6036883540021274}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - DDR )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( ( Max( MUM,( RRSe / CS ) ) + RRSe ) / MUM ),RCSe ) ) ,MUC ) )", "obj1": 0.42886178861788615, "obj2": 0.4517081495916797}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - CS ) ) )", "obj1": 0.35365853658536583, "obj2": 0.4958581606469861}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,Max( FirstVNF_CPU_Server,RRS ) )", "choosing": "Min( ( RRSe - DS ) ,Max( MUR,MUM ) )", "obj1": 0.20934959349593496, "obj2": 0.6553566189962233}, {"determining": "( ( PN + CRS ) + Min( ( ( ( CRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + ( DS * RCSe ) ) ) ) )", "obj1": 0.9288617886178862, "obj2": 0.03637977636702365}, {"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) ) )", "choosing": "Min( DS ,( MUC * MUC ) )", "obj1": 0.6117886178861789, "obj2": 0.2896031378272735}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( Max( ( FirstVNF_CPU / ( BR / Min( RRS ,BR ) ) ),PN ) / PN ) * Min( Max( DDR,FirstVNF_Mem ) ,ARS ) )", "choosing": "( ( MUC - ( MLU - MUM ) ) * Max( ( MUM * MUC ),( ( RCSe * ( ( MLU - ( MUR + RRSe ) ) - RMSe ) ) + ( Min( MUC ,( MLU + MUC ) ) - RRSe ) ) ) )", "obj1": 0.24796747967479674, "obj2": 0.6185074266811756}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MUC * DS ) / Max( CS,RCSe ) )", "obj1": 0.5752032520325203, "obj2": 0.31398357188806303}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( CRS - CRS ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.3394308943089431, "obj2": 0.5130134576869219}, {"determining": "( ( FirstVNF_Mem * FirstVNF_CPU ) / Max( FirstVNF_Mem_Server,DDR ) )", "choosing": "Max( ( MUM * RCSe ),( MUR + DS ) )", "obj1": 0.4695121951219512, "obj2": 0.41507689667624403}, {"determining": "Min( ( BR + Min( MRS ,BR ) ) ,( CRS / RRS ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / Min( Max( CS,CS ) ,CS ) ) - MLU ) ) )", "obj1": 0.23373983739837398, "obj2": 0.6386521756792565}, {"determining": "( ( ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RCSe ) * ( Max( RRSe,MUR ) / RCSe ) )", "obj1": 0.42073170731707316, "obj2": 0.4654303874451654}, {"determining": "( ( Max( FirstVNF_RAM_Server,PN ) - ( ( ( FirstVNF_Mem_Server * FirstVNF_CPU ) * ( ARS + CRS ) ) / ( Max( MDR,FirstVNF_RAM ) + ( ACS + BR ) ) ) ) + ( Const - MDR ) )", "choosing": "( ( ( ( RMSe * RCSe ) - RMSe ) * ( MUC * DS ) ) - Min( ( DS + MUC ) ,Max( RCSe,MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6754436025637707}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( Min( Min( Min( RRS ,MDR ) ,FirstVNF_CPU_Server ) ,( FirstVNF_RAM_Server - MDR ) ) * ( FirstVNF_CPU - ( MRS - ( FirstVNF_CPU_Server / ACS ) ) ) )", "choosing": "( ( RMSe / ( RCSe + ( Min( MUR ,( MLU + MUC ) ) - MUM ) ) ) * ( RMSe * ( ( Max( MUM,DS ) * MUM ) - MLU ) ) )", "obj1": 0.1991869918699187, "obj2": 0.6872964725574955}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( Min( CRS ,( ACS / AMS ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * CS ) ) ) - MLU ) ) )", "obj1": 0.13414634146341464, "obj2": 0.7167125643082167}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( Max( AMS,BR ) * Max( ARS,DDR ) ) + BR ) )", "choosing": "( ( RMSe / ( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) ) / Min( ( MUR - Max( MLU,RCSe ) ) ,MUC ) )", "obj1": 0.23983739837398374, "obj2": 0.6373331811811861}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( Max( AMS,BR ) * ( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( RRS / ARS ) ) ) + BR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * ( ( MUR - Max( MLU,RCSe ) ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.18902439024390244, "obj2": 0.6950605517198603}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.3008130081300813, "obj2": 0.5420438324121847}, {"determining": "( FirstVNF_RAM + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( MUC,DS ),RCSe ) )", "obj1": 0.39634146341463417, "obj2": 0.4826124158022972}, {"determining": "Min( Min( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ,MRS ) ,( Max( Const,BR ) / MRS ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * Max( ( DS / RRSe ),Min( RRSe ,MUM ) ) ) )", "obj1": 0.17479674796747968, "obj2": 0.6976917311355894}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RRSe ) * Min( RRSe ,RCSe ) )", "obj1": 0.5894308943089431, "obj2": 0.30526282927266096}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) )", "obj1": 0.12601626016260162, "obj2": 0.7250192243298729}, {"determining": "( Min( CRS ,( ( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) ) / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( MLU * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11788617886178862, "obj2": 0.7287757740174793}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "Min( ( Max( ( MRS / MRS ),BR ) / MRS ) ,Min( FirstVNF_RAM_Server ,( FirstVNF_RAM * ( Const / CRS ) ) ) )", "choosing": "Max( ( ( MUR / Min( MLU ,RCSe ) ) + Max( CS,( MLU - CS ) ) ),( ( MUC / DS ) * Max( ( Min( Min( Max( MLU,( CS * RMSe ) ) ,( MUC * Min( RRSe ,RRSe ) ) ) ,RMSe ) + RRSe ),Min( RRSe ,MUM ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.7107174167652823}, {"determining": "( Max( ARS,Max( ARS,CRS ) ) + Max( FirstVNF_Mem,BR ) )", "choosing": "( DS * Min( RRSe ,( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.5853658536585366, "obj2": 0.3096400512169249}, {"determining": "( ( CRS - CRS ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.3394308943089431, "obj2": 0.5130134576869219}], "6": [{"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( RMSe * MUM ) - ( MUC * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "Max( ( ( Min( RCSe ,MLU ) + MUR ) + ( Min( RCSe ,RCSe ) - RMSe ) ),( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) )", "choosing": "Min( ( ( MUR / RMSe ) + MUR ) ,( DS + RMSe ) )", "obj1": 0.7235772357723578, "obj2": 0.25096596751844963}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6472111748376811}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( ( PN + CRS ) + Min( ( Max( ( MRS - FirstVNF_Mem ),FirstVNF_RAM_Server ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "( ( ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RCSe ) * ( Max( RRSe,MUR ) / RCSe ) )", "obj1": 0.42073170731707316, "obj2": 0.4654303874451654}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,( FirstVNF_CPU_Server * ( RRS - FirstVNF_CPU ) ) ) / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,MUC ) - ( DS + MUC ) ) ),( Max( ( CS / MUR ),Max( Min( Min( MUR ,MLU ) ,RMSe ),MLU ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7560975609756098, "obj2": 0.23983783813515155}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - CS ) ) )", "obj1": 0.35365853658536583, "obj2": 0.4958581606469861}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) ) )", "choosing": "Min( DS ,( MUC * MUC ) )", "obj1": 0.6117886178861789, "obj2": 0.2896031378272735}, {"determining": "( ( PN + CRS ) + Min( ( ( ( CRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + ( DS * RCSe ) ) ) ) )", "obj1": 0.9288617886178862, "obj2": 0.03637977636702365}, {"determining": "Min( ( ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) + PN ) ,( CRS / RRS ) )", "choosing": "( ( RMSe / DS ) * ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) )", "obj1": 0.17276422764227642, "obj2": 0.6848276208214781}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MUC * DS ) / Max( CS,RCSe ) )", "obj1": 0.5752032520325203, "obj2": 0.31398357188806303}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( CRS - CRS ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.3394308943089431, "obj2": 0.5130134576869219}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( ( FirstVNF_Mem * FirstVNF_CPU ) / Max( FirstVNF_Mem_Server,DDR ) )", "choosing": "Max( ( MUM * RCSe ),( MUR + DS ) )", "obj1": 0.4695121951219512, "obj2": 0.41507689667624403}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( Max( ( RRS * FirstVNF_RAM_Server ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( RRS ,CRS ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.26422764227642276, "obj2": 0.5486962776101368}, {"determining": "( ( Max( ( RRS * FirstVNF_RAM_Server ),( FirstVNF_CPU / AMS ) ) / Min( ( RRS / FirstVNF_RAM_Server ) ,( FirstVNF_RAM * MRS ) ) ) - ( Min( RRS ,CRS ) + ( ( ACS * ARS ) * ( PN * FirstVNF_CPU_Server ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.2459349593495935, "obj2": 0.5512281055886301}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.1910569105691057, "obj2": 0.6546655257955478}, {"determining": "( FirstVNF_RAM + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( MUC,DS ),RCSe ) )", "obj1": 0.39634146341463417, "obj2": 0.4826124158022972}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "Min( ( Max( ( MRS / MRS ),BR ) / MRS ) ,Min( FirstVNF_RAM_Server ,( FirstVNF_RAM * ( Const / CRS ) ) ) )", "choosing": "Max( ( ( MUR / Min( MLU ,RCSe ) ) + Max( CS,( MLU - CS ) ) ),( ( MUC / DS ) * Max( ( Min( Min( Max( MLU,( CS * RMSe ) ) ,( MUC * Min( RRSe ,RRSe ) ) ) ,RMSe ) + RRSe ),Min( RRSe ,MUM ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.7107174167652823}, {"determining": "( Max( CRS,MDR ) + ( MRS - Const ) )", "choosing": "Max( Min( DS ,( RCSe - ( ( DS - Max( MLU,MLU ) ) * MUR ) ) ),( MUM - MUM ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( Min( CRS ,( ACS / AMS ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * CS ) ) ) - MLU ) ) )", "obj1": 0.13414634146341464, "obj2": 0.7167125643082167}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RRSe ) * Min( RRSe ,RCSe ) )", "obj1": 0.5894308943089431, "obj2": 0.30526282927266096}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.3008130081300813, "obj2": 0.5420438324121847}, {"determining": "( Max( ARS,Max( ARS,CRS ) ) + Max( FirstVNF_Mem,BR ) )", "choosing": "( DS * Min( RRSe ,( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.5853658536585366, "obj2": 0.3096400512169249}, {"determining": "( ( CRS - CRS ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.3394308943089431, "obj2": 0.5130134576869219}], "7": [{"determining": "( ( FirstVNF_RAM_Server - FirstVNF_Mem ) - ( ARS / Const ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( CS - RCSe ) ) * RCSe ) ) ) ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_Mem ,( Min( BR ,Min( FirstVNF_Mem_Server ,CRS ) ) - BR ) ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( RMSe * MUM ) - ( MUC * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) )", "choosing": "Min( ( ( MUR / RMSe ) + MUR ) ,( DS + RMSe ) )", "obj1": 0.7235772357723578, "obj2": 0.25096596751844963}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6472111748376811}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS / ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( Min( DS ,RCSe ),MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.5304878048780488, "obj2": 0.3384450409703608}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "( ( ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RCSe ) * ( Max( RRSe,MUR ) / RCSe ) )", "obj1": 0.42073170731707316, "obj2": 0.4654303874451654}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,( FirstVNF_CPU_Server * ( RRS - FirstVNF_CPU ) ) ) / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,MUC ) - ( DS + MUC ) ) ),( Max( ( CS / MUR ),Max( Min( Min( MUR ,MLU ) ,RMSe ),MLU ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7560975609756098, "obj2": 0.23983783813515155}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3353658536585366, "obj2": 0.4946577742358717}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) ) )", "choosing": "Min( DS ,( MUC * MUC ) )", "obj1": 0.6117886178861789, "obj2": 0.2896031378272735}, {"determining": "( ( PN + CRS ) + Min( ( ( ( CRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + ( DS * RCSe ) ) ) ) )", "obj1": 0.9288617886178862, "obj2": 0.03637977636702365}, {"determining": "Min( ( ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) + PN ) ,( CRS / RRS ) )", "choosing": "( ( RMSe / DS ) * ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) )", "obj1": 0.17276422764227642, "obj2": 0.6848276208214781}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "( ( FirstVNF_Mem * FirstVNF_CPU ) / Max( FirstVNF_Mem_Server,DDR ) )", "choosing": "Max( ( MUM * RCSe ),( MUR + DS ) )", "obj1": 0.4695121951219512, "obj2": 0.41507689667624403}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MUC * DS ) / Max( CS,RCSe ) )", "obj1": 0.5752032520325203, "obj2": 0.31398357188806303}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( ( ( ( ( FirstVNF_Mem * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( ( FirstVNF_CPU * AMS ) * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ),Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) ) ,RCSe ) )", "obj1": 0.1483739837398374, "obj2": 0.7048883570522563}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( FirstVNF_RAM + Max( MRS,PN ) )", "choosing": "Min( Min( MUC ,MUC ) ,Max( Max( MUC,DS ),RCSe ) )", "obj1": 0.39634146341463417, "obj2": 0.4826124158022972}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( Max( CRS,MDR ) + ( MRS - Const ) )", "choosing": "Max( Min( DS ,( RCSe - ( ( DS - Max( MLU,MLU ) ) * MUR ) ) ),( MUM - MUM ) )", "obj1": 0.3353658536585366, "obj2": 0.4946577742358717}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RRSe ) * Min( RRSe ,RCSe ) )", "obj1": 0.5894308943089431, "obj2": 0.30526282927266096}], "8": [{"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_RAM_Server - FirstVNF_Mem ) - ( ARS / Const ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( CS - RCSe ) ) * RCSe ) ) ) ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) )", "choosing": "Min( ( ( MUR / RMSe ) + MUR ) ,( DS + RMSe ) )", "obj1": 0.7235772357723578, "obj2": 0.25096596751844963}, {"determining": "( ( FirstVNF_Mem / FirstVNF_RAM_Server ) * ( ( MDR * MDR ) - MDR ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,CS ) - ( MUC + Max( RMSe,( DS * RRSe ) ) ) ) ),( ( ( MUM / RMSe ) - ( MUM + RMSe ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7703252032520326, "obj2": 0.22446787928860717}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6472111748376811}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.49201694869942597}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS / ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( Min( DS ,RCSe ),MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.5304878048780488, "obj2": 0.3384450409703608}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( ( ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( DS / RCSe ) * ( Max( RRSe,MUR ) / RCSe ) )", "obj1": 0.42073170731707316, "obj2": 0.4654303874451654}, {"determining": "( ( ( ( Max( FirstVNF_CPU_Server,( FirstVNF_CPU_Server * ( RRS - FirstVNF_CPU ) ) ) / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "Max( ( ( Max( MLU,DS ) - Min( DS ,MLU ) ) - ( Min( MUC ,MUC ) - ( DS + MUC ) ) ),( Max( ( CS / MUR ),Max( Min( Min( MUR ,MLU ) ,RMSe ),MLU ) ) / ( ( MUC * MUR ) * Max( CS,RMSe ) ) ) )", "obj1": 0.7560975609756098, "obj2": 0.23983783813515155}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( MUR / RCSe ) )", "obj1": 0.8983739837398373, "obj2": 0.06274853434866869}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "Min( ( ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) + PN ) ,( CRS / RRS ) )", "choosing": "( ( RMSe / DS ) * ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) )", "obj1": 0.17276422764227642, "obj2": 0.6848276208214781}, {"determining": "( ( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,MUC ),( Min( Max( MUM,RMSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) )", "obj1": 0.46747967479674796, "obj2": 0.41326625853845034}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) ) )", "choosing": "Min( DS ,( MUC * MUC ) )", "obj1": 0.6117886178861789, "obj2": 0.2896031378272735}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( FirstVNF_Mem_Server * AMS ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe / ( Min( RRSe ,RMSe ) + RRSe ) ) * DS )", "obj1": 0.9247967479674797, "obj2": 0.05678706644619877}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( ( ( ( MDR - MDR ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3150406504065041, "obj2": 0.5089453297194978}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( PN + CRS ) + Min( ( ( ( CRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + ( DS * RCSe ) ) ) ) )", "obj1": 0.9288617886178862, "obj2": 0.03637977636702365}, {"determining": "( ( ( ( ( ( FirstVNF_Mem * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( ( FirstVNF_CPU * AMS ) * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ),Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) ) ,RCSe ) )", "obj1": 0.1483739837398374, "obj2": 0.7048883570522563}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( ( FirstVNF_RAM + MDR ) + Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MLU / ( ( MLU / MUR ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.31558239424960904}, {"determining": "Min( ( ARS * FirstVNF_CPU ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "( ( MUC * DS ) / Max( CS,RCSe ) )", "obj1": 0.5752032520325203, "obj2": 0.31398357188806303}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}], "9": [{"determining": "( ( Min( FirstVNF_Mem ,( ( FirstVNF_CPU_Server / ( AMS / ( MDR * ( BR * FirstVNF_CPU ) ) ) ) + CRS ) ) * AMS ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( ( ( ( DS * CS ) * Min( MUR ,MUR ) ) / DS ) * MUM ) - ( MUC * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) )", "choosing": "Min( ( ( MUR / RMSe ) + MUR ) ,( DS + RMSe ) )", "obj1": 0.7235772357723578, "obj2": 0.25096596751844963}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * ( CRS - FirstVNF_Mem_Server ) ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( ( RRSe / DS ) * DS ) / RRSe ) ) ) ) )", "obj1": 0.8902439024390244, "obj2": 0.06568041178974242}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / Const ) ) + FirstVNF_Mem ) ) ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe / ( ( Max( MUC,Min( RCSe ,RRSe ) ) + RRSe ) + RRSe ) ) * DS )", "obj1": 0.7398373983739838, "obj2": 0.18960884368959105}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6472111748376811}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - ( ( CRS - FirstVNF_Mem_Server ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) ) ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "( ( ( MLU * MUR ) / RCSe ) * ( ( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) * MUR ) / RCSe ) )", "obj1": 0.7784552845528455, "obj2": 0.1792984368873478}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS / ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( Min( DS ,RCSe ),MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.5304878048780488, "obj2": 0.3384450409703608}, {"determining": "( ( FirstVNF_RAM + ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) ) + Min( MRS ,BR ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MUR / ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) ) ) ) )", "obj1": 0.41260162601626016, "obj2": 0.44704828539050284}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( FirstVNF_RAM + MDR ) + ( CRS / RRS ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.573170731707317, "obj2": 0.3049598193980906}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( Max( ARS,CRS ) + ( FirstVNF_RAM / ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) ) )", "choosing": "Min( DS ,( MUC * MUC ) )", "obj1": 0.6117886178861789, "obj2": 0.2896031378272735}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) )", "obj1": 0.9207317073170732, "obj2": 0.034714253352145126}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "Min( ( ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) + PN ) ,( CRS / RRS ) )", "choosing": "( ( RMSe / DS ) * ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) )", "obj1": 0.17276422764227642, "obj2": 0.6848276208214781}, {"determining": "( ( ( ( ARS / FirstVNF_CPU ) - AMS ) - DDR ) * ( ( MDR * MDR ) - FirstVNF_RAM_Server ) )", "choosing": "( ( DS - Min( RRSe ,Min( MUC ,MUR ) ) ) + ( RMSe - ( RRSe + MUM ) ) )", "obj1": 0.823170731707317, "obj2": 0.17030734822951427}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.49201694869942597}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( ( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,MUC ),( Min( Max( MUM,RMSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) )", "obj1": 0.46747967479674796, "obj2": 0.41326625853845034}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( FirstVNF_RAM + MDR ) + Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MLU / ( ( MLU / MUR ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.31558239424960904}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "Min( Min( FirstVNF_RAM_Server ,MRS ) ,( ( CRS * Max( ARS,DDR ) ) + BR ) )", "choosing": "Max( ( RMSe * RCSe ),( ( MUC / DS ) * ( ( RRSe / RRSe ) + Min( RRSe ,MUM ) ) ) )", "obj1": 0.16260162601626016, "obj2": 0.700588966085364}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( ( ( ( ( FirstVNF_Mem * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( ( FirstVNF_CPU * AMS ) * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) + ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ),Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) ) ,RCSe ) )", "obj1": 0.1483739837398374, "obj2": 0.7048883570522563}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( ( ( ( MDR - MDR ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3150406504065041, "obj2": 0.5089453297194978}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( ( FirstVNF_RAM + MDR ) + DDR )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUC / ( RMSe / RCSe ) ) ) )", "obj1": 0.3943089430894309, "obj2": 0.48810608456683163}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( ( DDR + FirstVNF_RAM_Server ) + ( MRS * MDR ) ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) )", "choosing": "Max( ( MUR / ( CS * RCSe ) ),Min( DS ,RRSe ) )", "obj1": 0.32926829268292684, "obj2": 0.4961874912631156}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}], "10": [{"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( FirstVNF_Mem ,( ( FirstVNF_CPU_Server / ( AMS / ( MDR * ( BR * FirstVNF_CPU ) ) ) ) + CRS ) ) * AMS ) - Min( Min( FirstVNF_RAM_Server ,AMS ) ,MDR ) )", "choosing": "( ( ( ( ( DS * CS ) * Min( MUR ,MUR ) ) / DS ) * MUM ) - ( MUC * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * ( CRS - FirstVNF_Mem_Server ) ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( ( RRSe / DS ) * DS ) / RRSe ) ) ) ) )", "obj1": 0.8902439024390244, "obj2": 0.06568041178974242}, {"determining": "( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) )", "choosing": "Min( ( ( MUR / RMSe ) + MUR ) ,( DS + RMSe ) )", "obj1": 0.7235772357723578, "obj2": 0.25096596751844963}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "Min( ( BR + PN ) ,( CRS / ( ( ACS * Min( MRS ,BR ) ) / Min( ( BR / DDR ) ,AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( ( ( RCSe / CS ) + RCSe ) - MUC ) / RCSe ) - RRSe ) ) )", "obj1": 0.20121951219512196, "obj2": 0.6219682073934649}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / Const ) ) + FirstVNF_Mem ) ) ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe / ( ( Max( MUC,Min( RCSe ,RRSe ) ) + RRSe ) + RRSe ) ) * DS )", "obj1": 0.7398373983739838, "obj2": 0.18960884368959105}, {"determining": "( ( ( ( ( ( CRS - FirstVNF_Mem_Server ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_RAM * DDR ) ) + Min( ARS ,FirstVNF_Mem ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe * Max( Min( MUR ,RRSe ),CS ) ) * Min( ( MUM / Max( Min( MUR ,( ( ( RCSe - RMSe ) - RRSe ) - MUC ) ),RMSe ) ) ,( ( DS * RRSe ) + ( ( DS / RCSe ) * DS ) ) ) )", "obj1": 0.75, "obj2": 0.16879596047744214}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / ( ( MDR + CRS ) + ( ARS * Const ) ) ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / DS ) ) ) ) / DS ) / CS ) )", "obj1": 0.13008130081300814, "obj2": 0.6774823202622381}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS / ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( Min( DS ,RCSe ),MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.5304878048780488, "obj2": 0.3384450409703608}, {"determining": "( ( FirstVNF_RAM + ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) ) + Min( MRS ,BR ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MUR / ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) ) ) ) )", "obj1": 0.41260162601626016, "obj2": 0.44704828539050284}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( FirstVNF_RAM + MDR ) + ( CRS / RRS ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.573170731707317, "obj2": 0.3049598193980906}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( ( CRS - ( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) ) ) + FirstVNF_CPU )", "choosing": "( ( DS / RCSe ) * Min( ( ( MLU * MUR ) / RCSe ) ,RCSe ) )", "obj1": 0.6117886178861789, "obj2": 0.28383859505939885}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) )", "obj1": 0.9207317073170732, "obj2": 0.034714253352145126}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.49201694869942597}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,MUC ),( Min( Max( MUM,RMSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) )", "obj1": 0.46747967479674796, "obj2": 0.41326625853845034}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( ( ( MDR - MDR ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3150406504065041, "obj2": 0.5089453297194978}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( FirstVNF_RAM + MDR ) + Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MLU / ( ( MLU / MUR ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.31558239424960904}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( ( FirstVNF_RAM + MDR ) + DDR )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUC / ( RMSe / RCSe ) ) ) )", "obj1": 0.3943089430894309, "obj2": 0.48810608456683163}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( DDR + FirstVNF_RAM_Server ) + ( MRS * MDR ) ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) )", "choosing": "Max( ( MUR / ( CS * RCSe ) ),Min( DS ,RRSe ) )", "obj1": 0.32926829268292684, "obj2": 0.4961874912631156}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( CRS - FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) - FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) )", "choosing": "( ( ( RRSe / DS ) * ( RCSe / ( RCSe / RCSe ) ) ) * ( ( RRSe / DS ) * ( RCSe / ( RCSe / RCSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}], "11": [{"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) )", "choosing": "Min( ( ( MUR / RMSe ) + MUR ) ,( DS + RMSe ) )", "obj1": 0.7235772357723578, "obj2": 0.25096596751844963}, {"determining": "( ( Max( FirstVNF_Mem_Server,BR ) + MDR ) + ( ( CRS - FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( DS * ( ( ( RCSe / RCSe ) * ( RRSe / ( ( Min( RMSe ,( RMSe + MUC ) ) * ( MUR - RCSe ) ) * ( ( DS + DS ) / CS ) ) ) ) / RCSe ) )", "obj1": 0.8495934959349594, "obj2": 0.14242443374583194}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * ( CRS - FirstVNF_Mem_Server ) ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( ( RRSe / DS ) * DS ) / RRSe ) ) ) ) )", "obj1": 0.8902439024390244, "obj2": 0.06568041178974242}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "Min( ( BR + PN ) ,( CRS / ( ( ACS * Min( MRS ,BR ) ) / Min( ( BR / DDR ) ,AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( ( ( RCSe / CS ) + RCSe ) - MUC ) / RCSe ) - RRSe ) ) )", "obj1": 0.20121951219512196, "obj2": 0.6219682073934649}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / Const ) ) + FirstVNF_Mem ) ) ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe / ( ( Max( MUC,Min( RCSe ,RRSe ) ) + RRSe ) + RRSe ) ) * DS )", "obj1": 0.7398373983739838, "obj2": 0.18960884368959105}, {"determining": "( ( ( ( ( ( CRS - FirstVNF_Mem_Server ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_RAM * DDR ) ) + Min( ARS ,FirstVNF_Mem ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe * Max( Min( MUR ,RRSe ),CS ) ) * Min( ( MUM / Max( Min( MUR ,( ( ( RCSe - RMSe ) - RRSe ) - MUC ) ),RMSe ) ) ,( ( DS * RRSe ) + ( ( DS / RCSe ) * DS ) ) ) )", "obj1": 0.75, "obj2": 0.16879596047744214}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / ( ( MDR + CRS ) + ( ARS * Const ) ) ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / DS ) ) ) ) / DS ) / CS ) )", "obj1": 0.13008130081300814, "obj2": 0.6774823202622381}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS / ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( Min( DS ,RCSe ),MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.5304878048780488, "obj2": 0.3384450409703608}, {"determining": "( ( FirstVNF_RAM + ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) ) + Min( MRS ,BR ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MUR / ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) ) ) ) )", "obj1": 0.41260162601626016, "obj2": 0.44704828539050284}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "( ( FirstVNF_RAM + MDR ) + ( CRS / RRS ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.573170731707317, "obj2": 0.3049598193980906}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( ( ACS - FirstVNF_RAM_Server ) + Max( MRS,DDR ) )", "choosing": "Min( ( ( CS + MUC ) * ( MUM - CS ) ) ,Max( Max( CS,DS ),RCSe ) )", "obj1": 0.40040650406504064, "obj2": 0.46898552579035513}, {"determining": "( ( CRS - ( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) ) ) + FirstVNF_CPU )", "choosing": "( ( DS / RCSe ) * Min( ( ( MLU * MUR ) / RCSe ) ,RCSe ) )", "obj1": 0.6117886178861789, "obj2": 0.28383859505939885}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) )", "obj1": 0.9207317073170732, "obj2": 0.034714253352145126}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.49201694869942597}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,MUC ),( Min( Max( MUM,RMSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) )", "obj1": 0.46747967479674796, "obj2": 0.41326625853845034}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( ( ( MDR - MDR ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3150406504065041, "obj2": 0.5089453297194978}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( FirstVNF_RAM + MDR ) + Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MLU / ( ( MLU / MUR ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.31558239424960904}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( FirstVNF_RAM + MDR ) + DDR )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUC / ( RMSe / RCSe ) ) ) )", "obj1": 0.3943089430894309, "obj2": 0.48810608456683163}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( DDR + FirstVNF_RAM_Server ) + ( MRS * MDR ) ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) )", "choosing": "Max( ( MUR / ( CS * RCSe ) ),Min( DS ,RRSe ) )", "obj1": 0.32926829268292684, "obj2": 0.4961874912631156}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ACS ,( FirstVNF_RAM * CRS ) ) )", "choosing": "Min( ( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( ( ( Max( FirstVNF_Mem_Server,Min( AMS ,FirstVNF_RAM_Server ) ) + ( MRS / ( CRS - FirstVNF_Mem_Server ) ) ) * ( DDR + FirstVNF_RAM_Server ) ) - FirstVNF_Mem_Server ) + ( ( CRS - Max( CRS,RRS ) ) + FirstVNF_CPU ) )", "choosing": "( ( ( DS / DS ) * Max( Min( Min( DS ,MUM ) ,MLU ),( RCSe / RCSe ) ) ) * ( ( RRSe / DS ) * ( RCSe / ( ( DS / RCSe ) * Min( RRSe ,RCSe ) ) ) ) )", "obj1": 0.10975609756097561, "obj2": 0.7398180460643822}], "12": [{"determining": "( ( CRS - FirstVNF_Mem_Server ) + Min( ( BR + PN ) ,( CRS / ( ( ACS * ( CRS / MDR ) ) / Min( ( BR / DDR ) ,FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / DS ) * ( Min( MUM ,RMSe ) - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * Min( ( ( MDR / ARS ) * BR ) ,RRS ) ) - ( Min( ( FirstVNF_Mem_Server * CRS ) ,FirstVNF_RAM ) * FirstVNF_Mem ) )", "choosing": "( ( MLU / ( DS + ( ( ( CS + ( ( RRSe / RMSe ) + ( RRSe * MLU ) ) ) / MUR ) * Max( ( ( RRSe / ( DS / MUC ) ) / MUR ),( ( MUC * RRSe ) * MUC ) ) ) ) ) / Min( ( MUR - ( ( MUM + MLU ) + ( ( DS + ( Max( MUR,RMSe ) - RCSe ) ) * RCSe ) ) ) ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) )", "choosing": "Min( ( ( MUR / RMSe ) + MUR ) ,( DS + RMSe ) )", "obj1": 0.7235772357723578, "obj2": 0.25096596751844963}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( Max( FirstVNF_Mem_Server,BR ) + MDR ) + ( ( CRS - FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( DS * ( ( ( RCSe / RCSe ) * ( RRSe / ( ( Min( RMSe ,( RMSe + MUC ) ) * ( MUR - RCSe ) ) * ( ( DS + DS ) / CS ) ) ) ) / RCSe ) )", "obj1": 0.8495934959349594, "obj2": 0.14242443374583194}, {"determining": "( ( ( DDR / ( Max( Max( ( MDR / ( BR - FirstVNF_CPU ) ),Min( ARS ,FirstVNF_CPU ) ),ACS ) - Max( FirstVNF_RAM_Server,Const ) ) ) - FirstVNF_Mem_Server ) + ( ( CRS - Max( CRS,Const ) ) + FirstVNF_CPU ) )", "choosing": "( ( RCSe / ( RCSe / RCSe ) ) * ( DS + ( ( MUM + MUR ) / RCSe ) ) )", "obj1": 0.8841463414634146, "obj2": 0.08959889030638761}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + ( ( ( ( ARS / DDR ) + Max( RRS,FirstVNF_Mem ) ) - ARS ) / ( BR - AMS ) ) )", "choosing": "( RRSe * Min( RRSe ,RCSe ) )", "obj1": 0.8252032520325203, "obj2": 0.1644567022754675}, {"determining": "Min( ( BR + PN ) ,( CRS / ( ( ACS * Min( MRS ,BR ) ) / Min( ( BR / DDR ) ,AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( ( ( RCSe / CS ) + RCSe ) - MUC ) / RCSe ) - RRSe ) ) )", "obj1": 0.20121951219512196, "obj2": 0.6219682073934649}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / Const ) ) + FirstVNF_Mem ) ) ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe / ( ( Max( MUC,Min( RCSe ,RRSe ) ) + RRSe ) + RRSe ) ) * DS )", "obj1": 0.7398373983739838, "obj2": 0.18960884368959105}, {"determining": "( ( ( ( ( ( CRS - FirstVNF_Mem_Server ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_RAM * DDR ) ) + Min( ARS ,FirstVNF_Mem ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe * Max( Min( MUR ,RRSe ),CS ) ) * Min( ( MUM / Max( Min( MUR ,( ( ( RCSe - RMSe ) - RRSe ) - MUC ) ),RMSe ) ) ,( ( DS * RRSe ) + ( ( DS / RCSe ) * DS ) ) ) )", "obj1": 0.75, "obj2": 0.16879596047744214}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / ( ( MDR + CRS ) + ( ARS * Const ) ) ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / DS ) ) ) ) / DS ) / CS ) )", "obj1": 0.13008130081300814, "obj2": 0.6774823202622381}, {"determining": "( ( ( Const / MDR ) + ( ( FirstVNF_CPU + FirstVNF_CPU_Server ) - ACS ) ) - ( Max( MDR,DDR ) / FirstVNF_Mem_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / Min( RMSe ,RCSe ) ) + ( Min( DS ,CS ) * ( MUM - RCSe ) ) ) - ( ( Max( CS,RCSe ) / ( MUC * MUR ) ) + ( ( MUC * MUC ) - ( RRSe * DS ) ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4901156133567484}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS / ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( Min( DS ,RCSe ),MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.5304878048780488, "obj2": 0.3384450409703608}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "( ( FirstVNF_RAM + MDR ) + ( CRS / RRS ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.573170731707317, "obj2": 0.3049598193980906}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( ( FirstVNF_RAM + FirstVNF_RAM ) + ( ( CRS + FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( ( ( MUC - ( CS * MUC ) ) * ( RCSe / ( RCSe / RCSe ) ) ) * RCSe )", "obj1": 0.3902439024390244, "obj2": 0.452143402147379}, {"determining": "( ( CRS - ( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) ) ) + FirstVNF_CPU )", "choosing": "( ( DS / RCSe ) * Min( ( ( MLU * MUR ) / RCSe ) ,RCSe ) )", "obj1": 0.6117886178861789, "obj2": 0.28383859505939885}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) )", "obj1": 0.9207317073170732, "obj2": 0.034714253352145126}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.49201694869942597}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * ( CRS - FirstVNF_Mem_Server ) ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( ( RRSe / DS ) * DS ) / RRSe ) ) ) ) )", "obj1": 0.8902439024390244, "obj2": 0.06568041178974242}, {"determining": "( ( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,MUC ),( Min( Max( MUM,RMSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) )", "obj1": 0.46747967479674796, "obj2": 0.41326625853845034}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( ( ( MDR - MDR ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3150406504065041, "obj2": 0.5089453297194978}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( FirstVNF_RAM + MDR ) + Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MLU / ( ( MLU / MUR ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.31558239424960904}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( DDR + FirstVNF_RAM_Server ) + ( MRS * MDR ) ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) )", "choosing": "Max( ( MUR / ( CS * RCSe ) ),Min( DS ,RRSe ) )", "obj1": 0.32926829268292684, "obj2": 0.4961874912631156}, {"determining": "( ( FirstVNF_RAM + ( ( FirstVNF_RAM + MDR ) + Min( MRS ,BR ) ) ) + Min( MRS ,BR ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MUR / ( MLU / ( ( MLU / MUR ) * Min( Max( CS,CS ) ,CS ) ) ) ) ) ) )", "obj1": 0.41260162601626016, "obj2": 0.44704828539050284}, {"determining": "( ( FirstVNF_RAM + FirstVNF_RAM ) + ( ( ( ACS / FirstVNF_Mem ) + FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( ( ( MUC - ( CS * MUC ) ) * Min( ( MUC * MUR ) ,( RMSe / CS ) ) ) * RCSe )", "obj1": 0.4186991869918699, "obj2": 0.43831742072142876}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( ( PN - FirstVNF_CPU ) - Min( ACS ,( FirstVNF_RAM * CRS ) ) )", "choosing": "Min( ( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}], "13": [{"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( CRS / ( ( ACS * ( CRS / MDR ) ) / Min( ( BR / DDR ) ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RMSe + MLU ) * ( RCSe / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + Min( ( BR + PN ) ,( CRS / ( ( ACS * ( CRS / MDR ) ) / Min( ( BR / DDR ) ,FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( RRSe / DS ) * ( Min( MUM ,RMSe ) - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( Max( FirstVNF_Mem_Server,BR ) + MDR ) + ( ( ( ACS * ( ACS / ( ACS / ( FirstVNF_RAM * CRS ) ) ) ) - DDR ) - FirstVNF_Mem ) )", "choosing": "( DS * ( ( MLU * ( RRSe / ( ( Min( RMSe ,( RMSe + MUC ) ) * ( MUR - RCSe ) ) * ( ( ( RRSe / DS ) + DS ) / CS ) ) ) ) / RCSe ) )", "obj1": 0.7134146341463414, "obj2": 0.2236067778829756}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "Min( ( BR + PN ) ,( CRS / ( ( ACS * Min( MRS ,BR ) ) / Min( ( BR / DDR ) ,AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( ( ( RCSe / CS ) + RCSe ) - MUC ) / RCSe ) - RRSe ) ) )", "obj1": 0.20121951219512196, "obj2": 0.6219682073934649}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * ( FirstVNF_Mem / ( ( FirstVNF_CPU_Server - ARS ) / ( BR - AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / RMSe ) - MLU ) ) )", "obj1": 0.4817073170731707, "obj2": 0.34160753520745507}, {"determining": "( ( Max( FirstVNF_Mem_Server,BR ) + MDR ) + ( ( CRS - FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( DS * ( ( ( RCSe / RCSe ) * ( RRSe / ( ( Min( RMSe ,( RMSe + MUC ) ) * ( MUR - RCSe ) ) * ( ( DS + DS ) / CS ) ) ) ) / RCSe ) )", "obj1": 0.8495934959349594, "obj2": 0.14242443374583194}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / ( ( MDR + CRS ) + ( ARS * Const ) ) ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / DS ) ) ) ) / DS ) / CS ) )", "obj1": 0.13008130081300814, "obj2": 0.6774823202622381}, {"determining": "Min( Min( FirstVNF_RAM ,CRS ) ,( ACS / FirstVNF_Mem ) )", "choosing": "Min( ( ( ( MUC - ( CS * MUC ) ) * ( RCSe / ( RCSe / RCSe ) ) ) * RCSe ) ,( RMSe / CS ) )", "obj1": 0.3821138211382114, "obj2": 0.4613573069235822}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / Const ) ) + FirstVNF_Mem ) ) ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe / ( ( Max( MUC,Min( RCSe ,RRSe ) ) + RRSe ) + RRSe ) ) * DS )", "obj1": 0.7398373983739838, "obj2": 0.18960884368959105}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * FirstVNF_CPU_Server ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "( ( RRSe / DS ) * ( ( Min( ( ( MLU * MUR ) / RCSe ) ,RCSe ) * MUR ) / RCSe ) )", "obj1": 0.8780487804878049, "obj2": 0.09705293899583145}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.49201694869942597}, {"determining": "( ( ( DDR / ( Max( Max( ( MDR / ( BR - FirstVNF_Mem ) ),Min( ARS ,FirstVNF_CPU ) ),ACS ) - Max( FirstVNF_RAM_Server,Const ) ) ) - FirstVNF_Mem_Server ) + ( ( CRS - DDR ) + FirstVNF_CPU ) )", "choosing": "( ( RMSe / MUC ) * ( DS + ( ( MUM + MUR ) / ( ( RMSe / MUC ) * ( DS + ( ( MUM + MUR ) / RCSe ) ) ) ) ) )", "obj1": 0.7967479674796748, "obj2": 0.15944267993820324}, {"determining": "( ( ( ( ( ( CRS - FirstVNF_Mem_Server ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_RAM * DDR ) ) + Min( ARS ,FirstVNF_Mem ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe * Max( Min( MUR ,RRSe ),CS ) ) * Min( ( MUM / Max( Min( MUR ,( ( ( RCSe - RMSe ) - RRSe ) - MUC ) ),RMSe ) ) ,( ( DS * RRSe ) + ( ( DS / RCSe ) * DS ) ) ) )", "obj1": 0.75, "obj2": 0.16879596047744214}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS / ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( Min( DS ,RCSe ),MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.5304878048780488, "obj2": 0.3384450409703608}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( ( ( DDR / ( Max( Max( ( MDR / ( ARS - FirstVNF_Mem ) ),Min( ARS ,FirstVNF_CPU ) ),ACS ) - Max( FirstVNF_RAM_Server,Const ) ) ) - FirstVNF_Mem_Server ) + ( ( CRS - Max( CRS,Const ) ) + FirstVNF_CPU ) )", "choosing": "( ( RMSe / MUC ) * ( DS + ( ( MUM + MUR ) / ( DS + ( ( MUM + MUR ) / RCSe ) ) ) ) )", "obj1": 0.8191056910569106, "obj2": 0.1472936167643676}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "( ( FirstVNF_RAM + MDR ) + ( CRS / RRS ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.573170731707317, "obj2": 0.3049598193980906}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( ( CRS - ( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) ) ) + FirstVNF_CPU )", "choosing": "( ( DS / RCSe ) * Min( ( ( MLU * MUR ) / RCSe ) ,RCSe ) )", "obj1": 0.6117886178861789, "obj2": 0.28383859505939885}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) )", "obj1": 0.9207317073170732, "obj2": 0.034714253352145126}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * ( CRS - FirstVNF_Mem_Server ) ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( ( RRSe / DS ) * DS ) / RRSe ) ) ) ) )", "obj1": 0.8902439024390244, "obj2": 0.06568041178974242}, {"determining": "( ( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,MUC ),( Min( Max( MUM,RMSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) )", "obj1": 0.46747967479674796, "obj2": 0.41326625853845034}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( ( ( MDR - MDR ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3150406504065041, "obj2": 0.5089453297194978}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( FirstVNF_RAM + MDR ) + Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MLU / ( ( MLU / MUR ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.31558239424960904}, {"determining": "( ( ( DDR / ( Max( Max( ( MDR / ( BR - FirstVNF_CPU ) ),Min( ARS ,FirstVNF_CPU ) ),ACS ) - Max( FirstVNF_RAM_Server,Const ) ) ) - FirstVNF_Mem_Server ) + ( ( CRS - Max( CRS,Const ) ) + FirstVNF_CPU ) )", "choosing": "( ( RCSe / ( RCSe / RCSe ) ) * ( DS + ( ( MUM + MUR ) / RCSe ) ) )", "obj1": 0.8841463414634146, "obj2": 0.08959889030638761}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( DDR + FirstVNF_RAM_Server ) + ( MRS * MDR ) ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) )", "choosing": "Max( ( MUR / ( CS * RCSe ) ),Min( DS ,RRSe ) )", "obj1": 0.32926829268292684, "obj2": 0.4961874912631156}, {"determining": "( ( DDR + FirstVNF_RAM_Server ) + ( ( FirstVNF_RAM + ( DDR / Max( FirstVNF_CPU,MDR ) ) ) * MDR ) )", "choosing": "Max( ( ( DS * ( DS + MUC ) ) - ( MUC / ( RMSe / RCSe ) ) ),Max( ( RMSe * MUR ),( MLU / ( ( MLU / MUR ) * Min( Max( MUC,CS ) ,CS ) ) ) ) )", "obj1": 0.39634146341463417, "obj2": 0.4462891330284653}, {"determining": "( ( FirstVNF_RAM + FirstVNF_RAM ) + ( ( ( ACS / FirstVNF_Mem ) + FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( ( ( MUC - ( CS * MUC ) ) * Min( ( MUC * MUR ) ,( RMSe / CS ) ) ) * RCSe )", "obj1": 0.4186991869918699, "obj2": 0.43831742072142876}], "14": [{"determining": "( ( Max( ACS,FirstVNF_Mem_Server ) + MDR ) + ( ( DDR - Max( ( ( Min( ( Const * ARS ) ,ARS ) / AMS ) - DDR ),( ( BR / PN ) / Max( RRS,FirstVNF_Mem_Server ) ) ) ) - ( ( Min( DDR ,( FirstVNF_Mem_Server / Max( FirstVNF_CPU_Server,Const ) ) ) + MDR ) + ( ( ( ACS * ( ACS / ( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) ) ) )", "choosing": "( ( ( RRSe / Min( MUC ,Max( RMSe,MUC ) ) ) * ( RCSe / ( RCSe / RCSe ) ) ) * ( RCSe / ( ( MUR * ( ( ( ( DS * MUR ) * RMSe ) / MUM ) / ( Max( RMSe,MUC ) / ( MUC + RCSe ) ) ) ) / RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( CRS / ( ( ACS * ( CRS / MDR ) ) / Min( ( BR / DDR ) ,FirstVNF_RAM_Server ) ) ) )", "choosing": "( ( RMSe + MLU ) * ( RCSe / RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) + Max( Const,BR ) )", "choosing": "Max( Min( RRSe ,DS ),( ( ( MUC / DS ) * Max( ( Max( ( MUC + MUR ),RMSe ) / RRSe ),Min( RRSe ,MUM ) ) ) / RCSe ) )", "obj1": 0.07520325203252033, "obj2": 0.7451418804186299}, {"determining": "( ( Max( FirstVNF_Mem_Server,BR ) + MDR ) + ( ( ( ACS * ( ACS / ( ACS / ( FirstVNF_RAM * CRS ) ) ) ) - DDR ) - FirstVNF_Mem ) )", "choosing": "( DS * ( ( MLU * ( RRSe / ( ( Min( RMSe ,( RMSe + MUC ) ) * ( MUR - RCSe ) ) * ( ( ( RRSe / DS ) + DS ) / CS ) ) ) ) / RCSe ) )", "obj1": 0.7134146341463414, "obj2": 0.2236067778829756}, {"determining": "( ( ( ( FirstVNF_RAM * ARS ) + ( CRS - Const ) ) * Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) ) * FirstVNF_CPU )", "choosing": "( ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) + Min( Min( ( Min( CS ,MUR ) * ( RCSe - RCSe ) ) ,Min( MUR ,RRSe ) ) ,( Min( MUM ,MUR ) - ( CS - MUM ) ) ) )", "obj1": 0.6138211382113821, "obj2": 0.25147715585249275}, {"determining": "( ( AMS - FirstVNF_Mem_Server ) + ( AMS - FirstVNF_Mem_Server ) )", "choosing": "( Max( Max( MUR,Min( ( MUC * Max( Max( ( MUC - MUC ),MLU ),Min( ( RCSe / MLU ) ,RMSe ) ) ) ,DS ) ),( RMSe * MUR ) ) * ( ( RCSe / RCSe ) / RCSe ) )", "obj1": 0.4817073170731707, "obj2": 0.33583818460160164}, {"determining": "Min( ( BR + PN ) ,( CRS / ( ( ACS * Min( MRS ,BR ) ) / Min( ( BR / DDR ) ,AMS ) ) ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( ( ( ( RCSe / CS ) + RCSe ) - MUC ) / RCSe ) - RRSe ) ) )", "obj1": 0.20121951219512196, "obj2": 0.6219682073934649}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ( ( ACS * Max( FirstVNF_Mem_Server,BR ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "( ( RRSe / ( ( MLU * ( MUC - RCSe ) ) / CS ) ) * ( ( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) * MUR ) / RCSe ) )", "obj1": 0.823170731707317, "obj2": 0.1320242282872202}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * FirstVNF_CPU_Server ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "( ( RRSe / DS ) * ( ( Min( ( ( MLU * MUR ) / RCSe ) ,RCSe ) * MUR ) / RCSe ) )", "obj1": 0.8780487804878049, "obj2": 0.09705293899583145}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / ( ( MDR + CRS ) + ( ARS * Const ) ) ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / DS ) ) ) ) / DS ) / CS ) )", "obj1": 0.13008130081300814, "obj2": 0.6774823202622381}, {"determining": "( ( DDR - BR ) + ( FirstVNF_Mem / Min( CRS ,( ACS / FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Min( RCSe ,MLU ) - Min( RMSe ,MUC ) ) ,( ( CS + MUC ) * ( MUM - ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.47764227642276424, "obj2": 0.3993309008395115}, {"determining": "( ( CRS - FirstVNF_Mem_Server ) + ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / ( ( FirstVNF_RAM_Server * ( FirstVNF_RAM / Const ) ) + FirstVNF_Mem ) ) ) + FirstVNF_Mem ) )", "choosing": "( ( RMSe / ( ( Max( MUC,Min( RCSe ,RRSe ) ) + RRSe ) + RRSe ) ) * DS )", "obj1": 0.7398373983739838, "obj2": 0.18960884368959105}, {"determining": "( ( FirstVNF_RAM_Server + FirstVNF_Mem ) - ( ( FirstVNF_CPU_Server + DDR ) / ARS ) )", "choosing": "( ( RMSe / DS ) / Min( ( MUR - Max( ( Max( MUM,( RRSe / CS ) ) + RRSe ),RCSe ) ) ,MUC ) )", "obj1": 0.5365853658536586, "obj2": 0.31843969542746836}, {"determining": "( ( ( DDR / ( Max( Max( ( MDR / ( BR - FirstVNF_Mem ) ),Min( ARS ,FirstVNF_CPU ) ),ACS ) - Max( FirstVNF_RAM_Server,Const ) ) ) - FirstVNF_Mem_Server ) + ( ( CRS - DDR ) + FirstVNF_CPU ) )", "choosing": "( ( RMSe / MUC ) * ( DS + ( ( MUM + MUR ) / ( ( RMSe / MUC ) * ( DS + ( ( MUM + MUR ) / RCSe ) ) ) ) ) )", "obj1": 0.7967479674796748, "obj2": 0.15944267993820324}, {"determining": "( ( ( ( ( ( CRS - FirstVNF_Mem_Server ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_RAM * DDR ) ) + Min( ARS ,FirstVNF_Mem ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe * Max( Min( MUR ,RRSe ),CS ) ) * Min( ( MUM / Max( Min( MUR ,( ( ( RCSe - RMSe ) - RRSe ) - MUC ) ),RMSe ) ) ,( ( DS * RRSe ) + ( ( DS / RCSe ) * DS ) ) ) )", "obj1": 0.75, "obj2": 0.16879596047744214}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - DS ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6635503818070817}, {"determining": "( ( Max( ARS,MDR ) / FirstVNF_CPU ) + ( ( CRS + FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( ( ( MUC - ( CS * ( ( RCSe + CS ) / MUR ) ) ) * ( RCSe / ( RCSe / RCSe ) ) ) * RCSe )", "obj1": 0.3597560975609756, "obj2": 0.4647906972674009}, {"determining": "( ( PN + CRS ) + Min( ( Max( ARS,ARS ) + ( Max( Max( MRS,CRS ),ARS ) / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MLU ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.24390243902439024, "obj2": 0.548529029046741}, {"determining": "( ( PN + CRS ) + Min( ( ( ( MRS - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.9532520325203252, "obj2": 0.019929203263985926}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.29065040650406504, "obj2": 0.5428440221467506}, {"determining": "( ( FirstVNF_RAM + MDR ) + ( CRS / RRS ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) ) )", "obj1": 0.573170731707317, "obj2": 0.3049598193980906}, {"determining": "( ( ACS - FirstVNF_CPU ) * Max( CRS,BR ) )", "choosing": "( ( RMSe - DS ) * ( MLU * ( ( RRSe / ( ( ( RCSe / MUC ) * ( DS + DS ) ) * DS ) ) - MLU ) ) )", "obj1": 0.18902439024390244, "obj2": 0.65294175960175}, {"determining": "( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,( ( MDR + CRS ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ) ) )", "obj1": 0.3313008130081301, "obj2": 0.49201694869942597}, {"determining": "( ( CRS - ( ( CRS - FirstVNF_Mem_Server ) + ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * CRS ) ) ) - DDR ) - FirstVNF_Mem ) ) ) + FirstVNF_CPU )", "choosing": "( ( DS / RCSe ) * Min( ( ( MLU * MUR ) / RCSe ) ,RCSe ) )", "obj1": 0.6117886178861789, "obj2": 0.28383859505939885}, {"determining": "( ( PN - FirstVNF_CPU ) - ( ( ( FirstVNF_CPU * AMS ) + ( ( BR - ARS ) + DDR ) ) * FirstVNF_RAM ) )", "choosing": "Min( ( MLU + ( ( CS * DS ) * ( MUC * DS ) ) ) ,Max( MUM,RMSe ) )", "obj1": 0.9065040650406504, "obj2": 0.059674881527420544}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) + ( MUC * ( ( RCSe * DS ) / RRSe ) ) ) ) )", "obj1": 0.9207317073170732, "obj2": 0.034714253352145126}, {"determining": "Min( ( ARS * ( PN - FirstVNF_CPU ) ) ,( MDR / FirstVNF_RAM_Server ) )", "choosing": "Min( ( RRSe - DS ) ,( Min( ( RMSe - MUR ) ,Max( MUM,RMSe ) ) / RCSe ) )", "obj1": 0.9878048780487805, "obj2": 0.006594453906332194}, {"determining": "Min( Min( FirstVNF_RAM_Server ,AMS ) ,Max( FirstVNF_Mem,MDR ) )", "choosing": "( ( MUC * DS ) / Max( CS,MUC ) )", "obj1": 0.5934959349593496, "obj2": 0.29084599074735834}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ( ( FirstVNF_CPU + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),DS ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.12398373983739837, "obj2": 0.7066714092659175}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( DDR / ( Max( Max( ( MDR / ( ARS - FirstVNF_Mem ) ),Min( ARS ,FirstVNF_CPU ) ),ACS ) - Max( FirstVNF_RAM_Server,Const ) ) ) - FirstVNF_Mem_Server ) + ( ( CRS - Max( CRS,Const ) ) + FirstVNF_CPU ) )", "choosing": "( ( RMSe / MUC ) * ( DS + ( ( MUM + MUR ) / ( DS + ( ( MUM + MUR ) / RCSe ) ) ) ) )", "obj1": 0.8191056910569106, "obj2": 0.1472936167643676}, {"determining": "Min( Min( FirstVNF_RAM ,CRS ) ,( ACS / FirstVNF_Mem ) )", "choosing": "Min( ( ( ( MUC - ( CS * MUC ) ) * ( RCSe / ( RCSe / RCSe ) ) ) * RCSe ) ,( RMSe / CS ) )", "obj1": 0.3821138211382114, "obj2": 0.4613573069235822}, {"determining": "( ( ( ( ( ( ACS * Min( ACS ,( FirstVNF_RAM * RRS ) ) ) - DDR ) - FirstVNF_Mem ) * ( FirstVNF_CPU * DDR ) ) + ( ( FirstVNF_Mem_Server - FirstVNF_CPU ) + ( FirstVNF_CPU * ( CRS - FirstVNF_Mem_Server ) ) ) ) * ( FirstVNF_CPU * AMS ) )", "choosing": "( ( RCSe + DS ) * Min( Max( Max( RMSe,MUC ),( Min( Min( RMSe ,RRSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,( ( DS * RRSe ) + ( MUC * ( ( ( RRSe / DS ) * DS ) / RRSe ) ) ) ) )", "obj1": 0.8902439024390244, "obj2": 0.06568041178974242}, {"determining": "( ( ( PN - FirstVNF_CPU ) - ( MDR * FirstVNF_RAM ) ) + ( Min( FirstVNF_Mem_Server ,RRS ) + FirstVNF_Mem ) )", "choosing": "( ( RCSe / DS ) * Min( Max( Max( RMSe,MUC ),( Min( Max( MUM,RMSe ) ,RRSe ) * ( RMSe - MUR ) ) ) ,RCSe ) )", "obj1": 0.46747967479674796, "obj2": 0.41326625853845034}, {"determining": "Max( ( PN / FirstVNF_CPU ),( ( Min( ( FirstVNF_Mem / ACS ) ,Min( Const ,PN ) ) + FirstVNF_Mem ) - FirstVNF_CPU ) )", "choosing": "( ( Max( ( MUR - MUC ),DS ) - MUM ) / ( Min( ( DS / MUM ) ,Min( CS ,CS ) ) * ( ( RMSe / CS ) + ( RRSe - MUC ) ) ) )", "obj1": 0.44308943089430897, "obj2": 0.4169393288203942}, {"determining": "( ( ( ( MDR - MDR ) + FirstVNF_CPU ) + ( FirstVNF_CPU * AMS ) ) / Max( FirstVNF_RAM_Server,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( RCSe + CS ),Max( DS,RMSe ) ) + DS ) ) ),Min( DS ,RRSe ) )", "obj1": 0.3150406504065041, "obj2": 0.5089453297194978}, {"determining": "( ( DDR + FirstVNF_RAM_Server ) + ( ( FirstVNF_RAM + ( DDR / Max( FirstVNF_CPU,MDR ) ) ) * MDR ) )", "choosing": "Max( ( ( DS * ( DS + MUC ) ) - ( MUC / ( RMSe / RCSe ) ) ),Max( ( RMSe * MUR ),( MLU / ( ( MLU / MUR ) * Min( Max( MUC,CS ) ,CS ) ) ) ) )", "obj1": 0.39634146341463417, "obj2": 0.4462891330284653}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( Max( ( RCSe - ( DS + MUC ) ),RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22764227642276422, "obj2": 0.5632222705024915}, {"determining": "( ( FirstVNF_RAM + MDR ) + Min( ( BR + PN ) ,( CRS / RRS ) ) )", "choosing": "( ( RCSe / CS ) * Max( Min( RRSe ,DS ),( MUR / ( MLU / ( ( MLU / MUR ) * ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) ) ) ) )", "obj1": 0.5528455284552846, "obj2": 0.31558239424960904}, {"determining": "( ( ( DDR / ( Max( Max( ( MDR / ( BR - FirstVNF_CPU ) ),Min( ARS ,FirstVNF_CPU ) ),ACS ) - Max( FirstVNF_RAM_Server,Const ) ) ) - FirstVNF_Mem_Server ) + ( ( CRS - Max( CRS,Const ) ) + FirstVNF_CPU ) )", "choosing": "( ( RCSe / ( RCSe / RCSe ) ) * ( DS + ( ( MUM + MUR ) / RCSe ) ) )", "obj1": 0.8841463414634146, "obj2": 0.08959889030638761}, {"determining": "( ( PN + CRS ) + Min( ( ( ( ( CRS - CRS ) - FirstVNF_Mem ) * FirstVNF_RAM_Server ) + ( PN / DDR ) ) ,FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,DS ),( MUR / ( CS * ( Max( Max( ( ( RRSe + MLU ) + Max( RCSe,RRSe ) ),RMSe ),Max( MUR,RMSe ) ) + DS ) ) ) )", "obj1": 0.9369918699186992, "obj2": 0.028710328777199055}, {"determining": "( Max( MDR,Min( ( DDR - FirstVNF_RAM ) ,RRS ) ) / ( ( MRS / CRS ) * FirstVNF_CPU ) )", "choosing": "Max( ( DS * RCSe ),( ( ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( ( DS * RCSe ),MUC ) ) ,( ( RRSe + ( DS + MUR ) ) * ( Max( CS,MUR ) / ( RRSe - MUR ) ) ) ) ) / DS ) / CS ) )", "obj1": 0.11382113821138211, "obj2": 0.7164473566482069}, {"determining": "( ( FirstVNF_RAM_Server + Min( FirstVNF_RAM_Server ,MRS ) ) - ( RRS / ARS ) )", "choosing": "( ( RMSe / DS ) / RCSe )", "obj1": 0.1016260162601626, "obj2": 0.7412321499931024}, {"determining": "( ( Max( ACS,( RRS * FirstVNF_RAM_Server ) ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( ( MLU - DS ) + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.30284552845528456, "obj2": 0.5193304340819724}, {"determining": "( Min( CRS ,( ACS / FirstVNF_Mem ) ) * Max( FirstVNF_Mem,BR ) )", "choosing": "( ( RMSe / DS ) * ( RMSe * ( ( RRSe / ( DS * ( ( RCSe / MUC ) * ( DS + DS ) ) ) ) - MLU ) ) )", "obj1": 0.11178861788617886, "obj2": 0.7365841629085871}, {"determining": "( ( Max( ACS,MRS ) / Max( Const,MDR ) ) / Min( ( RRS * RRS ) ,Min( ACS ,ACS ) ) )", "choosing": "( ( ( MUM - MUM ) - ( RMSe + CS ) ) + Min( ( MLU - MUC ) ,( CS * MUR ) ) )", "obj1": 0.2926829268292683, "obj2": 0.5288507587884705}, {"determining": "( ( PN + CRS ) + ( FirstVNF_CPU + ACS ) )", "choosing": "Max( ( MUR / ( CS * ( Max( ( Min( ( RMSe + CS ) ,( DS * DS ) ) / RMSe ),Max( RRSe,RMSe ) ) + DS ) ) ),Min( RRSe ,DS ) )", "obj1": 0.22357723577235772, "obj2": 0.5760948072515857}, {"determining": "( ( ( DDR + FirstVNF_RAM_Server ) + ( MRS * MDR ) ) + ( FirstVNF_CPU + Max( DDR,DDR ) ) )", "choosing": "Max( ( MUR / ( CS * RCSe ) ),Min( DS ,RRSe ) )", "obj1": 0.32926829268292684, "obj2": 0.4961874912631156}, {"determining": "( Max( MDR,( FirstVNF_CPU_Server / ( ACS + ( PN + DDR ) ) ) ) / Max( ARS,ARS ) )", "choosing": "Max( ( DS * RCSe ),( ( DS + ( ( MLU * MUM ) / Min( Min( ( ( DS - DS ) * MUM ) ,Max( MUM,MUC ) ) ,( RRSe - MUC ) ) ) ) / CS ) )", "obj1": 0.4247967479674797, "obj2": 0.4238427809356103}, {"determining": "( ( FirstVNF_RAM + FirstVNF_RAM ) + ( ( ( ACS / FirstVNF_Mem ) + FirstVNF_Mem_Server ) + ( ( CRS - FirstVNF_Mem_Server ) + FirstVNF_CPU ) ) )", "choosing": "( ( ( MUC - ( CS * MUC ) ) * Min( ( MUC * MUR ) ,( RMSe / CS ) ) ) * RCSe )", "obj1": 0.4186991869918699, "obj2": 0.43831742072142876}]}