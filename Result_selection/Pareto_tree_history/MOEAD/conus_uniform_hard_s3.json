{"1": [{"determining": "( ( FirstVNF_Mem / MRS ) - Max( FirstVNF_RAM_Server,AMS ) )", "choosing": "( ( MLU - MUM ) - Min( DS ,RCSe ) )", "obj1": 0.6985446985446986, "obj2": 0.2725050745695628}, {"determining": "Max( ( PN + FirstVNF_RAM ),( FirstVNF_RAM - ( MDR + Max( MDR,FirstVNF_CPU_Server ) ) ) )", "choosing": "Min( Min( ( Max( MLU,( Min( ( Min( MUM ,CS ) * Min( RMSe ,RMSe ) ) ,( CS * MUR ) ) - RCSe ) ) + ( DS * RMSe ) ) ,( Min( MUM ,MLU ) - ( RCSe / MUR ) ) ) ,( Max( ( CS + CS ),( MUR + MUM ) ) * ( Min( RRSe ,DS ) / ( DS - MLU ) ) ) )", "obj1": 0.681912681912682, "obj2": 0.279448344230532}, {"determining": "( ( ARS * CRS ) * ( FirstVNF_Mem_Server - FirstVNF_Mem ) )", "choosing": "( Min( MLU ,DS ) / ( MUR - DS ) )", "obj1": 0.7858627858627859, "obj2": 0.19289276863743732}, {"determining": "Min( Max( FirstVNF_Mem,FirstVNF_Mem_Server ) ,( Const - DDR ) )", "choosing": "( ( MUC * DS ) - ( MUC + RCSe ) )", "obj1": 0.7047817047817048, "obj2": 0.19756069688833428}, {"determining": "( ( ARS + CRS ) - ( RRS + RRS ) )", "choosing": "( ( RCSe * RCSe ) * ( MUC / MUC ) )", "obj1": 0.6860706860706861, "obj2": 0.26676988511900923}, {"determining": "( ( MDR / PN ) * ( BR / FirstVNF_Mem_Server ) )", "choosing": "( ( MLU / DS ) + ( RCSe / MUC ) )", "obj1": 0.6735966735966736, "obj2": 0.29510523745437495}, {"determining": "( ( Const * RRS ) * ( FirstVNF_Mem_Server + ACS ) )", "choosing": "( Max( MUM,MUR ) * ( MUR - MUM ) )", "obj1": 0.7006237006237006, "obj2": 0.2648480987349502}, {"determining": "( ( DDR / PN ) - ( FirstVNF_RAM_Server + ARS ) )", "choosing": "Min( Max( MLU,DS ) ,Min( RCSe ,MLU ) )", "obj1": 0.6881496881496881, "obj2": 0.26991157658368187}, {"determining": "( ( ACS / MRS ) - ( ARS / MDR ) )", "choosing": "Max( Max( MUC,RRSe ),( RCSe + MUR ) )", "obj1": 0.7234927234927235, "obj2": 0.26187531531657593}, {"determining": "( ( DDR - RRS ) / Min( DDR ,( PN + PN ) ) )", "choosing": "( Max( Max( ( ( RRSe - MUM ) + Min( ( CS * MUR ) ,CS ) ),RCSe ),( DS * MUR ) ) / ( RMSe / MLU ) )", "obj1": 0.7297297297297297, "obj2": 0.2636621745514701}, {"determining": "Max( Max( CRS,MDR ),( MRS / Const ) )", "choosing": "( ( DS * MUC ) * ( RMSe * RCSe ) )", "obj1": 0.7297297297297297, "obj2": 0.21135564892408285}, {"determining": "Min( ( DDR * RRS ) ,( RRS / PN ) )", "choosing": "( ( RRSe / ( MUR / ( Min( RCSe ,Max( RCSe,Min( CS ,MUM ) ) ) - Min( DS ,RRSe ) ) ) ) / Max( DS,MUM ) )", "obj1": 0.7089397089397089, "obj2": 0.2500228287936079}, {"determining": "( Min( Const ,RRS ) - ( CRS - FirstVNF_Mem_Server ) )", "choosing": "( ( RCSe * MUR ) / Min( MUC ,RMSe ) )", "obj1": 0.7234927234927235, "obj2": 0.26792719844759993}, {"determining": "( Max( AMS,FirstVNF_RAM_Server ) - Max( FirstVNF_RAM,FirstVNF_Mem ) )", "choosing": "( ( CS / RRSe ) / ( DS - ( DS + MUR ) ) )", "obj1": 0.762993762993763, "obj2": 0.2295162990002806}, {"determining": "( ( ( Max( ( FirstVNF_Mem_Server + Min( FirstVNF_CPU ,( ARS * FirstVNF_CPU_Server ) ) ),ARS ) / ( MRS * ACS ) ) * FirstVNF_RAM ) / ( DDR / FirstVNF_RAM_Server ) )", "choosing": "( Min( RCSe ,RCSe ) - ( MUM - ( ( DS + ( MUC / ( MUM * Max( Max( MUR,MLU ),( CS - MUM ) ) ) ) ) + CS ) ) )", "obj1": 0.7151767151767152, "obj2": 0.27880125821311896}, {"determining": "( Max( Const,Const ) / ( ACS - FirstVNF_Mem ) )", "choosing": "Max( Max( MUC,MUM ),( MUR - DS ) )", "obj1": 0.7484407484407485, "obj2": 0.22372805560227274}, {"determining": "( ( ARS / CRS ) + Max( MDR,PN ) )", "choosing": "Max( ( MUM / CS ),( MUM - RRSe ) )", "obj1": 0.7297297297297297, "obj2": 0.2671518466822417}, {"determining": "Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * Const ) ) )", "choosing": "( ( CS * DS ) * Min( ( Min( MUM ,MUC ) - DS ) ,Min( CS ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR / FirstVNF_RAM_Server ) + ( MRS * CRS ) )", "choosing": "Min( ( MUM + RRSe ) ,( MLU + CS ) )", "obj1": 0.6486486486486487, "obj2": 0.26172607231985784}, {"determining": "( Min( AMS ,FirstVNF_RAM_Server ) - ( BR + ARS ) )", "choosing": "( ( RCSe - MUM ) - ( CS * ( Min( MUC ,DS ) + MUR ) ) )", "obj1": 0.7401247401247402, "obj2": 0.22613332915097142}, {"determining": "( Max( RRS,FirstVNF_CPU_Server ) - ( FirstVNF_RAM * ARS ) )", "choosing": "( Min( CS ,MUR ) * ( CS - MUC ) )", "obj1": 0.7505197505197505, "obj2": 0.2131303790489405}, {"determining": "( ( CRS / CRS ) / ( FirstVNF_CPU * RRS ) )", "choosing": "( ( MLU * MUC ) - ( CS + DS ) )", "obj1": 0.7130977130977131, "obj2": 0.28460851491785266}, {"determining": "Max( ( MDR - ACS ),Max( ARS,BR ) )", "choosing": "( ( RRSe - RCSe ) * Min( DS ,MUR ) )", "obj1": 0.6881496881496881, "obj2": 0.2609707831076628}, {"determining": "( Min( AMS ,RRS ) - ( BR - ARS ) )", "choosing": "( ( CS * CS ) / ( MUC + RCSe ) )", "obj1": 0.7193347193347194, "obj2": 0.2878983949389264}, {"determining": "Max( ( FirstVNF_RAM_Server - MDR ),( FirstVNF_Mem_Server - MRS ) )", "choosing": "( ( DS + MUC ) / ( MLU / RCSe ) )", "obj1": 0.7068607068607069, "obj2": 0.2506959285737946}, {"determining": "( ( FirstVNF_Mem_Server / ACS ) / ( FirstVNF_Mem + FirstVNF_RAM ) )", "choosing": "( Max( DS,RCSe ) - ( MUM + RMSe ) )", "obj1": 0.7089397089397089, "obj2": 0.24815982390636127}, {"determining": "Max( ( FirstVNF_RAM + MRS ),( FirstVNF_CPU / ARS ) )", "choosing": "( ( RMSe - DS ) - Min( RCSe ,RCSe ) )", "obj1": 0.681912681912682, "obj2": 0.2841501242499932}, {"determining": "( ( FirstVNF_Mem_Server + FirstVNF_CPU ) * Min( DDR ,FirstVNF_RAM_Server ) )", "choosing": "( ( MUR * RRSe ) / ( MUM / RMSe ) )", "obj1": 0.6964656964656964, "obj2": 0.2640278235756087}, {"determining": "Min( ( DDR / AMS ) ,( MDR - FirstVNF_RAM_Server ) )", "choosing": "Max( ( RRSe * RCSe ),( RMSe * MUR ) )", "obj1": 0.9958419958419958, "obj2": 0.0037627579009090577}, {"determining": "Min( Min( FirstVNF_Mem_Server ,RRS ) ,Max( AMS,FirstVNF_Mem_Server ) )", "choosing": "Max( ( MUM - RRSe ),( MUC / DS ) )", "obj1": 0.6943866943866944, "obj2": 0.31087957592487214}, {"determining": "Min( ( MRS * FirstVNF_Mem_Server ) ,( ACS / FirstVNF_Mem_Server ) )", "choosing": "Min( Max( CS,CS ) ,Min( MUR ,DS ) )", "obj1": 0.7588357588357588, "obj2": 0.2039075122101271}, {"determining": "( ( ACS * RRS ) * Min( AMS ,Min( ( PN - FirstVNF_CPU_Server ) ,RRS ) ) )", "choosing": "Max( ( MUC - RMSe ),( MUC - ( RCSe - Max( MUR,RRSe ) ) ) )", "obj1": 0.7068607068607069, "obj2": 0.2429479692412664}, {"determining": "Max( Max( RRS,FirstVNF_CPU ),( CRS + MDR ) )", "choosing": "( ( RMSe + CS ) + ( RCSe / MLU ) )", "obj1": 0.7338877338877339, "obj2": 0.2724921646603748}, {"determining": "( ( Max( PN,FirstVNF_CPU ) / BR ) + Max( FirstVNF_Mem_Server,FirstVNF_RAM ) )", "choosing": "Min( ( RCSe + Max( ( Min( ( ( Min( DS ,RCSe ) + CS ) - MUR ) ,MLU ) - ( ( Max( RCSe,DS ) + CS ) - RRSe ) ),RCSe ) ) ,( CS / RMSe ) )", "obj1": 0.7172557172557172, "obj2": 0.256917442316103}, {"determining": "( ( FirstVNF_Mem / ACS ) * ( FirstVNF_Mem * RRS ) )", "choosing": "( Max( CS,CS ) * Min( CS ,MUC ) )", "obj1": 0.6881496881496881, "obj2": 0.2690331575339503}, {"determining": "Min( ( Min( RRS ,RRS ) - ( DDR - DDR ) ) ,( ( FirstVNF_RAM_Server - CRS ) - ( ACS - ACS ) ) )", "choosing": "Max( ( MUR / DS ),Min( MUC ,RRSe ) )", "obj1": 0.7047817047817048, "obj2": 0.306570547835799}, {"determining": "( ( FirstVNF_Mem + ( Const - RRS ) ) / Max( FirstVNF_CPU_Server,( FirstVNF_RAM_Server - PN ) ) )", "choosing": "( ( ( RMSe + MLU ) + ( RMSe - RRSe ) ) * ( Min( MLU ,MLU ) * ( MLU * MUC ) ) )", "obj1": 0.7047817047817048, "obj2": 0.2596536734668468}, {"determining": "( ( ( FirstVNF_CPU / MRS ) + ( AMS + MDR ) ) * ( ( MDR + ACS ) / ( CRS / ACS ) ) )", "choosing": "( ( Min( DS ,MUM ) * ( MLU + DS ) ) * ( ( RRSe / RRSe ) - ( MUC + MLU ) ) )", "obj1": 0.7338877338877339, "obj2": 0.27255634753703867}, {"determining": "( ( FirstVNF_CPU_Server / Max( DDR,FirstVNF_Mem_Server ) ) * ( FirstVNF_RAM_Server - ( BR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( CS - Min( RRSe ,CS ) ) - ( MLU / MLU ) )", "obj1": 0.7193347193347194, "obj2": 0.26060422742621564}, {"determining": "( ( ( MDR / FirstVNF_RAM_Server ) * ( FirstVNF_CPU_Server * BR ) ) / Min( RRS ,AMS ) )", "choosing": "( ( Max( DS,MLU ) + Max( RMSe,RMSe ) ) - Max( MUC,RRSe ) )", "obj1": 0.7297297297297297, "obj2": 0.26746381646520045}, {"determining": "Max( ( Const + PN ),Min( ( PN - PN ) ,AMS ) )", "choosing": "( ( Min( RRSe ,RMSe ) * Max( RCSe,RMSe ) ) / Max( ( MUM - RRSe ),Max( RCSe,DS ) ) )", "obj1": 0.7234927234927235, "obj2": 0.2522590915297982}, {"determining": "( Max( DDR,AMS ) * ( AMS / FirstVNF_CPU_Server ) )", "choosing": "( Max( ( MUC - RCSe ),Max( RRSe,MUM ) ) * Min( ( MLU / MUM ) ,Min( RCSe ,RMSe ) ) )", "obj1": 0.7006237006237006, "obj2": 0.2624011310954077}, {"determining": "( ( ( MDR + ACS ) + ( BR - MDR ) ) / ( ( MRS - MDR ) / ( Const * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - ( MLU / MLU ) ) / Min( ( CS / CS ) ,( MUC / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( BR / DDR ) + ( ARS + FirstVNF_CPU ) ),( ( FirstVNF_Mem_Server / ARS ) + Max( FirstVNF_RAM_Server,FirstVNF_RAM ) ) )", "choosing": "Min( Max( Min( RMSe ,CS ),Min( DS ,DS ) ) ,Min( Min( MLU ,CS ) ,( RCSe * MUC ) ) )", "obj1": 0.6881496881496881, "obj2": 0.26982730121316667}, {"determining": "Max( Max( ( MDR + CRS ),CRS ),( FirstVNF_Mem - BR ) )", "choosing": "( Min( ( RCSe + MLU ) ,( CS / CS ) ) * ( ( MUC + RRSe ) / ( MLU + MUM ) ) )", "obj1": 0.7130977130977131, "obj2": 0.26532619403364827}, {"determining": "Max( Max( ( ACS - MRS ),( AMS - FirstVNF_RAM_Server ) ),( Min( CRS ,FirstVNF_CPU_Server ) + Min( PN ,FirstVNF_CPU_Server ) ) )", "choosing": "Max( Min( Min( CS ,RRSe ) ,( MLU / MUR ) ),( ( RRSe * RRSe ) + ( MUC * MUR ) ) )", "obj1": 0.7234927234927235, "obj2": 0.27501960957209476}, {"determining": "Max( ( ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) * ACS ),( MDR * ARS ) )", "choosing": "Min( ( ( DS / CS ) + ( MUC * MUC ) ) ,( Max( MUM,DS ) - ( RRSe - RCSe ) ) )", "obj1": 0.7151767151767152, "obj2": 0.25575954934630324}, {"determining": "( ( Max( FirstVNF_RAM_Server,MRS ) - Max( MRS,RRS ) ) * ( ( FirstVNF_Mem_Server - CRS ) - ( ACS / MDR ) ) )", "choosing": "( Min( ( MUR - RMSe ) ,Max( DS,MUM ) ) - Min( ( CS / RCSe ) ,( RMSe / MUR ) ) )", "obj1": 0.9937629937629938, "obj2": 0.004874075651852956}, {"determining": "( ( ( BR / FirstVNF_RAM ) * ( FirstVNF_RAM - RRS ) ) + ( ( AMS - Const ) - ( BR / FirstVNF_RAM ) ) )", "choosing": "( Max( Min( RRSe ,MUR ),( RRSe / MUM ) ) * Min( ( MUM / MUM ) ,( RMSe / DS ) ) )", "obj1": 0.7297297297297297, "obj2": 0.19003325944948105}, {"determining": "Max( ( AMS / ( FirstVNF_RAM + FirstVNF_Mem ) ),( Const + Const ) )", "choosing": "Max( Min( ( DS + RCSe ) ,Min( MUM ,RCSe ) ),( MLU + ( RCSe * MLU ) ) )", "obj1": 0.7006237006237006, "obj2": 0.2884256271107448}, {"determining": "( Max( FirstVNF_Mem_Server,RRS ) - Max( ( FirstVNF_Mem / CRS ),DDR ) )", "choosing": "Min( ( ( DS / MUM ) + Min( MLU ,RMSe ) ) ,( ( RMSe * MUC ) + ( MUC + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU ) - ( ( PN / PN ) + FirstVNF_Mem ) )", "choosing": "Min( Min( ( MLU / MUM ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN + MDR ) ,( FirstVNF_RAM - CRS ) ) - Max( ( MRS + DDR ),Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( Max( CS,MUC ) * ( MUC - RCSe ) ) * Max( ( CS - CS ),( MUR / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem_Server - Const ) / ( Const - DDR ) ) / ( ( FirstVNF_RAM_Server / FirstVNF_Mem ) - ( RRS + DDR ) ) )", "choosing": "Max( ( ( MUM / MUM ) + ( RCSe * MUR ) ),Min( ( CS + DS ) ,( MUM - MLU ) ) )", "obj1": 0.8066528066528067, "obj2": 0.11277765506620463}, {"determining": "Max( ( ( PN / ACS ) - ( FirstVNF_Mem / RRS ) ),( ( ARS * MRS ) + ( ACS * FirstVNF_RAM_Server ) ) )", "choosing": "( Max( RCSe,MUM ) * ( RRSe * MUR ) )", "obj1": 0.7193347193347194, "obj2": 0.25457082350395355}, {"determining": "Max( Min( ( FirstVNF_RAM / FirstVNF_CPU_Server ) ,( BR - AMS ) ),Max( Max( FirstVNF_Mem,BR ),( MRS / PN ) ) )", "choosing": "( ( ( RMSe * MLU ) / RCSe ) - Min( DS ,CS ) )", "obj1": 0.6632016632016632, "obj2": 0.2688838590482215}, {"determining": "( ( RRS - Min( MDR ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU_Server - FirstVNF_RAM ) )", "choosing": "( ( ( DS - CS ) + Min( RCSe ,RMSe ) ) / ( ( MLU + MUM ) * Min( RMSe ,MUR ) ) )", "obj1": 0.9168399168399168, "obj2": 0.06035870521337024}, {"determining": "( ( Max( FirstVNF_Mem_Server,MRS ) / ( ARS * ARS ) ) - ( ( ACS * ARS ) - ( RRS * Const ) ) )", "choosing": "Min( ( Min( CS ,RMSe ) * ( RCSe * RCSe ) ) ,( Max( RCSe,RMSe ) - ( RMSe * RCSe ) ) )", "obj1": 0.7089397089397089, "obj2": 0.24565260542458064}, {"determining": "( Min( ( PN - Const ) ,CRS ) - ( ACS * FirstVNF_CPU ) )", "choosing": "Max( ( ( RCSe + DS ) * Min( CS ,RMSe ) ),Min( ( MUM - RRSe ) ,( MLU * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( CRS - BR ) ,Max( ARS,( AMS - MDR ) ) )", "choosing": "( Max( RRSe,RMSe ) * ( MUM + MUR ) )", "obj1": 0.8378378378378378, "obj2": 0.16227358880092374}, {"determining": "( ( DDR * FirstVNF_Mem ) / ( ( ACS - DDR ) - MRS ) )", "choosing": "( ( ( MUC / DS ) - ( MUC / MLU ) ) * ( ( RRSe * MUM ) - ( MUC + MUC ) ) )", "obj1": 0.738045738045738, "obj2": 0.197855081540348}, {"determining": "( ( ( ACS / RRS ) * ( ACS * PN ) ) - ( ( FirstVNF_RAM_Server * RRS ) * ( AMS * FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( CS * RRSe ) / CS ) / ( ( RMSe * MUC ) - MUR ) )", "obj1": 0.7401247401247402, "obj2": 0.26042650960391034}, {"determining": "Max( Min( ( Const - ACS ) ,( FirstVNF_RAM + ARS ) ),( ( MRS + CRS ) + Min( ARS ,FirstVNF_Mem ) ) )", "choosing": "( ( ( MUR / RRSe ) - ( RMSe * RRSe ) ) + ( Min( RCSe ,MUM ) + Max( MUC,MUM ) ) )", "obj1": 0.6694386694386695, "obj2": 0.2487869046484682}, {"determining": "Max( ( Max( AMS,ACS ) - Max( MRS,FirstVNF_RAM ) ),( ( ACS - FirstVNF_CPU_Server ) / ( BR * MDR ) ) )", "choosing": "( Max( DS,RCSe ) / ( ( MLU / MUM ) * ( MLU - MUM ) ) )", "obj1": 0.6985446985446986, "obj2": 0.2753540735374461}, {"determining": "( ( MDR + FirstVNF_Mem_Server ) * ( AMS * FirstVNF_RAM ) )", "choosing": "( ( MUC + MUC ) + Max( ( CS - RMSe ),DS ) )", "obj1": 0.762993762993763, "obj2": 0.22720126151603298}, {"determining": "( ( ( BR * AMS ) / ( RRS * DDR ) ) - ( Max( ARS,MRS ) - Min( FirstVNF_RAM ,FirstVNF_RAM ) ) )", "choosing": "( Max( ( MLU + CS ),DS ) + ( CS - MUM ) )", "obj1": 0.7089397089397089, "obj2": 0.271212913094952}, {"determining": "( ( Max( PN,PN ) - ( DDR * FirstVNF_RAM_Server ) ) / Max( ( FirstVNF_CPU_Server * DDR ),( FirstVNF_CPU + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( RMSe / RMSe ) * Max( RCSe,RCSe ) ) / Min( MLU ,( RMSe * DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( MRS,FirstVNF_RAM ) * ( FirstVNF_Mem * BR ) ) / Max( Min( BR ,FirstVNF_Mem_Server ),( Const + FirstVNF_Mem_Server ) ) )", "choosing": "( ( ( RCSe - DS ) * ( MUR * DS ) ) / ( ( RMSe + RRSe ) - Max( CS,MUM ) ) )", "obj1": 0.7255717255717256, "obj2": 0.23292549485909475}, {"determining": "( Min( ( ( BR * AMS ) + Max( PN,ARS ) ) ,( ( ACS + RRS ) - ( FirstVNF_Mem_Server / PN ) ) ) * ( Max( ( FirstVNF_Mem_Server - ACS ),( FirstVNF_Mem_Server - PN ) ) - ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) - ( PN / MRS ) ) ) )", "choosing": "( Min( Max( ( RMSe / MUR ),Min( MUR ,RMSe ) ) ,Max( ( DS - MUC ),( MUC + MUC ) ) ) * ( Max( ( DS / MUM ),Max( CS,MUC ) ) + ( ( MUR / MUM ) + ( DS + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( Min( ACS ,ARS ) + Max( CRS,ACS ) ),( ( AMS / FirstVNF_CPU_Server ) + ( FirstVNF_RAM_Server * DDR ) ) ) ,Max( ( ( AMS / FirstVNF_RAM ) / ( ARS + FirstVNF_CPU ) ),( ( PN * ACS ) - Min( DDR ,ARS ) ) ) )", "choosing": "( Min( Max( RMSe,MLU ) ,RMSe ) / ( MUR - MUM ) )", "obj1": 0.681912681912682, "obj2": 0.2485615735575209}, {"determining": "Max( Max( DDR,ARS ),( FirstVNF_CPU / FirstVNF_CPU_Server ) )", "choosing": "( ( Max( Min( MUC ,CS ),Max( RMSe,RRSe ) ) / ( ( MUR - DS ) - ( RRSe + MLU ) ) ) + Max( ( ( RCSe + MUR ) - ( RMSe + MLU ) ),( ( RRSe * RCSe ) + ( MUM / RRSe ) ) ) )", "obj1": 0.738045738045738, "obj2": 0.24666767752734844}, {"determining": "Max( ( ( Min( BR ,MRS ) - Max( ACS,MRS ) ) + ( Max( MDR,FirstVNF_Mem ) * Min( RRS ,RRS ) ) ),( Max( ( FirstVNF_CPU_Server + FirstVNF_Mem ),( Const + ARS ) ) - Min( ( FirstVNF_RAM_Server + BR ) ,( ARS + RRS ) ) ) )", "choosing": "( Min( ( RMSe * Max( RRSe,RCSe ) ) ,Max( DS,CS ) ) + ( Min( RRSe ,( MUC + CS ) ) - MUR ) )", "obj1": 0.7401247401247402, "obj2": 0.26454544620218984}, {"determining": "( ( ( ( CRS + DDR ) - ( FirstVNF_RAM_Server * ACS ) ) + Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),Max( PN,FirstVNF_Mem_Server ) ) ) - ( ( ( MRS - PN ) - ( DDR * RRS ) ) / ( ( FirstVNF_RAM + AMS ) + ( FirstVNF_CPU + FirstVNF_Mem ) ) ) )", "choosing": "( ( ( Max( MLU,CS ) + Max( RCSe,RMSe ) ) + ( ( MUR - MUM ) / ( MUM * RCSe ) ) ) - ( Min( ( RCSe * RRSe ) ,( MUC * MUC ) ) / ( ( MLU - MUR ) - ( RRSe - RMSe ) ) ) )", "obj1": 0.7234927234927235, "obj2": 0.26341467058314716}, {"determining": "Max( ( FirstVNF_Mem - PN ),Min( Min( PN ,FirstVNF_CPU_Server ) ,( ACS - Max( RRS,PN ) ) ) )", "choosing": "( Max( RRSe,CS ) * ( MLU / Max( Max( RRSe,MUR ),( RCSe + MUR ) ) ) )", "obj1": 0.7484407484407485, "obj2": 0.25666175170795763}, {"determining": "( Min( Max( Max( RRS,PN ),( ARS / ACS ) ) ,( ( BR * MDR ) * ( CRS / AMS ) ) ) + Min( FirstVNF_Mem_Server ,PN ) )", "choosing": "( ( ( ( MLU + MLU ) * ( MUR * RCSe ) ) / Min( ( RCSe - RRSe ) ,Max( MUR,MUC ) ) ) - ( ( ( DS - CS ) + Max( MUM,RMSe ) ) - Max( ( MUC / RMSe ),( Min( Min( MUC ,RRSe ) ,Max( RMSe,( MUR / Min( RCSe ,MUM ) ) ) ) / MUR ) ) ) )", "obj1": 0.6403326403326404, "obj2": 0.2643581021960421}, {"determining": "( Max( PN,FirstVNF_Mem ) * ( Max( MDR,PN ) * MDR ) )", "choosing": "Min( ( Min( RRSe ,CS ) - MUR ) ,Max( RCSe,MUM ) )", "obj1": 0.7193347193347194, "obj2": 0.2545039035052863}, {"determining": "Max( ( FirstVNF_RAM - FirstVNF_CPU ),( Max( ( Const - ( MRS + MRS ) ),FirstVNF_RAM_Server ) / FirstVNF_Mem ) )", "choosing": "( Max( ( ( RRSe / MUC ) - MUC ),MUM ) * Min( MUR ,RRSe ) )", "obj1": 0.6777546777546778, "obj2": 0.27249220768277427}, {"determining": "( Max( Min( Min( MRS ,FirstVNF_Mem_Server ) ,( FirstVNF_CPU + Const ) ),Max( ( FirstVNF_RAM_Server / CRS ),Min( FirstVNF_RAM_Server ,CRS ) ) ) - Max( Min( ( MDR * FirstVNF_RAM_Server ) ,( BR + FirstVNF_RAM_Server ) ),( Max( FirstVNF_CPU_Server,AMS ) - ( ARS + DDR ) ) ) )", "choosing": "( ( Min( ( DS * CS ) ,( MUC * MUM ) ) * ( ( MUC * MUC ) - ( CS - RMSe ) ) ) / ( Max( Max( CS,MUM ),Max( CS,DS ) ) + ( ( RMSe + CS ) / ( RCSe / MUC ) ) ) )", "obj1": 0.7422037422037422, "obj2": 0.22822311588459313}, {"determining": "( Min( FirstVNF_CPU ,Min( AMS ,CRS ) ) * ( CRS / FirstVNF_Mem ) )", "choosing": "( ( ( Max( DS,RRSe ) + ( MUC + RMSe ) ) * Min( ( CS * RRSe ) ,( RRSe + MUC ) ) ) - Min( ( Max( RMSe,MLU ) - ( MUR - MUC ) ) ,( Min( MLU ,RRSe ) * ( MLU - CS ) ) ) )", "obj1": 0.6507276507276507, "obj2": 0.2571222829609951}, {"determining": "( ( RRS - Const ) / ( FirstVNF_CPU_Server - FirstVNF_CPU_Server ) )", "choosing": "( ( Max( RRSe,DS ) + ( DS + MLU ) ) - ( ( RRSe * ( DS - MUC ) ) / Max( ( RMSe * RMSe ),Min( MUC ,MUC ) ) ) )", "obj1": 0.6652806652806653, "obj2": 0.258537040902283}, {"determining": "Max( ( RRS / FirstVNF_CPU ),( FirstVNF_CPU_Server - Max( PN,Min( RRS ,FirstVNF_CPU ) ) ) )", "choosing": "( Min( Min( ( DS * MUM ) ,( RMSe * DS ) ) ,( ( MUC - MUM ) * ( DS / MUR ) ) ) + Min( ( ( RCSe / MUM ) / Min( RRSe ,RCSe ) ) ,Max( ( RCSe / MLU ),( MUC / RCSe ) ) ) )", "obj1": 0.6902286902286903, "obj2": 0.2571088912828826}, {"determining": "( ( ( ( BR * Const ) / ( FirstVNF_RAM * MDR ) ) * ( Max( ACS,FirstVNF_Mem ) - ( FirstVNF_RAM + ACS ) ) ) * ( Min( Min( MRS ,CRS ) ,( MDR - FirstVNF_RAM ) ) - ( ( BR / DDR ) - Max( RRS,BR ) ) ) )", "choosing": "( ( Max( ( MUR / DS ),RCSe ) * ( RRSe / MUR ) ) * ( MUM * MUM ) )", "obj1": 0.659043659043659, "obj2": 0.2746713044591876}, {"determining": "( ( FirstVNF_Mem / CRS ) / ( FirstVNF_Mem * ARS ) )", "choosing": "Min( Max( MUM,MUM ) ,Max( RRSe,MLU ) )", "obj1": 0.6528066528066528, "obj2": 0.2702355079760609}, {"determining": "( ( ( ( FirstVNF_CPU_Server + MDR ) / ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) * ( Max( RRS,Const ) * ( FirstVNF_RAM - FirstVNF_Mem_Server ) ) ) / ( ( ( ACS - FirstVNF_RAM_Server ) - ( FirstVNF_RAM + AMS ) ) - Min( ( Const * FirstVNF_CPU_Server ) ,( RRS - DDR ) ) ) )", "choosing": "( ( ( ( RRSe + MUC ) - ( MUM - MLU ) ) / ( ( RCSe + MUC ) / ( MUR + MUM ) ) ) * ( Min( ( MUM * CS ) ,Max( DS,MUR ) ) + ( Max( MUM,MUM ) + Min( DS ,RRSe ) ) ) )", "obj1": 0.762993762993763, "obj2": 0.20098399744751916}, {"determining": "( ( FirstVNF_Mem + MDR ) - Min( Max( ( FirstVNF_RAM_Server * CRS ),DDR ) ,FirstVNF_RAM_Server ) )", "choosing": "Min( Min( ( MUC * RRSe ) ,MUM ) ,( Min( RRSe ,( MLU + CS ) ) - MUC ) )", "obj1": 0.7338877338877339, "obj2": 0.2589539098473649}, {"determining": "( Max( Min( Min( RRS ,ARS ) ,Min( PN ,ARS ) ),( Min( FirstVNF_Mem ,RRS ) * ( RRS * Const ) ) ) / ( ( ( Const - MDR ) * ( BR / FirstVNF_CPU_Server ) ) - ( Min( FirstVNF_RAM ,CRS ) / ( FirstVNF_CPU + ACS ) ) ) )", "choosing": "( Max( RMSe,RCSe ) - ( ( CS - DS ) * ( MUM - MLU ) ) )", "obj1": 0.6943866943866944, "obj2": 0.27334957600651416}, {"determining": "( ( FirstVNF_CPU * RRS ) - Max( FirstVNF_RAM_Server,RRS ) )", "choosing": "( ( ( Max( MLU,MUR ) - Min( MUM ,RMSe ) ) + ( Min( MUR ,RMSe ) - ( MUM / MUR ) ) ) - ( ( ( RMSe / MUM ) * Min( MUM ,DS ) ) / ( ( RMSe + RRSe ) - ( MLU - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) / Min( DDR ,CRS ) )", "choosing": "Max( ( MUC / MUR ),( Max( ( DS / MLU ),( MUM * MLU ) ) * MUR ) )", "obj1": 0.6673596673596673, "obj2": 0.2533519362579169}, {"determining": "( ( Max( Min( AMS ,FirstVNF_RAM ),Min( FirstVNF_Mem_Server ,FirstVNF_CPU ) ) - ( ( Const - MRS ) + ( FirstVNF_RAM_Server - MRS ) ) ) - ( ( ( FirstVNF_CPU_Server - ARS ) - ( FirstVNF_Mem_Server * FirstVNF_Mem_Server ) ) + ( ( ARS * FirstVNF_RAM ) / Min( MRS ,ARS ) ) ) )", "choosing": "( ( Min( ( RRSe / MUC ) ,Max( MUR,DS ) ) * Max( RRSe,MUR ) ) * ( ( ( RCSe * RMSe ) / DS ) / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( CRS + FirstVNF_Mem ),( FirstVNF_CPU_Server * BR ) )", "choosing": "( ( MUC * MLU ) / Max( Max( ( RRSe * RMSe ),( RCSe * MUM ) ),RRSe ) )", "obj1": 0.7130977130977131, "obj2": 0.25975899682284653}, {"determining": "( ( ( Max( BR,BR ) * ( AMS * ARS ) ) * Max( Min( CRS ,Const ),( MDR * BR ) ) ) - Min( Min( ( FirstVNF_Mem + DDR ) ,( MRS / Const ) ) ,( Max( FirstVNF_RAM,Const ) - Max( MRS,FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( ( MUR + MLU ) * ( RRSe - MUC ) ) * Min( Min( MUC ,RMSe ) ,( CS - RCSe ) ) ) * Max( Min( ( MUC + MUC ) ,( DS * CS ) ),Min( ( MLU / RRSe ) ,( DS * RCSe ) ) ) )", "obj1": 0.762993762993763, "obj2": 0.18124737911595656}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) + ( Min( AMS ,BR ) / ( DDR + FirstVNF_CPU ) ) ) ,( Max( ( RRS + Const ),( FirstVNF_RAM_Server * DDR ) ) / ( ( FirstVNF_RAM / FirstVNF_RAM ) * ( PN / ARS ) ) ) )", "choosing": "( ( MUR - MUM ) * ( ( ( CS * MUM ) / MUM ) / ( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( FirstVNF_CPU_Server - MRS ) + ( Const + FirstVNF_CPU_Server ) ) - ( Min( MDR ,PN ) + ( PN * FirstVNF_RAM_Server ) ) ) ,Min( Min( ( FirstVNF_RAM_Server - BR ) ,( CRS - MDR ) ) ,( ( CRS * ACS ) - ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( MUR * ( RCSe / ( MLU / RMSe ) ) ) + ( CS * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_CPU_Server + AMS ) * AMS ) * ( MRS * ( Const * Const ) ) )", "choosing": "( ( ( ( DS - MUR ) / ( RMSe / MUC ) ) * ( Max( DS,RCSe ) / ( RCSe / RCSe ) ) ) * ( Max( ( MUM + CS ),( DS - RCSe ) ) * Min( ( DS + RMSe ) ,( RCSe * MUR ) ) ) )", "obj1": 0.7401247401247402, "obj2": 0.24775652047840718}, {"determining": "( Min( Min( ( PN - MDR ) ,( PN / FirstVNF_Mem ) ) ,( ( CRS - PN ) + Max( ARS,MDR ) ) ) + ( ( ( ACS + BR ) * ( MRS + ACS ) ) + Min( Min( DDR ,FirstVNF_CPU_Server ) ,( CRS / FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU / MUR ) - ( RMSe + MLU ) ) / Max( ( MUR / DS ),Max( RRSe,DS ) ) ) / ( Max( ( RCSe * MUM ),Max( MUC,RMSe ) ) + Max( ( MLU / RMSe ),( CS / MUR ) ) ) )", "obj1": 0.7754677754677755, "obj2": 0.18488541411515202}, {"determining": "Max( ( Max( ( FirstVNF_CPU / PN ),Min( ARS ,AMS ) ) + Min( Max( Const,FirstVNF_RAM ) ,( RRS - MRS ) ) ),( Max( ( BR - FirstVNF_Mem_Server ),( FirstVNF_Mem_Server + FirstVNF_CPU ) ) / Max( Min( MDR ,FirstVNF_Mem_Server ),( ACS + FirstVNF_CPU_Server ) ) ) )", "choosing": "( Min( Min( ( RRSe - RCSe ) ,Min( MUM ,MUR ) ) ,( ( ( MUC * Max( MUR,( Min( RMSe ,MUC ) + RRSe ) ) ) - MUC ) + ( RMSe / RRSe ) ) ) * ( ( Max( MUC,MUM ) / ( RCSe - RMSe ) ) * Max( ( RRSe + MUR ),( MLU / MUR ) ) ) )", "obj1": 0.6985446985446986, "obj2": 0.254442489693074}, {"determining": "( Min( ( ARS * CRS ) ,MDR ) * Max( ( ( RRS - BR ) + CRS ),MRS ) )", "choosing": "Max( ( Min( ( DS / RMSe ) ,( DS * MLU ) ) * Min( ( DS - MUC ) ,( MUR / RMSe ) ) ),Max( ( ( MUM + RMSe ) - ( RCSe * MUC ) ),( Max( CS,RCSe ) * ( MUM - MUR ) ) ) )", "obj1": 0.7110187110187111, "obj2": 0.2535599529202662}, {"determining": "Max( Max( ( FirstVNF_Mem_Server * FirstVNF_Mem_Server ),Min( FirstVNF_Mem ,MRS ) ),Max( ( FirstVNF_Mem / CRS ),MRS ) )", "choosing": "( ( ( ( RRSe - RRSe ) + Max( MLU,MUR ) ) - ( ( MUC + RCSe ) + ( RCSe - MUC ) ) ) * ( Min( ( RCSe - MLU ) ,( MUM + DS ) ) - ( ( MUR * DS ) + ( RMSe - MUC ) ) ) )", "obj1": 0.7193347193347194, "obj2": 0.250101170431977}, {"determining": "Min( Min( ( ARS - ( ( DDR + CRS ) + FirstVNF_CPU ) ) ,FirstVNF_RAM ) ,Max( MRS,FirstVNF_Mem_Server ) )", "choosing": "( Max( ( MUR / ( MUC - MUR ) ),( CS / RMSe ) ) - ( ( RCSe + ( RCSe - ( ( ( ( CS + MUC ) * ( DS - MUC ) ) * MUC ) * ( MUM - MUR ) ) ) ) - DS ) )", "obj1": 0.7214137214137214, "obj2": 0.26414937936515465}, {"determining": "( Min( ( ( CRS + MRS ) + ( MRS + DDR ) ) ,( Max( FirstVNF_RAM_Server,FirstVNF_CPU ) + ( ARS + PN ) ) ) * ( ( ( FirstVNF_CPU_Server * ARS ) / ( FirstVNF_Mem + ARS ) ) / ( Max( FirstVNF_Mem_Server,FirstVNF_CPU_Server ) * ( FirstVNF_RAM_Server * ARS ) ) ) )", "choosing": "( ( Min( MUM ,MLU ) / RCSe ) - Max( MUC,( Max( RRSe,MUC ) * MLU ) ) )", "obj1": 0.6486486486486487, "obj2": 0.258813556948602}], "2": [{"determining": "Min( ( ( ( FirstVNF_CPU_Server - MRS ) + ( Const + FirstVNF_CPU_Server ) ) - ( Min( MDR ,PN ) + ( PN * FirstVNF_RAM_Server ) ) ) ,Min( ( ( ( FirstVNF_CPU_Server + AMS ) * AMS ) * ( MRS * ( Const * Const ) ) ) ,( ( CRS * ACS ) - ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( MUR * ( RCSe / ( MLU / ( ( ( ( DS - MUR ) / ( RMSe / MUC ) ) * ( Max( DS,RCSe ) / ( RCSe / RCSe ) ) ) * ( Max( ( MUM + CS ),( DS - RCSe ) ) * Min( ( DS + RMSe ) ,( RCSe * MUR ) ) ) ) ) ) ) + ( CS * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * Const ) ) )", "choosing": "( ( CS * DS ) * Min( ( Min( MUM ,MUC ) - DS ) ,Min( CS ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Max( CRS,MDR ),( MRS / ( DDR * RRS ) ) )", "choosing": "( ( ( Min( RCSe ,Max( RCSe,Min( CS ,MUM ) ) ) - Min( DS ,RRSe ) ) * MUC ) * ( RMSe * RCSe ) )", "obj1": 0.6257796257796258, "obj2": 0.27524994812596676}, {"determining": "( Max( FirstVNF_RAM_Server,RRS ) / ( ( ( Const - MDR ) * ( BR / FirstVNF_CPU_Server ) ) - ( Min( FirstVNF_RAM ,CRS ) / ( FirstVNF_CPU + ACS ) ) ) )", "choosing": "( Max( RMSe,RCSe ) - ( Max( MLU,MUR ) * ( MUM - MLU ) ) )", "obj1": 0.7713097713097713, "obj2": 0.10701445262775529}, {"determining": "( ( ( BR / FirstVNF_RAM ) * ( FirstVNF_RAM - RRS ) ) + ( ( ( AMS / ( FirstVNF_RAM + FirstVNF_Mem ) ) - Const ) - ( BR / FirstVNF_RAM ) ) )", "choosing": "( Max( Min( RRSe ,MUR ),( RRSe / MUM ) ) * Min( Max( Min( ( DS + RCSe ) ,Min( MUM ,RCSe ) ),( MLU + ( RCSe * MLU ) ) ) ,( RMSe / DS ) ) )", "obj1": 0.9022869022869023, "obj2": 0.08680754105836845}, {"determining": "( ( RRS - Min( MDR ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU_Server - FirstVNF_RAM ) )", "choosing": "( ( ( DS - CS ) + Min( RCSe ,RMSe ) ) / ( ( MLU + MUM ) * Min( RMSe ,MUR ) ) )", "obj1": 0.9168399168399168, "obj2": 0.06035870521337024}, {"determining": "Min( Min( ( ARS - ( ( DDR + CRS ) + FirstVNF_CPU ) ) ,FirstVNF_RAM ) ,Max( MRS,FirstVNF_Mem_Server ) )", "choosing": "( Max( ( MUR / ( MUC - MUR ) ),( CS / RMSe ) ) - ( ( RCSe + ( RCSe - ( ( ( ( CS + MUC ) * ( DS - MUC ) ) * MUC ) * ( MUM - MUR ) ) ) ) - DS ) )", "obj1": 0.9833679833679834, "obj2": 0.005693702866014879}, {"determining": "( ( ( FirstVNF_Mem_Server - Const ) / ( Const - DDR ) ) / PN )", "choosing": "Max( ( ( MUM / MUM ) + ( RCSe * MUR ) ),Min( ( CS + DS ) ,( ( ( Max( CS,MUC ) * ( MUC - RCSe ) ) * Max( ( CS - CS ),( MUR / MUC ) ) ) - MLU ) ) )", "obj1": 0.7692307692307693, "obj2": 0.1359358882438487}, {"determining": "( Min( Min( ( PN - MDR ) ,( PN / FirstVNF_Mem ) ) ,( ( CRS - PN ) + Max( ARS,Max( ( FirstVNF_CPU / PN ),Min( ARS ,AMS ) ) ) ) ) + ( ( ( ACS + BR ) * ( MRS + ACS ) ) + Min( Min( DDR ,FirstVNF_CPU_Server ) ,( CRS / FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU / MUR ) - ( RMSe + MLU ) ) / Max( ( MUR / DS ),Max( RRSe,DS ) ) ) / ( RRSe + Max( ( MLU / RMSe ),( CS / MUR ) ) ) )", "obj1": 0.6715176715176715, "obj2": 0.21389543310757642}, {"determining": "( ( ( Max( BR,BR ) * ( AMS * ARS ) ) * Max( Min( CRS ,Const ),( MDR * BR ) ) ) - Min( Min( ( FirstVNF_Mem + DDR ) ,( MRS / Const ) ) ,( Max( FirstVNF_RAM,Const ) - Max( MRS,FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( ( ( MUR + MLU ) * ( RRSe - MUC ) ) * Min( Min( MUC ,RMSe ) ,( CS - RCSe ) ) ) * Max( Min( ( MUC + MUC ) ,( DS * CS ) ),Min( ( MLU / RRSe ) ,( DS * RCSe ) ) ) )", "obj1": 0.762993762993763, "obj2": 0.18124737911595656}, {"determining": "Min( Max( FirstVNF_Mem,FirstVNF_Mem_Server ) ,( Const - DDR ) )", "choosing": "( ( MUC * DS ) - ( MUC + RCSe ) )", "obj1": 0.7047817047817048, "obj2": 0.19756069688833428}, {"determining": "( Min( ( ( CRS + MRS ) + ( MRS + DDR ) ) ,( Max( FirstVNF_RAM_Server,FirstVNF_CPU ) + ( ARS + PN ) ) ) * ( ( ( FirstVNF_CPU_Server * ARS ) / ( FirstVNF_Mem + ARS ) ) / Max( ( FirstVNF_Mem_Server * FirstVNF_Mem_Server ),Min( FirstVNF_Mem ,MRS ) ) ) )", "choosing": "( ( Min( MUM ,MLU ) / RCSe ) - Max( Min( ( RCSe - MLU ) ,( MUM + DS ) ),( Max( RRSe,MUC ) * MLU ) ) )", "obj1": 0.6673596673596673, "obj2": 0.24740620171456457}, {"determining": "( ( Min( ( PN - Const ) ,CRS ) - ( ACS * FirstVNF_CPU ) ) * ( FirstVNF_CPU_Server - FirstVNF_RAM ) )", "choosing": "( RMSe / ( ( MLU + MUM ) * Min( RMSe ,MUR ) ) )", "obj1": 0.9126819126819127, "obj2": 0.07034534056586018}, {"determining": "Min( Max( FirstVNF_RAM_Server,AMS ) ,( Const - ( ( ( ( Const + DDR ) - AMS ) * AMS ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( Max( RCSe,RCSe ) * DS ) - ( ( ( Min( CS ,Min( MUM ,MUR ) ) / Min( MLU ,( ( ( MUR / DS ) / MUR ) * RMSe ) ) ) + MUC ) - Min( DS ,RCSe ) ) )", "obj1": 0.7214137214137214, "obj2": 0.18562477786193085}, {"determining": "( ( ARS / CRS ) + Max( ( Max( Const,Const ) / ( ACS - FirstVNF_Mem ) ),PN ) )", "choosing": "Max( DS,( MUM - RRSe ) )", "obj1": 0.738045738045738, "obj2": 0.1855930189011076}, {"determining": "Max( ( Max( AMS,ACS ) - Max( MRS,FirstVNF_RAM ) ),( MDR + FirstVNF_Mem_Server ) )", "choosing": "( Max( DS,RCSe ) / ( ( MLU / Max( ( CS - RMSe ),DS ) ) * ( MLU - MUM ) ) )", "obj1": 0.6528066528066528, "obj2": 0.24746091075594934}, {"determining": "( Min( Max( Max( RRS,PN ),( ARS / ACS ) ) ,( ( BR * MDR ) * ( CRS / AMS ) ) ) + Min( FirstVNF_Mem_Server ,PN ) )", "choosing": "( ( ( ( MLU + MLU ) * ( MUR * RCSe ) ) / Min( ( RCSe - RRSe ) ,Max( MUR,MUC ) ) ) - ( ( ( DS - CS ) + Max( MUM,RMSe ) ) - Max( ( MUC / RMSe ),( Min( Min( MUC ,RRSe ) ,Max( RMSe,( MUR / Min( RCSe ,MUM ) ) ) ) / MUR ) ) ) )", "obj1": 0.6340956340956341, "obj2": 0.27114306768022334}, {"determining": "( Min( Max( Max( RRS,PN ),( ARS / ACS ) ) ,( ( BR * MDR ) * ( CRS / AMS ) ) ) + Min( FirstVNF_Mem_Server ,PN ) )", "choosing": "( ( ( ( MLU + MLU ) * ( MUR * RCSe ) ) / Min( ( RCSe - RRSe ) ,Max( MUR,MUC ) ) ) - ( ( ( DS - CS ) + Max( MUM,RMSe ) ) - Max( ( MUC / RMSe ),( Min( Min( MUC ,RRSe ) ,Max( RMSe,( MUR / Min( RCSe ,MUM ) ) ) ) / MUR ) ) ) )", "obj1": 0.6403326403326404, "obj2": 0.2643581021960421}, {"determining": "( Min( FirstVNF_CPU ,Min( AMS ,CRS ) ) * ( CRS / FirstVNF_Mem ) )", "choosing": "( ( ( Max( DS,RRSe ) + ( MUC + RMSe ) ) * Min( ( CS * RRSe ) ,( RRSe + MUC ) ) ) - Min( ( Max( RMSe,MLU ) - ( MUR - MUC ) ) ,( Min( MLU ,RRSe ) * ( MLU - CS ) ) ) )", "obj1": 0.6507276507276507, "obj2": 0.2571222829609951}, {"determining": "( ( DDR / FirstVNF_RAM_Server ) + ( MRS * CRS ) )", "choosing": "Min( ( MUM + RRSe ) ,( MLU + CS ) )", "obj1": 0.6486486486486487, "obj2": 0.26172607231985784}, {"determining": "( ( Max( FirstVNF_RAM_Server,MRS ) - Max( MRS,RRS ) ) * ( ( FirstVNF_Mem_Server - CRS ) - ( ACS / MDR ) ) )", "choosing": "( Min( ( MUR - RMSe ) ,Max( DS,MUM ) ) - Min( ( CS / RCSe ) ,( RMSe / MUR ) ) )", "obj1": 0.9937629937629938, "obj2": 0.004874075651852956}, {"determining": "Min( ( DDR / AMS ) ,( MDR - FirstVNF_RAM_Server ) )", "choosing": "Max( ( RRSe * RCSe ),( RMSe * MUR ) )", "obj1": 0.9958419958419958, "obj2": 0.0037627579009090577}, {"determining": "( Min( ( ( CRS + MRS ) + ( MRS + DDR ) ) ,( Max( FirstVNF_RAM_Server,FirstVNF_CPU ) + ( ARS + PN ) ) ) * ( ( ( FirstVNF_CPU_Server * ARS ) / ( FirstVNF_Mem + ARS ) ) / ( Max( FirstVNF_Mem_Server,FirstVNF_CPU_Server ) * ( FirstVNF_RAM_Server * ARS ) ) ) )", "choosing": "( ( Min( MUM ,MLU ) / RCSe ) - Max( MUC,( Max( RRSe,MUC ) * MLU ) ) )", "obj1": 0.6486486486486487, "obj2": 0.258813556948602}, {"determining": "( ( ( MDR + ACS ) + ( BR - MDR ) ) / ( ( MRS - MDR ) / ( Const * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - ( MLU / MLU ) ) / Min( ( CS / CS ) ,( MUC / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,RRS ) - Max( ( FirstVNF_Mem / CRS ),DDR ) )", "choosing": "Min( ( ( DS / MUM ) + Min( MLU ,RMSe ) ) ,( ( RMSe * MUC ) + ( MUC + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU ) - ( ( PN / PN ) + FirstVNF_Mem ) )", "choosing": "Min( Min( ( MLU / MUM ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN + MDR ) ,( FirstVNF_RAM - CRS ) ) - Max( ( MRS + DDR ),Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( Max( CS,MUC ) * ( MUC - RCSe ) ) * Max( ( CS - CS ),( MUR / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN - Const ) ,CRS ) - ( ACS * FirstVNF_CPU ) )", "choosing": "Max( ( ( RCSe + DS ) * Min( CS ,RMSe ) ),Min( ( MUM - RRSe ) ,( MLU * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,PN ) - ( DDR * FirstVNF_RAM_Server ) ) / Max( ( FirstVNF_CPU_Server * DDR ),( FirstVNF_CPU + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( RMSe / RMSe ) * Max( RCSe,RCSe ) ) / Min( MLU ,( RMSe * DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( BR * AMS ) + Max( PN,ARS ) ) ,( ( ACS + RRS ) - ( FirstVNF_Mem_Server / PN ) ) ) * ( Max( ( FirstVNF_Mem_Server - ACS ),( FirstVNF_Mem_Server - PN ) ) - ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) - ( PN / MRS ) ) ) )", "choosing": "( Min( Max( ( RMSe / MUR ),Min( MUR ,RMSe ) ) ,Max( ( DS - MUC ),( MUC + MUC ) ) ) * ( Max( ( DS / MUM ),Max( CS,MUC ) ) + ( ( MUR / MUM ) + ( DS + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU * RRS ) - Max( FirstVNF_RAM_Server,RRS ) )", "choosing": "( ( ( Max( MLU,MUR ) - Min( MUM ,RMSe ) ) + ( Min( MUR ,RMSe ) - ( MUM / MUR ) ) ) - ( ( ( RMSe / MUM ) * Min( MUM ,DS ) ) / ( ( RMSe + RRSe ) - ( MLU - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Min( AMS ,FirstVNF_RAM ),Min( FirstVNF_Mem_Server ,FirstVNF_CPU ) ) - ( ( Const - MRS ) + ( FirstVNF_RAM_Server - MRS ) ) ) - ( ( ( FirstVNF_CPU_Server - ARS ) - ( FirstVNF_Mem_Server * FirstVNF_Mem_Server ) ) + ( ( ARS * FirstVNF_RAM ) / Min( MRS ,ARS ) ) ) )", "choosing": "( ( Min( ( RRSe / MUC ) ,Max( MUR,DS ) ) * Max( RRSe,MUR ) ) * ( ( ( RCSe * RMSe ) / DS ) / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) + ( Min( AMS ,BR ) / ( DDR + FirstVNF_CPU ) ) ) ,( Max( ( RRS + Const ),( FirstVNF_RAM_Server * DDR ) ) / ( ( FirstVNF_RAM / FirstVNF_RAM ) * ( PN / ARS ) ) ) )", "choosing": "( ( MUR - MUM ) * ( ( ( CS * MUM ) / MUM ) / ( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( FirstVNF_CPU_Server - MRS ) + ( Const + FirstVNF_CPU_Server ) ) - ( Min( MDR ,PN ) + ( PN * FirstVNF_RAM_Server ) ) ) ,Min( Min( ( FirstVNF_RAM_Server - BR ) ,( CRS - MDR ) ) ,( ( CRS * ACS ) - ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( MUR * ( RCSe / ( MLU / RMSe ) ) ) + ( CS * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * CRS ) * ( FirstVNF_Mem_Server - ( ARS + CRS ) ) )", "choosing": "( Min( ( ( RCSe * RCSe ) * ( MUC / MUC ) ) ,DS ) / ( MUR - DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server + ARS ) )", "choosing": "Min( Max( MLU,DS ) ,Min( RCSe ,( RMSe - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( MRS - ( ARS / MDR ) )", "choosing": "Max( Max( MUC,( DS * MUC ) ),( RCSe + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * RRS ) - Max( FirstVNF_Mem,FirstVNF_CPU_Server ) )", "choosing": "( ( Max( DS,MUM ) / RRSe ) / ( DS - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( MDR,PN ) - AMS ) ,Max( PN,FirstVNF_Mem_Server ) )", "choosing": "( CS * ( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( ( ( BR + AMS ) - ( BR + ARS ) ),FirstVNF_Mem_Server ) )", "choosing": "( ( CS * MUC ) * ( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( AMS ,FirstVNF_RAM_Server ) - ( BR + ARS ) )", "choosing": "( ( RCSe - MUM ) - ( CS * ( Min( MUC ,DS ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * Const ) ) )", "choosing": "( ( CS * DS ) * Min( ( Min( MUM ,MUC ) - DS ) ,Min( CS ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ) - ( BR + ARS ) )", "choosing": "( ( ( ( Max( MLU,MUC ) / MUC ) + MUC ) - MUM ) - ( CS * ( Min( MUC ,Min( CS ,MUR ) ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( RRS ,RRS ) - ( FirstVNF_CPU / MRS ) ) ,( ( FirstVNF_RAM_Server - CRS ) - ( ACS - ACS ) ) )", "choosing": "Max( ( ( Min( DS ,MUM ) * ( MLU + DS ) ) * ( ( RRSe / RRSe ) - ( MUC + MLU ) ) ),Min( MUC ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( MDR + ACS ) + ( BR - MDR ) ) / ( ( MRS - MDR ) / ( PN * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - Max( ( MUM - RRSe ),Max( RCSe,DS ) ) ) / Min( ( CS / CS ) ,( MUC / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( ( BR / DDR ) + ( ARS + FirstVNF_CPU ) ),( ( FirstVNF_Mem_Server / ARS ) + Max( FirstVNF_RAM_Server,FirstVNF_RAM ) ) ) / ( ( MRS - MDR ) / ( Const * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - ( MLU / MLU ) ) / Min( ( CS / CS ) ,Min( Max( Min( RMSe ,CS ),Min( DS ,DS ) ) ,Min( Min( MLU ,CS ) ,( RCSe * MUC ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_RAM_Server,MRS ) - Max( MRS,RRS ) ) * ( ( FirstVNF_Mem_Server - CRS ) - Max( ( ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) * ACS ),( MDR * ARS ) ) ) )", "choosing": "( Min( ( DS / CS ) ,Max( DS,MUM ) ) - Min( ( CS / RCSe ) ,( RMSe / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + Const ) - FirstVNF_CPU ) - ( ( PN / PN ) + FirstVNF_Mem ) )", "choosing": "Min( MLU ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU ) - ( ( PN / DDR ) + FirstVNF_Mem ) )", "choosing": "Min( Min( ( Min( ( ( DS / MUM ) + Min( MLU ,RMSe ) ) ,( ( RMSe * MUC ) + ( MUC + MUR ) ) ) / MUM ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,RRS ) - Max( ( FirstVNF_Mem / CRS ),( MDR - FirstVNF_CPU ) ) )", "choosing": "Min( Min( ( MLU / MUM ) ,( MUM / RRSe ) ) ,( ( RMSe * MUC ) + ( MUC + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU ) - ( ( PN / PN ) + Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "Min( Min( ( Max( CS,MUC ) * ( MUC - RCSe ) ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN + MDR ) ,( ( ( MDR - FirstVNF_CPU ) - ( ( PN / PN ) + FirstVNF_Mem ) ) - CRS ) ) - Max( ( MRS + DDR ),Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( Max( CS,MUC ) * ( MUC - RCSe ) ) * Min( Min( ( MLU / MUM ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN + ( ( FirstVNF_Mem_Server - Const ) / ( Const - DDR ) ) ) ,( FirstVNF_RAM - CRS ) ) - Max( ( MRS + DDR ),Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( Min( ( CS + DS ) ,( MUM - MLU ) ) * ( MUC - RCSe ) ) * Max( ( CS - CS ),( MUR / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN - ( ( RRS - Min( MDR ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU_Server - FirstVNF_RAM ) ) ) ,CRS ) - ( ACS * FirstVNF_CPU ) )", "choosing": "Max( ( ( RCSe + CS ) * Min( CS ,RMSe ) ),Min( ( MUM - RRSe ) ,( MLU * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( CRS - BR ) ,Min( ( PN - Const ) ,CRS ) )", "choosing": "( Max( RRSe,RMSe ) * ( ( RCSe + DS ) * Min( CS ,RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN - Const ) ,( ( DDR * FirstVNF_Mem ) / ( ( ACS - DDR ) - MRS ) ) ) - ( ACS * FirstVNF_CPU ) )", "choosing": "Max( ( ( RCSe + DS ) * Min( CS ,RMSe ) ),Min( ( MUM - RRSe ) ,( RRSe * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( CRS - ( DDR * FirstVNF_Mem ) ) ,Max( ARS,( AMS - MDR ) ) )", "choosing": "( ( ( RRSe * MUM ) - ( MUC + MUC ) ) * ( MUM + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const - ACS ) * ( ACS * PN ) ) - ( ( FirstVNF_RAM_Server * RRS ) * ( AMS * FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( CS * RRSe ) / CS ) / MUM )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,PN ) - ( DDR * FirstVNF_RAM_Server ) ) / Max( ( ( ( BR * AMS ) / ( RRS * DDR ) ) - ( Max( ARS,MRS ) - Min( FirstVNF_RAM ,FirstVNF_RAM ) ) ),( FirstVNF_CPU + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( RMSe / RMSe ) * Max( RCSe,RCSe ) ) / ( Max( ( MLU + CS ),DS ) + ( CS - MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,PN ) - ( DDR * FirstVNF_RAM_Server ) ) / Max( Min( BR ,FirstVNF_Mem_Server ),( Const + FirstVNF_Mem_Server ) ) )", "choosing": "( ( ( RCSe - DS ) * ( MUR * ( ( ( RMSe / RMSe ) * Max( RCSe,RCSe ) ) / Min( MLU ,( RMSe * DS ) ) ) ) ) / ( ( RMSe + RRSe ) - Max( CS,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( BR * AMS ) + Max( PN,ARS ) ) ,( ( ACS + RRS ) - ( FirstVNF_Mem_Server / PN ) ) ) * ( Max( ( FirstVNF_Mem_Server - ACS ),( ( Max( MRS,FirstVNF_RAM ) * ( FirstVNF_Mem * BR ) ) - PN ) ) - ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) - ( PN / MRS ) ) ) )", "choosing": "( Min( Max( ( RMSe / MUR ),Min( MUR ,RMSe ) ) ,Max( ( DS - MUC ),( MUC + MUC ) ) ) * ( Max( ( DS / MUM ),( ( RCSe - DS ) * ( MUR * DS ) ) ) + ( ( MUR / MUM ) + ( DS + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( BR * AMS ) + Max( PN,ARS ) ) ,( ( ACS + RRS ) - ( FirstVNF_Mem_Server / PN ) ) ) * Max( CRS,ACS ) )", "choosing": "( Min( Max( ( RMSe / MUR ),Min( MUR ,RMSe ) ) ,Max( ( DS - MUC ),( MUC + MUC ) ) ) * ( Max( ( DS / MUM ),Max( CS,MUC ) ) + RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - Max( FirstVNF_RAM_Server,RRS ) )", "choosing": "( ( ( Max( MLU,MUR ) - Min( MUM ,RMSe ) ) + ( Min( MUR ,RMSe ) - ( MUM / MUR ) ) ) - ( ( ( ( Max( RMSe,RCSe ) - ( ( CS - DS ) * ( MUM - MLU ) ) ) / MUM ) * Min( MUM ,DS ) ) / ( ( RMSe + RRSe ) - ( MLU - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( RRS ,ARS ) ,Min( PN ,ARS ) ) - Max( FirstVNF_RAM_Server,RRS ) )", "choosing": "( ( ( Max( MLU,MUR ) - Min( MUM ,RMSe ) ) + ( Min( MUR ,RMSe ) - ( ( ( CS - DS ) * ( MUM - MLU ) ) / MUR ) ) ) - ( ( ( RMSe / MUM ) * Min( MUM ,DS ) ) / ( ( RMSe + RRSe ) - ( MLU - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Min( AMS ,FirstVNF_RAM ),Min( FirstVNF_Mem_Server ,FirstVNF_CPU ) ) - ( ( Const - MRS ) + ( FirstVNF_RAM_Server - MRS ) ) ) - ( FirstVNF_CPU_Server * BR ) )", "choosing": "( ( RRSe * RMSe ) * ( ( ( RCSe * RMSe ) / DS ) / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) + ( Min( AMS ,BR ) / ( DDR + FirstVNF_CPU ) ) ) ,( Max( ( RRS + Const ),( Max( ( CRS + FirstVNF_Mem ),( FirstVNF_CPU_Server * BR ) ) * DDR ) ) / ( ( FirstVNF_RAM / FirstVNF_RAM ) * ( PN / ARS ) ) ) )", "choosing": "( ( MUR - MUM ) * ( ( ( MUC * MLU ) / Max( Max( ( RRSe * RMSe ),( RCSe * MUM ) ),RRSe ) ) / ( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) - ( Min( MDR ,PN ) + ( PN * FirstVNF_RAM_Server ) ) ) ,Min( Min( ( FirstVNF_RAM_Server - BR ) ,( CRS - MDR ) ) ,( ( CRS * ACS ) - ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( MUR * ( RCSe / ( CS * MUM ) ) ) + ( CS * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) + ( Min( AMS ,BR ) / ( DDR + FirstVNF_CPU ) ) ) ,( ( FirstVNF_CPU_Server - MRS ) + ( Const + FirstVNF_CPU_Server ) ) )", "choosing": "( ( RCSe / ( MLU / RMSe ) ) * ( ( ( CS * MUM ) / MUM ) / ( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}], "3": [{"determining": "Max( Max( CRS,MDR ),( MRS / ( DDR * RRS ) ) )", "choosing": "( ( ( Min( RCSe ,Max( RCSe,Min( CS ,MUM ) ) ) - Min( DS ,RRSe ) ) * MUC ) * ( RMSe * RCSe ) )", "obj1": 0.6257796257796258, "obj2": 0.27524994812596676}, {"determining": "Min( Min( ( ARS - ( ( ( MDR + Max( MDR,FirstVNF_CPU_Server ) ) + CRS ) + FirstVNF_CPU ) ) ,FirstVNF_RAM ) ,Max( MRS,FirstVNF_Mem_Server ) )", "choosing": "( Max( ( MUR / ( MUC - RMSe ) ),( CS / RMSe ) ) - ( ( RCSe + ( RCSe - ( ( ( ( CS + MUC ) * ( DS - MUC ) ) * MUC ) * ( MUM - MUR ) ) ) ) - DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( FirstVNF_CPU_Server - MRS ) + ( Const + FirstVNF_CPU_Server ) ) - ( Min( MDR ,PN ) + ( PN * FirstVNF_RAM_Server ) ) ) ,Min( ( ( ( FirstVNF_CPU_Server + AMS ) * AMS ) * ( MRS * ( Const * Const ) ) ) ,( ( CRS * ACS ) - ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( MUR * ( RCSe / ( MLU / ( ( ( ( DS - MUR ) / ( RMSe / MUC ) ) * ( Max( DS,RCSe ) / ( RCSe / RCSe ) ) ) * ( Max( ( MUM + CS ),( DS - RCSe ) ) * Min( ( DS + RMSe ) ,( RCSe * MUR ) ) ) ) ) ) ) + ( CS * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Max( CRS,MDR ),( MRS / ( DDR * ( Const - AMS ) ) ) )", "choosing": "( ( ( Min( RCSe ,Max( RCSe,Min( ( Min( MUM ,MUC ) - DS ) ,Min( CS ,MUC ) ) ) ) - Min( DS ,RRSe ) ) * MUC ) * ( RMSe * RCSe ) )", "obj1": 0.6257796257796258, "obj2": 0.27524994812596676}, {"determining": "( Max( FirstVNF_RAM_Server,RRS ) / ( ( ( Const - MDR ) * ( BR / FirstVNF_CPU_Server ) ) - ( Min( FirstVNF_RAM ,CRS ) / ( FirstVNF_CPU + ACS ) ) ) )", "choosing": "( Max( RMSe,RCSe ) - ( Max( MLU,MUR ) * ( MUM - MLU ) ) )", "obj1": 0.7713097713097713, "obj2": 0.10701445262775529}, {"determining": "( ( ( BR / FirstVNF_RAM ) * ( FirstVNF_RAM - RRS ) ) + ( ( ( AMS / ( FirstVNF_RAM + FirstVNF_Mem ) ) - Const ) - ( BR / FirstVNF_RAM ) ) )", "choosing": "( Max( Min( RRSe ,MUR ),( RRSe / MUM ) ) * Min( Max( Min( ( DS + RCSe ) ,Min( MUM ,RCSe ) ),( MLU + ( RCSe * MLU ) ) ) ,( RMSe / DS ) ) )", "obj1": 0.9022869022869023, "obj2": 0.08680754105836845}, {"determining": "( ( RRS - Min( MDR ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU_Server - FirstVNF_RAM ) )", "choosing": "( ( ( DS - CS ) + Min( RCSe ,RMSe ) ) / ( ( MLU + MUM ) * Min( RMSe ,MUR ) ) )", "obj1": 0.9168399168399168, "obj2": 0.06035870521337024}, {"determining": "Min( Min( ( ARS - ( ( DDR + CRS ) + FirstVNF_CPU ) ) ,FirstVNF_RAM ) ,Max( MRS,FirstVNF_Mem_Server ) )", "choosing": "( Max( ( MUR / ( MUC - MUR ) ),( CS / RMSe ) ) - ( ( RCSe + ( RCSe - ( ( ( ( CS + MUC ) * ( DS - MUC ) ) * MUC ) * ( MUM - MUR ) ) ) ) - DS ) )", "obj1": 0.9833679833679834, "obj2": 0.005693702866014879}, {"determining": "( ( ( FirstVNF_Mem_Server - Const ) / ( Const - DDR ) ) / PN )", "choosing": "Max( ( ( MUM / MUM ) + ( RCSe * MUR ) ),Min( ( CS + DS ) ,( ( ( Max( CS,MUC ) * ( MUC - RCSe ) ) * Max( ( CS - CS ),( MUR / MUC ) ) ) - MLU ) ) )", "obj1": 0.7692307692307693, "obj2": 0.1359358882438487}, {"determining": "( Min( Min( ( PN - MDR ) ,( PN / FirstVNF_Mem ) ) ,( ( CRS - PN ) + Max( ARS,Max( ( FirstVNF_CPU / PN ),Min( ARS ,AMS ) ) ) ) ) + ( ( ( ACS + BR ) * ( MRS + ACS ) ) + Min( Min( DDR ,FirstVNF_CPU_Server ) ,( CRS / FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MLU / MUR ) - ( RMSe + MLU ) ) / Max( ( MUR / DS ),Max( RRSe,DS ) ) ) / ( RRSe + Max( ( MLU / RMSe ),( CS / MUR ) ) ) )", "obj1": 0.6715176715176715, "obj2": 0.21389543310757642}, {"determining": "( ( ARS / CRS ) + Max( ( Max( Const,Const ) / ( ACS - FirstVNF_Mem ) ),( Max( Const,Const ) / ( ACS - FirstVNF_Mem ) ) ) )", "choosing": "Max( DS,( MUM - RRSe ) )", "obj1": 0.7567567567567568, "obj2": 0.17744091200243076}, {"determining": "Min( Max( FirstVNF_RAM_Server,( Const - DDR ) ) ,( Const - DDR ) )", "choosing": "( ( MUC * DS ) - Min( DS ,RCSe ) )", "obj1": 0.6611226611226612, "obj2": 0.23556460683709765}, {"determining": "Min( Max( FirstVNF_RAM_Server,MRS ) ,( Const - DDR ) )", "choosing": "( ( MUC * ( MUC + RCSe ) ) - ( ( MLU - MUM ) - Min( DS ,RCSe ) ) )", "obj1": 0.7006237006237006, "obj2": 0.2040241776013913}, {"determining": "( ( Min( ( PN - Const ) ,CRS ) - ( ACS * FirstVNF_CPU ) ) * ( FirstVNF_CPU_Server - FirstVNF_RAM ) )", "choosing": "( RMSe / ( ( MLU + MUM ) * Min( RMSe ,MUR ) ) )", "obj1": 0.9126819126819127, "obj2": 0.07034534056586018}, {"determining": "Min( Max( FirstVNF_RAM_Server,AMS ) ,( Const - ( ( ( ( Const + DDR ) - AMS ) * AMS ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( Max( RCSe,RCSe ) * DS ) - ( ( ( Min( CS ,Min( MUM ,MUR ) ) / Min( MLU ,( ( ( MUR / DS ) / MUR ) * RMSe ) ) ) + MUC ) - Min( DS ,RCSe ) ) )", "obj1": 0.7214137214137214, "obj2": 0.18562477786193085}, {"determining": "Min( Max( FirstVNF_Mem,FirstVNF_Mem_Server ) ,( Const - DDR ) )", "choosing": "( ( MUC * DS ) - ( MUC + RCSe ) )", "obj1": 0.7047817047817048, "obj2": 0.19756069688833428}, {"determining": "( ( Max( Max( RRS,PN ),( ARS / ACS ) ) + ( FirstVNF_CPU_Server + MDR ) ) * ( ( MDR + ACS ) / ( CRS / ACS ) ) )", "choosing": "( ( ( ( RMSe + MLU ) + ( RMSe - RRSe ) ) * ( Min( MLU ,MLU ) * ( MLU * MUC ) ) ) * ( Max( ( MUC / RMSe ),( Min( Min( MUC ,RRSe ) ,Max( RMSe,( MUR / Min( RCSe ,MUM ) ) ) ) / MUR ) ) - ( MUC + MLU ) ) )", "obj1": 0.6340956340956341, "obj2": 0.2596763599824573}, {"determining": "Max( ( Max( AMS,ACS ) - Max( MRS,FirstVNF_RAM ) ),( MDR + FirstVNF_Mem_Server ) )", "choosing": "( Max( DS,RCSe ) / ( ( MLU / Max( ( CS - RMSe ),DS ) ) * ( MLU - MUM ) ) )", "obj1": 0.6528066528066528, "obj2": 0.24746091075594934}, {"determining": "Min( Max( ( Const - DDR ),AMS ) ,( Const - DDR ) )", "choosing": "( ( MUC * DS ) - ( ( ( MLU - MUM ) - Min( DS ,RCSe ) ) - Min( DS ,RCSe ) ) )", "obj1": 0.7276507276507277, "obj2": 0.17898480240569156}, {"determining": "( ACS + Max( ( Max( Const,Const ) / ( ACS - FirstVNF_Mem ) ),PN ) )", "choosing": "Max( DS,Min( Max( CS,CS ) ,Min( MUR ,DS ) ) )", "obj1": 0.7484407484407485, "obj2": 0.17854303515431688}, {"determining": "( Min( ( ( CRS + MRS ) + ( MRS + DDR ) ) ,( Max( FirstVNF_RAM_Server,FirstVNF_CPU ) + ( ARS + PN ) ) ) * ( ( ( FirstVNF_CPU_Server * ARS ) / ( FirstVNF_Mem + ARS ) ) / ( Max( FirstVNF_Mem_Server,FirstVNF_CPU_Server ) * ( FirstVNF_RAM_Server * ARS ) ) ) )", "choosing": "( ( Min( MUM ,MLU ) / RCSe ) - Max( MUC,( Max( RRSe,MUC ) * MLU ) ) )", "obj1": 0.6486486486486487, "obj2": 0.258813556948602}, {"determining": "( Min( FirstVNF_CPU ,Min( AMS ,CRS ) ) * ( CRS / FirstVNF_Mem ) )", "choosing": "( ( ( Max( DS,RRSe ) + ( MUC + RMSe ) ) * Min( ( CS * RRSe ) ,( RRSe + MUC ) ) ) - Min( ( Max( RMSe,MLU ) - ( MUR - MUC ) ) ,( Min( MLU ,RRSe ) * ( MLU - CS ) ) ) )", "obj1": 0.6507276507276507, "obj2": 0.2571222829609951}, {"determining": "( ( Max( FirstVNF_CPU,MRS ) - Max( MRS,RRS ) ) * ( ( FirstVNF_Mem_Server - CRS ) - ( ACS / MDR ) ) )", "choosing": "( Min( ( ( MUM / Min( RCSe ,RCSe ) ) - RMSe ) ,Max( DS,MUM ) ) - Min( ( CS / RCSe ) ,( RMSe / MUR ) ) )", "obj1": 0.9937629937629938, "obj2": 0.004790121013081045}, {"determining": "Min( ( ACS - FirstVNF_Mem ) ,( MDR - FirstVNF_RAM_Server ) )", "choosing": "Max( ( DS * RCSe ),( RMSe * MUR ) )", "obj1": 0.9958419958419958, "obj2": 0.0037236071108635144}, {"determining": "Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * Const ) ) )", "choosing": "( ( CS * DS ) * Min( ( Min( MUM ,MUC ) - DS ) ,Min( CS ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( MDR + ACS ) + ( BR - MDR ) ) / ( ( MRS - MDR ) / ( Const * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - ( MLU / MLU ) ) / Min( ( CS / CS ) ,( MUC / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,RRS ) - Max( ( FirstVNF_Mem / CRS ),DDR ) )", "choosing": "Min( ( ( DS / MUM ) + Min( MLU ,RMSe ) ) ,( ( RMSe * MUC ) + ( MUC + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU ) - ( ( PN / PN ) + FirstVNF_Mem ) )", "choosing": "Min( Min( ( MLU / MUM ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN + MDR ) ,( FirstVNF_RAM - CRS ) ) - Max( ( MRS + DDR ),Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( Max( CS,MUC ) * ( MUC - RCSe ) ) * Max( ( CS - CS ),( MUR / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN - Const ) ,CRS ) - ( ACS * FirstVNF_CPU ) )", "choosing": "Max( ( ( RCSe + DS ) * Min( CS ,RMSe ) ),Min( ( MUM - RRSe ) ,( MLU * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,PN ) - ( DDR * FirstVNF_RAM_Server ) ) / Max( ( FirstVNF_CPU_Server * DDR ),( FirstVNF_CPU + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( RMSe / RMSe ) * Max( RCSe,RCSe ) ) / Min( MLU ,( RMSe * DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( BR * AMS ) + Max( PN,ARS ) ) ,( ( ACS + RRS ) - ( FirstVNF_Mem_Server / PN ) ) ) * ( Max( ( FirstVNF_Mem_Server - ACS ),( FirstVNF_Mem_Server - PN ) ) - ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) - ( PN / MRS ) ) ) )", "choosing": "( Min( Max( ( RMSe / MUR ),Min( MUR ,RMSe ) ) ,Max( ( DS - MUC ),( MUC + MUC ) ) ) * ( Max( ( DS / MUM ),Max( CS,MUC ) ) + ( ( MUR / MUM ) + ( DS + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU * RRS ) - Max( FirstVNF_RAM_Server,RRS ) )", "choosing": "( ( ( Max( MLU,MUR ) - Min( MUM ,RMSe ) ) + ( Min( MUR ,RMSe ) - ( MUM / MUR ) ) ) - ( ( ( RMSe / MUM ) * Min( MUM ,DS ) ) / ( ( RMSe + RRSe ) - ( MLU - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Min( AMS ,FirstVNF_RAM ),Min( FirstVNF_Mem_Server ,FirstVNF_CPU ) ) - ( ( Const - MRS ) + ( FirstVNF_RAM_Server - MRS ) ) ) - ( ( ( FirstVNF_CPU_Server - ARS ) - ( FirstVNF_Mem_Server * FirstVNF_Mem_Server ) ) + ( ( ARS * FirstVNF_RAM ) / Min( MRS ,ARS ) ) ) )", "choosing": "( ( Min( ( RRSe / MUC ) ,Max( MUR,DS ) ) * Max( RRSe,MUR ) ) * ( ( ( RCSe * RMSe ) / DS ) / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) + ( Min( AMS ,BR ) / ( DDR + FirstVNF_CPU ) ) ) ,( Max( ( RRS + Const ),( FirstVNF_RAM_Server * DDR ) ) / ( ( FirstVNF_RAM / FirstVNF_RAM ) * ( PN / ARS ) ) ) )", "choosing": "( ( MUR - MUM ) * ( ( ( CS * MUM ) / MUM ) / ( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( FirstVNF_CPU_Server - MRS ) + ( Const + FirstVNF_CPU_Server ) ) - ( Min( MDR ,PN ) + ( PN * FirstVNF_RAM_Server ) ) ) ,Min( Min( ( FirstVNF_RAM_Server - BR ) ,( CRS - MDR ) ) ,( ( CRS * ACS ) - ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( MUR * ( RCSe / ( MLU / RMSe ) ) ) + ( CS * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * CRS ) * ( FirstVNF_Mem_Server - ( ARS + CRS ) ) )", "choosing": "( Min( ( ( RCSe * RCSe ) * ( MUC / MUC ) ) ,DS ) / ( MUR - DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server + ARS ) )", "choosing": "Min( Max( MLU,DS ) ,Min( RCSe ,( RMSe - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( MRS - ( ARS / MDR ) )", "choosing": "Max( Max( MUC,( DS * MUC ) ),( RCSe + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * RRS ) - Max( FirstVNF_Mem,FirstVNF_CPU_Server ) )", "choosing": "( ( Max( DS,MUM ) / RRSe ) / ( DS - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( MDR,PN ) - AMS ) ,Max( PN,FirstVNF_Mem_Server ) )", "choosing": "( CS * ( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( ( ( BR + AMS ) - ( BR + ARS ) ),FirstVNF_Mem_Server ) )", "choosing": "( ( CS * MUC ) * ( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( AMS ,FirstVNF_RAM_Server ) - ( BR + ARS ) )", "choosing": "( ( RCSe - MUM ) - ( CS * ( Min( MUC ,DS ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * Const ) ) )", "choosing": "( ( CS * DS ) * Min( ( Min( MUM ,MUC ) - DS ) ,Min( CS ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ) - ( BR + ARS ) )", "choosing": "( ( ( ( Max( MLU,MUC ) / MUC ) + MUC ) - MUM ) - ( CS * ( Min( MUC ,Min( CS ,MUR ) ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( RRS ,RRS ) - ( FirstVNF_CPU / MRS ) ) ,( ( FirstVNF_RAM_Server - CRS ) - ( ACS - ACS ) ) )", "choosing": "Max( ( ( Min( DS ,MUM ) * ( MLU + DS ) ) * ( ( RRSe / RRSe ) - ( MUC + MLU ) ) ),Min( MUC ,RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( MDR + ACS ) + ( BR - MDR ) ) / ( ( MRS - MDR ) / ( PN * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - Max( ( MUM - RRSe ),Max( RCSe,DS ) ) ) / Min( ( CS / CS ) ,( MUC / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( ( BR / DDR ) + ( ARS + FirstVNF_CPU ) ),( ( FirstVNF_Mem_Server / ARS ) + Max( FirstVNF_RAM_Server,FirstVNF_RAM ) ) ) / ( ( MRS - MDR ) / ( Const * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - ( MLU / MLU ) ) / Min( ( CS / CS ) ,Min( Max( Min( RMSe ,CS ),Min( DS ,DS ) ) ,Min( Min( MLU ,CS ) ,( RCSe * MUC ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( FirstVNF_RAM_Server,MRS ) - Max( MRS,RRS ) ) * ( ( FirstVNF_Mem_Server - CRS ) - Max( ( ( FirstVNF_RAM_Server + FirstVNF_Mem_Server ) * ACS ),( MDR * ARS ) ) ) )", "choosing": "( Min( ( DS / CS ) ,Max( DS,MUM ) ) - Min( ( CS / RCSe ) ,( RMSe / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const + Const ) - FirstVNF_CPU ) - ( ( PN / PN ) + FirstVNF_Mem ) )", "choosing": "Min( MLU ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU ) - ( ( PN / DDR ) + FirstVNF_Mem ) )", "choosing": "Min( Min( ( Min( ( ( DS / MUM ) + Min( MLU ,RMSe ) ) ,( ( RMSe * MUC ) + ( MUC + MUR ) ) ) / MUM ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( FirstVNF_Mem_Server,RRS ) - Max( ( FirstVNF_Mem / CRS ),( MDR - FirstVNF_CPU ) ) )", "choosing": "Min( Min( ( MLU / MUM ) ,( MUM / RRSe ) ) ,( ( RMSe * MUC ) + ( MUC + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU ) - ( ( PN / PN ) + Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "Min( Min( ( Max( CS,MUC ) * ( MUC - RCSe ) ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN + MDR ) ,( ( ( MDR - FirstVNF_CPU ) - ( ( PN / PN ) + FirstVNF_Mem ) ) - CRS ) ) - Max( ( MRS + DDR ),Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( Max( CS,MUC ) * ( MUC - RCSe ) ) * Min( Min( ( MLU / MUM ) ,( MUM / RRSe ) ) ,( ( CS - RMSe ) / Min( MUC ,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN + ( ( FirstVNF_Mem_Server - Const ) / ( Const - DDR ) ) ) ,( FirstVNF_RAM - CRS ) ) - Max( ( MRS + DDR ),Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( Min( ( CS + DS ) ,( MUM - MLU ) ) * ( MUC - RCSe ) ) * Max( ( CS - CS ),( MUR / MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN - ( ( RRS - Min( MDR ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU_Server - FirstVNF_RAM ) ) ) ,CRS ) - ( ACS * FirstVNF_CPU ) )", "choosing": "Max( ( ( RCSe + CS ) * Min( CS ,RMSe ) ),Min( ( MUM - RRSe ) ,( MLU * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( CRS - BR ) ,Min( ( PN - Const ) ,CRS ) )", "choosing": "( Max( RRSe,RMSe ) * ( ( RCSe + DS ) * Min( CS ,RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( PN - Const ) ,( ( DDR * FirstVNF_Mem ) / ( ( ACS - DDR ) - MRS ) ) ) - ( ACS * FirstVNF_CPU ) )", "choosing": "Max( ( ( RCSe + DS ) * Min( CS ,RMSe ) ),Min( ( MUM - RRSe ) ,( RRSe * MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( CRS - ( DDR * FirstVNF_Mem ) ) ,Max( ARS,( AMS - MDR ) ) )", "choosing": "( ( ( RRSe * MUM ) - ( MUC + MUC ) ) * ( MUM + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const - ACS ) * ( ACS * PN ) ) - ( ( FirstVNF_RAM_Server * RRS ) * ( AMS * FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( CS * RRSe ) / CS ) / MUM )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,PN ) - ( DDR * FirstVNF_RAM_Server ) ) / Max( ( ( ( BR * AMS ) / ( RRS * DDR ) ) - ( Max( ARS,MRS ) - Min( FirstVNF_RAM ,FirstVNF_RAM ) ) ),( FirstVNF_CPU + FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( RMSe / RMSe ) * Max( RCSe,RCSe ) ) / ( Max( ( MLU + CS ),DS ) + ( CS - MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,PN ) - ( DDR * FirstVNF_RAM_Server ) ) / Max( Min( BR ,FirstVNF_Mem_Server ),( Const + FirstVNF_Mem_Server ) ) )", "choosing": "( ( ( RCSe - DS ) * ( MUR * ( ( ( RMSe / RMSe ) * Max( RCSe,RCSe ) ) / Min( MLU ,( RMSe * DS ) ) ) ) ) / ( ( RMSe + RRSe ) - Max( CS,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( BR * AMS ) + Max( PN,ARS ) ) ,( ( ACS + RRS ) - ( FirstVNF_Mem_Server / PN ) ) ) * ( Max( ( FirstVNF_Mem_Server - ACS ),( ( Max( MRS,FirstVNF_RAM ) * ( FirstVNF_Mem * BR ) ) - PN ) ) - ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) - ( PN / MRS ) ) ) )", "choosing": "( Min( Max( ( RMSe / MUR ),Min( MUR ,RMSe ) ) ,Max( ( DS - MUC ),( MUC + MUC ) ) ) * ( Max( ( DS / MUM ),( ( RCSe - DS ) * ( MUR * DS ) ) ) + ( ( MUR / MUM ) + ( DS + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( ( BR * AMS ) + Max( PN,ARS ) ) ,( ( ACS + RRS ) - ( FirstVNF_Mem_Server / PN ) ) ) * Max( CRS,ACS ) )", "choosing": "( Min( Max( ( RMSe / MUR ),Min( MUR ,RMSe ) ) ,Max( ( DS - MUC ),( MUC + MUC ) ) ) * ( Max( ( DS / MUM ),Max( CS,MUC ) ) + RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const * RRS ) - Max( FirstVNF_RAM_Server,RRS ) )", "choosing": "( ( ( Max( MLU,MUR ) - Min( MUM ,RMSe ) ) + ( Min( MUR ,RMSe ) - ( MUM / MUR ) ) ) - ( ( ( ( Max( RMSe,RCSe ) - ( ( CS - DS ) * ( MUM - MLU ) ) ) / MUM ) * Min( MUM ,DS ) ) / ( ( RMSe + RRSe ) - ( MLU - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Min( RRS ,ARS ) ,Min( PN ,ARS ) ) - Max( FirstVNF_RAM_Server,RRS ) )", "choosing": "( ( ( Max( MLU,MUR ) - Min( MUM ,RMSe ) ) + ( Min( MUR ,RMSe ) - ( ( ( CS - DS ) * ( MUM - MLU ) ) / MUR ) ) ) - ( ( ( RMSe / MUM ) * Min( MUM ,DS ) ) / ( ( RMSe + RRSe ) - ( MLU - DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Min( AMS ,FirstVNF_RAM ),Min( FirstVNF_Mem_Server ,FirstVNF_CPU ) ) - ( ( Const - MRS ) + ( FirstVNF_RAM_Server - MRS ) ) ) - ( FirstVNF_CPU_Server * BR ) )", "choosing": "( ( RRSe * RMSe ) * ( ( ( RCSe * RMSe ) / DS ) / CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) + ( Min( AMS ,BR ) / ( DDR + FirstVNF_CPU ) ) ) ,( Max( ( RRS + Const ),( Max( ( CRS + FirstVNF_Mem ),( FirstVNF_CPU_Server * BR ) ) * DDR ) ) / ( ( FirstVNF_RAM / FirstVNF_RAM ) * ( PN / ARS ) ) ) )", "choosing": "( ( MUR - MUM ) * ( ( ( MUC * MLU ) / Max( Max( ( RRSe * RMSe ),( RCSe * MUM ) ),RRSe ) ) / ( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) - ( Min( MDR ,PN ) + ( PN * FirstVNF_RAM_Server ) ) ) ,Min( Min( ( FirstVNF_RAM_Server - BR ) ,( CRS - MDR ) ) ,( ( CRS * ACS ) - ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) ) )", "choosing": "( ( MUR * ( RCSe / ( CS * MUM ) ) ) + ( CS * RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( BR - MDR ) + ( CRS - AMS ) ) + ( Min( AMS ,BR ) / ( DDR + FirstVNF_CPU ) ) ) ,( ( FirstVNF_CPU_Server - MRS ) + ( Const + FirstVNF_CPU_Server ) ) )", "choosing": "( ( RCSe / ( MLU / RMSe ) ) * ( ( ( CS * MUM ) / MUM ) / ( RCSe * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Const - DDR ) - Max( Max( FirstVNF_Mem,FirstVNF_Mem_Server ),AMS ) )", "choosing": "( ( ( MUC * DS ) - ( MUC + RCSe ) ) - ( ( MLU - MUM ) - Min( DS ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( FirstVNF_RAM_Server,AMS ) ,( Const - AMS ) )", "choosing": "( ( MUC * DS ) - ( MUC * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( FirstVNF_RAM_Server,AMS ) ,( Const - AMS ) )", "choosing": "( ( MUC * DS ) - ( DS - Min( DS ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * CRS ) * ( CRS - ( ARS + CRS ) ) )", "choosing": "( Min( ( ( RCSe * RCSe ) * ( ( MUR - DS ) / MUC ) ) ,DS ) / ( MUR - DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * CRS ) * ( FirstVNF_Mem_Server - ( ARS + CRS ) ) )", "choosing": "( Min( ( ( RCSe * RCSe ) * ( MUC / MUC ) ) ,DS ) / ( Min( ( ( RCSe * RCSe ) * ( MUC / MUC ) ) ,DS ) / ( MUR - DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ARS * CRS ) * ( FirstVNF_Mem_Server - ( ARS + ( ARS * CRS ) ) ) )", "choosing": "( Min( ( ( RCSe * RCSe ) * ( MUC / MUC ) ) ,( ( RCSe * RCSe ) * ( MUC / MUC ) ) ) / ( MUR - DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( FirstVNF_Mem,FirstVNF_Mem_Server ) ,( FirstVNF_Mem_Server - ( ARS + CRS ) ) )", "choosing": "( ( ( ( RCSe * RCSe ) * ( MUC / MUC ) ) * DS ) - MUC )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( FirstVNF_Mem,FirstVNF_Mem_Server ) ,( MDR / PN ) ) * ( FirstVNF_Mem_Server - ( ARS + CRS ) ) )", "choosing": "( ( MUC * DS ) / ( MUR - DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,DDR ) - ( FirstVNF_RAM_Server + ARS ) )", "choosing": "Min( Max( MLU,DS ) ,Min( DS ,( RMSe - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server + Min( DDR ,FirstVNF_RAM ) ) )", "choosing": "Min( Max( MLU,DS ) ,Min( RCSe ,( ( RMSe - CS ) - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ARS - ( FirstVNF_RAM_Server + ARS ) )", "choosing": "Min( RMSe ,Min( RCSe ,( RMSe - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,( ARS / MDR ) ) - ( FirstVNF_RAM_Server + ARS ) )", "choosing": "Min( Max( MLU,DS ) ,Min( RCSe ,( DS - CS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( MRS - ( Min( DDR ,FirstVNF_RAM ) / MDR ) )", "choosing": "Max( Max( MUC,( Min( RCSe ,( RMSe - CS ) ) * MUC ) ),( RCSe + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( MRS - ( Max( CRS,MDR ) / MDR ) )", "choosing": "Max( Max( MUC,( MUC * MUC ) ),( RCSe + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * MDR ) ) )", "choosing": "( ( CS * DS ) * Min( ( Min( MUM ,Max( MUC,( DS * MUC ) ) ) - DS ) ,Min( CS ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( MRS - ( ARS / MDR ) )", "choosing": "Max( Max( MUC,( DS * Min( MUM ,MUC ) ) ),( RCSe + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,( MRS / ( DDR * RRS ) ) )", "choosing": "( ( CS * DS ) * ( ( Min( RCSe ,Max( RCSe,Min( CS ,MUM ) ) ) - Min( DS ,RRSe ) ) * MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * RRS ) - DDR )", "choosing": "( MUM / ( DS - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR * FirstVNF_CPU_Server ) - Max( FirstVNF_Mem,FirstVNF_CPU_Server ) )", "choosing": "( ( ( Max( DS,MUM ) / RRSe ) / RRSe ) / ( DS - MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( MDR,PN ) - AMS ) ,Max( PN,FirstVNF_Mem_Server ) )", "choosing": "( CS * ( CS - ( CS * ( CS - MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( MDR,PN ) - AMS ) ,Max( Min( ( Max( MDR,PN ) - AMS ) ,Max( PN,FirstVNF_Mem_Server ) ),FirstVNF_Mem_Server ) )", "choosing": "( CS * ( CS - ( CS - MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( ( Max( MDR,PN ) - ( BR + ARS ) ),FirstVNF_Mem_Server ) )", "choosing": "( ( CS * MUC ) * ( CS - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * ( Min( AMS ,FirstVNF_RAM_Server ) - ( BR + ARS ) ) ) ) )", "choosing": "( ( CS * DS ) * ( RCSe - MUM ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( AMS - ( BR + ARS ) )", "choosing": "( ( RCSe - MUM ) - ( CS * ( Min( MUC ,DS ) + Min( MUM ,MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM * ARS ) - ( BR + ARS ) ) - ( BR + ARS ) )", "choosing": "( Min( MUC ,Min( CS ,MUR ) ) - ( CS * ( Min( MUC ,DS ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( Const - AMS ) ,Max( AMS,( FirstVNF_Mem_Server * Const ) ) ) - ( BR + ARS ) )", "choosing": "( ( RCSe - MUM ) - ( ( Min( MUM ,MUC ) - DS ) * ( Min( MUC ,Min( CS ,MUR ) ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const - AMS ) ,Max( ( ( FirstVNF_RAM * ARS ) - ( BR + ARS ) ),( FirstVNF_Mem_Server * Const ) ) )", "choosing": "( ( CS * DS ) * Min( ( Min( MUM ,MUC ) - DS ) ,Min( CS ,MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ARS,BR ) - ( BR + ARS ) )", "choosing": "( ( Min( CS ,( ( RRSe - RCSe ) * Min( DS ,MUR ) ) ) * ( CS - MUC ) ) - ( CS * ( Min( MUC ,Min( CS ,MUR ) ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ) - ( BR + ARS ) )", "choosing": "( ( ( ( Max( MLU,MUC ) / MUC ) + MUC ) - MUM ) - ( CS * ( Min( MUC ,Min( CS ,MUR ) ) + MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( MDR + ACS ) + ( ( FirstVNF_CPU * RRS ) - MDR ) ) / ( ( MRS - MDR ) / ( Const * DDR ) ) )", "choosing": "( ( ( MUR - MLU ) - ( RRSe - RCSe ) ) / Min( ( CS / CS ) ,( MUC / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}]}