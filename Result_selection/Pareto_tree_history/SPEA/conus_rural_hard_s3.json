{"1": [{"determining": "( Min( DDR ,FirstVNF_Mem_Server ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( DS,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ARS ,FirstVNF_CPU_Server ) ,( BR + FirstVNF_CPU ) )", "choosing": "( ( DS * MLU ) / Max( RRSe,MLU ) )", "obj1": 0.7663366336633664, "obj2": 0.1744937238054545}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( Max( FirstVNF_RAM,FirstVNF_Mem ) - ( FirstVNF_Mem + Const ) )", "choosing": "( ( DS + CS ) * ( RCSe / RMSe ) )", "obj1": 0.906930693069307, "obj2": 0.07976091548729129}, {"determining": "( ( Min( ARS ,FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) )", "choosing": "( Max( MLU,MUR ) / ( MUR - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( FirstVNF_RAM_Server - RRS ),Max( FirstVNF_CPU_Server,FirstVNF_RAM_Server ) ) * Max( ( FirstVNF_CPU - MRS ),( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( ( MUR / MLU ) + Min( RRSe ,MUC ) ) )", "obj1": 0.697029702970297, "obj2": 0.2207295216943803}, {"determining": "( ( Min( MDR ,RRS ) / Min( PN ,DDR ) ) - ( ( FirstVNF_Mem - BR ) + ( FirstVNF_CPU_Server - AMS ) ) )", "choosing": "Min( ( DS * MLU ) ,( ( MUC + MUC ) + ( DS - RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / Max( DS,RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( ( Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) * ( MDR / RRS ) ) - Max( ( CRS + Const ),( ACS + BR ) ) ) - ( Max( ( ACS / FirstVNF_Mem_Server ),( FirstVNF_CPU_Server / FirstVNF_CPU ) ) - ( Max( DDR,FirstVNF_RAM ) * ( FirstVNF_RAM / ACS ) ) ) )", "choosing": "( Max( RRSe,( RCSe + ( DS - MLU ) ) ) + ( ( Max( DS,DS ) - CS ) - Max( CS,( MLU + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( BR - CRS ) * Min( FirstVNF_Mem_Server ,FirstVNF_Mem_Server ) ) / ( ( Const * MDR ) + Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) ) ) * ( ( ( DDR / ACS ) + ( FirstVNF_Mem * FirstVNF_CPU_Server ) ) / Min( Max( FirstVNF_RAM_Server,Const ) ,( FirstVNF_RAM_Server * ARS ) ) ) )", "choosing": "Max( Max( Max( ( CS - RCSe ),Max( MUM,MUR ) ),Max( Min( RCSe ,MUM ),( RMSe / DS ) ) ),Max( ( ( DS * RRSe ) - ( MLU * MUC ) ),( ( MUM - MLU ) + ( MUM / MUR ) ) ) )", "obj1": 0.6831683168316832, "obj2": 0.2635679065581331}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( ( RCSe / MUC ) - ( CS - Min( ( MLU * DS ) ,RCSe ) ) )", "obj1": 0.7346534653465346, "obj2": 0.21003984383345806}, {"determining": "( ( ( ( Const - BR ) - Max( RRS,DDR ) ) - Min( ( ACS / FirstVNF_RAM ) ,( FirstVNF_CPU_Server * ACS ) ) ) * ( ( ( RRS + FirstVNF_CPU ) / Max( ACS,MRS ) ) + Max( ( RRS / ACS ),( FirstVNF_CPU_Server - PN ) ) ) )", "choosing": "( ( MLU - ( MUM / CS ) ) * ( RCSe - RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) )", "choosing": "( Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) / ( CS * ( CS * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( Max( Min( FirstVNF_CPU ,FirstVNF_RAM ),( AMS / ARS ) ) ,( ( ARS - FirstVNF_CPU_Server ) / ( BR / FirstVNF_Mem_Server ) ) ) / ( ( ( BR * FirstVNF_Mem_Server ) - ( AMS / AMS ) ) - Max( ( FirstVNF_Mem_Server / AMS ),( MRS + CRS ) ) ) )", "choosing": "Min( ( Max( ( DS / MLU ),( CS * MUC ) ) + ( Max( MUM,RRSe ) / ( MUM * DS ) ) ) ,( ( Max( MUM,CS ) - Max( RRSe,MLU ) ) * ( ( MUR * MLU ) * ( RCSe / RMSe ) ) ) )", "obj1": 0.8316831683168316, "obj2": 0.12827975933877384}, {"determining": "( Max( Min( Max( BR,RRS ) ,( ACS / CRS ) ),( ( FirstVNF_Mem * CRS ) + ( RRS + MRS ) ) ) - ( ( Max( FirstVNF_Mem_Server,Const ) + ( RRS * AMS ) ) / ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) * ( FirstVNF_CPU / RRS ) ) ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * Max( Max( RMSe,RMSe ),( MUR * CS ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) + ( CRS - ACS ) )", "choosing": "( Min( MLU ,( ( RRSe + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Min( Max( ARS,Max( FirstVNF_RAM,Const ) ) ,FirstVNF_Mem ),Max( FirstVNF_RAM_Server,DDR ) )", "choosing": "( ( ( ( RMSe - DS ) - ( MUR * MUR ) ) - Min( ( RCSe + DS ) ,( CS * MUM ) ) ) * ( ( Min( MLU ,RMSe ) + ( RCSe - RCSe ) ) * Min( ( MLU / DS ) ,( MUC / MUM ) ) ) )", "obj1": 0.695049504950495, "obj2": 0.23527857456557888}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}], "2": [{"determining": "( Min( DDR ,FirstVNF_Mem_Server ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( DS,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( ARS ,FirstVNF_CPU_Server ) ,( BR + FirstVNF_CPU ) )", "choosing": "( ( DS * MLU ) / Max( RRSe,MLU ) )", "obj1": 0.7663366336633664, "obj2": 0.1744937238054545}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( Min( ARS ,FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) )", "choosing": "( Max( MLU,MUR ) / ( MUR - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MDR ,RRS ) / Min( PN ,DDR ) ) - ( ( FirstVNF_Mem - BR ) + ( FirstVNF_CPU_Server - AMS ) ) )", "choosing": "Min( ( DS * MLU ) ,( ( MUC + MUC ) + ( DS - RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / Max( DS,RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( ( Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) * ( MDR / RRS ) ) - Max( ( CRS + Const ),( ACS + BR ) ) ) - ( Max( ( ACS / FirstVNF_Mem_Server ),( FirstVNF_CPU_Server / FirstVNF_CPU ) ) - ( Max( DDR,FirstVNF_RAM ) * ( FirstVNF_RAM / ACS ) ) ) )", "choosing": "( Max( RRSe,( RCSe + ( DS - MLU ) ) ) + ( ( Max( DS,DS ) - CS ) - Max( CS,( MLU + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( ( RCSe / MUC ) - ( CS - Min( ( MLU * DS ) ,RCSe ) ) )", "obj1": 0.7346534653465346, "obj2": 0.21003984383345806}, {"determining": "( ( ( ( Const - BR ) - Max( RRS,DDR ) ) - Min( ( ACS / FirstVNF_RAM ) ,( FirstVNF_CPU_Server * ACS ) ) ) * ( ( ( RRS + FirstVNF_CPU ) / Max( ACS,MRS ) ) + Max( ( RRS / ACS ),( FirstVNF_CPU_Server - PN ) ) ) )", "choosing": "( ( MLU - ( MUM / CS ) ) * ( RCSe - RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) )", "choosing": "( Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) / ( CS * ( CS * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( Max( BR,RRS ) ,( ACS / CRS ) ),( ( FirstVNF_Mem * CRS ) + ( RRS + MRS ) ) ) - ( ( Max( FirstVNF_Mem_Server,Const ) + ( RRS * AMS ) ) / ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) * ( FirstVNF_CPU / RRS ) ) ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * Max( Max( RMSe,RMSe ),( MUR * CS ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) + ( CRS - ACS ) )", "choosing": "( Min( MLU ,( ( RRSe + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - Const ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) - ( Max( ( Const / FirstVNF_CPU ),( FirstVNF_CPU_Server * ACS ) ) / ( ( PN - FirstVNF_CPU_Server ) - ( FirstVNF_RAM * CRS ) ) ) )", "choosing": "Min( Max( ( Max( RRSe,MUM ) / ( MUM * CS ) ),Max( ( DS - DS ),( MLU - RRSe ) ) ) ,( ( ( MUC * DS ) / ( RCSe + MUR ) ) / MLU ) )", "obj1": 0.9128712871287129, "obj2": 0.057580168569972535}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - Const ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "Min( Max( ( Max( RRSe,MUM ) / ( MUM * CS ) ),Max( ( DS - DS ),( MLU - RRSe ) ) ) ,( ( ( MUC * DS ) / ( RCSe + MUR ) ) / Max( ( MUC - CS ),( MUM - RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( ( ARS / ACS ) ,( PN / MDR ) ),( ( RRS / MRS ) + ( FirstVNF_Mem - MDR ) ) ) - ( Max( ( Const / FirstVNF_CPU ),( FirstVNF_CPU_Server * ACS ) ) / ( ( FirstVNF_RAM - FirstVNF_CPU_Server ) - ( FirstVNF_RAM * CRS ) ) ) )", "choosing": "Min( Max( ( Max( RRSe,MUM ) / ( MUM * CS ) ),Max( ( DS - DS ),( MLU - RRSe ) ) ) ,( ( ( MUC * RRSe ) / ( RCSe + MUR ) ) / Max( ( MUC - CS ),( MUM - RMSe ) ) ) )", "obj1": 0.7920792079207921, "obj2": 0.15680131753414112}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - ( FirstVNF_Mem + Min( FirstVNF_CPU_Server ,ACS ) ) ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( FirstVNF_RAM_Server,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "Min( ( MUR / CS ) ,( Min( MUC ,MUM ) + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( PN - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "Min( ( Max( RRSe,DS ) * Max( RMSe,MLU ) ) ,( ( RRSe - CS ) - ( DS - RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( FirstVNF_RAM ,CRS ) + ( FirstVNF_RAM_Server * FirstVNF_CPU ) ) * ( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) / ( CS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8118811881188119, "obj2": 0.09327651572735687}, {"determining": "( ( ( AMS - Const ) - ( FirstVNF_Mem - ARS ) ) * ( ( ( ( MRS - MDR ) + ( CRS - ACS ) ) * FirstVNF_Mem_Server ) / Max( RRS,FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( Min( MLU ,( ( RRSe + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) + ( CRS - ACS ) )", "choosing": "( ( ( MLU + RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( Max( BR,RRS ) ,( ACS / CRS ) ),( ( ( ( Min( FirstVNF_RAM ,CRS ) + ( FirstVNF_RAM_Server * FirstVNF_CPU ) ) * ( Max( CRS,FirstVNF_RAM ) + Max( BR,MRS ) ) ) * CRS ) + ( RRS + MRS ) ) ) - ( ( Max( FirstVNF_Mem_Server,Const ) + ( RRS * AMS ) ) / ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) * ( FirstVNF_CPU / RRS ) ) ) )", "choosing": "( ( ( MLU / MUR ) - MUM ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( Max( BR,RRS ) ,( ACS / CRS ) ),( ( FirstVNF_Mem * CRS ) + ( RRS + MRS ) ) ) - ( ( Max( FirstVNF_Mem_Server,Const ) + ( RRS * AMS ) ) / ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) * ( FirstVNF_CPU / RRS ) ) ) )", "choosing": "( ( ( MUR + MLU ) - ( MUM - RRSe ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,AMS ) / ( Const - FirstVNF_CPU_Server ) )", "choosing": "( ( Max( MUM,CS ) - Max( RRSe,MLU ) ) + Max( RMSe,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,AMS ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( RMSe,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ARS / ( ( ( BR * FirstVNF_Mem_Server ) - ( AMS / AMS ) ) - Max( ( FirstVNF_Mem_Server / AMS ),( MRS + CRS ) ) ) )", "choosing": "Min( ( ( Min( MUC ,RMSe ) / ( DS - DS ) ) + ( Max( MUM,RRSe ) / ( MUM * DS ) ) ) ,( ( Max( MUM,CS ) - Max( RRSe,MLU ) ) * ( ( MUR * MLU ) * ( RCSe / RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( ( RCSe / MUC ) - ( CS - Min( ( MLU * DS ) ,RCSe ) ) )", "obj1": 0.7346534653465346, "obj2": 0.21003984383345806}, {"determining": "( ( Min( FirstVNF_RAM ,FirstVNF_CPU ) + ( FirstVNF_RAM_Server * FirstVNF_CPU ) ) * ( Max( CRS,FirstVNF_RAM ) + Max( BR,MRS ) ) )", "choosing": "( ( ( MUR + MLU ) - ( MUM - RRSe ) ) * Max( ( DS + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7485148514851485, "obj2": 0.20479684484901298}, {"determining": "( ( ( FirstVNF_Mem - ACS ) * BR ) - Min( ARS ,CRS ) )", "choosing": "( ( RCSe / MUC ) - ( CS - Min( ( MLU * DS ) ,RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( RRS,ARS ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( RMSe,Min( DS ,MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( DDR ,AMS ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( RMSe,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) ) + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.25077229912723736}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( MUM * MLU ) )", "obj1": 0.6693069306930693, "obj2": 0.22669509751281153}, {"determining": "( Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) ) * ( ( CRS * FirstVNF_Mem_Server ) / Max( RRS,FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( MLU + RCSe ) + ( MLU / MLU ) ) + ( ( MUM - MUM ) - CS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( ( CRS * FirstVNF_Mem_Server ) / Max( RRS,FirstVNF_CPU_Server ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * MLU ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( ( MLU + RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ACS ) * BR ) - Min( BR ,CRS ) )", "choosing": "( Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) / Min( CS ,Max( RRSe,MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( ( MUR / ( ( CS + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.693069306930693, "obj2": 0.21265046882758182}, {"determining": "( Max( FirstVNF_RAM,FirstVNF_Mem ) - ( FirstVNF_Mem + Const ) )", "choosing": "( ( ( ( RMSe - DS ) - ( MUR * MUR ) ) - Min( ( RCSe + DS ) ,( CS * MUM ) ) ) * ( ( Min( MLU ,RMSe ) + ( RCSe - RCSe ) ) * Min( ( MLU / DS ) ,( MUC / MUM ) ) ) )", "obj1": 0.899009900990099, "obj2": 0.07641587163779383}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( FirstVNF_CPU + RRS ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * Max( Max( RMSe,RMSe ),( MUR * CS ) ) ) / Max( ( ( MUM - MUM ) - CS ),( Min( RMSe ,CS ) - ( ( RRSe - RCSe ) * RCSe ) ) ) )", "obj1": 0.9603960396039604, "obj2": 0.03174556823235965}, {"determining": "( Max( ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ),MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS - Min( ( MLU * DS ) ,RCSe ) ) - ( MUM * MLU ) )", "obj1": 0.6376237623762376, "obj2": 0.25638391757197015}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( RCSe / MUC ) - ( CS - Min( ( MLU * DS ) ,RCSe ) ) )", "obj1": 0.7346534653465346, "obj2": 0.21003984383345806}, {"determining": "( ( PN / Const ) - ( FirstVNF_Mem_Server + MRS ) )", "choosing": "( ( MUC - MLU ) - ( RCSe - MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( ( RCSe / MUC ) - ( CS - Min( ( MLU * DS ) ,RCSe ) ) )", "obj1": 0.7346534653465346, "obj2": 0.21003984383345806}, {"determining": "( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ( Max( FirstVNF_RAM,FirstVNF_Mem ) - ( FirstVNF_Mem + Const ) ) ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) )", "choosing": "( RMSe / ( MUR + DS ) )", "obj1": 0.803960396039604, "obj2": 0.1209098892474556}], "3": [{"determining": "( Min( DDR ,FirstVNF_Mem_Server ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( DS,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( Min( ARS ,FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) )", "choosing": "( Max( MLU,MUR ) / ( MUR - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MDR ,RRS ) / Min( PN ,DDR ) ) - ( ( FirstVNF_Mem - BR ) + ( FirstVNF_CPU_Server - AMS ) ) )", "choosing": "Min( ( DS * MLU ) ,( ( MUC + MUC ) + ( DS - RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / Max( DS,RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( ( Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) * ( MDR / RRS ) ) - Max( ( CRS + Const ),( ACS + BR ) ) ) - ( Max( ( ACS / FirstVNF_Mem_Server ),( FirstVNF_CPU_Server / FirstVNF_CPU ) ) - ( Max( DDR,FirstVNF_RAM ) * ( FirstVNF_RAM / ACS ) ) ) )", "choosing": "( Max( RRSe,( RCSe + ( DS - MLU ) ) ) + ( ( Max( DS,DS ) - CS ) - Max( CS,( MLU + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( Const - BR ) - Max( RRS,DDR ) ) - Min( ( ACS / FirstVNF_RAM ) ,( FirstVNF_CPU_Server * ACS ) ) ) * ( ( ( RRS + FirstVNF_CPU ) / Max( ACS,MRS ) ) + Max( ( RRS / ACS ),( FirstVNF_CPU_Server - PN ) ) ) )", "choosing": "( ( MLU - ( MUM / CS ) ) * ( RCSe - RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) )", "choosing": "( Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) / ( CS * ( CS * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( Max( BR,RRS ) ,( ACS / CRS ) ),( ( FirstVNF_Mem * CRS ) + ( RRS + MRS ) ) ) - ( ( Max( FirstVNF_Mem_Server,Const ) + ( RRS * AMS ) ) / ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) * ( FirstVNF_CPU / RRS ) ) ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * Max( Max( RMSe,RMSe ),( MUR * CS ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) + ( CRS - ACS ) )", "choosing": "( Min( MLU ,( ( RRSe + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - Const ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) - ( Max( ( Const / FirstVNF_CPU ),( FirstVNF_CPU_Server * ACS ) ) / ( ( PN - FirstVNF_CPU_Server ) - ( FirstVNF_RAM * CRS ) ) ) )", "choosing": "Min( Max( ( Max( RRSe,MUM ) / ( MUM * CS ) ),Max( ( DS - DS ),( MLU - RRSe ) ) ) ,( ( ( MUC * DS ) / ( RCSe + MUR ) ) / MLU ) )", "obj1": 0.9128712871287129, "obj2": 0.057580168569972535}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - Const ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "Min( Max( ( Max( RRSe,MUM ) / ( MUM * CS ) ),Max( ( DS - DS ),( MLU - RRSe ) ) ) ,( ( ( MUC * DS ) / ( RCSe + MUR ) ) / Max( ( MUC - CS ),( MUM - RMSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - ( FirstVNF_Mem + Min( FirstVNF_CPU_Server ,ACS ) ) ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( FirstVNF_RAM_Server,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "Min( ( MUR / CS ) ,( Min( MUC ,MUM ) + MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( ( FirstVNF_RAM_Server / FirstVNF_RAM ) / Max( ARS,CRS ) ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( PN - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "Min( ( Max( RRSe,DS ) * Max( RMSe,MLU ) ) ,( ( RRSe - CS ) - ( DS - RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( FirstVNF_RAM ,CRS ) + ( FirstVNF_RAM_Server * FirstVNF_CPU ) ) * ( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server - BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) / ( CS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8118811881188119, "obj2": 0.09327651572735687}, {"determining": "( ( ( AMS - Const ) - ( FirstVNF_Mem - ARS ) ) * ( ( ( ( MRS - MDR ) + ( CRS - ACS ) ) * FirstVNF_Mem_Server ) / Max( RRS,FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( Min( MLU ,( ( RRSe + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MRS - MDR ) + ( CRS - ACS ) )", "choosing": "( ( ( MLU + RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( Min( Max( BR,RRS ) ,( ACS / CRS ) ),( ( ( ( Min( FirstVNF_RAM ,CRS ) + ( FirstVNF_RAM_Server * FirstVNF_CPU ) ) * ( Max( CRS,FirstVNF_RAM ) + Max( BR,MRS ) ) ) * CRS ) + ( RRS + MRS ) ) ) - ( ( Max( FirstVNF_Mem_Server,Const ) + ( RRS * AMS ) ) / ( Min( FirstVNF_CPU_Server ,FirstVNF_Mem ) * ( FirstVNF_CPU / RRS ) ) ) )", "choosing": "( ( ( MLU / MUR ) - MUM ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) ) + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.25077229912723736}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( MUM * MLU ) )", "obj1": 0.6693069306930693, "obj2": 0.22669509751281153}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( ( MUR / ( ( CS + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.693069306930693, "obj2": 0.21265046882758182}, {"determining": "Min( ( Min( Max( PN,MDR ) ,( FirstVNF_RAM - BR ) ) - ( FirstVNF_CPU + RRS ) ) ,( ( Max( MDR,MDR ) / ( CRS / AMS ) ) * Min( ( FirstVNF_CPU_Server - FirstVNF_Mem_Server ) ,Min( MDR ,MRS ) ) ) )", "choosing": "( ( CS * Max( Max( RMSe,RMSe ),( MUR * CS ) ) ) / Max( ( ( MUM - MUM ) - CS ),( Min( RMSe ,CS ) - ( ( RRSe - RCSe ) * RCSe ) ) ) )", "obj1": 0.9603960396039604, "obj2": 0.03174556823235965}, {"determining": "( Max( ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ),MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS - Min( ( MLU * DS ) ,RCSe ) ) - ( MUM * MLU ) )", "obj1": 0.6376237623762376, "obj2": 0.25638391757197015}, {"determining": "( ( PN / Const ) - ( FirstVNF_Mem_Server + MRS ) )", "choosing": "( ( MUC - MLU ) - ( RCSe - MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ( Max( FirstVNF_RAM,FirstVNF_Mem ) - ( FirstVNF_Mem + Const ) ) ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) )", "choosing": "( RMSe / ( MUR + DS ) )", "obj1": 0.803960396039604, "obj2": 0.1209098892474556}, {"determining": "( ( PN / FirstVNF_RAM_Server ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * ( ( ( ( MRS - MDR ) + ( CRS - ACS ) ) * FirstVNF_Mem_Server ) / Max( RRS,FirstVNF_CPU_Server ) ) ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / RMSe ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.8851485148514852, "obj2": 0.06316707536179532}, {"determining": "( DDR * ( ( ( PN / Const ) + ( FirstVNF_RAM + MRS ) ) * ( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( CS,MUM ) ) * ( ( MUR / ( ( MUC - MLU ) - ( RCSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.6594059405940594, "obj2": 0.24190418564635288}, {"determining": "( DDR * Max( ( FirstVNF_CPU / MRS ),( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( ( MUR / ( ( MUC + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.693069306930693, "obj2": 0.21265046882758182}, {"determining": "( ( PN / MRS ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RRSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( Max( PN,Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUR * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / DDR )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),Max( RMSe,MUR ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6316831683168317, "obj2": 0.2583430388299131}, {"determining": "( DDR * Max( MDR,( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( ( MUR / ( Max( ( ( MUM - MUM ) - CS ),RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.7069306930693069, "obj2": 0.2091222830447396}, {"determining": "( ( MRS - MDR ) + AMS )", "choosing": "( ( Max( RMSe,MUR ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 0.699009900990099, "obj2": 0.20947099435672825}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + Const ) + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) * ( Max( ( Max( RMSe,MUR ) * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.25077229912723736}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Max( RMSe,MUR ) )", "obj1": 0.7188118811881188, "obj2": 0.19680190546340434}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( MUM + RRSe ) + Max( RMSe,MUR ) )", "obj1": 0.6633663366336634, "obj2": 0.2356560059388092}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8118811881188119, "obj2": 0.09327651572735687}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * Max( PN,Max( MRS,Const ) ) ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) / ( CS - Max( MLU,CS ) ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6217821782178218, "obj2": 0.26784001729707424}, {"determining": "( Max( PN,Max( FirstVNF_RAM,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUR,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( PN / ACS ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUR - Min( ( MLU * DS ) ,RCSe ) ) - ( MUM * MLU ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9623762376237623, "obj2": 0.01647941884666549}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 0.7465346534653465, "obj2": 0.14797886433148785}], "4": [{"determining": "( Min( DDR ,FirstVNF_Mem_Server ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( DS,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( Min( ARS ,FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) )", "choosing": "( Max( MLU,MUR ) / ( MUR - MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MDR ,RRS ) / Min( PN ,DDR ) ) - ( ( FirstVNF_Mem - BR ) + ( FirstVNF_CPU_Server - AMS ) ) )", "choosing": "Min( ( DS * MLU ) ,( ( MUC + MUC ) + ( DS - RCSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / Max( DS,RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( ( Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) * ( MDR / RRS ) ) - Max( ( CRS + Const ),( ACS + BR ) ) ) - ( Max( ( ACS / FirstVNF_Mem_Server ),( FirstVNF_CPU_Server / FirstVNF_CPU ) ) - ( Max( DDR,FirstVNF_RAM ) * ( FirstVNF_RAM / ACS ) ) ) )", "choosing": "( Max( RRSe,( RCSe + ( DS - MLU ) ) ) + ( ( Max( DS,DS ) - CS ) - Max( CS,( MLU + DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( Const - BR ) - Max( RRS,DDR ) ) - Min( ( ACS / FirstVNF_RAM ) ,( FirstVNF_CPU_Server * ACS ) ) ) * ( ( ( RRS + FirstVNF_CPU ) / Max( ACS,MRS ) ) + Max( ( RRS / ACS ),( FirstVNF_CPU_Server - PN ) ) ) )", "choosing": "( ( MLU - ( MUM / CS ) ) * ( RCSe - RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) )", "choosing": "( Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) / ( CS * ( CS * MUC ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) ) + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.25077229912723736}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( MUM * MLU ) )", "obj1": 0.6693069306930693, "obj2": 0.22669509751281153}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( ( MUR / ( ( CS + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.693069306930693, "obj2": 0.21265046882758182}, {"determining": "( Max( ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ),MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS - Min( ( MLU * DS ) ,RCSe ) ) - ( MUM * MLU ) )", "obj1": 0.6376237623762376, "obj2": 0.25638391757197015}, {"determining": "( ( PN / Const ) - ( FirstVNF_Mem_Server + MRS ) )", "choosing": "( ( MUC - MLU ) - ( RCSe - MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( PN / FirstVNF_RAM_Server ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( DDR * Max( ( FirstVNF_CPU / MRS ),( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( ( MUR / ( ( MUC + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.693069306930693, "obj2": 0.21265046882758182}, {"determining": "( ( PN / MRS ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RRSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( Max( PN,Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUR * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / DDR )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),Max( RMSe,MUR ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6316831683168317, "obj2": 0.2583430388299131}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + Const ) + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) * ( Max( ( Max( RMSe,MUR ) * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.25077229912723736}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * Max( PN,Max( MRS,Const ) ) ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) / ( CS - Max( MLU,CS ) ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6217821782178218, "obj2": 0.26784001729707424}, {"determining": "( Max( PN,Max( FirstVNF_RAM,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUR,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( PN / ACS ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUR - Min( ( MLU * DS ) ,RCSe ) ) - ( MUM * MLU ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9623762376237623, "obj2": 0.01647941884666549}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( MUM * MLU ) )", "obj1": 0.6693069306930693, "obj2": 0.22669509751281153}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( ( Max( RMSe,MUR ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 0.9643564356435643, "obj2": 0.013479270436767318}, {"determining": "( DDR * Max( ( ( PN / Const ) - ( FirstVNF_RAM + MRS ) ),ACS ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * ( MUR + Min( RRSe ,MUC ) ) )", "obj1": 0.6871287128712872, "obj2": 0.21418491769366227}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.6633663366336634, "obj2": 0.2341398070294286}, {"determining": "( DDR * ( ( ( PN / Const ) - ( FirstVNF_RAM + MRS ) ) * ( AMS - Const ) ) )", "choosing": "( ( ( DS + MUR ) * Max( CS,MUM ) ) * ( ( MUR / ( ( MUC - MUR ) - Min( RCSe ,MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( ( ( ( PN / Const ) - ( FirstVNF_RAM + MRS ) ) * ( FirstVNF_RAM_Server + ACS ) ) - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( ( MUR / ( ( MUC - MLU ) - Min( RCSe ,MUR ) ) ) / MUM ) ) )", "obj1": 0.994059405940594, "obj2": 0.0018048738218099773}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( Max( MUR,MUR ) / MUM ) ) )", "obj1": 0.7168316831683168, "obj2": 0.1458407833834047}, {"determining": "( DDR * ( ( ( PN / Const ) - ( FirstVNF_RAM + MRS ) ) * ( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( CS,MUM ) ) * ( ( MUR / ( ( MUC - MLU ) - Min( RCSe ,MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + FirstVNF_Mem_Server ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) / CS ),RMSe ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * ( ( ( ( MRS - MDR ) + ( CRS - ACS ) ) * ( ( Max( RRS,MRS ) + Const ) + ARS ) ) / Max( RRS,FirstVNF_CPU_Server ) ) ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / RMSe ) ) * ( Max( ( RRSe * Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.9445544554455445, "obj2": 0.026212518178854394}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + FirstVNF_CPU_Server ) * ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) * ( ( ( Max( RMSe,MUR ) * MUC ) + Max( CS,RMSe ) ) / Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6396039603960396, "obj2": 0.2510929289423437}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9623762376237623, "obj2": 0.01647941884666549}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8633663366336634, "obj2": 0.056547428620124074}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( ( ( MRS - MDR ) + ( AMS - Const ) ) / ( Const - ACS ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) )", "obj1": 0.699009900990099, "obj2": 0.20279103982002022}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Max( RMSe,MUR ) )", "obj1": 0.803960396039604, "obj2": 0.0864997277278223}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( PN / FirstVNF_Mem ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe / RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9603960396039604, "obj2": 0.01710464101167053}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.9663366336633663, "obj2": 0.012349209415154112}, {"determining": "( Min( MRS ,MDR ) + ( FirstVNF_RAM - Const ) )", "choosing": "( ( Max( MLU,RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 0.7742574257425743, "obj2": 0.1218738521738646}, {"determining": "( DDR * ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) )", "choosing": "( ( ( MUR + MUR ) * Max( CS,MUM ) ) * ( ( MUR / ( ( MUC - MLU ) - ( RCSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.8455445544554455, "obj2": 0.08401602778566215}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / ( Const - ( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) ) ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.7069306930693069, "obj2": 0.1991477131737491}, {"determining": "( ( MRS - MDR ) + ( Const - Const ) )", "choosing": "( Min( MLU ,( ( ( RCSe - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.801980198019802, "obj2": 0.09516358076487956}], "5": [{"determining": "( Min( DDR ,FirstVNF_Mem_Server ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( DS,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( PN / Const ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUC - MLU ) - Min( RCSe ,MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / Max( DS,RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( PN / Const ) - ( FirstVNF_Mem_Server + MRS ) )", "choosing": "( ( MUC - MLU ) - ( RCSe - MUR ) )", "obj1": 0.998019801980198, "obj2": 0.0005848110533002987}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * Max( PN,Max( MRS,Const ) ) ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) / ( CS - Max( MLU,CS ) ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6217821782178218, "obj2": 0.26784001729707424}, {"determining": "( Max( PN,Max( FirstVNF_RAM,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUR,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9623762376237623, "obj2": 0.01647941884666549}, {"determining": "( ( ( ( ( PN / Const ) - ( FirstVNF_RAM + MRS ) ) * ( FirstVNF_RAM_Server + ACS ) ) - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( MLU / MUR ) - RRSe ) * ( CS + ( ( MUR / ( ( MUC - MLU ) - Min( RCSe ,MUR ) ) ) / MUM ) ) )", "obj1": 0.994059405940594, "obj2": 0.0018048738218099773}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * ( ( ( ( MRS - MDR ) + ( CRS - ACS ) ) * ( ( Max( RRS,MRS ) + Const ) + ARS ) ) / Max( RRS,FirstVNF_CPU_Server ) ) ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / RMSe ) ) * ( Max( ( RRSe * Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.9445544554455445, "obj2": 0.026212518178854394}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + FirstVNF_CPU_Server ) * ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) * ( ( ( Max( RMSe,MUR ) * MUC ) + Max( CS,RMSe ) ) / Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6396039603960396, "obj2": 0.2510929289423437}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9623762376237623, "obj2": 0.01647941884666549}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8633663366336634, "obj2": 0.056547428620124074}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( ( ( MRS - MDR ) + ( AMS - Const ) ) / ( Const - ACS ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) )", "obj1": 0.699009900990099, "obj2": 0.20279103982002022}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Max( RMSe,MUR ) )", "obj1": 0.803960396039604, "obj2": 0.0864997277278223}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9603960396039604, "obj2": 0.01710464101167053}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.9663366336633663, "obj2": 0.012349209415154112}, {"determining": "( Min( MRS ,MDR ) + ( FirstVNF_RAM - Const ) )", "choosing": "( ( Max( MLU,RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 0.7742574257425743, "obj2": 0.1218738521738646}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / ( Const - ( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) ) ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.7069306930693069, "obj2": 0.1991477131737491}, {"determining": "( ( MRS - MDR ) + ( Const - Const ) )", "choosing": "( Min( MLU ,( ( ( RCSe - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.801980198019802, "obj2": 0.09516358076487956}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - MDR ) )", "choosing": "( ( CS * RCSe ) - ( ( CS - CS ) * MLU ) )", "obj1": 0.6613861386138614, "obj2": 0.2137837556262034}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.9623762376237623, "obj2": 0.01647941884666549}, {"determining": "( Max( PN,( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( ( ( ( PN / Const ) - ( FirstVNF_RAM + MRS ) ) * ( FirstVNF_RAM_Server + ACS ) ) - MDR ) + ( AMS - Const ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.9920792079207921, "obj2": 0.002339244213201195}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / MDR ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,CS ) * ( RRSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.7049504950495049, "obj2": 0.2024971811184697}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.9643564356435643, "obj2": 0.013152374582804284}, {"determining": "( DDR * Max( ( FirstVNF_CPU - ( Const - ACS ) ),( ( Min( DDR ,AMS ) / ( Const - ( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) ) ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( ( CS - CS ) + MLU ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.691089108910891, "obj2": 0.20990476436498495}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / ( Const - ( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) ) ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) )", "obj1": 0.699009900990099, "obj2": 0.20279103982002022}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( ( ( MRS - MDR ) + ( AMS - Const ) ) / ( Const - ACS ) ) + ACS ) ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.7069306930693069, "obj2": 0.1991477131737491}, {"determining": "( ( AMS - FirstVNF_CPU ) - ( FirstVNF_RAM + MRS ) )", "choosing": "( ( MUR * Min( ( MUR / CS ) ,( Min( RMSe ,Max( MUR,MUR ) ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.9425742574257425, "obj2": 0.0273799896946107}, {"determining": "( ( Max( PN,Const ) - ( FirstVNF_RAM + MRS ) ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( ( MUR * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) ) )", "obj1": 0.9267326732673268, "obj2": 0.037435531539882695}, {"determining": "( Max( ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,FirstVNF_RAM ) ),MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS - Min( ( MLU * DS ) ,RCSe ) ) - DS )", "obj1": 0.601980198019802, "obj2": 0.2798404650489618}, {"determining": "( FirstVNF_CPU * ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) )", "choosing": "( ( ( CS + MUR ) * Max( CS,MUM ) ) * ( ( MUR / ( ( MUC - MLU ) - ( RCSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.8455445544554455, "obj2": 0.07008738917476272}, {"determining": "( DDR * ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.8178217821782178, "obj2": 0.08126085204464387}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( ( CS * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) )", "obj1": 0.9683168316831683, "obj2": 0.011613740039310816}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / RMSe ) ) * ( Max( ( RRSe * Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.7564356435643564, "obj2": 0.12311850315598268}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.24036373130904493}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( DDR * Max( FirstVNF_Mem_Server,( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) * ( ( MUR / ( ( CS + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.6336633663366337, "obj2": 0.2537255718593046}, {"determining": "( ( MRS - ( FirstVNF_RAM + MRS ) ) + ( AMS - Const ) )", "choosing": "( ( RMSe + MUM ) * Max( RMSe,MUR ) )", "obj1": 0.9227722772277228, "obj2": 0.046878952471740946}, {"determining": "( ( Min( ARS ,FirstVNF_RAM_Server ) - Max( MRS,Const ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) )", "choosing": "( Max( ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ),MUR ) / ( MUR - MUR ) )", "obj1": 0.9881188118811881, "obj2": 0.004915115026691798}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7128712871287128, "obj2": 0.14123790921869614}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8633663366336634, "obj2": 0.056547428620124074}, {"determining": "( ( MRS - MDR ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( ( CS * RCSe ) - ( MUM * MLU ) )", "obj1": 0.9584158415841584, "obj2": 0.01814489279704505}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe / RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.6297029702970297, "obj2": 0.2571754264344248}], "6": [{"determining": "( Min( DDR ,FirstVNF_Mem_Server ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( DS,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / Max( DS,RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( Max( PN,Max( FirstVNF_RAM,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUR,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8633663366336634, "obj2": 0.056547428620124074}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Max( RMSe,MUR ) )", "obj1": 0.803960396039604, "obj2": 0.0864997277278223}, {"determining": "( Min( MRS ,MDR ) + ( FirstVNF_RAM - Const ) )", "choosing": "( ( Max( MLU,RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 0.7742574257425743, "obj2": 0.1218738521738646}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - MDR ) )", "choosing": "( ( CS * RCSe ) - ( ( CS - CS ) * MLU ) )", "obj1": 0.6613861386138614, "obj2": 0.2137837556262034}, {"determining": "( Max( PN,( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( Max( ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,FirstVNF_RAM ) ),MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS - Min( ( MLU * DS ) ,RCSe ) ) - DS )", "obj1": 0.601980198019802, "obj2": 0.2798404650489618}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / RMSe ) ) * ( Max( ( RRSe * Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( CS * RCSe ) - ( MUM * MLU ) ) ) ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.7564356435643564, "obj2": 0.12311850315598268}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.24036373130904493}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( DDR * Max( FirstVNF_Mem_Server,( FirstVNF_RAM_Server + ACS ) ) )", "choosing": "( ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) * ( ( MUR / ( ( CS + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.6336633663366337, "obj2": 0.2537255718593046}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7128712871287128, "obj2": 0.14123790921869614}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8633663366336634, "obj2": 0.056547428620124074}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe / RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.6297029702970297, "obj2": 0.2571754264344248}, {"determining": "( Max( ( MRS - MDR ),Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - ( ( CS - CS ) + MLU ) ) ),( ( RCSe + MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6257425742574257, "obj2": 0.26245284246958883}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "Min( Min( AMS ,ACS ) ,( Max( ( AMS - Const ),FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( Min( ( MLU / RRSe ) ,( Min( CS ,DS ) - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6138613861386139, "obj2": 0.27078597415836675}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / ( Const - ( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) ) ) ) + ACS ) ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.6376237623762376, "obj2": 0.2505971408592437}, {"determining": "( Max( PN,( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( MLU + RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) * ( RMSe * MLU ) ) )", "obj1": 0.7742574257425743, "obj2": 0.1218738521738646}, {"determining": "Min( ( AMS / ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( CS,RMSe ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.9485148514851485, "obj2": 0.021169299883466303}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.8138613861386138, "obj2": 0.07733538658909325}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7267326732673267, "obj2": 0.1406586711677396}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6178217821782178, "obj2": 0.2652718482868564}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6871287128712872, "obj2": 0.16856857967111896}, {"determining": "( Max( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ),MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( RCSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.8376237623762376, "obj2": 0.07532283778317221}, {"determining": "( ( Max( PN,Const ) - ( FirstVNF_RAM + MRS ) ) + ( AMS - FirstVNF_CPU ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + ( CS + ( Max( MUR,MUR ) / MUM ) ) ) * RMSe ) ) * ( ( MUR * Min( ( MUR / CS ) ,( Min( RMSe ,MUM ) + MUR ) ) ) / Max( ( ( MUM - MUM ) - CS ),RMSe ) ) )", "obj1": 0.9267326732673268, "obj2": 0.036688488349076336}, {"determining": "( FirstVNF_CPU * ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) )", "choosing": "( Max( ( ( MLU / RRSe ) / ( CS - Max( MLU,CS ) ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.8554455445544554, "obj2": 0.06478430494867687}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( DDR - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),( CS + RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7128712871287128, "obj2": 0.14123790921869614}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / RMSe ) ) * ( Max( ( RRSe * Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( ( ( CS - CS ) + MLU ) - ( MUM * MLU ) ) ) ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.8455445544554455, "obj2": 0.06496586425735128}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8356435643564356, "obj2": 0.07663873435763636}, {"determining": "Min( Min( AMS ,ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.2651749553597666}, {"determining": "( FirstVNF_CPU * ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) )", "obj1": 0.8950495049504951, "obj2": 0.04352659735561295}, {"determining": "( ( ( ( ( ( PN / Const ) - ( FirstVNF_RAM + MRS ) ) * ( FirstVNF_RAM_Server + ACS ) ) - MDR ) + ( AMS - Const ) ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( ( Min( RMSe ,MUM ) + MUR ) ,DS ) ) )", "obj1": 0.9089108910891089, "obj2": 0.04322282649279427}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8633663366336634, "obj2": 0.056547428620124074}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Max( RMSe,MUR ) )", "obj1": 0.7940594059405941, "obj2": 0.09069880512810967}, {"determining": "( ( ( FirstVNF_CPU * ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) ) - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + ( MUR / ( ( MUC - MLU ) - ( RCSe * MUR ) ) ) ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7762376237623763, "obj2": 0.09866814632346677}, {"determining": "( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ( AMS - Const ) )", "choosing": "( ( ( MLU + RCSe ) + ( MLU / MLU ) ) + ( RRSe * MUC ) )", "obj1": 0.9405940594059405, "obj2": 0.02398000925988917}, {"determining": "( ( MRS / MDR ) + ( AMS - Const ) )", "choosing": "( ( ( MLU + RCSe ) + ( MLU / MLU ) ) + ( ( CS - CS ) / ( RMSe * MLU ) ) )", "obj1": 0.7584158415841584, "obj2": 0.12302441577804513}], "7": [{"determining": "( Min( DDR ,FirstVNF_Mem_Server ) / ( Const - ACS ) )", "choosing": "( ( MUM + RRSe ) + Max( DS,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,MUM ) ) * Max( RMSe,MUR ) )", "obj1": 0.803960396039604, "obj2": 0.0864997277278223}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - MDR ) )", "choosing": "( ( CS * RCSe ) - ( ( CS - CS ) * MLU ) )", "obj1": 0.6613861386138614, "obj2": 0.2137837556262034}, {"determining": "( Max( ( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,FirstVNF_RAM ) ),MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS - Min( ( MLU * DS ) ,RCSe ) ) - DS )", "obj1": 0.601980198019802, "obj2": 0.2798404650489618}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.24036373130904493}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7128712871287128, "obj2": 0.14123790921869614}, {"determining": "( ( FirstVNF_Mem_Server * Max( ACS,FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe / RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.6297029702970297, "obj2": 0.2571754264344248}, {"determining": "( Max( ( MRS - MDR ),Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - ( ( CS - CS ) + MLU ) ) ),( ( RCSe + MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6257425742574257, "obj2": 0.26245284246958883}, {"determining": "Min( Min( AMS ,ACS ) ,( Max( ( AMS - Const ),FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( Min( ( MLU / RRSe ) ,( Min( CS ,DS ) - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6138613861386139, "obj2": 0.27078597415836675}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / ( Const - ( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) ) ) ) + ACS ) ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.6376237623762376, "obj2": 0.2505971408592437}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.8138613861386138, "obj2": 0.07733538658909325}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6178217821782178, "obj2": 0.2652718482868564}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6871287128712872, "obj2": 0.16856857967111896}, {"determining": "( Max( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ),MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( RCSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.8376237623762376, "obj2": 0.07532283778317221}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( DDR - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),( CS + RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7128712871287128, "obj2": 0.14123790921869614}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Min( MLU ,( ( ( CS - CS ) + MLU ) * RMSe ) ) * ( CS + Min( CS ,DS ) ) )", "obj1": 0.8356435643564356, "obj2": 0.07663873435763636}, {"determining": "( DDR * Max( ( FirstVNF_CPU - MRS ),( ( Min( DDR ,AMS ) / ( Const - ( ( ( FirstVNF_Mem - ACS ) * FirstVNF_RAM ) - Min( ARS ,CRS ) ) ) ) + ACS ) ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.6376237623762376, "obj2": 0.2505971408592437}, {"determining": "( Max( ( MRS - MDR ),Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe / RMSe ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.6435643564356436, "obj2": 0.24721401563054574}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( CS * RCSe ) - ( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.24036373130904493}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( Min( CS ,DS ) - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.7900990099009901, "obj2": 0.09042847569439953}, {"determining": "Min( ( ( MRS - MDR ) + ( AMS - Const ) ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,( ( ( DS + MUR ) * Max( DS,MUM ) ) * Max( RMSe,MUR ) ) ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.7386138613861386, "obj2": 0.12390582270027008}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6178217821782178, "obj2": 0.2652718482868564}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) * ( ( MUR / ( ( CS + RMSe ) / ( RRSe * MUR ) ) ) + Min( RRSe ,MUC ) ) )", "obj1": 0.7306930693069307, "obj2": 0.12752711343479453}, {"determining": "Min( Min( AMS ,ACS ) ,( ( ( AMS - Const ) * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( Min( CS ,DS ) - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.594059405940594, "obj2": 0.28800894539281563}, {"determining": "( ( ( FirstVNF_CPU * ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) ) - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + ( MUR / ( ( MUC - MLU ) - ( RCSe * MUR ) ) ) ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7544554455445545, "obj2": 0.11291173079838601}, {"determining": "( Max( PN,( Max( PN,Max( MRS,Const ) ) / ( ( ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( RCSe - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6138613861386139, "obj2": 0.27078597415836675}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,Min( FirstVNF_CPU_Server ,ARS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6396039603960396, "obj2": 0.2502244850315284}, {"determining": "Min( Min( AMS ,Max( MRS,Const ) ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( RRSe,Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6316831683168317, "obj2": 0.2530387130423512}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6178217821782178, "obj2": 0.2652718482868564}, {"determining": "Min( Min( AMS ,ACS ) ,( ( ( AMS - Const ) * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( Min( CS ,DS ) - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6138613861386139, "obj2": 0.27078597415836675}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( DS + MUR ) * Max( DS,Max( ( Max( RRSe,MLU ) * ( RRSe - MUR ) ),MUR ) ) ) * Max( RMSe,MUR ) )", "obj1": 0.8376237623762376, "obj2": 0.07532283778317221}, {"determining": "Min( Min( AMS ,ACS ) ,( Max( ( AMS - Const ),FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( Min( ( MLU / RRSe ) ,( Min( CS ,DS ) - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6138613861386139, "obj2": 0.27078597415836675}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7247524752475247, "obj2": 0.1372741484670841}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7128712871287128, "obj2": 0.14123790921869614}, {"determining": "( Max( RRS,MRS ) + ( FirstVNF_CPU - BR ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "Min( ( AMS / ACS ) ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Min( CS ,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6178217821782178, "obj2": 0.2652718482868564}, {"determining": "Min( Min( AMS ,ACS ) ,( Max( ( AMS - Const ),FirstVNF_Mem_Server ) + Max( Const,( AMS - RRS ) ) ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( FirstVNF_Mem_Server * ( ACS * FirstVNF_CPU ) ) / ( ( Max( RRS,MRS ) + ( FirstVNF_CPU - ( ( ( ARS / FirstVNF_RAM_Server ) - ( FirstVNF_CPU * ACS ) ) - Max( ( DDR + MDR ),( PN * CRS ) ) ) ) ) + ARS ) )", "choosing": "( Max( Min( ( MLU / RRSe ) ,( Min( CS ,DS ) - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6138613861386139, "obj2": 0.27078597415836675}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + ( MUR / ( ( MUC - MLU ) - ( RCSe * MUR ) ) ) ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7702970297029703, "obj2": 0.0977114293015046}, {"determining": "( ( FirstVNF_Mem_Server * ( ( Max( PN,Max( FirstVNF_RAM,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) ) * FirstVNF_CPU ) ) / ( Const + ARS ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUR,CS ) ,Min( MLU ,DS ) ) ) ) ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6237623762376238, "obj2": 0.263666749036313}, {"determining": "( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( ( ( ( Min( DDR ,AMS ) / ( Const - ACS ) ) + ACS ) - MDR ) + ( AMS - Const ) ) )", "choosing": "( Max( ( ( MLU / RRSe ) * ( CS - DS ) ),( Min( RCSe ,MUC ) / RMSe ) ) * ( Max( ( RRSe * Max( ( ( CS - CS ) * ( CS - DS ) ),( ( ( CS - CS ) + MLU ) - ( MUM * MLU ) ) ) ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.8415841584158416, "obj2": 0.0670306498859417}, {"determining": "( ( MRS - MDR ) + ( AMS - Const ) )", "choosing": "( ( ( ( ( RCSe / RRSe ) / ( DS + MUC ) ) + ( Max( MUM,RMSe ) + ( RMSe - CS ) ) ) + ( Min( Max( RMSe,MLU ) ,( RMSe + MUM ) ) - ( Max( MLU,CS ) + Max( MUM,MUM ) ) ) ) * Max( ( RCSe + MLU ),Max( RRSe,DS ) ) )", "obj1": 0.7128712871287128, "obj2": 0.14123790921869614}, {"determining": "( Max( RRS,MRS ) + ( Max( PN,Max( MRS,Const ) ) - BR ) )", "choosing": "( MUC * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6277227722772277, "obj2": 0.2596004507361749}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}, {"determining": "( ( FirstVNF_CPU - BR ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( Max( ( ( CS * RCSe ) - ( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) ) ),( Min( RCSe ,MUC ) / ( DS / RCSe ) ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6158415841584158, "obj2": 0.2659625851685434}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( CS * RCSe ) - ( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) ) )", "obj1": 0.6475247524752475, "obj2": 0.24036373130904493}, {"determining": "( Max( PN,Max( MRS,Const ) ) / ( ( FirstVNF_RAM_Server / BR ) - Min( FirstVNF_CPU_Server ,ARS ) ) )", "choosing": "( ( Max( MLU,MUR ) / ( MUR - DS ) ) * ( Max( ( RRSe * MUC ),Max( CS,RMSe ) ) - Min( Max( MUC,CS ) ,Min( MLU ,DS ) ) ) )", "obj1": 0.6514851485148515, "obj2": 0.2364638084439255}]}