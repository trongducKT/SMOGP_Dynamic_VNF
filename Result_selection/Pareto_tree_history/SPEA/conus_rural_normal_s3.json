{"1": [{"determining": "( Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) + Min( AMS ,MRS ) )", "choosing": "( ( DS / MUR ) + ( RRSe + RRSe ) )", "obj1": 0.5101626016260162, "obj2": 0.39529282923847153}, {"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ARS + FirstVNF_RAM ),( FirstVNF_Mem_Server + MRS ) )", "choosing": "( ( DS - CS ) / ( RMSe * DS ) )", "obj1": 0.5813008130081301, "obj2": 0.2866068734950799}, {"determining": "Max( Min( CRS ,FirstVNF_RAM ),( FirstVNF_CPU_Server - ARS ) )", "choosing": "( Max( MUR,DS ) * ( MUC + MLU ) )", "obj1": 0.4186991869918699, "obj2": 0.484295213912855}, {"determining": "( ( FirstVNF_Mem / MDR ) / ( FirstVNF_CPU - PN ) )", "choosing": "Max( ( MUR / CS ),( RMSe * RRSe ) )", "obj1": 0.43089430894308944, "obj2": 0.4456701916206391}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Min( ( DS - RRSe ) ,( MUM + CS ) )", "obj1": 0.3617886178861789, "obj2": 0.5369407714922647}, {"determining": "( ( RRS * FirstVNF_CPU ) - Max( FirstVNF_CPU,BR ) )", "choosing": "( Max( MUC,MUM ) * Min( DS ,MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR + FirstVNF_CPU_Server ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) )", "choosing": "( ( RCSe * MUR ) + Max( MUR,CS ) )", "obj1": 0.39634146341463417, "obj2": 0.5117062318345171}, {"determining": "( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - ( ACS - PN ) )", "choosing": "( Max( MUC,MLU ) + ( RRSe * DS ) )", "obj1": 0.5691056910569106, "obj2": 0.32283548586442906}, {"determining": "Min( Max( RRS,ARS ) ,( MRS + FirstVNF_CPU ) )", "choosing": "Min( ( MUC / MLU ) ,( RMSe - MUM ) )", "obj1": 0.3719512195121951, "obj2": 0.5326845113151849}, {"determining": "( Max( FirstVNF_CPU_Server,FirstVNF_Mem_Server ) - ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( RMSe / MLU ) + ( RMSe * RMSe ) )", "obj1": 0.7439024390243902, "obj2": 0.2234295218686627}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Min( Max( ( BR - BR ),Max( FirstVNF_RAM,DDR ) ) ,( ( ACS * DDR ) - Max( FirstVNF_RAM_Server,AMS ) ) )", "choosing": "( Max( MUR,RRSe ) / Min( MUR ,( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Const - ARS ) * Max( FirstVNF_CPU_Server,CRS ) ) + ( Min( FirstVNF_Mem_Server ,BR ) + Min( FirstVNF_RAM_Server ,DDR ) ) )", "choosing": "( Max( ( MUC / RRSe ),( MUR + MLU ) ) / Max( Min( CS ,RCSe ),( DS - MUM ) ) )", "obj1": 0.5487804878048781, "obj2": 0.357855903442181}, {"determining": "( ( ( MRS * AMS ) - ACS ) / Min( FirstVNF_Mem ,FirstVNF_CPU ) )", "choosing": "( ( Min( MUM ,CS ) - ( MUR - CS ) ) + ( ( MUM + MLU ) * ( MLU - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MRS ,MDR ) - Min( PN ,Const ) ) - ( ( AMS / FirstVNF_Mem_Server ) * ( CRS + ACS ) ) )", "choosing": "( ( Min( MUR ,DS ) * ( DS / MUR ) ) / Min( ( MUM * MUC ) ,Min( MUC ,RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_RAM / FirstVNF_RAM ) * ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( RRS * Const ),Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) ) )", "choosing": "( ( ( RCSe / RCSe ) / ( CS + DS ) ) + Max( ( RRSe + MUR ),( RRSe / MUM ) ) )", "obj1": 0.32723577235772355, "obj2": 0.5374174424998421}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + FirstVNF_Mem_Server ) * PN ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) / ( ( RMSe * DS ) * ( RCSe / MUR ) ) )", "obj1": 0.5264227642276422, "obj2": 0.3799193852969386}, {"determining": "Max( ( FirstVNF_Mem - FirstVNF_Mem ),( RRS * FirstVNF_CPU_Server ) )", "choosing": "Max( ( CS * ( MUR * RMSe ) ),Max( MUR,( DS * CS ) ) )", "obj1": 0.40447154471544716, "obj2": 0.4923713033864249}, {"determining": "( Min( ( MDR / FirstVNF_CPU_Server ) ,Min( CRS ,FirstVNF_CPU ) ) + ( MRS / DDR ) )", "choosing": "( Max( ( MUR / MUR ),( DS / CS ) ) / ( Max( MUM,RRSe ) / Max( MLU,RMSe ) ) )", "obj1": 0.2621951219512195, "obj2": 0.6143039367522206}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( Max( RMSe,MUC ) + ( ( MUC / RMSe ) / ( MUR + MLU ) ) )", "obj1": 0.24796747967479674, "obj2": 0.624493649153538}, {"determining": "Min( ( Min( ACS ,MRS ) - ( DDR + FirstVNF_CPU ) ) ,( Min( CRS ,ARS ) * ( CRS * MDR ) ) )", "choosing": "( Max( DS,RRSe ) * ( RCSe * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ) * Max( AMS,ACS ) )", "choosing": "Min( Min( DS ,Max( RCSe,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.5589430894308943, "obj2": 0.3321613087879878}, {"determining": "( ( ( ( CRS + CRS ) - ( AMS / FirstVNF_RAM_Server ) ) - ( ( PN + FirstVNF_CPU_Server ) + ( MDR / PN ) ) ) + ( ( ( PN - ACS ) - ( FirstVNF_CPU_Server + MDR ) ) - ( ( ACS * FirstVNF_RAM_Server ) * ( FirstVNF_CPU + FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Max( ( MUR * MUC ),( RMSe / RMSe ) ) - ( Max( MLU,RCSe ) - ( CS - MUM ) ) ) ,( ( ( DS / DS ) + ( RCSe + RRSe ) ) / ( Min( CS ,RMSe ) - Min( RMSe ,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( AMS * FirstVNF_CPU ) / ( MRS + ARS ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( FirstVNF_RAM,PN ) ) ) )", "choosing": "( ( ( Min( CS ,MUC ) / Max( DS,MUM ) ) / Max( ( MLU + CS ),( MLU * RRSe ) ) ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.9898373983739838, "obj2": 0.004868402464346816}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) * Max( RRSe,MUR ) ) ) )", "obj1": 0.21138211382113822, "obj2": 0.6473212053744019}, {"determining": "( ( ( Min( ARS ,PN ) * ( Const / DDR ) ) * ( Max( FirstVNF_CPU_Server,FirstVNF_RAM ) / Max( AMS,Const ) ) ) * Max( Min( Min( RRS ,AMS ) ,Min( MRS ,FirstVNF_RAM ) ),( ( CRS + FirstVNF_Mem ) / Min( FirstVNF_RAM ,FirstVNF_Mem ) ) ) )", "choosing": "( ( ( ( RCSe / MUR ) / ( MUC / DS ) ) - Max( ( RRSe * CS ),( RRSe + CS ) ) ) / ( ( ( MUC * MUM ) / ( RCSe / MLU ) ) * ( ( MUC - DS ) - ( DS / DS ) ) ) )", "obj1": 0.18495934959349594, "obj2": 0.7022313767508018}, {"determining": "( ( ( ( FirstVNF_CPU_Server + FirstVNF_RAM ) * ( BR - DDR ) ) / Min( ( FirstVNF_CPU - CRS ) ,( FirstVNF_CPU_Server - Const ) ) ) * Max( ( ( FirstVNF_CPU * AMS ) - ( Const + ARS ) ),Max( ( FirstVNF_CPU / CRS ),( RRS * PN ) ) ) )", "choosing": "Max( Min( DS ,( MUR + ( CS / MUR ) ) ),( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( MRS + BR ) * ( RRS - FirstVNF_Mem ) ) / ( ( RRS * FirstVNF_Mem_Server ) + ( PN + FirstVNF_CPU_Server ) ) ) - ( ( Max( RRS,ARS ) - Min( ACS ,FirstVNF_Mem ) ) + ( ( FirstVNF_RAM / MDR ) / Max( AMS,RRS ) ) ) )", "choosing": "( ( ( ( DS + RRSe ) - ( MUR * MUR ) ) * ( Min( RCSe ,MUC ) - Max( RCSe,RMSe ) ) ) - Min( Max( ( MLU * RCSe ),( MUR + MUR ) ) ,( Max( RRSe,RCSe ) + ( MUM * RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - CRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2703252032520325, "obj2": 0.5495532951216376}, {"determining": "Max( ( ( Max( RRS,AMS ) * ( MDR - DDR ) ) + Min( Min( Const ,FirstVNF_Mem_Server ) ,( BR - RRS ) ) ),( Max( ( Const / FirstVNF_RAM_Server ),( FirstVNF_Mem_Server + FirstVNF_CPU_Server ) ) + Min( ( FirstVNF_CPU / RRS ) ,( FirstVNF_RAM_Server * FirstVNF_Mem_Server ) ) ) )", "choosing": "Max( ( Max( MUR,( DS + MLU ) ) * Max( ( MUC * MLU ),CS ) ),( ( ( RCSe - MLU ) - CS ) / MLU ) )", "obj1": 0.5060975609756098, "obj2": 0.4175611962497498}, {"determining": "Min( ( ( ( ARS * FirstVNF_CPU ) * ( FirstVNF_CPU - FirstVNF_RAM_Server ) ) * ( ( DDR + MRS ) / ( MDR + Const ) ) ) ,( Min( Max( FirstVNF_Mem_Server,RRS ) ,( CRS - FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem,ACS ) + Min( MDR ,ARS ) ) ) )", "choosing": "( Max( RMSe,( ( DS + DS ) - Max( CS,RCSe ) ) ) + ( CS * ( CS * ( MLU + CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Max( ( FirstVNF_Mem_Server * DDR ),( FirstVNF_Mem_Server * DDR ) ) / ( ( PN * FirstVNF_Mem_Server ) - Min( FirstVNF_RAM_Server ,AMS ) ) ) ,( ( ( FirstVNF_CPU_Server - FirstVNF_RAM_Server ) - ( CRS - RRS ) ) * Max( ( FirstVNF_Mem * MRS ),Max( FirstVNF_CPU,Const ) ) ) )", "choosing": "( Min( Min( Min( MUR ,DS ) ,MLU ) ,Min( CS ,RCSe ) ) * ( DS / RMSe ) )", "obj1": 1.0, "obj2": 0.0}], "2": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ARS + FirstVNF_RAM ),( FirstVNF_Mem_Server + MRS ) )", "choosing": "( ( DS - CS ) / ( RMSe * DS ) )", "obj1": 0.5813008130081301, "obj2": 0.2866068734950799}, {"determining": "( ( FirstVNF_Mem / MDR ) / ( FirstVNF_CPU - PN ) )", "choosing": "Max( ( MUR / CS ),( RMSe * RRSe ) )", "obj1": 0.43089430894308944, "obj2": 0.4456701916206391}, {"determining": "( ( RRS * FirstVNF_CPU ) - Max( FirstVNF_CPU,BR ) )", "choosing": "( Max( MUC,MUM ) * Min( DS ,MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - ( ACS - PN ) )", "choosing": "( Max( MUC,MLU ) + ( RRSe * DS ) )", "obj1": 0.5691056910569106, "obj2": 0.32283548586442906}, {"determining": "( Max( FirstVNF_CPU_Server,FirstVNF_Mem_Server ) - ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( RMSe / MLU ) + ( RMSe * RMSe ) )", "obj1": 0.7439024390243902, "obj2": 0.2234295218686627}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Min( Max( ( BR - BR ),Max( FirstVNF_RAM,DDR ) ) ,( ( ACS * DDR ) - Max( FirstVNF_RAM_Server,AMS ) ) )", "choosing": "( Max( MUR,RRSe ) / Min( MUR ,( MUR + DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( MRS * AMS ) - ACS ) / Min( FirstVNF_Mem ,FirstVNF_CPU ) )", "choosing": "( ( Min( MUM ,CS ) - ( MUR - CS ) ) + ( ( MUM + MLU ) * ( MLU - RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( MRS ,MDR ) - Min( PN ,Const ) ) - ( ( AMS / FirstVNF_Mem_Server ) * ( CRS + ACS ) ) )", "choosing": "( ( Min( MUR ,DS ) * ( DS / MUR ) ) / Min( ( MUM * MUC ) ,Min( MUC ,RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Min( ACS ,MRS ) - ( DDR + FirstVNF_CPU ) ) ,( Min( CRS ,ARS ) * ( CRS * MDR ) ) )", "choosing": "( Max( DS,RRSe ) * ( RCSe * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( CRS + CRS ) - ( AMS / FirstVNF_RAM_Server ) ) - ( ( PN + FirstVNF_CPU_Server ) + ( MDR / PN ) ) ) + ( ( ( PN - ACS ) - ( FirstVNF_CPU_Server + MDR ) ) - ( ( ACS * FirstVNF_RAM_Server ) * ( FirstVNF_CPU + FirstVNF_Mem ) ) ) )", "choosing": "Min( ( Max( ( MUR * MUC ),( RMSe / RMSe ) ) - ( Max( MLU,RCSe ) - ( CS - MUM ) ) ) ,( ( ( DS / DS ) + ( RCSe + RRSe ) ) / ( Min( CS ,RMSe ) - Min( RMSe ,CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( AMS * FirstVNF_CPU ) / ( MRS + ARS ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( FirstVNF_RAM,PN ) ) ) )", "choosing": "( ( ( Min( CS ,MUC ) / Max( DS,MUM ) ) / Max( ( MLU + CS ),( MLU * RRSe ) ) ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.9898373983739838, "obj2": 0.004868402464346816}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) * Max( RRSe,MUR ) ) ) )", "obj1": 0.21138211382113822, "obj2": 0.6473212053744019}, {"determining": "( ( ( Min( ARS ,PN ) * ( Const / DDR ) ) * ( Max( FirstVNF_CPU_Server,FirstVNF_RAM ) / Max( AMS,Const ) ) ) * Max( Min( Min( RRS ,AMS ) ,Min( MRS ,FirstVNF_RAM ) ),( ( CRS + FirstVNF_Mem ) / Min( FirstVNF_RAM ,FirstVNF_Mem ) ) ) )", "choosing": "( ( ( ( RCSe / MUR ) / ( MUC / DS ) ) - Max( ( RRSe * CS ),( RRSe + CS ) ) ) / ( ( ( MUC * MUM ) / ( RCSe / MLU ) ) * ( ( MUC - DS ) - ( DS / DS ) ) ) )", "obj1": 0.18495934959349594, "obj2": 0.7022313767508018}, {"determining": "( ( ( ( FirstVNF_CPU_Server + FirstVNF_RAM ) * ( BR - DDR ) ) / Min( ( FirstVNF_CPU - CRS ) ,( FirstVNF_CPU_Server - Const ) ) ) * Max( ( ( FirstVNF_CPU * AMS ) - ( Const + ARS ) ),Max( ( FirstVNF_CPU / CRS ),( RRS * PN ) ) ) )", "choosing": "Max( Min( DS ,( MUR + ( CS / MUR ) ) ),( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( MRS + BR ) * ( RRS - FirstVNF_Mem ) ) / ( ( RRS * FirstVNF_Mem_Server ) + ( PN + FirstVNF_CPU_Server ) ) ) - ( ( Max( RRS,ARS ) - Min( ACS ,FirstVNF_Mem ) ) + ( ( FirstVNF_RAM / MDR ) / Max( AMS,RRS ) ) ) )", "choosing": "( ( ( ( DS + RRSe ) - ( MUR * MUR ) ) * ( Min( RCSe ,MUC ) - Max( RCSe,RMSe ) ) ) - Min( Max( ( MLU * RCSe ),( MUR + MUR ) ) ,( Max( RRSe,RCSe ) + ( MUM * RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - CRS ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2703252032520325, "obj2": 0.5495532951216376}, {"determining": "Min( ( ( ( ARS * FirstVNF_CPU ) * ( FirstVNF_CPU - FirstVNF_RAM_Server ) ) * ( ( DDR + MRS ) / ( MDR + Const ) ) ) ,( Min( Max( FirstVNF_Mem_Server,RRS ) ,( CRS - FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem,ACS ) + Min( MDR ,ARS ) ) ) )", "choosing": "( Max( RMSe,( ( DS + DS ) - Max( CS,RCSe ) ) ) + ( CS * ( CS * ( MLU + CS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR + FirstVNF_CPU_Server ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) )", "choosing": "( Max( RMSe,MUC ) + ( ( MUC / RMSe ) - ( MUR + MLU ) ) )", "obj1": 0.241869918699187, "obj2": 0.630405065084592}, {"determining": "Min( ( ( Min( FirstVNF_Mem_Server ,Const ) - Min( Const ,FirstVNF_CPU ) ) / ( ( AMS + CRS ) / ( MDR + ACS ) ) ) ,( ( ( FirstVNF_RAM * RRS ) + Min( PN ,Const ) ) * Min( ( PN / DDR ) ,( DDR * ARS ) ) ) )", "choosing": "( Max( RMSe,MUC ) + ( ( MUC / RMSe ) / ( MUR + MLU ) ) )", "obj1": 0.241869918699187, "obj2": 0.630405065084592}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "Min( Max( ( ( MUC - RCSe ) / RCSe ),MLU ) ,Min( ( RMSe / RRSe ) ,( ( RRSe + MUC ) * RCSe ) ) )", "obj1": 0.35772357723577236, "obj2": 0.5232230173397356}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2703252032520325, "obj2": 0.5495532951216376}, {"determining": "( FirstVNF_CPU_Server / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.24796747967479674, "obj2": 0.5751721359568119}, {"determining": "( Max( ( BR - Const ),BR ) * ( FirstVNF_Mem_Server * Max( AMS,Max( FirstVNF_CPU_Server,ARS ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) / Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.15853658536585366, "obj2": 0.708325635858025}, {"determining": "Min( Max( RRS,ARS ) ,( ARS + FirstVNF_RAM ) )", "choosing": "Min( ( ( ( DS - CS ) / ( RMSe * DS ) ) / MLU ) ,( RMSe - MUM ) )", "obj1": 0.6036585365853658, "obj2": 0.27619616660479024}, {"determining": "Min( Max( RRS,ARS ) ,( MRS + FirstVNF_CPU ) )", "choosing": "( ( DS - CS ) / ( RMSe * DS ) )", "obj1": 0.5487804878048781, "obj2": 0.32860121354464417}, {"determining": "( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( FirstVNF_CPU_Server + FirstVNF_RAM ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) )", "choosing": "( ( Min( DS ,( MUR + ( CS / MUR ) ) ) / Max( ( MUR + CS ),( MLU * RRSe ) ) ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.9695121951219512, "obj2": 0.02019835561855498}, {"determining": "( ( FirstVNF_RAM_Server / ( Max( FirstVNF_Mem,ACS ) + Min( MDR ,ARS ) ) ) - ( ACS - PN ) )", "choosing": "( Max( ( MLU + CS ),MLU ) + ( RRSe * DS ) )", "obj1": 0.7967479674796748, "obj2": 0.09388692250623455}, {"determining": "( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - ( ACS - PN ) )", "choosing": "( Max( MUC,MLU ) + ( RRSe * DS ) )", "obj1": 0.5691056910569106, "obj2": 0.32283548586442906}, {"determining": "( Max( FirstVNF_CPU_Server,FirstVNF_Mem_Server ) - ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( RMSe / MLU ) + ( RMSe * RMSe ) )", "obj1": 0.7520325203252033, "obj2": 0.2132990175396135}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) / ( ( Max( Min( CS ,MUM ),Max( MUR,MUR ) ) / CS ) * ( RCSe / MUR ) ) )", "obj1": 0.37601626016260165, "obj2": 0.4498824580184165}, {"determining": "( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( AMS * FirstVNF_CPU ) / ( MRS + ARS ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( FirstVNF_RAM,PN ) ) ) )", "choosing": "( ( ( Min( CS ,MUC ) / Max( DS,MUM ) ) / Max( ( MLU + CS ),( MLU * RRSe ) ) ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.9878048780487805, "obj2": 0.006635400191989128}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,ACS ) )", "choosing": "Min( Min( ( ( RCSe * MUR ) + Max( MUR,CS ) ) ,Max( RCSe,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.5772357723577236, "obj2": 0.31472389551344077}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_RAM_Server ,AMS ) ) * Max( AMS,ACS ) )", "choosing": "Min( Min( DS ,Max( MUC,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.5426829268292683, "obj2": 0.345990839602464}, {"determining": "( ( ( ( BR * RRS ) / FirstVNF_RAM ) * ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( RRS * Const ),Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) ) )", "choosing": "( ( ( RCSe / RCSe ) / ( MLU + DS ) ) + Max( ( RRSe + MUR ),( RRSe / MUM ) ) )", "obj1": 0.2073170731707317, "obj2": 0.6814120344492935}, {"determining": "( ( ( FirstVNF_RAM / FirstVNF_RAM ) * ( FirstVNF_Mem + FirstVNF_RAM ) ) * Max( ( RRS * Const ),Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) ) )", "choosing": "( Max( MLU,RRSe ) / ( DS - MUC ) )", "obj1": 0.18699186991869918, "obj2": 0.6833145915926029}, {"determining": "( ( ( ( FirstVNF_Mem / MDR ) / ( FirstVNF_CPU - PN ) ) * ARS ) * Min( MDR ,RRS ) )", "choosing": "Max( ( DS + MUM ),( MUR / CS ) )", "obj1": 0.4268292682926829, "obj2": 0.44842086374996676}, {"determining": "( ( FirstVNF_Mem / MDR ) / ( FirstVNF_CPU - PN ) )", "choosing": "Max( ( MUR / CS ),( RMSe * RRSe ) )", "obj1": 0.43089430894308944, "obj2": 0.4456701916206391}, {"determining": "Max( ( ( Max( RRS,AMS ) * ( MDR - DDR ) ) + Min( Min( Const ,FirstVNF_Mem_Server ) ,( BR - RRS ) ) ),( Max( ( Const / FirstVNF_RAM_Server ),( FirstVNF_Mem_Server + FirstVNF_CPU_Server ) ) + Min( ( FirstVNF_CPU / RRS ) ,( FirstVNF_RAM_Server * FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.15447154471544716, "obj2": 0.7247807262286018}, {"determining": "( ( BR - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( DS - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.30691056910569103, "obj2": 0.5275919498617837}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2621951219512195, "obj2": 0.5653788815204785}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ACS ) )", "choosing": "( Min( ( DS - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) )", "obj1": 0.2926829268292683, "obj2": 0.5489928910222971}, {"determining": "Max( ( ARS - MDR ),( FirstVNF_CPU / ACS ) )", "choosing": "( ( MUR + DS ) - ( ( MUC / MLU ) * CS ) )", "obj1": 0.4898373983739837, "obj2": 0.3737831832632668}, {"determining": "( ( CRS + ACS ) + Min( AMS ,MRS ) )", "choosing": "( ( DS / MUR ) + ( Min( ( MUM * MUC ) ,Min( MUC ,RMSe ) ) + RRSe ) )", "obj1": 0.4817073170731707, "obj2": 0.4075646377195717}, {"determining": "( Min( FirstVNF_Mem_Server ,FirstVNF_RAM_Server ) + Min( AMS ,MRS ) )", "choosing": "( ( Min( MUR ,DS ) * ( DS / MUR ) ) / Min( ( MUM * MUC ) ,Min( MUC ,RMSe ) ) )", "obj1": 0.4491869918699187, "obj2": 0.4324038809613503}, {"determining": "Max( ( Min( FirstVNF_CPU ,ACS ) + PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - RMSe ) + ( RMSe - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - ( ACS - PN ) )", "choosing": "( Max( MUC,MLU ) + ( RRSe * DS ) )", "obj1": 0.5691056910569106, "obj2": 0.32283548586442906}, {"determining": "Max( ( Min( AMS ,PN ) / PN ),Min( CRS ,Const ) )", "choosing": "( Min( MLU ,DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( Min( CRS ,FirstVNF_RAM ),( FirstVNF_CPU_Server - ARS ) )", "choosing": "( ( MUR + DS ) - ( DS * CS ) )", "obj1": 0.4715447154471545, "obj2": 0.43085466923000276}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),( CRS / Const ) )", "choosing": "( ( RCSe - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}], "3": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ARS + FirstVNF_RAM ),( FirstVNF_Mem_Server + MRS ) )", "choosing": "( ( DS - CS ) / ( RMSe * DS ) )", "obj1": 0.5813008130081301, "obj2": 0.2866068734950799}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) * Max( RRSe,MUR ) ) ) )", "obj1": 0.21138211382113822, "obj2": 0.6473212053744019}, {"determining": "( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( FirstVNF_CPU_Server + FirstVNF_RAM ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) )", "choosing": "( ( Min( DS ,( MUR + ( CS / MUR ) ) ) / Max( ( MUR + CS ),( MLU * RRSe ) ) ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.9695121951219512, "obj2": 0.02019835561855498}, {"determining": "( ( FirstVNF_RAM_Server / ( Max( FirstVNF_Mem,ACS ) + Min( MDR ,ARS ) ) ) - ( ACS - PN ) )", "choosing": "( Max( ( MLU + CS ),MLU ) + ( RRSe * DS ) )", "obj1": 0.7967479674796748, "obj2": 0.09388692250623455}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) / ( ( Max( Min( CS ,MUM ),Max( MUR,MUR ) ) / CS ) * ( RCSe / MUR ) ) )", "obj1": 0.37601626016260165, "obj2": 0.4498824580184165}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_RAM_Server ,AMS ) ) * Max( AMS,ACS ) )", "choosing": "Min( Min( DS ,Max( MUC,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.5426829268292683, "obj2": 0.345990839602464}, {"determining": "( ( BR - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( DS - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.30691056910569103, "obj2": 0.5275919498617837}, {"determining": "Max( ( ARS - MDR ),( FirstVNF_CPU / ACS ) )", "choosing": "( ( MUR + DS ) - ( ( MUC / MLU ) * CS ) )", "obj1": 0.4898373983739837, "obj2": 0.3737831832632668}, {"determining": "Max( ( Min( FirstVNF_CPU ,ACS ) + PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - RMSe ) + ( RMSe - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,PN ) / PN ),Min( CRS ,Const ) )", "choosing": "( Min( MLU ,DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),( CRS / Const ) )", "choosing": "( ( RCSe - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( AMS - Min( Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * RMSe ) )", "obj1": 0.2967479674796748, "obj2": 0.529179180857404}, {"determining": "( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ) * Max( AMS,ACS ) )", "choosing": "Min( Min( DS ,Max( RCSe,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.5426829268292683, "obj2": 0.345990839602464}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) / ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.30691056910569103, "obj2": 0.5275919498617837}, {"determining": "( ( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) - ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( DS - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.45121951219512196, "obj2": 0.3799904665903131}, {"determining": "( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) )", "choosing": "( ( Min( DS ,( MUR + ( CS / MUR ) ) ) / Max( ( MUR + CS ),( MLU * RRSe ) ) ) * Min( Max( Max( ( ( MUC - RCSe ) / RCSe ),MLU ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.9796747967479674, "obj2": 0.015607046343200244}, {"determining": "( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( FirstVNF_CPU_Server + FirstVNF_RAM ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) )", "choosing": "( ( Min( DS ,( MUR + ( CS / MUR ) ) ) / Max( ( MUR + CS ),( MLU * RRSe ) ) ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.9715447154471545, "obj2": 0.017149414139608958}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( MDR * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( MUR * DS ) + ( DS + MUR ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.9186991869918699, "obj2": 0.07889414950719109}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / Max( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ),( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - RRSe ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3231707317073171, "obj2": 0.5003744672945935}, {"determining": "Min( Max( RRS,ARS ) ,( ( ( FirstVNF_RAM_Server / FirstVNF_CPU ) - ( ACS - PN ) ) + FirstVNF_CPU ) )", "choosing": "( ( DS - CS ) / ( RRSe * DS ) )", "obj1": 0.5670731707317073, "obj2": 0.30583082926795346}, {"determining": "( Min( Max( RRS,ARS ) ,( MRS + FirstVNF_CPU ) ) - ( ACS - PN ) )", "choosing": "( Max( MUC,MLU ) + ( ( DS - CS ) / ( RMSe * DS ) ) )", "obj1": 0.9247967479674797, "obj2": 0.05458666955061223}, {"determining": "Min( Max( RRS,ARS ) ,( MRS + FirstVNF_CPU ) )", "choosing": "( ( DS - CS ) / ( RMSe * DS ) )", "obj1": 0.5691056910569106, "obj2": 0.30335283814569025}, {"determining": "( ( ( ( Min( ( ( ( FirstVNF_Mem * MRS ) - ( PN * FirstVNF_RAM ) ) - ( Min( FirstVNF_RAM ,MDR ) / Max( FirstVNF_Mem,Const ) ) ) ,( Min( ( MDR + FirstVNF_Mem ) ,Min( FirstVNF_Mem ,RRS ) ) / ( ( CRS * FirstVNF_Mem_Server ) + ( FirstVNF_RAM_Server - CRS ) ) ) ) + Min( ( Min( ( FirstVNF_CPU + Const ) ,( FirstVNF_CPU_Server * AMS ) ) - ( Min( FirstVNF_CPU ,FirstVNF_CPU ) - ( BR + RRS ) ) ) ,( Min( ( MDR * DDR ) ,( ARS / MDR ) ) - ( ( CRS / CRS ) * ( AMS - MDR ) ) ) ) ) + Max( Max( ( ( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ) * ( FirstVNF_RAM_Server * FirstVNF_RAM_Server ) ) - ( ( RRS - AMS ) - ( RRS * FirstVNF_CPU ) ) ),( Min( ( FirstVNF_Mem / MRS ) ,( BR / CRS ) ) + ( ( DDR + MDR ) + Min( DDR ,FirstVNF_RAM ) ) ) ),( ( Min( Max( FirstVNF_RAM_Server,PN ) ,( FirstVNF_Mem_Server + MDR ) ) + Max( ( RRS + PN ),( FirstVNF_CPU_Server - FirstVNF_RAM ) ) ) + ( ( ( RRS * BR ) / ( ARS - ACS ) ) + Max( ( FirstVNF_CPU_Server + MDR ),( FirstVNF_RAM * CRS ) ) ) ) ) ) - ( ( Max( ( Max( ( ACS * FirstVNF_RAM ),( FirstVNF_RAM_Server + Const ) ) - ( Max( FirstVNF_CPU,FirstVNF_Mem ) - ( FirstVNF_Mem_Server / ARS ) ) ),Max( ( ( FirstVNF_CPU - DDR ) * Min( MRS ,PN ) ),( Max( MRS,RRS ) * Min( AMS ,BR ) ) ) ) + Min( ( ( Min( FirstVNF_Mem ,MRS ) / ( ACS * CRS ) ) - ( ( PN * Const ) * ( MRS * ACS ) ) ) ,( Min( ( Const * FirstVNF_Mem ) ,( ACS - PN ) ) + ( ( FirstVNF_CPU / FirstVNF_CPU ) + ( ARS * ARS ) ) ) ) ) / Min( Max( ( Max( ( FirstVNF_Mem_Server / BR ),( PN * MRS ) ) / Min( Max( FirstVNF_CPU_Server,FirstVNF_RAM ) ,( ACS * PN ) ) ),Min( ( Min( DDR ,FirstVNF_RAM_Server ) * ( BR / FirstVNF_CPU_Server ) ) ,( Max( FirstVNF_CPU,AMS ) / ( PN * MDR ) ) ) ) ,( ( ( Min( FirstVNF_RAM ,CRS ) + ( FirstVNF_CPU_Server + ACS ) ) - ( ( BR * FirstVNF_Mem ) - ( BR / DDR ) ) ) * ( ( ( Const - ARS ) / ( Const / Const ) ) / ( ( RRS - AMS ) * ( CRS + AMS ) ) ) ) ) ) ) - ( ( ( ( ( ( ( RRS + ACS ) - Max( AMS,FirstVNF_CPU ) ) / ( Min( ACS ,PN ) * ( FirstVNF_CPU * BR ) ) ) * Min( Max( ( AMS - Const ),Max( FirstVNF_RAM_Server,CRS ) ) ,Max( ( FirstVNF_CPU_Server * CRS ),( RRS - RRS ) ) ) ) / ( ( ( Max( MDR,FirstVNF_CPU ) - Min( ACS ,FirstVNF_Mem_Server ) ) * ( Min( FirstVNF_CPU ,ACS ) - ( MRS / DDR ) ) ) * ( ( ( RRS - RRS ) * ( Const + RRS ) ) * ( ( FirstVNF_Mem_Server / BR ) * ( FirstVNF_Mem / DDR ) ) ) ) ) / ( ( ( Max( ( BR * ARS ),( CRS - MDR ) ) / ( ( AMS * FirstVNF_CPU ) / Min( MDR ,FirstVNF_RAM_Server ) ) ) - ( Max( ( FirstVNF_Mem_Server - FirstVNF_CPU_Server ),( FirstVNF_Mem_Server - FirstVNF_Mem_Server ) ) * ( ( DDR + PN ) - Max( FirstVNF_CPU_Server,AMS ) ) ) ) + ( ( ( ( FirstVNF_RAM_Server * ARS ) / ( FirstVNF_Mem - DDR ) ) / Min( ( ARS * FirstVNF_Mem_Server ) ,( FirstVNF_RAM * FirstVNF_RAM ) ) ) * ( Min( ( FirstVNF_Mem_Server - RRS ) ,( PN + FirstVNF_CPU ) ) + ( ( FirstVNF_RAM - AMS ) / ( FirstVNF_CPU_Server / AMS ) ) ) ) ) ) / ( ( ( ( ( ( ACS * FirstVNF_RAM_Server ) + ( PN + Const ) ) / ( Min( FirstVNF_Mem_Server ,AMS ) * ( RRS * FirstVNF_CPU ) ) ) / Max( Min( ( FirstVNF_RAM + Const ) ,Max( ARS,FirstVNF_RAM_Server ) ),( Max( FirstVNF_Mem_Server,FirstVNF_CPU ) - Max( CRS,FirstVNF_Mem_Server ) ) ) ) - Min( ( ( ( FirstVNF_CPU_Server / ACS ) / ( ARS / PN ) ) * ( ( CRS * FirstVNF_CPU_Server ) * ( FirstVNF_Mem_Server / RRS ) ) ) ,( ( ( FirstVNF_RAM_Server + DDR ) + Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) ) + ( ( PN / MDR ) - Min( DDR ,PN ) ) ) ) ) / ( Max( Min( ( ( ARS + FirstVNF_CPU_Server ) * ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ) ) ,( ( FirstVNF_CPU - FirstVNF_RAM ) + Min( Const ,RRS ) ) ),Max( ( ( FirstVNF_Mem_Server - BR ) * Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) ),( Min( FirstVNF_CPU ,MRS ) * ( DDR + FirstVNF_RAM_Server ) ) ) ) * Max( ( Max( ( FirstVNF_Mem_Server / FirstVNF_RAM_Server ),( ARS + CRS ) ) / ( ( FirstVNF_RAM / BR ) - ( CRS / ARS ) ) ),( ( ( AMS / AMS ) * Max( FirstVNF_CPU,ARS ) ) + ( ( FirstVNF_CPU / PN ) + ( DDR - FirstVNF_RAM_Server ) ) ) ) ) ) ) )", "choosing": "( ( ( Max( ( Min( ( ( RCSe * DS ) / Max( RCSe,DS ) ) ,( ( RCSe / MUM ) + ( RMSe - DS ) ) ) - Min( Min( Max( MUR,MUR ) ,( MLU + RMSe ) ) ,( ( RMSe / MLU ) * Min( MUM ,MUR ) ) ) ),( ( ( ( MLU - DS ) / ( MLU / CS ) ) - ( ( MLU * MLU ) + ( MUC / MLU ) ) ) - Min( ( ( DS + CS ) + ( MUM - DS ) ) ,( ( MUC + MUR ) / Min( RCSe ,MLU ) ) ) ) ) - ( Max( ( ( ( MUR - MUM ) + ( MUR * MUR ) ) + ( Min( DS ,MUR ) / ( MUM / DS ) ) ),Max( Max( ( DS - MLU ),Max( RRSe,MUR ) ),( ( RCSe / CS ) - Max( RRSe,MUC ) ) ) ) * ( ( Max( ( RCSe * MLU ),( MUR * MUC ) ) + ( Max( MUC,MUC ) - ( CS * MUC ) ) ) / Max( ( ( RRSe - RRSe ) / ( MUR - MLU ) ),( ( RMSe / RCSe ) - ( MUM + MLU ) ) ) ) ) ) / Max( ( Max( Min( Min( ( CS * MUM ) ,( RMSe - RCSe ) ) ,( Min( RMSe ,DS ) / ( MUM / RRSe ) ) ),Max( ( ( MUM * MUR ) + ( CS / MUR ) ),Max( ( MUC / MUC ),Min( MLU ,RRSe ) ) ) ) + Max( ( ( ( CS / MUM ) / ( MLU - RMSe ) ) * ( ( MUR * CS ) / ( CS / RMSe ) ) ),( ( Max( MLU,RRSe ) - ( DS / MUM ) ) + Max( ( DS * RRSe ),Min( MUM ,MLU ) ) ) ) ),Max( ( ( Max( Max( RRSe,RMSe ),( MUR - MLU ) ) + ( ( RCSe * MUC ) + Min( CS ,MUM ) ) ) * ( ( ( MUM + RMSe ) - Min( RCSe ,MUM ) ) / ( ( RCSe + CS ) * Max( RMSe,RMSe ) ) ) ),Min( ( ( ( DS * CS ) - Min( RCSe ,MUR ) ) * ( ( RCSe - RCSe ) - Max( RRSe,RRSe ) ) ) ,Max( ( ( RRSe - CS ) * ( RRSe - MUM ) ),Min( Min( RRSe ,CS ) ,Max( RMSe,MLU ) ) ) ) ) ) ) + ( Max( ( ( ( Max( ( MUC + RMSe ),( MUC * CS ) ) * Min( ( MUC - MUR ) ,( RMSe / RCSe ) ) ) + ( ( ( DS * RMSe ) - ( CS + DS ) ) / ( ( RRSe - CS ) - ( MUM - MUM ) ) ) ) - ( ( ( ( MLU * MUM ) - ( DS + MUC ) ) * Max( ( RMSe - MUC ),( RRSe - MUM ) ) ) * Max( ( Max( MUR,MUM ) + ( RRSe / CS ) ),( Max( CS,RCSe ) / ( MUR / MUM ) ) ) ) ),Max( ( Min( ( ( MUR * RCSe ) * ( CS * RRSe ) ) ,( ( RRSe + MUR ) / ( RCSe - MLU ) ) ) + ( ( ( MUM / MUR ) * ( RMSe + CS ) ) / ( ( DS - RMSe ) + Min( CS ,CS ) ) ) ),( ( ( ( MLU * MLU ) * Min( DS ,RRSe ) ) / ( ( CS / MLU ) - ( MUR * MUR ) ) ) + Min( Min( ( RRSe - MUM ) ,( RCSe * CS ) ) ,Min( ( MUR + RMSe ) ,Min( RCSe ,CS ) ) ) ) ) ) + ( ( ( Min( Max( ( CS * CS ),( RMSe * CS ) ) ,( ( MLU / RMSe ) + ( MUR / CS ) ) ) / ( Min( ( RMSe / CS ) ,( MUM - MUM ) ) / ( ( MLU * DS ) * ( DS - MUR ) ) ) ) + ( ( Min( Max( RCSe,MUM ) ,( DS - MUR ) ) * ( Min( MLU ,MUM ) - ( DS - RMSe ) ) ) / ( Min( ( RMSe / DS ) ,( MUM - RCSe ) ) / ( ( RCSe / RCSe ) * ( RCSe / RRSe ) ) ) ) ) * Min( Min( ( Max( ( RMSe - CS ),Min( DS ,MLU ) ) - ( ( CS - MUC ) - ( MUM - CS ) ) ) ,( ( ( DS + DS ) / ( RCSe * RCSe ) ) + ( ( RRSe * MUM ) - ( CS - CS ) ) ) ) ,( Max( ( ( MUR - MLU ) + Min( MLU ,MUR ) ),Min( Min( DS ,MUR ) ,( DS / RCSe ) ) ) / Max( Min( ( DS / MUC ) ,Max( MUM,RMSe ) ),Max( ( MLU + MLU ),Min( MUR ,MUC ) ) ) ) ) ) ) )", "obj1": 0.7296747967479674, "obj2": 0.20332066525562661}, {"determining": "( ( ( FirstVNF_Mem / MDR ) / ( FirstVNF_CPU - PN ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( FirstVNF_RAM,PN ) ) ) )", "choosing": "( ( ( ( DS + RRSe ) / Max( DS,MUM ) ) / Max( ( MLU + CS ),( MLU * RRSe ) ) ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.4268292682926829, "obj2": 0.43687329930276747}, {"determining": "Max( ( ARS - MDR ),( ( ( MRS * AMS ) - ACS ) / Min( FirstVNF_Mem ,FirstVNF_CPU ) ) )", "choosing": "( ( ( MUM + MLU ) * ( MLU - RMSe ) ) - ( ( MUC / MLU ) * CS ) )", "obj1": 0.2804878048780488, "obj2": 0.5470901950897031}, {"determining": "Max( ( ARS - MDR ),( FirstVNF_CPU / ACS ) )", "choosing": "( ( MUR + DS ) - ( ( MUC / MLU ) * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.4054071871999897}, {"determining": "( ( FirstVNF_RAM_Server / ( Max( FirstVNF_Mem,ACS ) / Min( MDR ,ARS ) ) ) - ( ACS - PN ) )", "choosing": "Min( ( Max( ( MUR * MUC ),( RMSe / RMSe ) ) - ( Max( MLU,RCSe ) - ( CS - MUM ) ) ) ,( ( ( DS / DS ) + ( RCSe + RRSe ) ) / ( Min( CS ,RMSe ) / Min( RMSe ,CS ) ) ) )", "obj1": 0.7642276422764228, "obj2": 0.11189539973729974}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( Max( FirstVNF_CPU_Server,FirstVNF_Mem_Server ) - ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) )", "choosing": "( ( RMSe / MLU ) + ( RMSe * RMSe ) )", "obj1": 0.7540650406504065, "obj2": 0.2014737942975154}, {"determining": "( ( ( Max( FirstVNF_RAM_Server,AMS ) / ( FirstVNF_CPU - PN ) ) + ARS ) * Min( MDR ,RRS ) )", "choosing": "Max( ( DS + RRSe ),( MUR / CS ) )", "obj1": 0.41260162601626016, "obj2": 0.44312011850603866}, {"determining": "( ( FirstVNF_RAM_Server / ( Max( FirstVNF_Mem,ACS ) + Min( MDR ,ARS ) ) ) - ( ACS - PN ) )", "choosing": "( Max( ( MLU + CS ),MLU ) + ( RRSe * DS ) )", "obj1": 0.7967479674796748, "obj2": 0.09388692250623455}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.659638629856532}, {"determining": "Min( Max( RRS,ARS ) ,( MRS + FirstVNF_CPU ) )", "choosing": "( ( DS - CS ) / ( RMSe * DS ) )", "obj1": 0.5772357723577236, "obj2": 0.29984835866709786}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_CPU / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,RMSe ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.21138211382113822, "obj2": 0.6473212053744019}, {"determining": "Min( Max( RRS,Const ) ,( MRS + FirstVNF_CPU ) )", "choosing": "( ( DS - CS ) / Max( RMSe,DS ) )", "obj1": 0.5467479674796748, "obj2": 0.32656324983940005}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / FirstVNF_CPU_Server ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.2032520325203252, "obj2": 0.6545986522550269}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( MUM ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.21138211382113822, "obj2": 0.6473212053744019}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.24390243902439024, "obj2": 0.5635200293350596}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * MDR ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) / ( ( Max( ( CS / MUM ),Max( MUR,MUR ) ) / CS ) * ( RCSe / MUR ) ) )", "obj1": 0.37601626016260165, "obj2": 0.4498824580184165}, {"determining": "Max( ( FirstVNF_CPU_Server * CRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( MUC + CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Min( Max( RRS,ARS ) ,( ( CRS + ACS ) + Min( AMS ,MRS ) ) )", "choosing": "Min( ( ( ( DS - CS ) / ( RMSe * DS ) ) / MLU ) ,( RMSe - MUM ) )", "obj1": 0.5934959349593496, "obj2": 0.2730011172495469}, {"determining": "Min( Max( RRS,ARS ) ,( ACS + FirstVNF_RAM ) )", "choosing": "Min( ( ( ( DS - CS ) / ( RMSe * DS ) ) / MLU ) ,( RMSe - MUM ) )", "obj1": 0.5548780487804879, "obj2": 0.31091571963585246}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) ) )", "choosing": "Min( Min( ( ( RCSe * MUR ) + Max( MUR,CS ) ) ,Max( RCSe,MLU ) ) ,( DS * Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) ) )", "obj1": 0.23983739837398374, "obj2": 0.5939326136975527}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( MRS,ACS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) / ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2845528455284553, "obj2": 0.5439792375966277}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_Mem_Server ) - ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) )", "choosing": "( Min( RMSe ,MLU ) + ( RMSe * RMSe ) )", "obj1": 0.6991869918699187, "obj2": 0.24537222696514988}, {"determining": "( ( MRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * CS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( RCSe * DS ) - ( RRSe + MUC ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) * Max( RRSe,MUR ) ) ) )", "obj1": 0.13211382113821138, "obj2": 0.7290342042020929}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.31910569105691056, "obj2": 0.5125737563393822}], "4": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( BR - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( DS - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.30691056910569103, "obj2": 0.5275919498617837}, {"determining": "Max( ( Min( FirstVNF_CPU ,ACS ) + PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - RMSe ) + ( RMSe - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,PN ) / PN ),Min( CRS ,Const ) )", "choosing": "( Min( MLU ,DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),( CRS / Const ) )", "choosing": "( ( RCSe - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( AMS - Min( Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * RMSe ) )", "obj1": 0.2967479674796748, "obj2": 0.529179180857404}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) / ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.30691056910569103, "obj2": 0.5275919498617837}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / Max( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ),( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - RRSe ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3231707317073171, "obj2": 0.5003744672945935}, {"determining": "Max( ( ARS - MDR ),( FirstVNF_CPU / ACS ) )", "choosing": "( ( MUR + DS ) - ( ( MUC / MLU ) * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.4054071871999897}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.659638629856532}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / FirstVNF_CPU_Server ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.2032520325203252, "obj2": 0.6545986522550269}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.24390243902439024, "obj2": 0.5635200293350596}, {"determining": "Max( ( FirstVNF_CPU_Server * CRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( MUC + CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( MRS,ACS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) / ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2845528455284553, "obj2": 0.5439792375966277}, {"determining": "( ( MRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * CS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( ( ( MUR - MUM ) - ( CS * CS ) ) - DS ) )", "obj1": 0.2682926829268293, "obj2": 0.5458250946375217}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) / ( ( Max( Min( CS ,MUM ),Max( MUR,MUR ) ) / CS ) * ( RCSe / MUR ) ) )", "obj1": 0.37398373983739835, "obj2": 0.44247338604540254}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( ( Min( AMS ,Const ) / PN ) / PN ) ) )", "choosing": "( Min( ( ( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) ) - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) )", "obj1": 0.20528455284552846, "obj2": 0.6381338315688516}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( MUR + CS ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2886178861788618, "obj2": 0.5346725074048162}, {"determining": "Max( ( ARS - MDR ),( FirstVNF_CPU / ACS ) )", "choosing": "( ( MUR + DS ) - ( ( MUC / MLU ) * CS ) )", "obj1": 0.4369918699186992, "obj2": 0.4054071871999897}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) / ( ( Max( Min( CS ,( ( MUR - MLU ) + Min( MLU ,MUR ) ) ),Max( MUR,MUR ) ) / CS ) * ( RCSe / MUR ) ) )", "obj1": 0.3678861788617886, "obj2": 0.4580861323730862}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Min( Min( RRS ,Const ) ,( MRS + FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) - ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.30691056910569103, "obj2": 0.5275919498617837}, {"determining": "Max( ( DDR + FirstVNF_RAM ),( FirstVNF_Mem_Server + MRS ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06910569105691057, "obj2": 0.758059513894014}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( DS + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3170731707317073, "obj2": 0.5054250556129817}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3231707317073171, "obj2": 0.5003744672945935}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3231707317073171, "obj2": 0.5003744672945935}, {"determining": "( ( AMS - Min( Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.11788617886178862, "obj2": 0.7284660221316317}, {"determining": "Min( Max( RRS,ARS ) ,( ARS + FirstVNF_RAM ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( Min( AMS ,ACS ) / PN ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) )", "choosing": "( ( Min( DS ,( MUR + ( CS / MUR ) ) ) / MLU ) * Min( Max( ( MUR - CS ),( RCSe - RCSe ) ) ,( Max( MUM,MUR ) + ( RCSe + RMSe ) ) ) )", "obj1": 0.42276422764227645, "obj2": 0.43014037341239286}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / FirstVNF_CPU_Server ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) / Max( RRSe,MUR ) ) ) )", "obj1": 0.2032520325203252, "obj2": 0.6545986522550269}, {"determining": "( ( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) ) - ( FirstVNF_RAM_Server / FirstVNF_Mem_Server ) )", "choosing": "( Min( RMSe ,MLU ) + ( RMSe * Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) ) )", "obj1": 0.3475609756097561, "obj2": 0.4861486043374918}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( ARS - MDR ),( FirstVNF_CPU / ACS ) )", "choosing": "( ( MUR + DS ) - ( ( MUC / MLU ) * CS ) )", "obj1": 0.42886178861788615, "obj2": 0.4210920360635008}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) )", "obj1": 0.22154471544715448, "obj2": 0.6332552347232142}, {"determining": "( ACS / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( ( MUR + DS ) - ( ( MUC / MLU ) * CS ) ) + ( DS + MUR ) ) ) )", "obj1": 0.2865853658536585, "obj2": 0.5409470928841186}, {"determining": "Max( ( ARS - MDR ),( FirstVNF_CPU - ACS ) )", "choosing": "Max( ( ( ( RCSe * DS ) * ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2845528455284553, "obj2": 0.5439792375966277}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_RAM_Server ,AMS ) ) * Max( AMS,( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) ) ) ) )", "choosing": "Min( Min( Min( Min( ( ( RCSe * MUR ) + Max( MUR,CS ) ) ,Max( RCSe,MLU ) ) ,( DS * Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) ) ) ,Max( MUC,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.23983739837398374, "obj2": 0.587467882289164}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,ACS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2845528455284553, "obj2": 0.5439792375966277}, {"determining": "Min( Max( RRS,ARS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( MUC / ( RMSe * DS ) )", "obj1": 0.13414634146341464, "obj2": 0.7088830711646472}, {"determining": "Min( ( RRS * RRS ) ,( ( Max( RRS,ARS ) + AMS ) * PN ) )", "choosing": "( ( Min( MUC ,( RMSe * DS ) ) - MUC ) / ( ( Max( Min( CS ,MUM ),Max( MUR,MUR ) ) / CS ) * ( RCSe / MUR ) ) )", "obj1": 0.4349593495934959, "obj2": 0.4084745925750941}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( RCSe * DS ) - ( RRSe + MUC ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) * Max( CS,MUR ) ) ) )", "obj1": 0.12398373983739837, "obj2": 0.7249889238650644}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( PN * FirstVNF_CPU ) ) )", "choosing": "( ( ( RCSe * DS ) - ( RRSe + MUC ) ) + ( Max( Min( RRSe ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) * Max( RRSe,MUR ) ) ) )", "obj1": 0.09349593495934959, "obj2": 0.7494928796061039}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) / ( ( Max( Min( CS ,MUM ),Max( MUR,MUR ) ) / CS ) * ( RCSe / MUR ) ) )", "obj1": 0.38414634146341464, "obj2": 0.4409670762511199}], "5": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( FirstVNF_CPU ,ACS ) + PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - RMSe ) + ( RMSe - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,PN ) / PN ),Min( CRS ,Const ) )", "choosing": "( Min( MLU ,DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),( CRS / Const ) )", "choosing": "( ( RCSe - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( AMS - Min( Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * RMSe ) )", "obj1": 0.2967479674796748, "obj2": 0.529179180857404}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.659638629856532}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.24390243902439024, "obj2": 0.5635200293350596}, {"determining": "Max( ( FirstVNF_CPU_Server * CRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( MUC + CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( MRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * CS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( DDR + FirstVNF_RAM ),( FirstVNF_Mem_Server + MRS ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06910569105691057, "obj2": 0.758059513894014}, {"determining": "Min( Max( RRS,ARS ) ,( ARS + FirstVNF_RAM ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Min( Max( RRS,ARS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( MUC / ( RMSe * DS ) )", "obj1": 0.13414634146341464, "obj2": 0.7088830711646472}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - AMS ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( FirstVNF_CPU,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( RCSe * DS ) - ( ( MLU - DS ) + ( DS - DS ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / ( ( MUC / RMSe ) * Max( CS,MUR ) ) ) )", "obj1": 0.11788617886178862, "obj2": 0.7204510241360869}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,( ( DDR + DDR ) * PN ) ) )", "choosing": "( ( MLU - DS ) + ( MLU - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.22560975609756098, "obj2": 0.6141795352896235}, {"determining": "Max( ( FirstVNF_CPU_Server * CRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( MUC + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "Max( ( Min( AMS ,PN ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,CRS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( ( ( MLU - DS ) + ( DS - DS ) ) - DS ) )", "obj1": 0.08739837398373984, "obj2": 0.7477086170363814}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),( CRS * PN ) )", "choosing": "( ( ( ( MLU - DS ) + ( DS - RMSe ) ) - DS ) + ( DS - DS ) )", "obj1": 0.09146341463414634, "obj2": 0.7409447479362938}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( AMS,ACS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RCSe,RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_RAM_Server ,AMS ) ) * Max( AMS,( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) ) ) ) )", "choosing": "Min( Min( Min( Min( ( ( RCSe * MUR ) + Max( MUR,CS ) ) ,Max( RCSe,MLU ) ) ,( DS * Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) ) ) ,Max( MUC,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.23983739837398374, "obj2": 0.5798213221554258}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) * Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "Max( ( ( ( RCSe / DS ) - ( RRSe + MUC ) ) - ( ( MUR + CS ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2886178861788618, "obj2": 0.5321194468319577}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - Min( FirstVNF_RAM ,MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( DS - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "Max( ( Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( AMS - Min( Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * FirstVNF_RAM ) ),MDR ) ,FirstVNF_CPU_Server ) ) * ( MRS * FirstVNF_CPU ) )", "choosing": "( Max( MLU,DS ) + ( DS - DS ) )", "obj1": 0.10365853658536585, "obj2": 0.732950260958179}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3130081300813008, "obj2": 0.49299066161561766}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.258130081300813, "obj2": 0.5389834800814276}, {"determining": "( ( Min( PN ,Const ) - Min( ( RRS * RRS ) ,( ( CRS + DDR ) * PN ) ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( Min( MUC ,DS ) - MUC ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( MUC - MUM ),( MUR + CS ) ) ) )", "obj1": 0.2865853658536585, "obj2": 0.5356491207964543}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.11178861788617886, "obj2": 0.7237810242772507}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,( FirstVNF_Mem / Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( ARS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Min( RMSe ,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUC / MLU ) * CS ) ) )", "obj1": 0.33739837398373984, "obj2": 0.48723243860696674}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( MUR + CS ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3008130081300813, "obj2": 0.5123243280535249}, {"determining": "Min( Min( RRS ,Const ) ,( MRS + FirstVNF_CPU ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.18292682926829268, "obj2": 0.6498039312084243}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.18699186991869918, "obj2": 0.6162949541706347}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) * ( PN * FirstVNF_CPU ) ) )", "choosing": "( ( ( RCSe * DS ) - ( RRSe + MUC ) ) + ( Max( Min( RRSe ,MUC ),Max( MUM,MLU ) ) / ( ( DS / RMSe ) * Max( RRSe,MUR ) ) ) )", "obj1": 0.09959349593495935, "obj2": 0.7382647260604819}], "6": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.659638629856532}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.24390243902439024, "obj2": 0.5635200293350596}, {"determining": "( ( MRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * CS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( DDR + FirstVNF_RAM ),( FirstVNF_Mem_Server + MRS ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06910569105691057, "obj2": 0.758059513894014}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Max( ( FirstVNF_CPU_Server * CRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( MUC + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( AMS,ACS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RCSe,RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RMSe / RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3130081300813008, "obj2": 0.49299066161561766}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.258130081300813, "obj2": 0.5389834800814276}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( CRS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( MUR + CS ) / ( RRSe - MUC ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.3008130081300813, "obj2": 0.5123243280535249}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.18699186991869918, "obj2": 0.6162949541706347}, {"determining": "Max( ( Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - ( MLU - DS ) ) )", "obj1": 0.6361788617886179, "obj2": 0.2665000655772383}, {"determining": "Min( Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ,( MRS + FirstVNF_CPU ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / ( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.37398373983739835, "obj2": 0.4519636758370444}, {"determining": "( ( Min( PN ,CRS ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( DS - MUM ),( MUR + CS ) ) ) )", "obj1": 0.17276422764227642, "obj2": 0.6533574759836039}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.27439024390243905, "obj2": 0.5320313558346812}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06910569105691057, "obj2": 0.758059513894014}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Max( ( Min( AMS ,Const ) / ( FirstVNF_CPU_Server * RRS ) ),Min( FirstVNF_Mem_Server ,( ( DDR + DDR ) * PN ) ) )", "choosing": "( ( MLU - DS ) + ( Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe + RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) - DS ) )", "obj1": 0.23577235772357724, "obj2": 0.5761245383842537}, {"determining": "( ( FirstVNF_CPU_Server + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUR ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) )", "choosing": "( Min( ( ( DS - DS ) * RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( ( CRS + FirstVNF_CPU ) / Min( FirstVNF_Mem ,Const ) )", "choosing": "( DS + ( DS - DS ) )", "obj1": 0.6361788617886179, "obj2": 0.2665000655772383}, {"determining": "( ( Min( ( FirstVNF_RAM / FirstVNF_CPU_Server ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - RRSe ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06910569105691057, "obj2": 0.758059513894014}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( DS - ( DS * CS ) )", "obj1": 0.4634146341463415, "obj2": 0.3657523215322281}, {"determining": "Max( ( Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) ) * RRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.23780487804878048, "obj2": 0.5720548628970887}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.18699186991869918, "obj2": 0.6162949541706347}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.17479674796747968, "obj2": 0.6164288785539339}, {"determining": "( ( AMS - Min( Max( ( MDR - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( ARS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2764227642276423, "obj2": 0.5270471157904968}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,( FirstVNF_Mem / Const ) ) + ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( ( ARS * DDR ) / ( FirstVNF_Mem / CRS ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.22357723577235772, "obj2": 0.60757499540649}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( AMS ,ACS ) )", "choosing": "( ( MLU - DS ) + ( DS - ( MLU - DS ) ) )", "obj1": 0.6361788617886179, "obj2": 0.2665000655772383}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS / Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( CS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.08130081300813008, "obj2": 0.74044600101096}, {"determining": "Max( ( Min( AMS ,Min( PN ,Const ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - DS ) + ( DS - ( MLU - DS ) ) )", "obj1": 0.6361788617886179, "obj2": 0.2665000655772383}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( AMS - Min( Max( CRS,MDR ) ,FirstVNF_CPU_Server ) ) * ( MRS * FirstVNF_CPU ) )", "choosing": "( ( MLU * DS ) + ( DS - ( ( MLU - DS ) + ( DS - DS ) ) ) )", "obj1": 0.44715447154471544, "obj2": 0.43813459413378286}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( ( ARS + FirstVNF_RAM ) ,Const ) )", "choosing": "( ( MLU - ( ( MLU - DS ) + ( DS - DS ) ) ) + ( DS - DS ) )", "obj1": 0.6361788617886179, "obj2": 0.2665000655772383}, {"determining": "( ( FirstVNF_RAM_Server * Max( Const,FirstVNF_CPU ) ) - ( ( ACS * FirstVNF_Mem ) + MDR ) )", "choosing": "Min( ( RCSe * ( DS + Max( RRSe,DS ) ) ) ,Max( MLU,RCSe ) )", "obj1": 0.8313008130081301, "obj2": 0.13577315611016452}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( DS - DS ) )", "obj1": 0.32926829268292684, "obj2": 0.4695235187293667}, {"determining": "( ( FirstVNF_Mem_Server + Min( FirstVNF_RAM_Server ,AMS ) ) * Max( AMS,( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( FirstVNF_Mem_Server ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) ) ) ) )", "choosing": "Min( Min( Min( Min( ( ( RCSe * MUR ) + Max( MUR,CS ) ) ,Max( RCSe,MLU ) ) ,( ( Max( MLU,MUC ) / ( RCSe - RRSe ) ) * Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RMSe,RMSe ) / ( RRSe - MUC ) ) ),( ( ( MUR * MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) ) ) ,Max( MUC,MLU ) ) ,( DS * RMSe ) )", "obj1": 0.5447154471544715, "obj2": 0.27684385813318185}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( Min( AMS ,Const ),MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS * CS ) ) ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.9735772357723578, "obj2": 0.025260264523632087}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( FirstVNF_CPU_Server,MRS ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.659638629856532}], "7": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( CS * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.24390243902439024, "obj2": 0.5635200293350596}, {"determining": "( ( MRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * CS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Max( ( FirstVNF_CPU_Server * CRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( MUC + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( AMS,ACS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RCSe,RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Max( ( Min( AMS ,Const ) / ( FirstVNF_CPU_Server * RRS ) ),Min( FirstVNF_Mem_Server ,( ( DDR + DDR ) * PN ) ) )", "choosing": "( ( MLU - DS ) + ( Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe + RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) - DS ) )", "obj1": 0.23577235772357724, "obj2": 0.5761245383842537}, {"determining": "( ( FirstVNF_CPU_Server + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUR ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) )", "choosing": "( Min( ( ( DS - DS ) * RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( ( Min( ( FirstVNF_RAM / FirstVNF_CPU_Server ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - RRSe ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Max( ( Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) ) * RRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.23780487804878048, "obj2": 0.5720548628970887}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.17479674796747968, "obj2": 0.6164288785539339}, {"determining": "( ( AMS - Min( Max( ( MDR - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS / Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( CS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) / ( Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) ) - ( FirstVNF_CPU_Server - MDR ) ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.08130081300813008, "obj2": 0.74044600101096}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( MRS * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( RMSe / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) ) - ( DS + CS ) )", "obj1": 0.18292682926829268, "obj2": 0.609996938461251}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.17479674796747968, "obj2": 0.6164288785539339}, {"determining": "Max( ( Min( AMS ,Const ) / PN ),Min( CRS ,Const ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( AMS - Min( Max( CRS,MDR ) ,FirstVNF_CPU_Server ) ) * ( MRS * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + RRSe ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "Max( ( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( AMS,ACS ) ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - DS ) - RRSe ) ,Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( Max( RCSe,RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) ) ) - ( DS + CS ) )", "obj1": 0.23780487804878048, "obj2": 0.5720548628970887}, {"determining": "Max( ( Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) ) * RRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.23780487804878048, "obj2": 0.5720548628970887}, {"determining": "Max( ( Max( AMS,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "( Min( ( Max( DS,DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) )", "choosing": "Max( ( ( ( RCSe * DS ) - ( RRSe + MUC ) ) - ( ( RCSe / RMSe ) - Max( MUC,RMSe ) ) ),( ( ( MUR - MUM ) - ( CS * CS ) ) * ( ( MUR * DS ) + ( DS + MUR ) ) ) )", "obj1": 0.2540650406504065, "obj2": 0.5493267779269624}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RRSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / ( ( Min( AMS ,ACS ) / PN ) - Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - RCSe ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Max( Min( PN ,ARS ),Min( CRS ,Const ) )", "choosing": "( ( DS - CS ) + ( ( Min( RRSe ,DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.20121951219512196, "obj2": 0.5856696030415777}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( ARS + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU / CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.6209992008896718}, {"determining": "( ( FirstVNF_Mem_Server - Min( FirstVNF_RAM_Server ,AMS ) ) * Max( AMS,( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( FirstVNF_Mem_Server ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.24796747967479674, "obj2": 0.5546422712088835}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( PN ,Const ) / PN ) ) )", "choosing": "( Min( ( ( ( ( ( DS - DS ) - RRSe ) + ( MUM + CS ) ) - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.23780487804878048, "obj2": 0.5720548628970887}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( RRSe ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Max( ( Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) ) * RRS ),Max( AMS,( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * ( ( AMS - Min( FirstVNF_Mem_Server ,FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) ) ) ) )", "choosing": "( Min( ( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - DS ) - RRSe ) ,( MUM + Max( RCSe,MLU ) ) ) - ( DS + CS ) )", "obj1": 0.23780487804878048, "obj2": 0.5720548628970887}, {"determining": "Max( ( Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU / ( Min( AMS ,Const ) / PN ) ) ) * RRS ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( Min( ( ( Min( ( ( DS - DS ) - RRSe ) ,( MUM + CS ) ) - DS ) - RRSe ) ,( MUM + CS ) ) - ( DS + CS ) )", "obj1": 0.23780487804878048, "obj2": 0.5720548628970887}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}], "8": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) - FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( MLU / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "( ( Min( ( FirstVNF_RAM / FirstVNF_CPU_Server ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - RRSe ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.17479674796747968, "obj2": 0.6164288785539339}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS / Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( CS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( MRS * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( RMSe / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) ) - ( DS + CS ) )", "obj1": 0.18292682926829268, "obj2": 0.609996938461251}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.17479674796747968, "obj2": 0.6164288785539339}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RRSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / ( ( Min( AMS ,ACS ) / PN ) - Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - RCSe ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( ARS + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU / CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.6209992008896718}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( RRSe ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) ) - ( DS + CS ) )", "obj1": 0.18292682926829268, "obj2": 0.609996938461251}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * MLU ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS - FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( Min( PN ,Const ),Min( CRS ,Const ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / ( ( Min( AMS ,ACS ) / PN ) - Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - RCSe ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.07926829268292683, "obj2": 0.7335829375822391}, {"determining": "Max( ( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( FirstVNF_Mem_Server,ACS ) ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( MUM / Min( RMSe ,DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( Min( PN ,Const ),Min( FirstVNF_RAM ,Const ) )", "choosing": "( ( MUM / ( DS * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( AMS,ACS ) ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( BR / DDR ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,Max( Min( CS ,MUC ),Max( MUM,MLU ) ) ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,MRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),Max( MUR,CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Min( ( RRS / RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / MLU ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.17479674796747968, "obj2": 0.6164288785539339}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,Max( MUM,MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.13821138211382114, "obj2": 0.6705341295095075}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.1443089430894309, "obj2": 0.6615144158182238}], "9": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( ( FirstVNF_RAM / FirstVNF_CPU_Server ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - RRSe ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS / Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( CS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RRSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / ( ( Min( AMS ,ACS ) / PN ) - Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - RCSe ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( ARS + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU / CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.6209992008896718}, {"determining": "( ( Min( ( FirstVNF_RAM / ACS ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * FirstVNF_Mem ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * MLU ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS - FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / ( ( Min( AMS ,ACS ) / PN ) - Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - RCSe ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.07926829268292683, "obj2": 0.7335829375822391}, {"determining": "Max( ( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( FirstVNF_Mem_Server,ACS ) ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( MUM / Min( RMSe ,DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( Min( PN ,Const ),Min( FirstVNF_RAM ,Const ) )", "choosing": "( ( MUM / ( DS * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( DS - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.20121951219512196, "obj2": 0.5822987805043641}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( Min( PN ,Const ),Min( CRS ,Const ) ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( ( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) ) - DS ) ) - ( DS + CS ) )", "obj1": 0.06910569105691057, "obj2": 0.7497302408200553}, {"determining": "Max( Min( PN ,Const ),Min( ( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( ( DS - DS ) - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) ) - ( DS + CS ) )", "obj1": 0.17073170731707318, "obj2": 0.6082181681635913}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS + Const ) ) ) )", "choosing": "( MUM / ( MUR * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.6209992008896718}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem + FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( FirstVNF_CPU_Server * FirstVNF_CPU ) * Max( AMS,( ( ( ( BR / DDR ) / Max( PN,CRS ) ) - ( ( Min( PN ,Const ) - Min( BR ,FirstVNF_RAM ) ) * ( BR - DDR ) ) ) - ( Max( ( ARS + AMS ),Max( Const,FirstVNF_Mem_Server ) ) + ( Max( DDR,ACS ) * Max( Const,PN ) ) ) ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) - ( DS + CS ) )", "obj1": 0.17276422764227642, "obj2": 0.5987009383401093}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( FirstVNF_RAM + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU - CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.1483739837398374, "obj2": 0.6209992008896718}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( ARS + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU / CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.22357723577235772, "obj2": 0.5759571807191329}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( ( ( RRSe * DS ) - Min( RRSe ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.2601626016260163, "obj2": 0.5525805872974496}, {"determining": "Max( ( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( AMS,FirstVNF_CPU_Server ) ),( FirstVNF_CPU * Min( Min( AMS ,Const ) ,PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( DS - DS ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) + Max( ( RRSe - MUM ),( MUR + CS ) ) ) )", "obj1": 0.241869918699187, "obj2": 0.5711040145534316}, {"determining": "( Min( FirstVNF_CPU_Server ,BR ) * ( Max( Const,MDR ) / FirstVNF_CPU_Server ) )", "choosing": "( ( MLU - DS ) + ( DS - DS ) )", "obj1": 0.07317073170731707, "obj2": 0.7479446339165302}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( Const ,Max( ( ACS - ( MRS * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUR / MUM ) ) ) + ( ( ( DS - DS ) - ( DS - DS ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) ) - ( DS + CS ) )", "obj1": 0.13211382113821138, "obj2": 0.6504682234379466}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( MRS * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( RMSe / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) ) - ( DS + CS ) )", "obj1": 0.16260162601626016, "obj2": 0.6148996404780797}, {"determining": "Max( Min( PN ,Const ),( FirstVNF_Mem * Const ) )", "choosing": "( ( MUM / ( RMSe * MLU ) ) + ( DS - RMSe ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * MUR ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( ARS + MDR ) ) / PN ),Min( CRS ,Const ) ) * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_Mem * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,MUR ) - ( DS * RCSe ) )", "obj1": 0.08333333333333333, "obj2": 0.6982558188086746}, {"determining": "Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( ARS + MDR ) ) / PN ),Min( CRS ,Const ) )", "choosing": "( ( MLU / CS ) + ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( ( DS + MUR ) / MUM ) ) ) )", "obj1": 0.22357723577235772, "obj2": 0.5759571807191329}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( ( ( ( RRSe * DS ) - Min( DS ,CS ) ) - Min( ( DS / CS ) ,( MUM / MUM ) ) ) + ( Max( Min( CS ,MUC ),Max( MUM,MLU ) ) / Max( ( RRSe - MUM ),( MUR + CS ) ) ) ) - ( DS + CS ) )", "obj1": 0.18902439024390244, "obj2": 0.5973560665733358}], "10": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS / Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( CS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RRSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / ( ( Min( AMS ,ACS ) / PN ) - Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - RCSe ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * MLU ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS - FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_CPU_Server * RRS ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / ( ( Min( AMS ,ACS ) / PN ) - Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - RCSe ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.07926829268292683, "obj2": 0.7335829375822391}, {"determining": "Max( ( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( FirstVNF_Mem_Server,ACS ) ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( MUM / Min( RMSe ,DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( Min( PN ,Const ),Min( FirstVNF_RAM ,Const ) )", "choosing": "( ( MUM / ( DS * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( Min( PN ,Const ),Min( CRS ,Const ) ) ) / PN ) ) )", "choosing": "( ( ( MLU - DS ) + ( ( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) ) - DS ) ) - ( DS + CS ) )", "obj1": 0.06910569105691057, "obj2": 0.7497302408200553}, {"determining": "Max( Min( PN ,Const ),Min( ( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( ( DS - DS ) - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS + Const ) ) ) )", "choosing": "( MUM / ( MUR * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.09349593495934959, "obj2": 0.6895007085410859}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem + FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),( FirstVNF_Mem * Const ) )", "choosing": "( ( MUM / ( RMSe * MLU ) ) + ( DS - RMSe ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * MUR ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( Max( ( ( Max( FirstVNF_RAM_Server,AMS ) - ( ARS + MDR ) ) / PN ),Min( CRS ,Const ) ) * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_Mem * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,MUR ) - ( DS * RCSe ) )", "obj1": 0.08333333333333333, "obj2": 0.6982558188086746}, {"determining": "( ( PN + FirstVNF_CPU ) / ( MRS / FirstVNF_CPU ) )", "choosing": "( Max( MUM,( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( CRS ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( ( DDR + DDR ) * PN ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.08130081300813008, "obj2": 0.7318439129633969}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.07113821138211382, "obj2": 0.7367410960965989}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( RRS * FirstVNF_RAM_Server ) ,( ( DDR + DDR ) * PN ) )", "choosing": "( ( ( MLU - DS ) + ( ( ( MUM / ( RMSe + DS ) ) + ( DS - DS ) ) - DS ) ) - ( DS + CS ) )", "obj1": 0.06910569105691057, "obj2": 0.7497302408200553}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem + FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( Min( ( FirstVNF_RAM / FirstVNF_CPU_Server ) ,Min( FirstVNF_Mem ,Const ) ) + ( Max( FirstVNF_RAM_Server,( AMS - Min( Max( Const,MDR ) ,FirstVNF_CPU_Server ) ) ) - ( FirstVNF_RAM + MDR ) ) ) / ( ( Max( CRS,DDR ) / ( FirstVNF_Mem / FirstVNF_CPU ) ) + ( ( FirstVNF_RAM * Const ) - Min( FirstVNF_Mem ,MDR ) ) ) )", "choosing": "( RRSe / ( RMSe * DS ) )", "obj1": 0.06707317073170732, "obj2": 0.7539431309930784}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - ( DS - DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.08943089430894309, "obj2": 0.6913469898311897}, {"determining": "Max( Min( PN ,Const ),Min( CRS ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.07926829268292683, "obj2": 0.7335829375822391}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( Min( ( ( DS - DS ) - Max( DS,DS ) ) ,RMSe ) - ( DS * CS ) )", "obj1": 0.08130081300813008, "obj2": 0.7318439129633969}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}], "11": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RRSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * MLU ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS - FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( Min( FirstVNF_CPU_Server ,FirstVNF_CPU ) * Max( FirstVNF_Mem_Server,ACS ) ),( FirstVNF_CPU * ( Min( AMS ,Const ) / PN ) ) )", "choosing": "( MUM / Min( RMSe ,DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( Min( PN ,Const ),Min( FirstVNF_RAM ,Const ) )", "choosing": "( ( MUM / ( DS * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( ( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( ( DS - DS ) - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),( CRS + Const ) ) ) )", "choosing": "( MUM / ( MUR * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem + FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),( FirstVNF_Mem * Const ) )", "choosing": "( ( MUM / ( RMSe * MLU ) ) + ( DS - RMSe ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * MUR ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( PN + FirstVNF_CPU ) / ( MRS / FirstVNF_CPU ) )", "choosing": "( Max( MUM,( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06504065040650407, "obj2": 0.7562083236283892}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( CRS ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem + FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,PN ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server + AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - CS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( ( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) ,Const ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( DDR,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( CRS ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( DS - MLU ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}], "12": [{"determining": "( ( BR * FirstVNF_CPU ) - ( MRS * FirstVNF_Mem_Server ) )", "choosing": "( Max( MLU,MUC ) / ( RCSe - RRSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( ACS * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * MLU ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( FirstVNF_RAM ,Const ) )", "choosing": "( ( MUM / ( DS * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( ( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( ( DS - DS ) - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem + FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( CRS ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem + FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( RMSe - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,PN ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Min( ( RRS * RRS ) ,( ( DDR + AMS ) * PN ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server + AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - CS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( ( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) ,Const ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( DDR,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( Min( PN ,Const ),Min( CRS ,Const ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( DS - MLU ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( PN + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( Min( BR ,FirstVNF_RAM ) - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_RAM ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( RMSe / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( AMS - ( Max( Const,MDR ) / FirstVNF_CPU_Server ) ) * ( FirstVNF_CPU * FirstVNF_CPU ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "( ( CRS + FirstVNF_CPU ) / ( FirstVNF_Mem / FirstVNF_CPU ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * FirstVNF_CPU_Server ),( FirstVNF_CPU / Max( ( Min( AMS ,ACS ) / PN ),Min( CRS ,Const ) ) ) )", "choosing": "( MUM / ( RMSe * DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}, {"determining": "Max( ( FirstVNF_CPU_Server * RRS ),( FirstVNF_CPU * ( Min( AMS ,Max( ( FirstVNF_Mem_Server - ( FirstVNF_RAM_Server * AMS ) ),MDR ) ) / PN ) ) )", "choosing": "( ( MUM / ( RMSe * DS ) ) + ( DS - DS ) )", "obj1": 0.06300813008130081, "obj2": 0.763429642591721}]}