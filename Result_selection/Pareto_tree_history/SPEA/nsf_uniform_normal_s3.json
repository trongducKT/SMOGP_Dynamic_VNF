{"1": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( BR * MRS ) / ( MRS / CRS ) )", "choosing": "Min( ( RCSe - CS ) ,Max( MLU,CS ) )", "obj1": 0.27385892116182575, "obj2": 0.6052705668942352}, {"determining": "Min( ( CRS / BR ) ,Min( FirstVNF_CPU_Server ,MRS ) )", "choosing": "( ( RCSe - CS ) / ( MLU / MLU ) )", "obj1": 0.3029045643153527, "obj2": 0.5840531164122345}, {"determining": "( Min( FirstVNF_Mem ,Const ) - ( Const - CRS ) )", "choosing": "( Max( RRSe,MLU ) * ( RRSe + DS ) )", "obj1": 0.9439834024896265, "obj2": 0.04981238156773053}, {"determining": "Max( ( Max( FirstVNF_CPU,BR ) - ( MDR / ACS ) ),( ( MRS / ACS ) - Min( Min( Max( AMS,ACS ) ,MDR ) ,FirstVNF_RAM ) ) )", "choosing": "( ( Max( MUR,RCSe ) - ( MLU + MLU ) ) * ( Max( MUC,RMSe ) - ( MUC - RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( Min( Const ,RRS ) ,( BR - FirstVNF_RAM_Server ) ) ,( ( ACS - FirstVNF_Mem_Server ) - Min( ARS ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( ( RCSe + DS ) / Min( RRSe ,DS ) ) / Max( Max( MUR,DS ),( CS / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( Min( ( Max( FirstVNF_CPU,MDR ) + ( RRS - BR ) ) ,( ( Min( PN ,( PN - RRS ) ) / MRS ) / ( FirstVNF_Mem * MDR ) ) ) * AMS ) - FirstVNF_CPU ) + ( Max( DDR,FirstVNF_RAM_Server ) * RRS ) )", "choosing": "Min( ( ( MUM / RRSe ) * ( RCSe * ( CS / RRSe ) ) ) ,Min( ( MUR - MLU ) ,( DS - CS ) ) )", "obj1": 0.995850622406639, "obj2": 0.003773703946850979}, {"determining": "Min( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) / ( RRS * FirstVNF_Mem_Server ) ) ,( Min( Const ,RRS ) - ( FirstVNF_RAM - RRS ) ) )", "choosing": "( Max( ( MLU - RRSe ),( MLU / RRSe ) ) * ( ( MUM - MUC ) + ( MUR / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( MDR,RRS ) - ( AMS / ACS ) ) * Max( ( RRS + Const ),( PN - DDR ) ) )", "choosing": "Max( Max( Max( MUC,RRSe ),MLU ),( ( MUR * RCSe ) * MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ACS ) - ( FirstVNF_CPU - DDR ) )", "choosing": "( ( RMSe - ( MUM - RMSe ) ) / Max( CS,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( MRS / CRS ) ,Max( BR,( Max( PN,AMS ) * FirstVNF_RAM_Server ) ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( RRSe * ( RCSe * Min( MUR ,MLU ) ) ) ) * ( ( RRSe * ( RCSe + MUC ) ) * CS ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( ( FirstVNF_RAM_Server - FirstVNF_RAM ) / ( ( MRS + DDR ) - ( RRS * FirstVNF_Mem ) ) )", "choosing": "Min( Max( ( RCSe * MUC ),( RCSe * RRSe ) ) ,Max( Min( CS ,MUC ),MUC ) )", "obj1": 0.34232365145228216, "obj2": 0.5717399626077239}, {"determining": "( Min( ( AMS - DDR ) ,( DDR / AMS ) ) / Max( ( DDR + BR ),( AMS + RRS ) ) )", "choosing": "Min( ( ( MUC + RMSe ) / ( CS + RCSe ) ) ,( ( MUC * DS ) / Min( MUM ,RCSe ) ) )", "obj1": 0.4066390041493776, "obj2": 0.5433934792732131}, {"determining": "( ( ( FirstVNF_CPU_Server + MRS ) * ( FirstVNF_CPU / FirstVNF_RAM ) ) - ( Max( Const,FirstVNF_CPU_Server ) + ( PN * FirstVNF_CPU_Server ) ) )", "choosing": "( ( ( DS + RRSe ) / ( MLU / MLU ) ) + Min( Min( RMSe ,RRSe ) ,Max( RRSe,RRSe ) ) )", "obj1": 0.6493775933609959, "obj2": 0.317829576631528}, {"determining": "( ( AMS / MRS ) - ( Const + ( FirstVNF_RAM_Server * BR ) ) )", "choosing": "( ( RCSe * ( MLU + MLU ) ) / Min( ( Min( MLU ,RMSe ) * MUC ) ,Max( ( DS / CS ),MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Max( FirstVNF_RAM,Const ),( ( DDR / BR ) - Max( Const,Max( PN,( FirstVNF_CPU - FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( Max( ( RRSe * ( ( ( MLU * MUC ) / DS ) + MUR ) ),( MUR + Max( MUR,( ( RCSe / DS ) - MUR ) ) ) ) * DS ),Min( MUC ,MUM ) ) )", "obj1": 0.10580912863070539, "obj2": 0.7472065387072515}, {"determining": "( Min( ( FirstVNF_RAM + FirstVNF_RAM_Server ) ,( FirstVNF_RAM_Server + Min( RRS ,( ( ( Min( FirstVNF_CPU ,FirstVNF_CPU_Server ) + DDR ) / FirstVNF_Mem ) * FirstVNF_Mem ) ) ) ) * ( FirstVNF_Mem - AMS ) )", "choosing": "Max( ( Max( MUR,MLU ) / MUM ),Min( MUC ,( ( RMSe - ( RMSe * MUR ) ) + MUM ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6553173963130607}, {"determining": "( ( AMS / FirstVNF_RAM ) * ( Max( ( RRS - ARS ),DDR ) * AMS ) )", "choosing": "( Max( ( ( MUR + MLU ) + ( DS + DS ) ),MUM ) - Max( ( ( MUC + CS ) + RMSe ),MUC ) )", "obj1": 0.24066390041493776, "obj2": 0.6096816491620075}, {"determining": "( Max( Min( ( AMS - MRS ) ,MDR ),( ( Const / Max( FirstVNF_RAM_Server,Const ) ) - FirstVNF_RAM ) ) + ( MRS * ( MRS - Const ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) * ( DS / MUC ) ) - Max( Max( DS,MLU ),( MUR / CS ) ) ) + ( ( MUM + ( RRSe * DS ) ) / ( ( MLU * CS ) / ( MUR + MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( FirstVNF_CPU_Server / RRS ) / ( CRS * ACS ) ) ) - ( ( ( FirstVNF_RAM_Server - ACS ) - ( CRS * MRS ) ) - Min( FirstVNF_CPU_Server ,CRS ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RRSe,RRSe ) ) / ( ( MUR * MUC ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,( ( DDR / ( Min( FirstVNF_RAM_Server ,( FirstVNF_Mem + PN ) ) + FirstVNF_Mem_Server ) ) * MDR ) ) - ( ( ( ARS * PN ) - MRS ) + FirstVNF_Mem_Server ) )", "choosing": "( ( Max( MLU,Min( CS ,MUR ) ) - DS ) - Min( ( MUR - RCSe ) ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.8402489626556017, "obj2": 0.10784560432314734}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - Max( MDR,MDR ) ) ) )", "choosing": "( ( ( DS - MUR ) - DS ) * Min( ( MLU * ( CS - RCSe ) ) ,RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( ARS * ( FirstVNF_CPU * ( MRS * AMS ) ) ) - Max( FirstVNF_Mem_Server,MRS ) )", "choosing": "( Min( ( Max( RMSe,RMSe ) * ( DS / MUM ) ) ,( Max( MUC,MUC ) - ( CS + MUC ) ) ) / ( Min( Min( RRSe ,RMSe ) ,( MUR * MUM ) ) / Max( Min( MUR ,MUM ),( RRSe + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( BR - ACS ) / Max( FirstVNF_Mem_Server,BR ) )", "choosing": "( Max( Min( ( RRSe - DS ) ,RCSe ),( RCSe / ( RCSe / CS ) ) ) + Max( ( CS + ( MUR / RRSe ) ),MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( MRS + ( AMS - FirstVNF_CPU_Server ) ) + FirstVNF_Mem_Server ) ,( ( PN - Max( BR,ARS ) ) * FirstVNF_Mem_Server ) )", "choosing": "( Max( MUC,MUM ) * Min( MUR ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.3941908713692946, "obj2": 0.5499255930663036}, {"determining": "( ( DDR / FirstVNF_Mem ) - Max( ( ( MDR + MDR ) / MRS ),Max( ( FirstVNF_CPU_Server - MRS ),RRS ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - FirstVNF_CPU_Server ) + Min( FirstVNF_CPU_Server ,( DDR - CRS ) ) )", "choosing": "( Max( ( ( RMSe - RCSe ) - Max( CS,MUR ) ),Min( Max( MUM,MLU ) ,( DS - DS ) ) ) / ( ( ( RMSe * MUR ) + ( RRSe + MUR ) ) + ( Max( MLU,CS ) + ( RMSe + MUR ) ) ) )", "obj1": 0.7448132780082988, "obj2": 0.2504085115729064}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,( RRS * BR ) ) ) )", "choosing": "Min( Max( RRSe,Min( MLU ,CS ) ) ,Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( RRS * DDR ) ,( BR - Max( MDR,FirstVNF_RAM ) ) )", "choosing": "( Min( ( Max( MLU,MUR ) / ( DS - MLU ) ) ,( Min( RMSe ,MLU ) - ( DS * DS ) ) ) + ( ( ( RRSe - RRSe ) / ( MUR / MUC ) ) / ( ( MLU / DS ) + Min( CS ,DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Max( BR,RRS ) / ( DDR / FirstVNF_Mem_Server ) ) * ( ( MDR / MDR ) * Max( ARS,BR ) ) ) - ( ( ( ARS * PN ) * ( ARS * ARS ) ) - ( ( MDR + MRS ) - ( CRS + FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( MLU * MUM ) * DS ) * Max( Max( ( RMSe * MUC ),CS ),( RCSe / DS ) ) )", "obj1": 1.0, "obj2": 0.0}], "2": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( CRS / BR ) ,Min( FirstVNF_CPU_Server ,MRS ) )", "choosing": "( ( RCSe - CS ) / ( MLU / MLU ) )", "obj1": 0.3029045643153527, "obj2": 0.5840531164122345}, {"determining": "Max( ( Max( FirstVNF_CPU,BR ) - ( MDR / ACS ) ),( ( MRS / ACS ) - Min( Min( Max( AMS,ACS ) ,MDR ) ,FirstVNF_RAM ) ) )", "choosing": "( ( Max( MUR,RCSe ) - ( MLU + MLU ) ) * ( Max( MUC,RMSe ) - ( MUC - RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Min( Min( Const ,RRS ) ,( BR - FirstVNF_RAM_Server ) ) ,( ( ACS - FirstVNF_Mem_Server ) - Min( ARS ,FirstVNF_Mem_Server ) ) )", "choosing": "( ( ( RCSe + DS ) / Min( RRSe ,DS ) ) / Max( Max( MUR,DS ),( CS / RMSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( Min( ( Max( FirstVNF_CPU,MDR ) + ( RRS - BR ) ) ,( ( Min( PN ,( PN - RRS ) ) / MRS ) / ( FirstVNF_Mem * MDR ) ) ) * AMS ) - FirstVNF_CPU ) + ( Max( DDR,FirstVNF_RAM_Server ) * RRS ) )", "choosing": "Min( ( ( MUM / RRSe ) * ( RCSe * ( CS / RRSe ) ) ) ,Min( ( MUR - MLU ) ,( DS - CS ) ) )", "obj1": 0.995850622406639, "obj2": 0.003773703946850979}, {"determining": "Min( ( Min( FirstVNF_Mem_Server ,FirstVNF_Mem ) / ( RRS * FirstVNF_Mem_Server ) ) ,( Min( Const ,RRS ) - ( FirstVNF_RAM - RRS ) ) )", "choosing": "( Max( ( MLU - RRSe ),( MLU / RRSe ) ) * ( ( MUM - MUC ) + ( MUR / MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( MDR,RRS ) - ( AMS / ACS ) ) * Max( ( RRS + Const ),( PN - DDR ) ) )", "choosing": "Max( Max( Max( MUC,RRSe ),MLU ),( ( MUR * RCSe ) * MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ACS ) - ( FirstVNF_CPU - DDR ) )", "choosing": "( ( RMSe - ( MUM - RMSe ) ) / Max( CS,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( ( MRS / CRS ) ,Max( BR,( Max( PN,AMS ) * FirstVNF_RAM_Server ) ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( RRSe * ( RCSe * Min( MUR ,MLU ) ) ) ) * ( ( RRSe * ( RCSe + MUC ) ) * CS ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( ( AMS / MRS ) - ( Const + ( FirstVNF_RAM_Server * BR ) ) )", "choosing": "( ( RCSe * ( MLU + MLU ) ) / Min( ( Min( MLU ,RMSe ) * MUC ) ,Max( ( DS / CS ),MUM ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( Max( FirstVNF_RAM,Const ),( ( DDR / BR ) - Max( Const,Max( PN,( FirstVNF_CPU - FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( Max( ( RRSe * ( ( ( MLU * MUC ) / DS ) + MUR ) ),( MUR + Max( MUR,( ( RCSe / DS ) - MUR ) ) ) ) * DS ),Min( MUC ,MUM ) ) )", "obj1": 0.10580912863070539, "obj2": 0.7472065387072515}, {"determining": "( Min( ( FirstVNF_RAM + FirstVNF_RAM_Server ) ,( FirstVNF_RAM_Server + Min( RRS ,( ( ( Min( FirstVNF_CPU ,FirstVNF_CPU_Server ) + DDR ) / FirstVNF_Mem ) * FirstVNF_Mem ) ) ) ) * ( FirstVNF_Mem - AMS ) )", "choosing": "Max( ( Max( MUR,MLU ) / MUM ),Min( MUC ,( ( RMSe - ( RMSe * MUR ) ) + MUM ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6553173963130607}, {"determining": "( Max( Min( ( AMS - MRS ) ,MDR ),( ( Const / Max( FirstVNF_RAM_Server,Const ) ) - FirstVNF_RAM ) ) + ( MRS * ( MRS - Const ) ) )", "choosing": "( ( ( ( RCSe / RRSe ) * ( DS / MUC ) ) - Max( Max( DS,MLU ),( MUR / CS ) ) ) + ( ( MUM + ( RRSe * DS ) ) / ( ( MLU * CS ) / ( MUR + MUC ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( FirstVNF_CPU_Server / RRS ) / ( CRS * ACS ) ) ) - ( ( ( FirstVNF_RAM_Server - ACS ) - ( CRS * MRS ) ) - Min( FirstVNF_CPU_Server ,CRS ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RRSe,RRSe ) ) / ( ( MUR * MUC ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( PN,( ( DDR / ( Min( FirstVNF_RAM_Server ,( FirstVNF_Mem + PN ) ) + FirstVNF_Mem_Server ) ) * MDR ) ) - ( ( ( ARS * PN ) - MRS ) + FirstVNF_Mem_Server ) )", "choosing": "( ( Max( MLU,Min( CS ,MUR ) ) - DS ) - Min( ( MUR - RCSe ) ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.8402489626556017, "obj2": 0.10784560432314734}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - Max( MDR,MDR ) ) ) )", "choosing": "( ( ( DS - MUR ) - DS ) * Min( ( MLU * ( CS - RCSe ) ) ,RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( ARS * ( FirstVNF_CPU * ( MRS * AMS ) ) ) - Max( FirstVNF_Mem_Server,MRS ) )", "choosing": "( Min( ( Max( RMSe,RMSe ) * ( DS / MUM ) ) ,( Max( MUC,MUC ) - ( CS + MUC ) ) ) / ( Min( Min( RRSe ,RMSe ) ,( MUR * MUM ) ) / Max( Min( MUR ,MUM ),( RRSe + RRSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( BR - ACS ) / Max( FirstVNF_Mem_Server,BR ) )", "choosing": "( Max( Min( ( RRSe - DS ) ,RCSe ),( RCSe / ( RCSe / CS ) ) ) + Max( ( CS + ( MUR / RRSe ) ),MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( ( MRS + ( AMS - FirstVNF_CPU_Server ) ) + FirstVNF_Mem_Server ) ,( ( PN - Max( BR,ARS ) ) * FirstVNF_Mem_Server ) )", "choosing": "( Max( MUC,MUM ) * Min( MUR ,MUC ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR / FirstVNF_Mem ) - Max( ( ( MDR + MDR ) / MRS ),Max( ( FirstVNF_CPU_Server - MRS ),RRS ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,( RRS * BR ) ) ) )", "choosing": "Min( Max( RRSe,Min( MLU ,CS ) ) ,Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( RRS * DDR ) ,( BR - Max( MDR,FirstVNF_RAM ) ) )", "choosing": "( Min( ( Max( MLU,MUR ) / ( DS - MLU ) ) ,( Min( RMSe ,MLU ) - ( DS * DS ) ) ) + ( ( ( RRSe - RRSe ) / ( MUR / MUC ) ) / ( ( MLU / DS ) + Min( CS ,DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( Max( BR,RRS ) / ( DDR / FirstVNF_Mem_Server ) ) * ( ( MDR / MDR ) * Max( ARS,BR ) ) ) - ( ( ( ARS * PN ) * ( ARS * ARS ) ) - ( ( MDR + MRS ) - ( CRS + FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( MLU * MUM ) * DS ) * Max( Max( ( RMSe * MUC ),CS ),( RCSe / DS ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( FirstVNF_RAM,Const ) / Min( ( ARS - ( FirstVNF_CPU_Server * Max( FirstVNF_CPU_Server,ARS ) ) ) ,FirstVNF_RAM_Server ) )", "choosing": "Max( Max( ( RRSe + MLU ),( MUC - ( MUR / MLU ) ) ),( ( RRSe * RRSe ) / RRSe ) )", "obj1": 0.32987551867219916, "obj2": 0.5324900451081063}, {"determining": "Min( ( ( BR * BR ) - Min( FirstVNF_RAM_Server ,BR ) ) ,Max( ACS,FirstVNF_Mem ) )", "choosing": "Max( ( Max( DS,MUM ) * RRSe ),Min( RRSe ,MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,( RRS * BR ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),MLU )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,( RRS * BR ) ) ) )", "choosing": "Min( Max( RRSe,Min( MLU ,CS ) ) ,Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR / FirstVNF_Mem ) - Max( ( ( MDR + MDR ) / MRS ),Max( ( AMS - MRS ),RRS ) ) )", "choosing": "Min( ( ( ( MUR + MUR ) / ( CS * MUR ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - FirstVNF_Mem ) - Max( RRS,AMS ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR / FirstVNF_Mem ) - Max( ( ( MDR + MDR ) / MRS ),Max( ( FirstVNF_CPU_Server - MRS ),RRS ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,RRS ) ) )", "choosing": "Min( Max( RRSe,Min( MLU ,CS ) ) ,Min( MUR ,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,( RRS * BR ) ) ) )", "choosing": "( Min( MUR ,RMSe ) + ( CS / MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( Const / ( ( FirstVNF_CPU_Server + DDR ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ) ) ,Max( BR,FirstVNF_Mem ) )", "choosing": "( Min( RCSe ,( DS + RRSe ) ) - ( Max( RCSe,MUC ) * ( MUC + MUC ) ) )", "obj1": 0.1991701244813278, "obj2": 0.6489782745442795}, {"determining": "( ( ARS + FirstVNF_Mem ) - ( ARS / Min( ( Const / FirstVNF_RAM ) ,Max( BR,FirstVNF_Mem ) ) ) )", "choosing": "Max( ( RRSe * MUR ),Min( RCSe ,( DS + RRSe ) ) )", "obj1": 0.6473029045643154, "obj2": 0.2951101128243912}, {"determining": "Min( ( RRS * DDR ) ,( BR - Max( MDR,DDR ) ) )", "choosing": "( Min( ( Max( MLU,MUR ) / ( DS - MLU ) ) ,( CS - RMSe ) ) + ( ( ( RRSe - RRSe ) / ( MUR / MUC ) ) / ( ( MLU / DS ) + Min( CS ,DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( ( RRS * DDR ) ,( BR - Max( MDR,FirstVNF_RAM ) ) )", "choosing": "( Min( ( Max( MLU,MUR ) / ( DS - MLU ) ) ,( Min( RMSe ,MLU ) - ( DS * DS ) ) ) + ( ( ( RRSe - RRSe ) / ( MUR / MUC ) ) / ( ( MLU / DS ) + Min( CS ,DS ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR / FirstVNF_Mem ) - Max( ( ( MDR + FirstVNF_Mem ) / MRS ),Max( ( FirstVNF_CPU_Server - MRS ),RRS ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( RRSe ,MUR ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( DDR / FirstVNF_Mem ) - Max( ( ( MDR + MDR ) / MRS ),Max( ( FirstVNF_CPU_Server - MRS ),RRS ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( CRS - FirstVNF_Mem_Server ),Min( ( MDR - ACS ) ,BR ) )", "choosing": "( ( CS + RMSe ) * ( MUM * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ACS ) - Max( ( CRS - FirstVNF_Mem_Server ),Min( Const ,BR ) ) )", "choosing": "( ( RMSe - ( MUM - ( ( CS + RMSe ) * ( MLU * DS ) ) ) ) / Max( CS,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR - ACS ) - ( FirstVNF_CPU - DDR ) )", "choosing": "( ( CS + RMSe ) * ( MLU * DS ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( Min( FirstVNF_Mem_Server ,MRS ) - ( MDR / PN ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( MUC * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - FirstVNF_Mem ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( MDR / Const ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( ( RCSe - CS ) ,Max( MLU,CS ) )", "obj1": 0.7842323651452282, "obj2": 0.15897972279719516}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( FirstVNF_CPU_Server / RRS ) / ( CRS * ACS ) ) ) - ( Max( PN,MDR ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,( MUM / DS ) ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( Min( CS ,RCSe ) * MUC ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,Max( ( MLU * Max( RMSe,( MLU * MUR ) ) ),RCSe ) ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( FirstVNF_CPU_Server / RRS ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( RRSe + MUM ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( ( MLU * MUM ) / ( MUM * RCSe ) ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Max( ( ( CRS / BR ) - Max( Const,DDR ) ),( Min( DDR ,CRS ) * Max( MDR,PN ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( MUC ,MUM ) ) )", "obj1": 0.10580912863070539, "obj2": 0.7472065387072515}, {"determining": "( ( ( FirstVNF_CPU / ACS ) - FirstVNF_Mem ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( ( Min( DS ,DS ) + ( MUM * MUR ) ) * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_CPU / ACS ) / ( ( AMS - FirstVNF_Mem ) - Max( RRS,AMS ) ) )", "choosing": "( Min( DS ,DS ) + ( MUR * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS - FirstVNF_Mem ) - Max( RRS,AMS ) )", "choosing": "( Min( DS ,DS ) + ( MUM * MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6120549744267159}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,( Min( FirstVNF_Mem ,Const ) * BR ) ) ) )", "choosing": "Min( Max( ( Max( RRSe,MLU ) * ( RRSe + DS ) ),Min( MLU ,CS ) ) ,Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * Min( ( ARS - RRS ) ,Max( DDR,( RRS * BR ) ) ) )", "choosing": "Min( Max( RRSe,Min( MLU ,CS ) ) ,Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( Min( FirstVNF_Mem ,Const ) - ( Const - CRS ) )", "choosing": "( Max( RRSe,MLU ) * ( RRSe + DS ) )", "obj1": 0.9377593360995851, "obj2": 0.05499639248974802}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( Max( ( ( FirstVNF_Mem + MDR ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "Min( Max( MUM,RMSe ) ,Min( MUR ,( ( DS + ( MUC * RMSe ) ) / ( Max( CS,MUM ) - ( RRSe / MUR ) ) ) ) )", "obj1": 0.7033195020746889, "obj2": 0.21948894479355474}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( DS + ( MUC * RMSe ) ) / ( Max( CS,MUM ) - ( RRSe / MUR ) ) )", "obj1": 0.7136929460580913, "obj2": 0.2070578020346546}, {"determining": "Max( ( ( ( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) + FirstVNF_Mem ) - ( PN * FirstVNF_Mem_Server ) ),Min( BR ,MDR ) )", "choosing": "( ( ( MUC * RMSe ) + ( MUM - ( ( ( CS + CS ) * ( RCSe * ( MLU - MUR ) ) ) / RRSe ) ) ) / ( MUR - Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.516597510373444, "obj2": 0.44980686237760054}, {"determining": "Max( ( ( ( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) + FirstVNF_Mem ) - ( PN * FirstVNF_Mem_Server ) ),Min( BR ,MDR ) )", "choosing": "( ( ( MUC * RMSe ) + ( MUM - ( ( ( CS + CS ) * ( RCSe * ( MLU - MUR ) ) ) / RRSe ) ) ) / ( MUR - Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.516597510373444, "obj2": 0.44980686237760054}, {"determining": "Max( ( ( ( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) + FirstVNF_Mem ) - ( PN * FirstVNF_Mem_Server ) ),Min( BR ,MDR ) )", "choosing": "( ( ( MUC * RMSe ) + ( MUM - ( ( ( CS + CS ) * ( RCSe * ( MLU - MUR ) ) ) / RRSe ) ) ) / ( MUR - Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.516597510373444, "obj2": 0.44980686237760054}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( ( MUC * RMSe ) + DS ) / ( MUR * Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_RAM * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Max( Min( ( MLU - ( MLU + RRSe ) ) ,CS ),RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.516597510373444, "obj2": 0.44980686237760054}, {"determining": "Min( ( Min( CRS ,( CRS / FirstVNF_CPU ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( Max( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ),( BR - DDR ) ) + ( Const / ACS ) ) * ( ( ARS * MRS ) / Max( BR,RRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUC,Min( MUR ,RCSe ) ) ,( MUC / ( CS - ( RCSe + ( CS / Max( MUR,CS ) ) ) ) ) ) * ( Max( RMSe,MUM ) * Max( RMSe,CS ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "( ( Max( DDR,DDR ) / ( ACS + FirstVNF_RAM ) ) + ( ( BR - ACS ) / Max( FirstVNF_Mem_Server,BR ) ) )", "choosing": "Min( ( Min( MUC ,MUR ) / ( MLU + MUR ) ) ,( CS + ( MUR / RRSe ) ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( BR - ACS ) / Max( ( ( Max( DDR,DDR ) / ( ACS + FirstVNF_RAM ) ) + ( ( Const - RRS ) + Max( FirstVNF_CPU,MDR ) ) ),BR ) )", "choosing": "( Max( Min( ( RRSe - DS ) ,RCSe ),( RCSe / ( ( MLU + MUR ) / CS ) ) ) + Max( ( CS + ( MUR / RRSe ) ),MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( BR - ACS ) / Max( FirstVNF_Mem_Server,BR ) )", "choosing": "( Max( Min( ( RRSe - DS ) ,RCSe ),( RCSe / ( RCSe / CS ) ) ) + Max( ( CS + ( MUR / RRSe ) ),MUR ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS / ACS ) - ( Const + ( Max( ( CRS - FirstVNF_RAM_Server ),( FirstVNF_RAM_Server + DDR ) ) + ( ( FirstVNF_CPU_Server + DDR ) - ( MDR - BR ) ) ) ) )", "choosing": "( ( RCSe - ( MLU + MLU ) ) / Min( MUM ,RMSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( AMS / ACS ) - ( Const + Const ) )", "choosing": "( ( RCSe - ( MLU + MLU ) ) / ( RRSe - MLU ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( FirstVNF_CPU_Server / RRS ) / ( CRS * ACS ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) )", "obj1": 0.14730290456431536, "obj2": 0.7010517368604116}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),MRS ) ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.533195020746888, "obj2": 0.3444799435081506}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.42738589211618255, "obj2": 0.4644266472427987}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( CRS / FirstVNF_RAM_Server ),Min( FirstVNF_RAM ,RRS ) ) + ( ( FirstVNF_CPU_Server + MRS ) - ( Min( ( FirstVNF_Mem * FirstVNF_CPU ) ,Min( Const ,PN ) ) - BR ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( ( ( CS * ( ( MUC / MUM ) + ( CS - RRSe ) ) ) + ( RMSe * MLU ) ) / MLU ) ) ) )", "obj1": 0.26348547717842324, "obj2": 0.5924935521814474}, {"determining": "( ( MDR - ( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) ) ) / ( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( ( MUM * MUR ) - ( RCSe * MLU ) )", "obj1": 0.7821576763485477, "obj2": 0.19292578803180713}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( MUM / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( DS - RRSe ) * ( ( RRSe + ( MUC - CS ) ) + ( MLU - ( MUR - Min( Min( RCSe ,Min( RRSe ,( MUC - RRSe ) ) ) ,Min( MUC ,DS ) ) ) ) ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( Min( ( CRS / ( FirstVNF_RAM_Server * ( Min( DDR ,FirstVNF_Mem_Server ) / Min( RRS ,( ACS * CRS ) ) ) ) ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( ( Min( RCSe ,CS ) / Min( ( MUC / RMSe ) ,RCSe ) ) / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( ( ( ( RRS - ARS ) - MRS ) / ( DDR / FirstVNF_Mem ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / ( BR + FirstVNF_Mem_Server ) ) ) )", "choosing": "( Min( RCSe ,CS ) / ( RRSe / ( RMSe - MUM ) ) )", "obj1": 0.991701244813278, "obj2": 0.0039527383428002065}, {"determining": "( ( FirstVNF_Mem + ( PN / FirstVNF_Mem ) ) * Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM - FirstVNF_CPU ) ) ) )", "choosing": "( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( ARS / Max( DDR,( FirstVNF_RAM / FirstVNF_CPU ) ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( ( CS - ( Min( ( MLU + MUM ) ,MUR ) + Min( MUR ,MLU ) ) ) - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( MUM - MUM ) + ( DS + MLU ) ) ) )", "obj1": 0.9854771784232366, "obj2": 0.004710770142983677}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( ( MUC * RMSe ) + DS ) / ( MUR * Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "( ( DDR - FirstVNF_CPU_Server ) + ( DDR * FirstVNF_Mem ) )", "choosing": "Max( ( MLU * RRSe ),Min( RRSe ,MUR ) )", "obj1": 0.8879668049792531, "obj2": 0.10687811279511844}, {"determining": "( ( FirstVNF_RAM / BR ) - ( Min( ( ARS * PN ) ,MRS ) + FirstVNF_Mem_Server ) )", "choosing": "( Max( RCSe,MUM ) - ( ( MLU - RCSe ) * ( ( Min( Max( RMSe,Max( MLU,RRSe ) ) ,( RRSe / Max( Max( RRSe,MLU ),MUR ) ) ) / ( Min( ( MUR / ( RRSe / RRSe ) ) ,MLU ) / ( ( RCSe * MUM ) * MUM ) ) ) + RCSe ) ) )", "obj1": 0.9356846473029046, "obj2": 0.08253576270132235}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + ACS ) ) - PN ) / PN ) + ( DDR / Min( Min( DDR ,CRS ) ,PN ) ) )", "choosing": "( ( Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) - CS ) * ( MUR * ( ( MUM / RMSe ) * DS ) ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + ACS ) ) - PN ) / PN ) + ( DDR / Min( Min( DDR ,CRS ) ,PN ) ) )", "choosing": "( ( Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) - CS ) * ( MUR * ( ( MUM / RMSe ) * DS ) ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + ACS ) ) - PN ) / PN ) + ( DDR / Min( Min( DDR ,CRS ) ,PN ) ) )", "choosing": "( ( Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) - CS ) * ( MUR * ( ( MUM / RMSe ) * DS ) ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( ( PN / ( ( BR / Const ) - PN ) ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * CS ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( Min( FirstVNF_Mem ,Const ) - ( Const - CRS ) )", "choosing": "( Max( RRSe,MLU ) * ( RRSe + DS ) )", "obj1": 0.9439834024896265, "obj2": 0.04708751047402717}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( RMSe / MLU ) ) ) )", "obj1": 0.45643153526970953, "obj2": 0.4507677958234359}, {"determining": "( ( ( ( AMS / FirstVNF_RAM ) * ( Max( ( RRS - ARS ),DDR ) * AMS ) ) / ( PN * ACS ) ) - ( AMS * BR ) )", "choosing": "Max( ( Min( ( MUC / MUR ) ,( RRSe / MUM ) ) / Max( ( ( MUC + CS ) + RMSe ),MUC ) ),Min( ( Max( DS,RRSe ) - DS ) ,DS ) )", "obj1": 0.23858921161825727, "obj2": 0.6051727131199065}, {"determining": "Max( ( ( CRS / BR ) - Max( Const,DDR ) ),( Min( DDR ,CRS ) * Max( MDR,PN ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( MUC ,MUM ) ) )", "obj1": 0.10580912863070539, "obj2": 0.7472065387072515}], "3": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( Min( ( MRS / CRS ) ,Max( BR,( Max( PN,AMS ) * FirstVNF_RAM_Server ) ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( MLU - ( RRSe * ( RCSe * Min( MUR ,MLU ) ) ) ) * ( ( RRSe * ( RCSe + MUC ) ) * CS ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "Max( Max( FirstVNF_RAM,Const ),( ( DDR / BR ) - Max( Const,Max( PN,( FirstVNF_CPU - FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( Max( ( RRSe * ( ( ( MLU * MUC ) / DS ) + MUR ) ),( MUR + Max( MUR,( ( RCSe / DS ) - MUR ) ) ) ) * DS ),Min( MUC ,MUM ) ) )", "obj1": 0.10580912863070539, "obj2": 0.7472065387072515}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.8402489626556017, "obj2": 0.10784560432314734}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - Max( MDR,MDR ) ) ) )", "choosing": "( ( ( DS - MUR ) - DS ) * Min( ( MLU * ( CS - RCSe ) ) ,RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( FirstVNF_RAM,Const ) / Min( ( ARS - ( FirstVNF_CPU_Server * Max( FirstVNF_CPU_Server,ARS ) ) ) ,FirstVNF_RAM_Server ) )", "choosing": "Max( Max( ( RRSe + MLU ),( MUC - ( MUR / MLU ) ) ),( ( RRSe * RRSe ) / RRSe ) )", "obj1": 0.32987551867219916, "obj2": 0.5324900451081063}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( ( Const / ( ( FirstVNF_CPU_Server + DDR ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ) ) ,Max( BR,FirstVNF_Mem ) )", "choosing": "( Min( RCSe ,( DS + RRSe ) ) - ( Max( RCSe,MUC ) * ( MUC + MUC ) ) )", "obj1": 0.1991701244813278, "obj2": 0.6489782745442795}, {"determining": "( ( MDR / Const ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( ( RCSe - CS ) ,Max( MLU,CS ) )", "obj1": 0.7842323651452282, "obj2": 0.15897972279719516}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( Min( CS ,RCSe ) * MUC ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,Max( ( MLU * Max( RMSe,( MLU * MUR ) ) ),RCSe ) ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Max( ( ( CRS / BR ) - Max( Const,DDR ) ),( Min( DDR ,CRS ) * Max( MDR,PN ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( MUC ,MUM ) ) )", "obj1": 0.10580912863070539, "obj2": 0.7472065387072515}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6120549744267159}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( DS + ( MUC * RMSe ) ) / ( Max( CS,MUM ) - ( RRSe / MUR ) ) )", "obj1": 0.7136929460580913, "obj2": 0.2070578020346546}, {"determining": "Max( ( ( ( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) + FirstVNF_Mem ) - ( PN * FirstVNF_Mem_Server ) ),Min( BR ,MDR ) )", "choosing": "( ( ( MUC * RMSe ) + ( MUM - ( ( ( CS + CS ) * ( RCSe * ( MLU - MUR ) ) ) / RRSe ) ) ) / ( MUR - Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "Max( ( ( ( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) + FirstVNF_Mem ) - ( PN * FirstVNF_Mem_Server ) ),Min( BR ,MDR ) )", "choosing": "( ( ( MUC * RMSe ) + ( MUM - ( ( ( CS + CS ) * ( RCSe * ( MLU - MUR ) ) ) / RRSe ) ) ) / ( MUR - Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "Max( ( ( ( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) + FirstVNF_Mem ) - ( PN * FirstVNF_Mem_Server ) ),Min( BR ,MDR ) )", "choosing": "( ( ( MUC * RMSe ) + ( MUM - ( ( ( CS + CS ) * ( RCSe * ( MLU - MUR ) ) ) / RRSe ) ) ) / ( MUR - Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( ( MUC * RMSe ) + DS ) / ( MUR * Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "Min( ( Min( CRS ,( CRS / FirstVNF_CPU ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( Max( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ),( BR - DDR ) ) + ( Const / ACS ) ) * ( ( ARS * MRS ) / Max( BR,RRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUC,Min( MUR ,RCSe ) ) ,( MUC / ( CS - ( RCSe + ( CS / Max( MUR,CS ) ) ) ) ) ) * ( Max( RMSe,MUM ) * Max( RMSe,CS ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "( ( ( FirstVNF_CPU_Server / RRS ) / ( CRS * ACS ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) )", "obj1": 0.14730290456431536, "obj2": 0.7010517368604116}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),MRS ) ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.533195020746888, "obj2": 0.3444799435081506}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.42738589211618255, "obj2": 0.4644266472427987}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( CRS / FirstVNF_RAM_Server ),Min( FirstVNF_RAM ,RRS ) ) + ( ( FirstVNF_CPU_Server + MRS ) - ( Min( ( FirstVNF_Mem * FirstVNF_CPU ) ,Min( Const ,PN ) ) - BR ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( ( ( CS * ( ( MUC / MUM ) + ( CS - RRSe ) ) ) + ( RMSe * MLU ) ) / MLU ) ) ) )", "obj1": 0.26348547717842324, "obj2": 0.5924935521814474}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( MUM / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( DS - RRSe ) * ( ( RRSe + ( MUC - CS ) ) + ( MLU - ( MUR - Min( Min( RCSe ,Min( RRSe ,( MUC - RRSe ) ) ) ,Min( MUC ,DS ) ) ) ) ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( Min( ( CRS / ( FirstVNF_RAM_Server * ( Min( DDR ,FirstVNF_Mem_Server ) / Min( RRS ,( ACS * CRS ) ) ) ) ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( ( Min( RCSe ,CS ) / Min( ( MUC / RMSe ) ,RCSe ) ) / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( ( ( ( RRS - ARS ) - MRS ) / ( DDR / FirstVNF_Mem ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / ( BR + FirstVNF_Mem_Server ) ) ) )", "choosing": "( Min( RCSe ,CS ) / ( RRSe / ( RMSe - MUM ) ) )", "obj1": 0.991701244813278, "obj2": 0.0039527383428002065}, {"determining": "( ( FirstVNF_Mem + ( PN / FirstVNF_Mem ) ) * Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM - FirstVNF_CPU ) ) ) )", "choosing": "( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( ARS / Max( DDR,( FirstVNF_RAM / FirstVNF_CPU ) ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( ( CS - ( Min( ( MLU + MUM ) ,MUR ) + Min( MUR ,MLU ) ) ) - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( MUM - MUM ) + ( DS + MLU ) ) ) )", "obj1": 0.9854771784232366, "obj2": 0.004710770142983677}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( ( MUC * RMSe ) + DS ) / ( MUR * Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + ACS ) ) - PN ) / PN ) + ( DDR / Min( Min( DDR ,CRS ) ,PN ) ) )", "choosing": "( ( Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) - CS ) * ( MUR * ( ( MUM / RMSe ) * DS ) ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + ACS ) ) - PN ) / PN ) + ( DDR / Min( Min( DDR ,CRS ) ,PN ) ) )", "choosing": "( ( Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) - CS ) * ( MUR * ( ( MUM / RMSe ) * DS ) ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + ACS ) ) - PN ) / PN ) + ( DDR / Min( Min( DDR ,CRS ) ,PN ) ) )", "choosing": "( ( Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) - CS ) * ( MUR * ( ( MUM / RMSe ) * DS ) ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( ( PN / ( ( BR / Const ) - PN ) ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * CS ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( RMSe / MLU ) ) ) )", "obj1": 0.45643153526970953, "obj2": 0.4507677958234359}, {"determining": "( ( ( ( AMS / FirstVNF_RAM ) * ( Max( ( RRS - ARS ),DDR ) * AMS ) ) / ( PN * ACS ) ) - ( AMS * BR ) )", "choosing": "Max( ( Min( ( MUC / MUR ) ,( RRSe / MUM ) ) / Max( ( ( MUC + CS ) + RMSe ),MUC ) ),Min( ( Max( DS,RRSe ) - DS ) ,DS ) )", "obj1": 0.23858921161825727, "obj2": 0.6051727131199065}, {"determining": "Max( ( ( CRS / BR ) - Max( Const,DDR ) ),( Min( DDR ,CRS ) * Max( MDR,PN ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( MUC ,MUM ) ) )", "obj1": 0.10580912863070539, "obj2": 0.7472065387072515}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "Min( ( Min( MUC ,MUR ) / ( MLU + MUR ) ) ,( CS + ( MUR / RRSe ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( ARS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( FirstVNF_CPU - ACS ) ) ) )", "choosing": "( Max( ( MUR / Min( DS ,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.45020746887966806, "obj2": 0.45529155540268784}, {"determining": "( ( ( RRS * MRS ) - ( Min( ( MRS / CRS ) ,( FirstVNF_Mem / DDR ) ) / Max( ( PN / DDR ),( FirstVNF_Mem_Server / FirstVNF_Mem ) ) ) ) / ( CRS / ARS ) )", "choosing": "( ( MUM - MUR ) - ( Max( ( ( MUM / MUR ) / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) ) )", "obj1": 0.8153526970954357, "obj2": 0.1589368675730974}, {"determining": "( Max( ( Max( PN,CRS ) * ( ACS / FirstVNF_Mem_Server ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( Min( Min( MRS ,ARS ) ,( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - ( MDR - Min( ARS ,DDR ) ) ) ) )", "choosing": "( Min( CS ,DS ) * ( ( ( CS - RCSe ) + MLU ) + RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( Max( FirstVNF_CPU,( ( FirstVNF_CPU_Server * ARS ) * DDR ) ) * ( FirstVNF_CPU * FirstVNF_RAM ) ) / FirstVNF_Mem )", "choosing": "Min( Max( Min( ( MLU - ( MLU + RRSe ) ) ,CS ),RMSe ) ,Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( MUR - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( ( ( MUR / MUM ) + RRSe ) + MLU ) + ( MUM - MUM ) ) ) ) )", "obj1": 0.8443983402489627, "obj2": 0.10479740395461677}, {"determining": "( ( ( ( PN - Const ) * Max( DDR,FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / ( MDR / Min( ARS ,FirstVNF_RAM_Server ) ) )", "choosing": "( Max( MUM,Max( MUC,( ( ( Min( ( MUR - MLU ) ,RMSe ) - ( MUR / MUC ) ) + Max( RCSe,( MUC * RCSe ) ) ) + ( RCSe + MUM ) ) ) ) / ( Max( MUR,MUM ) - ( RRSe / MUR ) ) )", "obj1": 0.7240663900414938, "obj2": 0.19653313868335281}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( MUM / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.42323651452282157, "obj2": 0.46508358868544714}, {"determining": "( Min( ( AMS / ACS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( MUM / ( ( RCSe - ( MLU + MLU ) ) - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe - ( MLU + MLU ) ) / ( RRSe - MLU ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Min( FirstVNF_Mem_Server ,MRS ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( ( Min( RCSe ,CS ) / Min( ( MUC / MUC ) ,RCSe ) ) / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( ( ( Max( FirstVNF_Mem_Server,Max( ACS,BR ) ) * Const ) / FirstVNF_RAM ) / ( ( FirstVNF_Mem_Server / FirstVNF_Mem ) - ( PN / DDR ) ) )", "choosing": "( ( MUR + MUR ) / ( ( ( DS * Max( MLU,RRSe ) ) / RCSe ) * MUC ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Max( ( CRS / FirstVNF_RAM_Server ),( FirstVNF_RAM_Server + ARS ) ) + ( ( FirstVNF_CPU_Server + DDR ) - ( Min( ( FirstVNF_Mem * FirstVNF_CPU ) ,Min( Const ,PN ) ) - BR ) ) )", "choosing": "Min( ( MUC / Min( ( Max( MUR,MLU ) / MUM ) ,RMSe ) ) ,( DS - ( RRSe + ( ( ( CS * MUC ) + ( RMSe * MLU ) ) / MLU ) ) ) )", "obj1": 0.26348547717842324, "obj2": 0.5924935521814474}, {"determining": "Max( ( ( CRS / BR ) - Max( Const,DDR ) ),( Min( DDR ,CRS ) * Max( MDR,PN ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( MUC ,MUM ) ) )", "obj1": 0.11203319502074689, "obj2": 0.7446738431428708}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( MUR + MUR ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.7657836024840703}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.11203319502074689, "obj2": 0.7446738431428708}, {"determining": "Max( ( ( CRS / BR ) - Max( Const,DDR ) ),( Min( DDR ,CRS ) * Max( MDR,PN ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( MUC ,MUM ) ) )", "obj1": 0.11203319502074689, "obj2": 0.7446738431428708}, {"determining": "( ( FirstVNF_CPU / ACS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6120549744267159}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),MRS ) ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "Min( Max( RRSe,Min( MLU ,CS ) ) ,Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) )", "obj1": 0.6825726141078838, "obj2": 0.28197009341369883}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - Max( RRS,AMS ) ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / ( Min( DS ,DS ) + ( MUM * MUR ) ) ) )", "obj1": 0.6327800829875518, "obj2": 0.28273795940557755}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( ( ( ( AMS / FirstVNF_RAM ) * ( Max( ( RRS - ARS ),DDR ) * AMS ) ) / ( PN * ACS ) ) - ( AMS * BR ) )", "choosing": "Max( ( Min( ( MUC / MUR ) ,( RRSe / MUM ) ) / Max( ( ( MUC + CS ) + RMSe ),MUC ) ),Min( ( Max( DS,RRSe ) - DS ) ,DS ) )", "obj1": 0.23858921161825727, "obj2": 0.6051727131199065}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( FirstVNF_Mem_Server - ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) * ( DDR - BR ) ) ) + AMS ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + Min( MUR ,MUM ) )", "obj1": 0.516597510373444, "obj2": 0.38431736753752477}, {"determining": "Min( Max( ARS,( RRS / MRS ) ) ,Min( FirstVNF_CPU_Server ,ACS ) )", "choosing": "Max( ( Min( CS ,Min( Min( MLU ,( Max( RRSe,( RMSe / MUR ) ) * MLU ) ) ,RRSe ) ) / ( RRSe + Min( RRSe ,MUR ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( ( CRS / FirstVNF_RAM_Server ),Min( FirstVNF_RAM ,RRS ) ) + ( CRS * ( CRS - Const ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( ( ( CS * ( ( MUC / MUM ) + ( CS - RRSe ) ) ) + ( RMSe * ( Min( MUR ,RMSe ) + ( CS / MUR ) ) ) ) / MLU ) ) ) )", "obj1": 0.24066390041493776, "obj2": 0.6025840669884276}, {"determining": "( ( PN / ( ( BR / Const ) - PN ) ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * CS ) )", "obj1": 0.9813278008298755, "obj2": 0.015758046633577792}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( MRS ,Min( ACS ,DDR ) ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( Min( RRSe ,( ( RCSe * Min( MUC ,MUR ) ) + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "( Max( ACS,Max( BR,FirstVNF_RAM ) ) - Min( RRS ,AMS ) )", "choosing": "( Min( MUM ,( ( MLU - MLU ) + Min( RCSe ,RRSe ) ) ) / ( ( Max( DS,MUM ) * RRSe ) * MUR ) )", "obj1": 0.8547717842323651, "obj2": 0.09598653565469441}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_RAM * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.4004149377593361, "obj2": 0.48873057178092555}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( Max( MDR,MRS ) ,Min( ( MDR / FirstVNF_Mem_Server ) ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Max( FirstVNF_CPU,MRS ) / ( AMS - MRS ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( Max( RMSe,MUM ) * ( ( Max( DS,( RMSe - MLU ) ) - MUM ) / ( ( ( RCSe + CS ) - ( CS + MUM ) ) + Min( MUC ,RMSe ) ) ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 0.9854771784232366, "obj2": 0.004710770142983677}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( Max( ( ( FirstVNF_Mem + MDR ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "Min( Max( MUM,RMSe ) ,Min( MUR ,( ( DS + ( MUC * RMSe ) ) / ( Max( CS,MUM ) - ( RRSe / MUR ) ) ) ) )", "obj1": 0.6991701244813278, "obj2": 0.20892464220441248}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( ( MUC * RMSe ) + DS ) / ( MUR * Min( RMSe ,CS ) ) )", "obj1": 0.25311203319502074, "obj2": 0.5991481138868603}, {"determining": "( ( ( FirstVNF_CPU_Server / ( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / ( CRS + DDR ) ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) ) ) / ( CRS * ACS ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "( ( Min( MUC ,MUM ) + MUC ) / ( ( ( ( ( RMSe - CS ) * DS ) / RMSe ) + CS ) + RCSe ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( DS + ( MUC * RMSe ) ) / ( Max( CS,MUM ) - ( RRSe / MUR ) ) )", "obj1": 0.7136929460580913, "obj2": 0.2070578020346546}, {"determining": "( ( MDR - ( ACS * FirstVNF_RAM_Server ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( Max( MLU,CS ) ,( RCSe - ( Max( MUR,MUM ) + MUM ) ) )", "obj1": 0.7842323651452282, "obj2": 0.15897972279719516}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( DS + ( MUC * RMSe ) ) / ( Max( CS,MUM ) - ( RRSe / MUR ) ) )", "obj1": 0.7136929460580913, "obj2": 0.2070578020346546}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( DDR,PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUR,MUR ) ,( RRSe - RMSe ) ) * ( Max( RMSe,CS ) * Max( RMSe,MUM ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "( Min( ( CRS / ( FirstVNF_RAM_Server * ( Min( DDR ,FirstVNF_Mem_Server ) / Min( RRS ,( ACS * CRS ) ) ) ) ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( MUR + MUR ) / ( MUC * MUR ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( ( MUC * RMSe ) + DS ) / ( MUR * Min( RMSe ,CS ) ) )", "obj1": 0.24688796680497926, "obj2": 0.6013948058926794}, {"determining": "Min( ( ACS / ( ( FirstVNF_CPU_Server + ( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) ) ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ) ) ,Max( BR,( FirstVNF_RAM_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( CS / Min( ( ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) - ( MLU - MUC ) ) ,CS ) ) - ( Max( RCSe,MUC ) * ( MUC + MUC ) ) )", "obj1": 0.2074688796680498, "obj2": 0.6282475896408056}, {"determining": "( ( ARS * ( FirstVNF_CPU * Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ARS + FirstVNF_Mem ) - MDR ) - ( RRS * BR ) ) ) ) ) - Max( FirstVNF_Mem_Server,MRS ) )", "choosing": "( Min( ( Max( RMSe,RMSe ) * ( DS / MUM ) ) ,( Max( MUC,MUC ) - ( CS + MUC ) ) ) / ( Min( Min( RRSe ,RMSe ) ,( MUR * MUM ) ) / Min( RRSe ,Max( Min( RRSe ,RCSe ),( MUC * RCSe ) ) ) ) )", "obj1": 0.7572614107883817, "obj2": 0.1839319287587225}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( ( MLU * CS ) ,( MLU + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.15767634854771784, "obj2": 0.6686680243508677}, {"determining": "( ( DDR - FirstVNF_CPU ) * ( Min( ( MRS / CRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) + ( FirstVNF_Mem_Server / Min( FirstVNF_Mem ,( ( RRS / FirstVNF_Mem_Server ) + RRS ) ) ) ) ) )", "choosing": "( ( RRSe - DS ) * ( ( ( MUR + Min( MLU ,( ( Max( RRSe,MLU ) - MLU ) * RMSe ) ) ) * MLU ) + RMSe ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( MUM / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( ( Min( RCSe ,CS ) / Min( ( MUC / RMSe ) ,RCSe ) ) / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( Max( ( RRS / MRS ),( Min( FirstVNF_Mem_Server ,Min( AMS ,BR ) ) * PN ) ) ,( FirstVNF_RAM_Server + ( FirstVNF_Mem * RRS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + RMSe ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( Max( MLU,MUC ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6519213961313295}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "( ( ( FirstVNF_CPU_Server / RRS ) / ( CRS * ACS ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) )", "obj1": 0.14730290456431536, "obj2": 0.7010517368604116}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / Max( FirstVNF_Mem_Server,BR ) ) ) )", "choosing": "( ( RCSe * Min( ( RRSe - DS ) ,RCSe ) ) * ( MUM / ( MUR - MLU ) ) )", "obj1": 0.9087136929460581, "obj2": 0.03977404455507674}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "( ( RCSe * MLU ) * ( MUM / ( MUR - MLU ) ) )", "obj1": 0.9875518672199171, "obj2": 0.003962943055337865}, {"determining": "Min( Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) ,Max( FirstVNF_RAM_Server,Const ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( ( MUM + ( Min( ( RRSe + ( MUC + RMSe ) ) ,Min( Min( RCSe ,MUC ) ,( MUC / RCSe ) ) ) / ( ( DS + ( MLU + MLU ) ) / DS ) ) ) / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( FirstVNF_CPU_Server / RRS ) / ( Max( FirstVNF_CPU_Server,RRS ) * ACS ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "( ( ( MUC / MUM ) + MUC ) / ( RCSe / ( RMSe * Max( DS,DS ) ) ) )", "obj1": 0.14730290456431536, "obj2": 0.7010517368604116}], "4": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.8402489626556017, "obj2": 0.10784560432314734}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - Max( MDR,MDR ) ) ) )", "choosing": "( ( ( DS - MUR ) - DS ) * Min( ( MLU * ( CS - RCSe ) ) ,RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( FirstVNF_RAM,Const ) / Min( ( ARS - ( FirstVNF_CPU_Server * Max( FirstVNF_CPU_Server,ARS ) ) ) ,FirstVNF_RAM_Server ) )", "choosing": "Max( Max( ( RRSe + MLU ),( MUC - ( MUR / MLU ) ) ),( ( RRSe * RRSe ) / RRSe ) )", "obj1": 0.32987551867219916, "obj2": 0.5324900451081063}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( Min( CS ,RCSe ) * MUC ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,Max( ( MLU * Max( RMSe,( MLU * MUR ) ) ),RCSe ) ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6120549744267159}, {"determining": "Min( ( Min( CRS ,( CRS / FirstVNF_CPU ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( Max( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ),( BR - DDR ) ) + ( Const / ACS ) ) * ( ( ARS * MRS ) / Max( BR,RRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUC,Min( MUR ,RCSe ) ) ,( MUC / ( CS - ( RCSe + ( CS / Max( MUR,CS ) ) ) ) ) ) * ( Max( RMSe,MUM ) * Max( RMSe,CS ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),MRS ) ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.533195020746888, "obj2": 0.3444799435081506}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( AMS / ( MDR / MRS ) ) + FirstVNF_Mem ) - Const ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RCSe ,Max( ( MUC * RCSe ),Min( RRSe ,RCSe ) ) ) ) * Max( MLU,DS ) ) ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.4211618257261411, "obj2": 0.4705210546295648}, {"determining": "( Max( ( CRS / FirstVNF_RAM_Server ),Min( FirstVNF_RAM ,RRS ) ) + ( ( FirstVNF_CPU_Server + MRS ) - ( Min( ( FirstVNF_Mem * FirstVNF_CPU ) ,Min( Const ,PN ) ) - BR ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( ( ( CS * ( ( MUC / MUM ) + ( CS - RRSe ) ) ) + ( RMSe * MLU ) ) / MLU ) ) ) )", "obj1": 0.26348547717842324, "obj2": 0.5924935521814474}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( DS - RRSe ) * ( ( RRSe + ( MUC - CS ) ) + ( MLU - ( MUR - Min( Min( RCSe ,Min( RRSe ,( MUC - RRSe ) ) ) ,Min( MUC ,DS ) ) ) ) ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( FirstVNF_Mem + ( PN / FirstVNF_Mem ) ) * Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM - FirstVNF_CPU ) ) ) )", "choosing": "( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( ARS / Max( DDR,( FirstVNF_RAM / FirstVNF_CPU ) ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( ( CS - ( Min( ( MLU + MUM ) ,MUR ) + Min( MUR ,MLU ) ) ) - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( MUM - MUM ) + ( DS + MLU ) ) ) )", "obj1": 0.9854771784232366, "obj2": 0.004710770142983677}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( RMSe / MLU ) ) ) )", "obj1": 0.45643153526970953, "obj2": 0.4507677958234359}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( ARS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( FirstVNF_CPU - ACS ) ) ) )", "choosing": "( Max( ( MUR / Min( DS ,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.45020746887966806, "obj2": 0.45529155540268784}, {"determining": "( Max( ( Max( PN,CRS ) * ( ACS / FirstVNF_Mem_Server ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( Min( Min( MRS ,ARS ) ,( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - ( MDR - Min( ARS ,DDR ) ) ) ) )", "choosing": "( Min( CS ,DS ) * ( ( ( CS - RCSe ) + MLU ) + RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "( ( Max( FirstVNF_CPU,( ( FirstVNF_CPU_Server * ARS ) * DDR ) ) * ( FirstVNF_CPU * FirstVNF_RAM ) ) / FirstVNF_Mem )", "choosing": "Min( Max( Min( ( MLU - ( MLU + RRSe ) ) ,CS ),RMSe ) ,Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( MUR - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( ( ( MUR / MUM ) + RRSe ) + MLU ) + ( MUM - MUM ) ) ) ) )", "obj1": 0.8443983402489627, "obj2": 0.10479740395461677}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.42323651452282157, "obj2": 0.46508358868544714}, {"determining": "( Max( ( CRS / FirstVNF_RAM_Server ),( FirstVNF_RAM_Server + ARS ) ) + ( ( FirstVNF_CPU_Server + DDR ) - ( Min( ( FirstVNF_Mem * FirstVNF_CPU ) ,Min( Const ,PN ) ) - BR ) ) )", "choosing": "Min( ( MUC / Min( ( Max( MUR,MLU ) / MUM ) ,RMSe ) ) ,( DS - ( RRSe + ( ( ( CS * MUC ) + ( RMSe * MLU ) ) / MLU ) ) ) )", "obj1": 0.26348547717842324, "obj2": 0.5924935521814474}, {"determining": "( ( FirstVNF_CPU / ACS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6120549744267159}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( Max( ARS,( RRS / MRS ) ) ,Min( FirstVNF_CPU_Server ,ACS ) )", "choosing": "Max( ( Min( CS ,Min( Min( MLU ,( Max( RRSe,( RMSe / MUR ) ) * MLU ) ) ,RRSe ) ) / ( RRSe + Min( RRSe ,MUR ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( MRS ,Min( ACS ,DDR ) ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( Min( RRSe ,( ( RCSe * Min( MUC ,MUR ) ) + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "( Max( ACS,Max( BR,FirstVNF_RAM ) ) - Min( RRS ,AMS ) )", "choosing": "( Min( MUM ,( ( MLU - MLU ) + Min( RCSe ,RRSe ) ) ) / ( ( Max( DS,MUM ) * RRSe ) * MUR ) )", "obj1": 0.8547717842323651, "obj2": 0.09598653565469441}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( Max( MDR,MRS ) ,Min( ( MDR / FirstVNF_Mem_Server ) ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( Max( DS,( RMSe / DS ) ) / MUR ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( RMSe - RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Max( FirstVNF_CPU,MRS ) / ( AMS - MRS ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( Max( RMSe,MUM ) * ( ( Max( DS,( RMSe - MLU ) ) - MUM ) / ( ( ( RCSe + CS ) - ( CS + MUM ) ) + Min( MUC ,RMSe ) ) ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 0.9854771784232366, "obj2": 0.004710770142983677}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( DDR,PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUR,MUR ) ,( RRSe - RMSe ) ) * ( Max( RMSe,CS ) * Max( RMSe,MUM ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "Min( ( ACS / ( ( FirstVNF_CPU_Server + ( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) ) ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ) ) ,Max( BR,( FirstVNF_RAM_Server + FirstVNF_RAM_Server ) ) )", "choosing": "( ( CS / Min( ( ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) - ( MLU - MUC ) ) ,CS ) ) - ( Max( RCSe,MUC ) * ( MUC + MUC ) ) )", "obj1": 0.2074688796680498, "obj2": 0.6282475896408056}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( ( MLU * CS ) ,( MLU + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.15767634854771784, "obj2": 0.6686680243508677}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( Max( ( RRS / MRS ),( Min( FirstVNF_Mem_Server ,Min( AMS ,BR ) ) * PN ) ) ,( FirstVNF_RAM_Server + ( FirstVNF_Mem * RRS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + RMSe ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( Max( MLU,MUC ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "Min( Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) ,Max( FirstVNF_RAM_Server,Const ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( ( MUM + ( Min( ( RRSe + ( MUC + RMSe ) ) ,Min( Min( RCSe ,MUC ) ,( MUC / RCSe ) ) ) / ( ( DS + ( MLU + MLU ) ) / DS ) ) ) / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.6846473029045643, "obj2": 0.19418083572380077}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - ( MDR - PN ) ) ) )", "choosing": "( ( DS - RRSe ) * ( ( ( CS - RCSe ) * MLU ) + RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "Max( ( ( CRS / BR ) - FirstVNF_CPU ),( Min( DDR ,CRS ) * Max( MDR,PN ) ) )", "choosing": "( ( DS - RRSe ) * ( ( ( CS - RCSe ) * MLU ) + RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.632455952127188}, {"determining": "Min( FirstVNF_RAM_Server ,Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( MUM,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / FirstVNF_Mem ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 0.9854771784232366, "obj2": 0.004710770142983677}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + MRS ) ) - Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) ) ) / PN ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * Max( MUR,Min( CS ,RRSe ) ) ) )", "obj1": 0.5767634854771784, "obj2": 0.3006661939549571}, {"determining": "Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( Max( ( RRS / ( FirstVNF_Mem / DDR ) ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + RRSe ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.35269709543568467, "obj2": 0.5077749692748612}, {"determining": "Min( ( Const / ( ( FirstVNF_CPU_Server + ( Max( ( ( FirstVNF_CPU_Server + DDR ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ),MRS ) / Min( AMS ,FirstVNF_Mem ) ) ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ) ) ,Max( BR,FirstVNF_Mem ) )", "choosing": "( ( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) - ( Max( RCSe,MUC ) * ( MUC + ( Max( RCSe,MUC ) * ( MUC + MUC ) ) ) ) )", "obj1": 0.1950207468879668, "obj2": 0.6405042117319096}, {"determining": "Min( ( Const / ( ( FirstVNF_CPU_Server + DDR ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ) ) ,Max( BR,FirstVNF_Mem ) )", "choosing": "( ( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) - ( Max( RCSe,MUC ) * ( MUC + MUC ) ) )", "obj1": 0.2074688796680498, "obj2": 0.6282475896408056}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,MUM ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.7385892116182573, "obj2": 0.15278266515447367}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Min( ( CRS - MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / ( BR + FirstVNF_Mem_Server ) ) ) )", "choosing": "( Min( RCSe ,CS ) / ( RRSe / MUR ) )", "obj1": 0.9336099585062241, "obj2": 0.03462945096113528}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,RRS ) ,FirstVNF_Mem ) )", "choosing": "( Max( MLU,( RRSe - CS ) ) / ( MUR * CS ) )", "obj1": 0.23858921161825727, "obj2": 0.5964237878212956}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "( ( MDR / Const ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( ( RCSe - CS ) ,Max( MLU,CS ) )", "obj1": 0.6721991701244814, "obj2": 0.2507790799635682}, {"determining": "( Max( MDR,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "( ( ( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / MUM ) + MUC ) / ( MUR + RCSe ) )", "obj1": 0.14730290456431536, "obj2": 0.6851153257542331}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6120549744267159}, {"determining": "( Max( MDR,MRS ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),MUC ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "Min( ( Const / ( ( FirstVNF_CPU_Server + DDR ) + Min( FirstVNF_RAM ,FirstVNF_RAM_Server ) ) ) ,Max( BR,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26556016597510373, "obj2": 0.588764480223833}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),Min( CRS ,RRS ) ) ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "Min( Max( RRSe,Min( MLU ,CS ) ) ,Min( ( Min( RMSe ,Min( RRSe ,Max( Min( RRSe ,RCSe ),( MUC * RCSe ) ) ) ) * DS ) ,( RCSe / MUR ) ) )", "obj1": 0.8340248962655602, "obj2": 0.1405572357266855}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - DDR ) )", "choosing": "Min( ( MUM / ( MUR - MLU ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( ( DS + MLU ) + ( MUM - MUM ) ) ) )", "obj1": 0.6307053941908713, "obj2": 0.26674569503446}, {"determining": "( ( CRS / Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( ( CRS / BR ) - FirstVNF_CPU ) ) ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.18672199170124482, "obj2": 0.6483423503752439}, {"determining": "Max( Min( FirstVNF_RAM_Server ,FirstVNF_RAM ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Max( ( MUM + DS ),Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU - ( RCSe / RCSe ) ) ) ,MUM ) ) - Min( Min( MLU ,MUM ) ,( RRSe * CS ) ) )", "obj1": 0.11410788381742738, "obj2": 0.7219455849487274}, {"determining": "( Min( ( CRS / PN ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / Max( FirstVNF_Mem_Server,BR ) ) ) )", "choosing": "( ( RCSe * Min( ( RRSe - DS ) ,RCSe ) ) * ( MUM / ( MUR - Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) ) ) )", "obj1": 0.9066390041493776, "obj2": 0.0384081526333041}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / Max( FirstVNF_Mem_Server,BR ) ) ) )", "choosing": "( ( Min( MUM ,( ( MUM * ( MUC + MUC ) ) - MUR ) ) - CS ) * ( MUR * ( ( MUM / RMSe ) * DS ) ) )", "obj1": 0.9377593360995851, "obj2": 0.025470312959998357}, {"determining": "( Min( ( CRS / MRS ) ,( FirstVNF_Mem / DDR ) ) / ( ( PN / DDR ) - ( FirstVNF_Mem_Server / RRS ) ) )", "choosing": "Min( ( Max( ( MUM / RMSe ),Min( MUM ,MLU ) ) * ( ( MLU * RCSe ) + ( RMSe - RMSe ) ) ) ,( ( ( MUR * MUM ) - Min( MLU ,MUR ) ) + ( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) ) ) )", "obj1": 0.9107883817427386, "obj2": 0.037304441009752554}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ARS + PN ) - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RRSe ,Max( Min( RRSe ,RCSe ),( MUC * MUR ) ) ) ) * DS ) ) )", "obj1": 0.14522821576763487, "obj2": 0.7069349643257855}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) )", "choosing": "Max( Min( RRSe ,( MUM + CS ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( Max( ( ( ( ARS + PN ) + Const ) / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( ( MLU * RMSe ) ,( MUM + MUR ) ),( RRSe / ( MUC / CS ) ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( Max( Max( ACS,BR ),( CRS / FirstVNF_RAM_Server ) ) - ( ( CRS * ACS ) / ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( Min( Const ,Max( RRS,ACS ) ) ,CRS ),MRS ) ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RCSe,RMSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + Max( ( ( RCSe - RCSe ) + MUC ),Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.533195020746888, "obj2": 0.3444799435081506}, {"determining": "( ( ( ( PN - Const ) * Max( DDR,FirstVNF_CPU ) ) + ( Min( Max( FirstVNF_Mem,BR ) ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( Min( ( DS + RRSe ) ,RCSe ) - ( ( MLU / ( ( MUM - MUC ) - MLU ) ) * ( DS + MUC ) ) )", "obj1": 0.6825726141078838, "obj2": 0.1994763655826044}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( Max( ( ( FirstVNF_Mem + MDR ) - ( PN + FirstVNF_Mem_Server ) ),( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "Min( Max( MUM,RMSe ) ,( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) )", "obj1": 0.8485477178423236, "obj2": 0.10377220644972428}, {"determining": "( ( ( FirstVNF_CPU_Server / RRS ) / ( Max( FirstVNF_CPU_Server,RRS ) * ACS ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6120549744267159}, {"determining": "( ( ( BR / RRS ) * DDR ) * ( Max( ( ( ACS / RRS ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - ( MDR - PN ) ) ) ) )", "choosing": "Min( ( ( CS - MUM ) - CS ) ,Max( MLU,( CS / DS ) ) )", "obj1": 0.1991701244813278, "obj2": 0.6348107613953808}, {"determining": "( ( MDR - ( ACS * FirstVNF_RAM_Server ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( Max( MLU,CS ) ,( RCSe - ( Max( MUR,MUM ) + MUM ) ) )", "obj1": 0.42531120331950206, "obj2": 0.4638036499303891}, {"determining": "( ( MDR - ( ACS * FirstVNF_RAM_Server ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( Max( MLU,CS ) ,( RCSe - ( Max( MUR,MUM ) + MUM ) ) )", "obj1": 0.42531120331950206, "obj2": 0.4638036499303891}, {"determining": "( ( MDR - ( ACS * FirstVNF_RAM_Server ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( Max( MLU,CS ) ,( RCSe - ( Max( MUR,MUM ) + MUM ) ) )", "obj1": 0.42531120331950206, "obj2": 0.4638036499303891}, {"determining": "( ( CRS / FirstVNF_RAM ) * ( Min( ( MRS / CRS ) ,( FirstVNF_Mem / DDR ) ) / Max( ( PN / DDR ),( FirstVNF_Mem_Server / FirstVNF_Mem ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + Max( ( ( MUM / MUR ) / Max( RMSe,RRSe ) ),DS ) )", "obj1": 0.1970954356846473, "obj2": 0.6372537467311256}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( ( MDR / PN ) ,( ( ( ARS * MRS ) / Max( Const,RRS ) ) + ( ( FirstVNF_CPU_Server * MRS ) + Max( ( BR * ARS ),Max( DDR,( FirstVNF_Mem / Min( Const ,FirstVNF_CPU_Server ) ) ) ) ) ) )", "choosing": "Max( ( ( Max( CS,MUM ) - ( ( DS - ( ( DS + ( RCSe * MUC ) ) + RMSe ) ) / MUR ) ) / Max( DS,( MUC * RMSe ) ) ),( ( MUC / CS ) / ( Min( RCSe ,MLU ) + MUM ) ) )", "obj1": 0.16390041493775934, "obj2": 0.6628093165198068}, {"determining": "( ( ( ( ( MDR + DDR ) + FirstVNF_RAM_Server ) + FirstVNF_Mem ) - ( PN + ( FirstVNF_CPU - FirstVNF_RAM_Server ) ) ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,( Min( Min( ( MLU + CS ) ,MUM ) ,( MUC - MUM ) ) - RRSe ) ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + MUC ) / Max( MLU,MUR ) ) ) )", "obj1": 0.1908713692946058, "obj2": 0.6477171456956264}, {"determining": "( ( ( FirstVNF_Mem * RRS ) / FirstVNF_RAM ) * Min( MDR ,PN ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( RMSe * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( DS + MUC ) / ( MUC * ( MUM + ( CS * ( MUR - CS ) ) ) ) ) ) )", "obj1": 0.18464730290456433, "obj2": 0.6506353694869079}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Min( ( RCSe - CS ) ,Max( MLU,CS ) )", "obj1": 0.5, "obj2": 0.3814549430308883}, {"determining": "( ( MDR / Const ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.5995850622406639, "obj2": 0.29707293168824456}, {"determining": "Min( ( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,RMSe ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "( ( DDR / FirstVNF_Mem_Server ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.7178423236514523, "obj2": 0.16666683690758294}, {"determining": "( DDR / Min( AMS ,( Min( MDR ,ARS ) * BR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( MUM,CS ) ) ) / ( CS * Min( MLU ,MUR ) ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( ( FirstVNF_CPU_Server / RRS ) / Min( PN ,ARS ) ) + Max( Min( AMS ,CRS ),Const ) )", "choosing": "( ( ( MLU / Max( ( ( RMSe + ( Max( MUR,DS ) - CS ) ) + Max( ( ( RCSe / MUM ) / ( MUC * MUR ) ),CS ) ),MUC ) ) * MUR ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7663067605247584}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.3941908713692946, "obj2": 0.4869942916110621}, {"determining": "( ( ( ( PN - Const ) * Max( DDR,FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / ( MDR / Min( ARS ,FirstVNF_RAM_Server ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.979253112033195, "obj2": 0.008142730049706675}], "5": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "Min( Min( Min( CS ,( ( RMSe - DS ) - ( MLU + RRSe ) ) ) ,RMSe ) ,Min( MUR ,DS ) )", "obj1": 0.8402489626556017, "obj2": 0.10784560432314734}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( FirstVNF_RAM,Const ) / Min( ( ARS - ( FirstVNF_CPU_Server * Max( FirstVNF_CPU_Server,ARS ) ) ) ,FirstVNF_RAM_Server ) )", "choosing": "Max( Max( ( RRSe + MLU ),( MUC - ( MUR / MLU ) ) ),( ( RRSe * RRSe ) / RRSe ) )", "obj1": 0.32987551867219916, "obj2": 0.5324900451081063}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( Min( CS ,RCSe ) * MUC ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,Max( ( MLU * Max( RMSe,( MLU * MUR ) ) ),RCSe ) ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( ( Min( CRS ,( CRS / FirstVNF_CPU ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( Max( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ),( BR - DDR ) ) + ( Const / ACS ) ) * ( ( ARS * MRS ) / Max( BR,RRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUC,Min( MUR ,RCSe ) ) ,( MUC / ( CS - ( RCSe + ( CS / Max( MUR,CS ) ) ) ) ) ) * ( Max( RMSe,MUM ) * Max( RMSe,CS ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),MRS ) ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.533195020746888, "obj2": 0.3444799435081506}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Min( ( MUC / Min( MUM ,RMSe ) ) ,( DS - ( RRSe + ( RMSe / MLU ) ) ) )", "obj1": 0.45643153526970953, "obj2": 0.4507677958234359}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( ARS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( FirstVNF_CPU - ACS ) ) ) )", "choosing": "( Max( ( MUR / Min( DS ,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.45020746887966806, "obj2": 0.45529155540268784}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.42323651452282157, "obj2": 0.46508358868544714}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( Max( ARS,( RRS / MRS ) ) ,Min( FirstVNF_CPU_Server ,ACS ) )", "choosing": "Max( ( Min( CS ,Min( Min( MLU ,( Max( RRSe,( RMSe / MUR ) ) * MLU ) ) ,RRSe ) ) / ( RRSe + Min( RRSe ,MUR ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( MRS ,Min( ACS ,DDR ) ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( Min( RRSe ,( ( RCSe * Min( MUC ,MUR ) ) + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( DDR,PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUR,MUR ) ,( RRSe - RMSe ) ) * ( Max( RMSe,CS ) * Max( RMSe,MUM ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( ( MLU * CS ) ,( MLU + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.15767634854771784, "obj2": 0.6686680243508677}, {"determining": "Min( Max( ( RRS / MRS ),( Min( FirstVNF_Mem_Server ,Min( AMS ,BR ) ) * PN ) ) ,( FirstVNF_RAM_Server + ( FirstVNF_Mem * RRS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + RMSe ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( Max( MLU,MUC ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "Min( Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) ,Max( FirstVNF_RAM_Server,Const ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( ( MUM + ( Min( ( RRSe + ( MUC + RMSe ) ) ,Min( Min( RCSe ,MUC ) ,( MUC / RCSe ) ) ) / ( ( DS + ( MLU + MLU ) ) / DS ) ) ) / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.6846473029045643, "obj2": 0.19418083572380077}, {"determining": "Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + MRS ) ) - Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) ) ) / PN ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * Max( MUR,Min( CS ,RRSe ) ) ) )", "obj1": 0.5767634854771784, "obj2": 0.3006661939549571}, {"determining": "Min( Max( ( RRS / ( FirstVNF_Mem / DDR ) ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + RRSe ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.35269709543568467, "obj2": 0.5077749692748612}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,MUM ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.7385892116182573, "obj2": 0.15278266515447367}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,RRS ) ,FirstVNF_Mem ) )", "choosing": "( Max( MLU,( RRSe - CS ) ) / ( MUR * CS ) )", "obj1": 0.23858921161825727, "obj2": 0.5964237878212956}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "( ( CRS / Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( ( CRS / BR ) - FirstVNF_CPU ) ) ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.18672199170124482, "obj2": 0.6483423503752439}, {"determining": "Max( Min( FirstVNF_RAM_Server ,FirstVNF_RAM ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Max( ( MUM + DS ),Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU - ( RCSe / RCSe ) ) ) ,MUM ) ) - Min( Min( MLU ,MUM ) ,( RRSe * CS ) ) )", "obj1": 0.11410788381742738, "obj2": 0.7219455849487274}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,( ( ( FirstVNF_CPU_Server * ARS ) - FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) )", "choosing": "Max( Min( RRSe ,( MUM + CS ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( Max( ( ( ( ARS + PN ) + Const ) / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( ( MLU * RMSe ) ,( MUM + MUR ) ),( RRSe / ( MUC / CS ) ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( Max( Max( ACS,BR ),( CRS / FirstVNF_RAM_Server ) ) - ( ( CRS * ACS ) / ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( Min( Const ,Max( RRS,ACS ) ) ,CRS ),MRS ) ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RCSe,RMSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + Max( ( ( RCSe - RCSe ) + MUC ),Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.533195020746888, "obj2": 0.3444799435081506}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( ( MDR / PN ) ,( ( ( ARS * MRS ) / Max( Const,RRS ) ) + ( ( FirstVNF_CPU_Server * MRS ) + Max( ( BR * ARS ),Max( DDR,( FirstVNF_Mem / Min( Const ,FirstVNF_CPU_Server ) ) ) ) ) ) )", "choosing": "Max( ( ( Max( CS,MUM ) - ( ( DS - ( ( DS + ( RCSe * MUC ) ) + RMSe ) ) / MUR ) ) / Max( DS,( MUC * RMSe ) ) ),( ( MUC / CS ) / ( Min( RCSe ,MLU ) + MUM ) ) )", "obj1": 0.16390041493775934, "obj2": 0.6628093165198068}, {"determining": "Min( ( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,RMSe ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "( ( DDR / FirstVNF_Mem_Server ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.7178423236514523, "obj2": 0.16666683690758294}, {"determining": "( DDR / Min( AMS ,( Min( MDR ,ARS ) * BR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( MUM,CS ) ) ) / ( CS * Min( MLU ,MUR ) ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( ( FirstVNF_CPU_Server + MRS ) - ( Min( ( FirstVNF_Mem * FirstVNF_CPU ) ,Min( Const ,PN ) ) - BR ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / Min( ( RRS / ( FirstVNF_CPU - MRS ) ) ,( AMS + FirstVNF_RAM ) ) ) ) ) )", "choosing": "( ( ( Max( ( ( ( CS + ( MUM - RRSe ) ) + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),Min( RMSe ,MUM ) ) ),MUC ) / ( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.2883817427385892, "obj2": 0.5740722032327044}, {"determining": "( ( ( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( Max( Min( RRSe ,RCSe ),( MUC * RCSe ) ) - ( Max( RCSe,DS ) + Max( RMSe,MUM ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.6182572614107884, "obj2": 0.23560511670720324}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RRSe ,Max( Min( RRSe ,RCSe ),( MUC * RCSe ) ) ) ) * DS ) ) )", "obj1": 0.6576763485477178, "obj2": 0.2136233072408514}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( Max( ( RRS / MRS ),FirstVNF_Mem ),AMS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.2863070539419087, "obj2": 0.5770733824104909}, {"determining": "Min( Min( Min( ARS ,MDR ) ,( ARS / PN ) ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( MUR + MUR ) / ( CS * ( Max( RRSe,Min( MLU ,RCSe ) ) * Min( RCSe ,DS ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "( ( FirstVNF_RAM + FirstVNF_RAM_Server ) - Max( AMS,RRS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),( MUC - CS ) ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU_Server ) * Max( PN,MDR ) )", "choosing": "( Max( ( ( MLU - CS ) - Max( RMSe,RCSe ) ),( ( MUR * RMSe ) + MUC ) ) + Max( RRSe,RRSe ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.45020746887966806, "obj2": 0.45529155540268784}, {"determining": "( ( ( PN + FirstVNF_Mem_Server ) - ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) * FirstVNF_RAM_Server ) ) ) * Max( FirstVNF_CPU,RRS ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + Max( Min( RRSe ,( ( ( ( MLU * ( MUM - RRSe ) ) - MUR ) / ( MUC + ( ( MUC + RCSe ) + Min( CS ,DS ) ) ) ) + MUC ) ),( RRSe / ( MUC / CS ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6401370912475569}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.15560165975103735, "obj2": 0.675918022154862}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( DDR,PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) )", "choosing": "( ( ( DS - RMSe ) * ( Min( DS ,MLU ) / ( DS - MUM ) ) ) + ( Min( Max( MUR,MUR ) ,( RRSe - RMSe ) ) * ( Max( RMSe,CS ) * Max( RMSe,MUM ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.5659177900747607}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( Max( MLU,CS ) ,( RCSe - ( Max( MUR,MUM ) + Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) ) )", "obj1": 0.34439834024896265, "obj2": 0.5210891557984694}, {"determining": "( ( ( FirstVNF_CPU / RRS ) - ( FirstVNF_Mem * ( ( CRS - ( ARS / ( FirstVNF_RAM * AMS ) ) ) * CRS ) ) ) - Max( AMS,RRS ) )", "choosing": "( ( RRSe + MUR ) / ( CS * Min( Max( MUM,Min( MLU ,Max( MUM,Min( Min( RCSe ,MLU ) ,CS ) ) ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * ACS ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( Min( RCSe ,( DS + RRSe ) ) - RCSe )", "obj1": 0.7095435684647303, "obj2": 0.17688959907909968}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( ( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) ) - ( MDR - PN ) ) ) )", "choosing": "( ( DS - RRSe ) * ( Max( RCSe,MUC ) * ( MUC + MUC ) ) )", "obj1": 0.7738589211618258, "obj2": 0.13463215312111265}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.7136929460580913, "obj2": 0.1671888959232411}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + FirstVNF_CPU ) ) ) * Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( Max( ARS,FirstVNF_Mem ) - ( MDR - PN ) ) ) )", "choosing": "( ( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) - ( Max( RCSe,MUC ) * ( MUC + MUC ) ) )", "obj1": 0.1950207468879668, "obj2": 0.6347443690333411}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.1825726141078838, "obj2": 0.6489563834448652}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - FirstVNF_RAM_Server ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Min( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ) ,( DS - ( RRSe + ( RMSe / MLU ) ) ) )", "obj1": 0.4170124481327801, "obj2": 0.4670923006087975}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.520746887966805, "obj2": 0.3632052613923007}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.43775933609958506, "obj2": 0.46352908881951893}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + MRS ) ) - Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) ) ) / PN ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * Max( MUR,Min( CS ,RRSe ) ) ) )", "obj1": 0.5933609958506224, "obj2": 0.28283253429506233}, {"determining": "Min( Min( AMS ,FirstVNF_Mem ) ,Max( ( FirstVNF_Mem * RRS ),( ARS / AMS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + MUM ) * ( RCSe - MUM ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ) ,( MUM * MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.13278008298755187, "obj2": 0.7008356572956638}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "Max( ( ( CRS + DDR ) * ( ( ( FirstVNF_CPU_Server / FirstVNF_CPU_Server ) / BR ) - AMS ) ),( ( CRS / BR ) - MRS ) )", "choosing": "( ( Min( RMSe ,Min( MUR ,( MUC / MUR ) ) ) + RRSe ) - ( ( MUM + DS ) / Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "Min( Max( ( ( ( ARS + PN ) + Const ) / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.26348547717842324, "obj2": 0.5879049675279276}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( Max( FirstVNF_Mem,( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) )", "choosing": "Min( Max( MUM,RMSe ) ,( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) )", "obj1": 0.7697095435684648, "obj2": 0.15001886370954495}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( ( ( ( ( RRSe + MUM ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( ( MLU * MUM ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),MRS ) ) / ( CRS * ACS ) ) ) - ( ARS - ( FirstVNF_CPU_Server * Max( FirstVNF_CPU_Server,ARS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( RRSe * RRSe ) / RRSe ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.6452282157676349, "obj2": 0.21893985106183042}, {"determining": "Min( Max( ( Max( FirstVNF_CPU_Server,AMS ) / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),Max( MUM,( ( MUC + Min( RRSe ,CS ) ) * Min( MLU ,MUC ) ) ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - Min( ( ( MDR * DDR ) / Min( RRS ,AMS ) ) ,( FirstVNF_Mem / DDR ) ) ) ) - ( CRS + ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( MUC,RRSe ) ),DS ) - ( ( MUR * RMSe ) + ( MUR + ( ( MUM - Min( ( ( MUM - MUC ) - MLU ) ,MUR ) ) + RRSe ) ) ) )", "obj1": 0.3900414937759336, "obj2": 0.4783921494482318}, {"determining": "Min( Max( ( RRS / ( FirstVNF_Mem / DDR ) ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + RRSe ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.35269709543568467, "obj2": 0.5077749692748612}, {"determining": "( DDR / Min( AMS ,Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.735229749878201}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14730290456431536, "obj2": 0.6821551734184353}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}, {"determining": "( ( Max( Max( ACS,BR ),( MRS / FirstVNF_RAM_Server ) ) - ( ( ( FirstVNF_Mem * Max( RRS,RRS ) ) + Max( Min( AMS ,CRS ),MRS ) ) / ( CRS * ACS ) ) ) - ( ( ( ACS - FirstVNF_RAM_Server ) - ( CRS * CRS ) ) - ( ( MRS - MDR ) * ( FirstVNF_Mem * RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / MUM ) + MUC ) / Min( RCSe ,( RMSe + MUM ) ) ) )", "obj1": 0.533195020746888, "obj2": 0.3444799435081506}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),Max( ( RRS / MRS ),FirstVNF_Mem ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.6089760167140069}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21784232365145229, "obj2": 0.6058629738274908}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / ( ( DDR / BR ) - AMS ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( ( ( Min( MUR ,DS ) + DS ) - RRSe ) / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,MUM ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.7302904564315352, "obj2": 0.159300961243091}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.6804979253112033, "obj2": 0.19878791906088536}, {"determining": "( Max( MDR,MRS ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),MUC ) + MUR ) / ( CS * MUR ) )", "obj1": 0.2842323651452282, "obj2": 0.5776905186817485}, {"determining": "( ( MDR / ( ACS * ( BR - BR ) ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "( ( MUR + RCSe ) / ( RRSe + RMSe ) )", "obj1": 0.5311203319502075, "obj2": 0.3513505547967628}, {"determining": "( Max( ( PN / DDR ),MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.2012448132780083, "obj2": 0.622549661460532}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.23858921161825727, "obj2": 0.5964237878212956}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ( ( PN - Const ) * ( FirstVNF_CPU / AMS ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_CPU,RRS ) ) ,PN ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MLU,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( Min( MUC ,( Max( DS,MUM ) + ( RRSe + ( CS + CS ) ) ) ) / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.7261410788381742, "obj2": 0.1663840807125522}, {"determining": "( ( MDR - ( ACS * FirstVNF_RAM_Server ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "( Min( MUM ,( ( MLU - MLU ) + Min( RCSe ,RRSe ) ) ) / ( ( Max( DS,MUM ) * RRSe ) * MUR ) )", "obj1": 0.42531120331950206, "obj2": 0.46358857147025345}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.2821576763485477, "obj2": 0.5812844672276613}, {"determining": "( ( ( FirstVNF_CPU_Server / RRS ) / ( Max( FirstVNF_CPU_Server,RRS ) * ACS ) ) + Max( Min( AMS ,CRS ),MRS ) )", "choosing": "Max( Min( RRSe ,( MUM + CS ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6792344597197165}, {"determining": "( ( ARS + MRS ) - ( ( ( RRS * MRS ) / Max( FirstVNF_CPU_Server,FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( ( ( RRSe - RRSe ) - RCSe ),( ( MUC / CS ) / ( CS - MUM ) ) )", "obj1": 0.487551867219917, "obj2": 0.37444666351609884}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) )", "obj1": 0.524896265560166, "obj2": 0.3614655006740807}, {"determining": "Min( ( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( RCSe ,MLU ) )", "obj1": 0.45020746887966806, "obj2": 0.45529155540268784}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,RMSe ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.46680497925311204, "obj2": 0.3872282691732129}, {"determining": "Min( ( MDR + ( DDR - ACS ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + ( ( Min( MLU ,CS ) - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * DS ) ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( Max( ( RRS / Min( FirstVNF_RAM ,ACS ) ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( RRSe * Max( MUR,DS ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.3506224066390041, "obj2": 0.5205454059088502}, {"determining": "Min( Max( ( ( PN / FirstVNF_Mem ) / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + ( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14107883817427386, "obj2": 0.6927294377174569}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,MUM ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.7385892116182573, "obj2": 0.15278266515447367}], "6": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( FirstVNF_RAM,Const ) / Min( ( ARS - ( FirstVNF_CPU_Server * Max( FirstVNF_CPU_Server,ARS ) ) ) ,FirstVNF_RAM_Server ) )", "choosing": "Max( Max( ( RRSe + MLU ),( MUC - ( MUR / MLU ) ) ),( ( RRSe * RRSe ) / RRSe ) )", "obj1": 0.32987551867219916, "obj2": 0.5324900451081063}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( Min( CS ,RCSe ) * MUC ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,Max( ( MLU * Max( RMSe,( MLU * MUR ) ) ),RCSe ) ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( Max( ARS,( RRS / MRS ) ) ,Min( FirstVNF_CPU_Server ,ACS ) )", "choosing": "Max( ( Min( CS ,Min( Min( MLU ,( Max( RRSe,( RMSe / MUR ) ) * MLU ) ) ,RRSe ) ) / ( RRSe + Min( RRSe ,MUR ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( ( MLU * CS ) ,( MLU + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.15767634854771784, "obj2": 0.6686680243508677}, {"determining": "Min( Max( ( RRS / MRS ),( Min( FirstVNF_Mem_Server ,Min( AMS ,BR ) ) * PN ) ) ,( FirstVNF_RAM_Server + ( FirstVNF_Mem * RRS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + RMSe ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( Max( MLU,MUC ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + MRS ) ) - Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) ) ) / PN ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * Max( MUR,Min( CS ,RRSe ) ) ) )", "obj1": 0.5767634854771784, "obj2": 0.3006661939549571}, {"determining": "Min( Max( ( RRS / ( FirstVNF_Mem / DDR ) ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + RRSe ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.35269709543568467, "obj2": 0.5077749692748612}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( ( MDR / PN ) ,( ( ( ARS * MRS ) / Max( Const,RRS ) ) + ( ( FirstVNF_CPU_Server * MRS ) + Max( ( BR * ARS ),Max( DDR,( FirstVNF_Mem / Min( Const ,FirstVNF_CPU_Server ) ) ) ) ) ) )", "choosing": "Max( ( ( Max( CS,MUM ) - ( ( DS - ( ( DS + ( RCSe * MUC ) ) + RMSe ) ) / MUR ) ) / Max( DS,( MUC * RMSe ) ) ),( ( MUC / CS ) / ( Min( RCSe ,MLU ) + MUM ) ) )", "obj1": 0.16390041493775934, "obj2": 0.6628093165198068}, {"determining": "( DDR / Min( AMS ,( Min( MDR ,ARS ) * BR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( MUM,CS ) ) ) / ( CS * Min( MLU ,MUR ) ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( ( FirstVNF_CPU_Server + MRS ) - ( Min( ( FirstVNF_Mem * FirstVNF_CPU ) ,Min( Const ,PN ) ) - BR ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / Min( ( RRS / ( FirstVNF_CPU - MRS ) ) ,( AMS + FirstVNF_RAM ) ) ) ) ) )", "choosing": "( ( ( Max( ( ( ( CS + ( MUM - RRSe ) ) + RMSe ) * Max( Max( MUR,Min( CS ,RRSe ) ),Min( RMSe ,MUM ) ) ),MUC ) / ( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.2883817427385892, "obj2": 0.5740722032327044}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( Max( ( RRS / MRS ),FirstVNF_Mem ),AMS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.2863070539419087, "obj2": 0.5770733824104909}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU_Server ) * Max( PN,MDR ) )", "choosing": "( Max( ( ( MLU - CS ) - Max( RMSe,RCSe ) ),( ( MUR * RMSe ) + MUC ) ) + Max( RRSe,RRSe ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( ( ( PN + FirstVNF_Mem_Server ) - ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) * FirstVNF_RAM_Server ) ) ) * Max( FirstVNF_CPU,RRS ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + Max( Min( RRSe ,( ( ( ( MLU * ( MUM - RRSe ) ) - MUR ) / ( MUC + ( ( MUC + RCSe ) + Min( CS ,DS ) ) ) ) + MUC ) ),( RRSe / ( MUC / CS ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6401370912475569}, {"determining": "( ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) * ( FirstVNF_RAM_Server - ACS ) )", "choosing": "Min( Max( MLU,CS ) ,( RCSe - ( Max( MUR,MUM ) + Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) ) )", "obj1": 0.34439834024896265, "obj2": 0.5210891557984694}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "Max( ( ( CRS + DDR ) * ( ( ( FirstVNF_CPU_Server / FirstVNF_CPU_Server ) / BR ) - AMS ) ),( ( CRS / BR ) - MRS ) )", "choosing": "( ( Min( RMSe ,Min( MUR ,( MUC / MUR ) ) ) + RRSe ) - ( ( MUM + DS ) / Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( ( ( ( ( RRSe + MUM ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( ( MLU * MUM ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "Min( Max( ( Max( FirstVNF_CPU_Server,AMS ) / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),Max( MUM,( ( MUC + Min( RRSe ,CS ) ) * Min( MLU ,MUC ) ) ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - Min( ( ( MDR * DDR ) / Min( RRS ,AMS ) ) ,( FirstVNF_Mem / DDR ) ) ) ) - ( CRS + ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( MUC,RRSe ) ),DS ) - ( ( MUR * RMSe ) + ( MUR + ( ( MUM - Min( ( ( MUM - MUC ) - MLU ) ,MUR ) ) + RRSe ) ) ) )", "obj1": 0.3900414937759336, "obj2": 0.4783921494482318}, {"determining": "Min( Max( ( RRS / ( FirstVNF_Mem / DDR ) ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + RRSe ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.35269709543568467, "obj2": 0.5077749692748612}, {"determining": "( DDR / Min( AMS ,Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.735229749878201}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14730290456431536, "obj2": 0.6821551734184353}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21784232365145229, "obj2": 0.6058629738274908}, {"determining": "( Max( ( PN / DDR ),MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.2012448132780083, "obj2": 0.622549661460532}, {"determining": "Min( ( MDR + ( DDR - ACS ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + ( ( Min( MLU ,CS ) - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * DS ) ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( Max( ( RRS / Min( FirstVNF_RAM ,ACS ) ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( RRSe * Max( MUR,DS ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.3506224066390041, "obj2": 0.5205454059088502}, {"determining": "Min( Max( ( ( PN / FirstVNF_Mem ) / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + ( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14107883817427386, "obj2": 0.6927294377174569}, {"determining": "( ( ARS - FirstVNF_RAM ) * Max( PN,( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + MUC ) ) + ( ( ( RCSe / RRSe ) / MUR ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + ( Min( AMS ,FirstVNF_CPU_Server ) + ACS ) ) * PN ) ) ) / ( Max( ARS,BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUM + ( MLU * RCSe ) ) / MUR )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe + MUR ) / ( CS * MUR ) )", "obj1": 0.24896265560165975, "obj2": 0.5831199640546552}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MLU,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.3962655601659751, "obj2": 0.4638918980147558}, {"determining": "( ( ( DDR - ( ACS / ( FirstVNF_CPU / ( CRS / ARS ) ) ) ) / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( RCSe / RRSe ) / Max( ( RRSe - RRSe ),MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) + ( ( ( MLU - CS ) - Max( RMSe,RMSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( MUR + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "( Max( Max( ( RRS / MRS ),FirstVNF_Mem ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( ( MUC / CS ),RMSe ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.4087136929460581, "obj2": 0.4331482996048731}, {"determining": "Max( ( ( CRS + DDR ) * ( ( Max( BR,ARS ) / MRS ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Min( ( MUM + DS ) ,Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( Max( Min( CS ,RRSe ),CS ) * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * CRS )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.25103734439834025, "obj2": 0.5775624199113302}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( ( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) + ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) * ( DDR * FirstVNF_CPU ) ) + Max( Min( BR ,CRS ),( FirstVNF_CPU_Server * PN ) ) ) / ( ( ( ( CRS * ( BR + PN ) ) - FirstVNF_CPU ) - ACS ) - ( PN + MRS ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( MUC / DS ) + MUC ) / Min( RCSe ,( Min( ( RMSe - MUM ) ,MUM ) + MUM ) ) ) )", "obj1": 0.578838174273859, "obj2": 0.27837853940243246}, {"determining": "( Max( Max( ARS,FirstVNF_Mem ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( Min( ( FirstVNF_CPU_Server * Const ) ,FirstVNF_Mem ) / RRS ) )", "choosing": "( RRSe / ( ( Min( MUM ,( ( ( MLU - RRSe ) / MLU ) - MUR ) ) / MUM ) - MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.6065617504337101}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( CRS,PN ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * Max( MRS,( DDR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( RCSe / RCSe ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "Min( Max( ( RRS / MRS ),( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,Max( ( MUR / Max( RMSe,RRSe ) ),DS ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.15560165975103735, "obj2": 0.6738038807113425}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / ( RRS + RRS ) ) - RRS ) ),Min( ( CRS / BR ) ,FirstVNF_CPU ) )", "choosing": "( Min( ( MLU + ( MUC / DS ) ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( RCSe / MUR ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUR ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( ( ( FirstVNF_CPU / RRS ) - ( FirstVNF_Mem * ( ( CRS - ( ARS / ( FirstVNF_RAM * AMS ) ) ) * CRS ) ) ) - Max( AMS,RRS ) )", "choosing": "( ( RRSe + MUR ) / ( CS * Min( Max( MUM,Min( MLU ,Max( MUM,Min( Min( RCSe ,MLU ) ,CS ) ) ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.24688796680497926, "obj2": 0.5848801373582663}, {"determining": "( ( ( FirstVNF_CPU / RRS ) - ( FirstVNF_Mem * ( ( CRS - ( ARS / ( FirstVNF_RAM * AMS ) ) ) * CRS ) ) ) - Max( AMS,RRS ) )", "choosing": "( ( RRSe + MUR ) / ( CS * Min( Max( MUM,Min( MLU ,Max( MUM,Min( Min( RCSe ,MLU ) ,CS ) ) ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.24688796680497926, "obj2": 0.5848801373582663}, {"determining": "( ( ( FirstVNF_CPU / RRS ) - ( FirstVNF_Mem * ( ( CRS - ( ARS / ( FirstVNF_RAM * AMS ) ) ) * CRS ) ) ) - Max( AMS,RRS ) )", "choosing": "( ( RRSe + MUR ) / ( CS * Min( Max( MUM,Min( MLU ,Max( MUM,Min( Min( RCSe ,MLU ) ,CS ) ) ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.24688796680497926, "obj2": 0.5848801373582663}, {"determining": "( ( AMS / ( FirstVNF_Mem * ( ( CRS - Min( BR ,( ( ACS - FirstVNF_CPU_Server ) - FirstVNF_RAM ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( CS,Min( ( MUM - DS ) ,Max( MUM,Min( MUR ,CS ) ) ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.24688796680497926, "obj2": 0.5848801373582663}, {"determining": "Min( Max( ( ( FirstVNF_Mem / FirstVNF_Mem ) / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) ) + ( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14107883817427386, "obj2": 0.6927294377174569}, {"determining": "Min( Max( ( ( PN / FirstVNF_Mem ) / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "Max( Min( RRSe ,( MUM + ( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.14107883817427386, "obj2": 0.6927294377174569}, {"determining": "( ( AMS - ( FirstVNF_CPU * ( CRS * ( CRS - Const ) ) ) ) - Max( Max( ( FirstVNF_RAM + DDR ),( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ),AMS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RMSe ) ) ,( RCSe / MUR ) ) ) ),( RRSe / ( MUC / Min( MUR ,DS ) ) ) )", "obj1": 0.2987551867219917, "obj2": 0.5505919032819663}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21784232365145229, "obj2": 0.6058629738274908}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,RRS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( RRSe + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.735229749878201}, {"determining": "( Max( ( ( ( ( PN - Const ) * ( FirstVNF_CPU / AMS ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_CPU,RRS ) ) ,PN ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( Max( MLU,Min( CS ,RRSe ) ),( MUR * CS ) ) / ( CS * MUR ) )", "obj1": 0.3941908713692946, "obj2": 0.46461038659228804}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) * ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( RRS * Const ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( ( MUR * CS ),Max( MLU,Min( CS ,RRSe ) ) ) ),MUC ),( Min( MUC ,( Max( DS,MUM ) + ( RRSe + ( DS + CS ) ) ) ) / Min( ( RCSe - ( Max( RCSe,DS ) + ( DS + MUR ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.4004149377593361, "obj2": 0.46165156132747304}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21784232365145229, "obj2": 0.6058629738274908}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.15145228215767634, "obj2": 0.6787416898006219}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( FirstVNF_Mem_Server + RRS ) * ( FirstVNF_RAM / MDR ) )", "choosing": "( Max( MUR,MUR ) / ( CS * MUR ) )", "obj1": 0.23236514522821577, "obj2": 0.591801361564506}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - Min( ( MRS / CRS ) ,( FirstVNF_Mem / DDR ) ) ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - ( ( MUR * RMSe ) + ( MUR + RCSe ) ) )", "obj1": 0.3900414937759336, "obj2": 0.4783921494482318}, {"determining": "( ( AMS / Min( Max( FirstVNF_RAM_Server,MRS ) ,FirstVNF_RAM ) ) / DDR )", "choosing": "( ( MUC * RRSe ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}, {"determining": "( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUM - MUM ) ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( Max( ( PN / DDR ),MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.2012448132780083, "obj2": 0.622549661460532}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21784232365145229, "obj2": 0.6058629738274908}, {"determining": "( ( Max( ARS,MDR ) - FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Min( RMSe ,RCSe ) ) / ( ( RMSe * MUR ) + MUC ) ) + ( ( ( RRSe * ( Max( DS,CS ) - MUR ) ) + Min( ( Min( RMSe ,MUR ) * RMSe ) ,RRSe ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( Max( ( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ),FirstVNF_Mem ),AMS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) ),( ( ( CS * MUR ) / CS ) / RRSe ) )", "obj1": 0.2863070539419087, "obj2": 0.5770733824104909}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( Max( ( RRS / MRS ),FirstVNF_Mem ),AMS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.2863070539419087, "obj2": 0.5770733824104909}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) )", "choosing": "( Min( MUC ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.12033195020746888, "obj2": 0.7108948315667788}, {"determining": "( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ARS - MDR ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.4066390041493776, "obj2": 0.4472985564764976}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.13485477178423236, "obj2": 0.6961035528055974}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MLU,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( Min( MUC ,( Max( DS,MUM ) + ( RRSe + ( CS + CS ) ) ) ) / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.24481327800829875, "obj2": 0.5916879438381671}, {"determining": "( ( ARS + FirstVNF_RAM ) * Min( ( Min( Max( ( FirstVNF_RAM_Server + MRS ),FirstVNF_Mem_Server ) ,FirstVNF_RAM ) - Min( AMS ,RRS ) ) ,MRS ) )", "choosing": "( ( ( Min( MLU ,CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + MUC ) ) + ( ( Max( RCSe,MUC ) * ( MUC + MUC ) ) - ( CS / Min( ( RCSe - ( ( RMSe + MUR ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.53524676837266}, {"determining": "( ( ( BR * CRS ) - FirstVNF_RAM ) * Max( PN,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + RMSe ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( MLU / ( RRSe / CS ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "Min( RRS ,Max( FirstVNF_RAM_Server,( ( ( ( MRS - ACS ) * ( Const + RRS ) ) / FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) )", "choosing": "Max( MUM,( ( Max( MUM,Min( ( RRSe + MUC ) ,( RRSe + MUM ) ) ) / CS ) / RRSe ) )", "obj1": 0.14937759336099585, "obj2": 0.6789311932818701}, {"determining": "Min( ( Max( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ),( ( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( DDR,PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) - ( RRS * BR ) ) ) - ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,Max( RMSe,MUM ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( ( RRS + FirstVNF_CPU ),PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) )", "choosing": "( ( MUR - ( Min( CS ,MUM ) - ( RMSe + Min( MUC ,RCSe ) ) ) ) + ( Min( Max( MUR,MUR ) ,( RRSe - RMSe ) ) * ( Max( RMSe,CS ) * Max( RMSe,MUM ) ) ) )", "obj1": 0.2946058091286307, "obj2": 0.5648375223103492}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( ( BR / CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / ( ( ( FirstVNF_RAM - MRS ) * MDR ) * FirstVNF_Mem ) ) ) )", "choosing": "( ( MUM + RCSe ) / ( MUM + MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + MRS ) ) - Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) ) ) / PN ) + ( DDR / RRS ) )", "choosing": "( ( ( ( RMSe - MUC ) + RMSe ) - CS ) * ( MUR * Max( MUR,Min( CS ,RRSe ) ) ) )", "obj1": 0.5767634854771784, "obj2": 0.3006661939549571}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.35892116182572614, "obj2": 0.501752893084877}, {"determining": "Min( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( FirstVNF_RAM + FirstVNF_Mem_Server ) ) ,( ACS / ( FirstVNF_CPU_Server / ( ( Max( Min( AMS ,ACS ),FirstVNF_Mem_Server ) + ACS ) / Const ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + ( ( MUR - Min( ( MUC * MUR ) ,MUM ) ) * ( RMSe + ( Max( ( MUC / CS ),RCSe ) * MLU ) ) ) ) ),( Max( RRSe,( ( RMSe - RRSe ) - MUC ) ) / RRSe ) )", "obj1": 0.13070539419087138, "obj2": 0.69716332999539}, {"determining": "Min( ( ACS / FirstVNF_Mem_Server ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + ( ( DS - RRSe ) * ( RMSe + ( ( ( RRSe - RRSe ) - RCSe ) * MLU ) ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.34024896265560167, "obj2": 0.5283244312520198}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( ( ( ( BR / ( FirstVNF_RAM + MRS ) ) - Min( Max( MDR,MRS ) ,Min( AMS ,FirstVNF_Mem ) ) ) / PN ) + ( DDR / RRS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.524896265560166, "obj2": 0.30161508042270285}, {"determining": "Min( ( Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( DDR,PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) )", "choosing": "( ( ( ( RRSe + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) ) + ( Min( Max( MUR,MUR ) ,( RRSe - RMSe ) ) * ( Max( RMSe,CS ) * Max( RMSe,MUM ) ) ) )", "obj1": 0.1078838174273859, "obj2": 0.722589700944154}, {"determining": "( Max( RRS,AMS ) * Min( PN ,RRS ) )", "choosing": "( ( ( ( Max( ( DS * MLU ),( MUC - CS ) ) / ( DS * MUR ) ) - Min( ( Min( MUC ,CS ) * MUC ) ,( ( Max( ( MUC / RRSe ),Min( DS ,MUR ) ) - ( ( DS - DS ) - ( MLU / MUM ) ) ) * MUC ) ) ) / ( ( MUR * RMSe ) + ( MUM + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16804979253112035, "obj2": 0.6571699623081584}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem - FirstVNF_RAM_Server ) ) * ( CRS / ARS ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RCSe,RMSe ) ) / ( ( MUR * RMSe ) + ( MUR + DS ) ) ) + ( ( ( RCSe / RRSe ) / Max( ( ( DS / DS ) * RRSe ),MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( ( ARS - FirstVNF_RAM ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * ( MUC / CS ) ),MUC ),( CS / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,MUM ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.42738589211618255, "obj2": 0.42642376603333093}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "( ( Min( ( Min( MRS ,ARS ) + ( MRS / Const ) ) ,( ( ( ( ( PN - Const ) * ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( ( ( PN * FirstVNF_Mem ) + Max( FirstVNF_RAM_Server,FirstVNF_CPU ) ) ,( Max( Const,DDR ) + ( FirstVNF_RAM / FirstVNF_CPU ) ) ) ) - ( MDR - PN ) ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( Max( ( MUR / Max( RMSe,RRSe ) ),DS ) - Min( MLU ,( Min( RMSe ,Min( RRSe ,Max( Min( ( DS - RRSe ) ,RCSe ),( MUC * RCSe ) ) ) ) * DS ) ) )", "obj1": 0.45435684647302904, "obj2": 0.3527139234445593}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "Min( Max( ( RRS / FirstVNF_RAM_Server ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),( MUC - CS ) ) / ( DS * MUR ) ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.36099585062240663, "obj2": 0.4998673587963935}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "( ( CS - MLU ) + ( ( ( RRSe / RCSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( CS,MUR ) ) ) )", "obj1": 0.17842323651452283, "obj2": 0.649869690363093}], "7": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( Min( CS ,RCSe ) * MUC ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,Max( ( MLU * Max( RMSe,( MLU * MUR ) ) ),RCSe ) ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( Max( ( RRS / MRS ),( Min( FirstVNF_Mem_Server ,Min( AMS ,BR ) ) * PN ) ) ,( FirstVNF_RAM_Server + ( FirstVNF_Mem * RRS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + RMSe ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( Max( MLU,MUC ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( DDR / Min( AMS ,( Min( MDR ,ARS ) * BR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( MUM,CS ) ) ) / ( CS * Min( MLU ,MUR ) ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( FirstVNF_CPU * FirstVNF_CPU_Server ) * Max( PN,MDR ) )", "choosing": "( Max( ( ( MLU - CS ) - Max( RMSe,RCSe ) ),( ( MUR * RMSe ) + MUC ) ) + Max( RRSe,RRSe ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( ( ( PN + FirstVNF_Mem_Server ) - ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) * FirstVNF_RAM_Server ) ) ) * Max( FirstVNF_CPU,RRS ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + Max( Min( RRSe ,( ( ( ( MLU * ( MUM - RRSe ) ) - MUR ) / ( MUC + ( ( MUC + RCSe ) + Min( CS ,DS ) ) ) ) + MUC ) ),( RRSe / ( MUC / CS ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6401370912475569}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "Max( ( ( CRS + DDR ) * ( ( ( FirstVNF_CPU_Server / FirstVNF_CPU_Server ) / BR ) - AMS ) ),( ( CRS / BR ) - MRS ) )", "choosing": "( ( Min( RMSe ,Min( MUR ,( MUC / MUR ) ) ) + RRSe ) - ( ( MUM + DS ) / Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( ( ( ( ( RRSe + MUM ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( ( MLU * MUM ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}, {"determining": "( ( ARS - FirstVNF_RAM ) * Max( PN,( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + MUC ) ) + ( ( ( RCSe / RRSe ) / MUR ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + ( Min( AMS ,FirstVNF_CPU_Server ) + ACS ) ) * PN ) ) ) / ( Max( ARS,BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUM + ( MLU * RCSe ) ) / MUR )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe + MUR ) / ( CS * MUR ) )", "obj1": 0.24896265560165975, "obj2": 0.5831199640546552}, {"determining": "( ( ( DDR - ( ACS / ( FirstVNF_CPU / ( CRS / ARS ) ) ) ) / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( RCSe / RRSe ) / Max( ( RRSe - RRSe ),MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) + ( ( ( MLU - CS ) - Max( RMSe,RMSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( MUR + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "Max( ( ( CRS + DDR ) * ( ( Max( BR,ARS ) / MRS ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Min( ( MUM + DS ) ,Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( Max( Min( CS ,RRSe ),CS ) * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * CRS )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.25103734439834025, "obj2": 0.5775624199113302}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( Max( Max( ARS,FirstVNF_Mem ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( Min( ( FirstVNF_CPU_Server * Const ) ,FirstVNF_Mem ) / RRS ) )", "choosing": "( RRSe / ( ( Min( MUM ,( ( ( MLU - RRSe ) / MLU ) - MUR ) ) / MUM ) - MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.6065617504337101}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( CRS,PN ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * Max( MRS,( DDR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( RCSe / RCSe ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / ( RRS + RRS ) ) - RRS ) ),Min( ( CRS / BR ) ,FirstVNF_CPU ) )", "choosing": "( Min( ( MLU + ( MUC / DS ) ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( RCSe / MUR ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUR ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "( ( AMS - ( FirstVNF_CPU * ( CRS * ( CRS - Const ) ) ) ) - Max( Max( ( FirstVNF_RAM + DDR ),( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * FirstVNF_CPU ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ),AMS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RMSe ) ) ,( RCSe / MUR ) ) ) ),( RRSe / ( MUC / Min( MUR ,DS ) ) ) )", "obj1": 0.2987551867219917, "obj2": 0.5505919032819663}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( FirstVNF_Mem_Server + RRS ) * ( FirstVNF_RAM / MDR ) )", "choosing": "( Max( MUR,MUR ) / ( CS * MUR ) )", "obj1": 0.23236514522821577, "obj2": 0.591801361564506}, {"determining": "( ( AMS / Min( Max( FirstVNF_RAM_Server,MRS ) ,FirstVNF_RAM ) ) / DDR )", "choosing": "( ( MUC * RRSe ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}, {"determining": "( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUM - MUM ) ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( Max( ARS,MDR ) - FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Min( RMSe ,RCSe ) ) / ( ( RMSe * MUR ) + MUC ) ) + ( ( ( RRSe * ( Max( DS,CS ) - MUR ) ) + Min( ( Min( RMSe ,MUR ) * RMSe ) ,RRSe ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) )", "choosing": "( Min( MUC ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.12033195020746888, "obj2": 0.7108948315667788}, {"determining": "( ( ARS + FirstVNF_RAM ) * Min( ( Min( Max( ( FirstVNF_RAM_Server + MRS ),FirstVNF_Mem_Server ) ,FirstVNF_RAM ) - Min( AMS ,RRS ) ) ,MRS ) )", "choosing": "( ( ( Min( MLU ,CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + MUC ) ) + ( ( Max( RCSe,MUC ) * ( MUC + MUC ) ) - ( CS / Min( ( RCSe - ( ( RMSe + MUR ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) )", "obj1": 0.31950207468879666, "obj2": 0.53524676837266}, {"determining": "( ( ( BR * CRS ) - FirstVNF_RAM ) * Max( PN,FirstVNF_Mem_Server ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + RMSe ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( MLU / ( RRSe / CS ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( Max( Max( ( RRS + FirstVNF_CPU ),PN ),( BR * ARS ) ) + ( FirstVNF_CPU_Server / CRS ) ) ) )", "choosing": "( ( MUR - ( Min( CS ,MUM ) - ( RMSe + Min( MUC ,RCSe ) ) ) ) + ( Min( Max( MUR,MUR ) ,( RRSe - RMSe ) ) * ( Max( RMSe,CS ) * Max( RMSe,MUM ) ) ) )", "obj1": 0.2946058091286307, "obj2": 0.5648375223103492}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( ( BR / CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / ( ( ( FirstVNF_RAM - MRS ) * MDR ) * FirstVNF_Mem ) ) ) )", "choosing": "( ( MUM + RCSe ) / ( MUM + MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem - FirstVNF_RAM_Server ) ) * ( CRS / ARS ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RCSe,RMSe ) ) / ( ( MUR * RMSe ) + ( MUR + DS ) ) ) + ( ( ( RCSe / RRSe ) / Max( ( ( DS / DS ) * RRSe ),MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "( ( CS - MLU ) + ( ( ( RRSe / RCSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( CS,MUR ) ) ) )", "obj1": 0.17842323651452283, "obj2": 0.649869690363093}, {"determining": "( ( ARS - FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( Max( Max( ( ( CS + RMSe ) * Max( Max( MUC,Min( CS ,RRSe ) ),( MUR * CS ) ) ),MUC ),( Min( MUC ,( Max( DS,MUM ) + ( RRSe + ( CS + CS ) ) ) ) / Min( ( RCSe - ( Max( RCSe,DS ) + Max( RMSe,RRSe ) ) ) ,CS ) ) ) + MUR ) / ( CS * MUR ) )", "obj1": 0.3775933609958506, "obj2": 0.49223328196543553}, {"determining": "( Max( RRS,AMS ) - ( AMS - ( DDR * ACS ) ) )", "choosing": "( ( MUR + MUR ) / Min( Max( ( CS - MUC ),MLU ) ,MLU ) )", "obj1": 0.24066390041493776, "obj2": 0.5832316997302264}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( Max( ( ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) / Max( FirstVNF_Mem_Server,DDR ) ),FirstVNF_Mem ),AMS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,Min( MUR ,CS ) ) ) ,( RCSe / MUR ) ) ) ),( ( ( CS * MUR ) / CS ) / RRSe ) )", "obj1": 0.25311203319502074, "obj2": 0.5745800161398077}, {"determining": "( Max( AMS,RRS ) * Max( PN,MDR ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( FirstVNF_Mem - AMS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( RMSe / RCSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( ( ( PN - Const ) * Max( DDR,( FirstVNF_Mem / MRS ) ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.17842323651452283, "obj2": 0.649869690363093}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "( ( MDR - ( ACS * FirstVNF_RAM_Server ) ) * ( Min( ( ( DDR - MRS ) * FirstVNF_Mem ) ,ARS ) - ACS ) )", "choosing": "( ( MUM + RCSe ) / ( MUR + MUR ) )", "obj1": 0.23236514522821577, "obj2": 0.591801361564506}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) ) )", "obj1": 0.34854771784232363, "obj2": 0.5082514781760183}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( ARS - FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + MUC ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( Max( MUM,Min( MLU ,Max( MUM,Min( MUR ,CS ) ) ) ) ,CS ) ) )", "obj1": 0.3278008298755187, "obj2": 0.5235202423773286}, {"determining": "( Max( ( Max( MDR,FirstVNF_RAM_Server ) * Max( PN,CRS ) ),Max( Max( FirstVNF_CPU_Server,ARS ),( Max( PN,FirstVNF_RAM_Server ) + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUC + RCSe ) ) / ( ( RCSe / MUM ) * RRSe ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( ( ( Const / Max( FirstVNF_CPU_Server,Const ) ) / ( DDR * FirstVNF_CPU ) ) + ( Min( CRS ,BR ) + ( PN * ( FirstVNF_RAM_Server + DDR ) ) ) ) / ( ( ARS * BR ) - ( ACS * BR ) ) )", "choosing": "( ( ( ( ( DS * MUR ) / ( MUR * Max( DS,MUR ) ) ) * RCSe ) + RMSe ) / ( CS * DS ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( Max( ( Max( PN,CRS ) * ( ACS / FirstVNF_Mem_Server ) ),Max( ( FirstVNF_RAM - FirstVNF_CPU ),( RRS + BR ) ) ) * ( BR + ( Min( MDR ,( CRS * ARS ) ) * PN ) ) )", "choosing": "Max( ( MLU - DS ),( ( ( ( MLU / ( Min( ( MUC + MUR ) ,Min( RMSe ,DS ) ) / MUM ) ) / MUC ) + ( ( ( RMSe / MLU ) + ( DS + Max( Max( RRSe,MUR ),RMSe ) ) ) + Max( MUM,MUR ) ) ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( ( FirstVNF_RAM + FirstVNF_RAM_Server ) - Max( AMS,( ARS - FirstVNF_RAM ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( ( MRS + ( Const - ( FirstVNF_Mem_Server * FirstVNF_RAM ) ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( ( Min( Max( ( ( Max( ( MUM + MLU ),Min( MUM ,MLU ) ) - ( MUR + ( DS - DS ) ) ) / MUC ),DS ) ,( RCSe * ( MUM + Max( ( MUM - Min( RRSe ,CS ) ),MLU ) ) ) ) / ( DS + ( ( RCSe - MLU ) + MUC ) ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.35892116182572614, "obj2": 0.5009856658090639}, {"determining": "( ( Min( ARS ,( RRS + ( ( Max( ( Const * FirstVNF_CPU ),ACS ) - FirstVNF_Mem ) + ( Max( ( ACS - FirstVNF_Mem ),ARS ) - Max( Max( MRS,ARS ),ARS ) ) ) ) ) - FirstVNF_RAM ) * ( Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,AMS ) ) - Min( ( FirstVNF_Mem_Server / BR ) ,Min( RRS ,RRS ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + MUC ) ) + Max( MLU,RMSe ) )", "obj1": 0.3381742738589212, "obj2": 0.5174390487828276}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6067549033146228}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.35269709543568467, "obj2": 0.504507883760068}, {"determining": "( ( ( FirstVNF_CPU_Server * ( ( MDR * FirstVNF_RAM_Server ) - FirstVNF_CPU_Server ) ) - Min( CRS ,ACS ) ) * ( FirstVNF_RAM_Server / RRS ) )", "choosing": "( Max( ( ( ( MLU / DS ) / ( MUR + RCSe ) ) * RRSe ),( Min( ( Min( ( DS / RCSe ) ,MLU ) - ( MUC / ( RCSe / MUC ) ) ) ,DS ) + Min( ( ( ( ( RCSe / MUC ) / ( MUC * RMSe ) ) + DS ) - DS ) ,RMSe ) ) ) / ( CS * MUR ) )", "obj1": 0.24896265560165975, "obj2": 0.5831199640546552}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "Min( CRS ,( Min( Max( Max( MDR,ARS ),CRS ) ,ACS ) - DDR ) )", "choosing": "Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( ( ( CS / RMSe ) * MUM ) + RCSe ) / ( CS * Min( Max( MUM,Min( MLU ,Max( MUM,Min( MUR ,CS ) ) ) ) ,( CS / MUR ) ) ) ) )", "obj1": 0.36099585062240663, "obj2": 0.4934267223529508}, {"determining": "( DDR / Min( Max( ACS,CRS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MLU / ( RRSe / RRSe ) ) / MLU ) / ( MUR + RCSe ) ) / Max( CS,DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6857169933358779}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "Min( ( MDR / PN ) ,( ( ( ARS * MRS ) / Max( Const,RRS ) ) + ( ( FirstVNF_CPU_Server * MRS ) + Max( ( BR * ARS ),Max( DDR,( FirstVNF_Mem / Min( Const ,FirstVNF_CPU_Server ) ) ) ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,AMS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.722489949110308}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,RRS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( RRSe + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7350260428033656}, {"determining": "( ( AMS - ( MDR + ( DDR - ACS ) ) ) - Max( RRS,AMS ) )", "choosing": "Max( Min( ( ( ( RRSe - RRSe ) - RCSe ) * DS ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.2551867219917012, "obj2": 0.5734893446166075}, {"determining": "Min( ( Max( AMS,RRS ) * Max( PN,MDR ) ) ,( ARS - FirstVNF_RAM ) )", "choosing": "Max( ( ( Max( ( DS * MLU ),( MUC - CS ) ) / ( DS * MUR ) ) - Max( RMSe,RCSe ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.3360995850622407, "obj2": 0.5212161879402356}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6067549033146228}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUM - MUM ) ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUM - MUM ) ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUM - MUM ) ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUM - MUM ) ) / ( CS * MUR ) )", "obj1": 0.22199170124481327, "obj2": 0.5987709563866608}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( ( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) ) / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * CS ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( ( CRS * Max( MRS,( FirstVNF_CPU_Server / FirstVNF_RAM_Server ) ) ) * Max( PN,MDR ) )", "choosing": "( Min( MLU ,( CS * MLU ) ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6114946769503992}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6596484426972882}, {"determining": "( ( ARS - FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + MUC ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.3257261410788382, "obj2": 0.5344001443692186}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16804979253112035, "obj2": 0.6555967338674159}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7344979609284688}], "8": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "Min( Max( ( RRS / MRS ),( Min( FirstVNF_Mem_Server ,Min( AMS ,BR ) ) * PN ) ) ,( FirstVNF_RAM_Server + ( FirstVNF_Mem * RRS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + RMSe ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( Max( MLU,MUC ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "( DDR / Min( AMS ,( Min( MDR ,ARS ) * BR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( MUM,CS ) ) ) / ( CS * Min( MLU ,MUR ) ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "Max( ( ( CRS + DDR ) * ( ( ( FirstVNF_CPU_Server / FirstVNF_CPU_Server ) / BR ) - AMS ) ),( ( CRS / BR ) - MRS ) )", "choosing": "( ( Min( RMSe ,Min( MUR ,( MUC / MUR ) ) ) + RRSe ) - ( ( MUM + DS ) / Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( ( ( ( ( RRSe + MUM ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( ( MLU * MUM ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + ( Min( AMS ,FirstVNF_CPU_Server ) + ACS ) ) * PN ) ) ) / ( Max( ARS,BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUM + ( MLU * RCSe ) ) / MUR )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe + MUR ) / ( CS * MUR ) )", "obj1": 0.24896265560165975, "obj2": 0.5831199640546552}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( MUR + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.12240663900414937, "obj2": 0.7081520443825974}, {"determining": "Max( ( ( CRS + DDR ) * ( ( Max( BR,ARS ) / MRS ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Min( ( MUM + DS ) ,Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( Max( Min( CS ,RRSe ),CS ) * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * CRS )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.25103734439834025, "obj2": 0.5775624199113302}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / ( RRS + RRS ) ) - RRS ) ),Min( ( CRS / BR ) ,FirstVNF_CPU ) )", "choosing": "( Min( ( MLU + ( MUC / DS ) ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( RCSe / MUR ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUR ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( FirstVNF_Mem_Server + RRS ) * ( FirstVNF_RAM / MDR ) )", "choosing": "( Max( MUR,MUR ) / ( CS * MUR ) )", "obj1": 0.23236514522821577, "obj2": 0.591801361564506}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) )", "choosing": "( Min( MUC ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( Min( MUR ,DS ) + DS ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.12033195020746888, "obj2": 0.7108948315667788}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "( ( CS - MLU ) + ( ( ( RRSe / RCSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( CS,MUR ) ) ) )", "obj1": 0.17842323651452283, "obj2": 0.649869690363093}, {"determining": "( Max( RRS,AMS ) - ( AMS - ( DDR * ACS ) ) )", "choosing": "( ( MUR + MUR ) / Min( Max( ( CS - MUC ),MLU ) ,MLU ) )", "obj1": 0.24066390041493776, "obj2": 0.5832316997302264}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( FirstVNF_Mem - AMS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( RMSe / RCSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( ( ( ( PN - Const ) * Max( DDR,( FirstVNF_Mem / MRS ) ) ) + ( Min( BR ,CRS ) + ( FirstVNF_CPU_Server * PN ) ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * MRS ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.17842323651452283, "obj2": 0.649869690363093}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "( ( MDR - ( ACS * FirstVNF_RAM_Server ) ) * ( Min( ( ( DDR - MRS ) * FirstVNF_Mem ) ,ARS ) - ACS ) )", "choosing": "( ( MUM + RCSe ) / ( MUR + MUR ) )", "obj1": 0.23236514522821577, "obj2": 0.591801361564506}, {"determining": "Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( ( ( Const / Max( FirstVNF_CPU_Server,Const ) ) / ( DDR * FirstVNF_CPU ) ) + ( Min( CRS ,BR ) + ( PN * ( FirstVNF_RAM_Server + DDR ) ) ) ) / ( ( ARS * BR ) - ( ACS * BR ) ) )", "choosing": "( ( ( ( ( DS * MUR ) / ( MUR * Max( DS,MUR ) ) ) * RCSe ) + RMSe ) / ( CS * DS ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( Max( ( Max( PN,CRS ) * ( ACS / FirstVNF_Mem_Server ) ),Max( ( FirstVNF_RAM - FirstVNF_CPU ),( RRS + BR ) ) ) * ( BR + ( Min( MDR ,( CRS * ARS ) ) * PN ) ) )", "choosing": "Max( ( MLU - DS ),( ( ( ( MLU / ( Min( ( MUC + MUR ) ,Min( RMSe ,DS ) ) / MUM ) ) / MUC ) + ( ( ( RMSe / MLU ) + ( DS + Max( Max( RRSe,MUR ),RMSe ) ) ) + Max( MUM,MUR ) ) ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( ( ( FirstVNF_CPU_Server * ( ( MDR * FirstVNF_RAM_Server ) - FirstVNF_CPU_Server ) ) - Min( CRS ,ACS ) ) * ( FirstVNF_RAM_Server / RRS ) )", "choosing": "( Max( ( ( ( MLU / DS ) / ( MUR + RCSe ) ) * RRSe ),( Min( ( Min( ( DS / RCSe ) ,MLU ) - ( MUC / ( RCSe / MUC ) ) ) ,DS ) + Min( ( ( ( ( RCSe / MUC ) / ( MUC * RMSe ) ) + DS ) - DS ) ,RMSe ) ) ) / ( CS * MUR ) )", "obj1": 0.24896265560165975, "obj2": 0.5831199640546552}, {"determining": "( DDR / Min( Max( ACS,CRS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MLU / ( RRSe / RRSe ) ) / MLU ) / ( MUR + RCSe ) ) / Max( CS,DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6857169933358779}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,AMS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.722489949110308}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,RRS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( RRSe + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7350260428033656}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( ( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) ) / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * CS ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16804979253112035, "obj2": 0.6555967338674159}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "Max( ( ( DDR + CRS ) * ( Max( PN,MDR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MUR ,( ( RCSe / MUR ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( MLU ,( ( RCSe / MUR ) - RRSe ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.11618257261410789, "obj2": 0.71427767264191}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RMSe,RCSe ) ) / ( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) + ( ( ( RCSe / RRSe ) / Max( MUR,MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16804979253112035, "obj2": 0.6555967338674159}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( CRS,PN ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * Max( MRS,( DDR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( RRS * ( CRS - Const ) ) ) ) - ( Max( FirstVNF_RAM_Server,DDR ) * CRS ) )", "choosing": "Max( ( ( MUR + MUR ) / ( CS * ( Max( RRSe,Min( MLU ,Min( MUR ,CS ) ) ) + ( RCSe / MUR ) ) ) ),( ( ( ( ( MUM * RMSe ) / CS ) * MUR ) / CS ) / MUR ) )", "obj1": 0.25311203319502074, "obj2": 0.5731266138654482}, {"determining": "( ( ACS / FirstVNF_RAM_Server ) * Max( ( ( ACS / FirstVNF_Mem_Server ) * ( DDR * BR ) ),Max( Max( PN,ARS ),Min( FirstVNF_RAM ,Min( BR ,( AMS / ( FirstVNF_CPU_Server - RRS ) ) ) ) ) ) )", "choosing": "( ( MUR + MUR ) / ( ( ( MUM - CS ) - ( Min( RCSe ,( Max( ( MUC - RCSe ),MUM ) - CS ) ) - CS ) ) * RRSe ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( Max( ( FirstVNF_CPU - MRS ),Max( ( FirstVNF_RAM + BR ),Max( MDR,ARS ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + ( MUM - MUM ) ) / ( CS * MUR ) )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - ( FirstVNF_Mem - FirstVNF_CPU ) ) ),Max( AMS,AMS ) )", "choosing": "( ( ( Min( RCSe ,( ( MUC - MUC ) * ( Min( RRSe ,DS ) / ( CS * Min( MUC ,MLU ) ) ) ) ) + Min( RMSe ,( MUR - MUR ) ) ) + Min( MLU ,MUM ) ) - Min( ( CS / RRSe ) ,DS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( Max( Min( RRSe ,( ( MUR * RMSe ) + ( MUR + RCSe ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( ( CRS * CRS ) - ( BR - ( RRS / FirstVNF_CPU ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( ( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ) - ( ( RCSe - MUR ) / RCSe ) ) / Max( DS,Max( MUR,MLU ) ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( RMSe + MUR ) / ( CS * MUR ) )", "obj1": 0.24896265560165975, "obj2": 0.5831199640546552}, {"determining": "( ( ( FirstVNF_CPU_Server * ( ( ( FirstVNF_RAM_Server - Min( ( FirstVNF_Mem_Server + FirstVNF_RAM ) ,MDR ) ) / MRS ) - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( Min( ( RCSe / ( RMSe + ( RCSe / ( RMSe * MLU ) ) ) ) ,( MUR * CS ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6857169933358779}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * Min( Max( ( RRS / MRS ),FirstVNF_Mem ) ,( ARS - FirstVNF_RAM ) ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( Max( RRSe,Min( MUR ,RCSe ) ) ,( RCSe / MUR ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( MUM + DS ),Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( MLU * ( RCSe / RCSe ) ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem - FirstVNF_RAM_Server ) ) * ( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RCSe,RMSe ) ) / ( MUR + MUR ) ) + ( ( ( RCSe / RRSe ) / Max( ( ( DS / DS ) * RRSe ),MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.16597510373443983, "obj2": 0.6586267507050048}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "Max( ( ( FirstVNF_Mem + ( ( Max( DDR,DDR ) + FirstVNF_CPU_Server ) * FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) )", "choosing": "Max( Max( RMSe,MUR ),( ( Min( ( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.16182572614107885, "obj2": 0.6594968237750048}, {"determining": "( Max( AMS,RRS ) * Max( PN,MDR ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "( ( ( ( PN - ARS ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( BR - MDR ) )", "choosing": "( ( DS / RCSe ) - ( ( RMSe * CS ) - CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),RRS ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( ( RRS + CRS ) + Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) ) ) ) * Max( RRS,FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MLU ) ),( ( ( ( DS - Min( CS ,( MUC * RRSe ) ) ) + Min( CS ,DS ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( DS * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Max( MUM,MUC ) + MLU ) / ( ( MUM - RRSe ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( FirstVNF_Mem ,DDR ) - Max( CRS,RRS ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( Min( DS ,( MLU + RCSe ) ) ,( MUM + ( MUR * MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + MUM ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( ( MLU * MUM ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.12655601659751037, "obj2": 0.7072481956817614}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( DDR + FirstVNF_RAM_Server ) * PN ) ) ) / ( Max( ( MDR - ( MRS + Min( MRS ,FirstVNF_Mem_Server ) ) ),MRS ) * ( ACS / BR ) ) )", "choosing": "( ( MUM + MUR ) / ( ( CS + RCSe ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( AMS - ( DDR * ( Max( FirstVNF_CPU,Max( ( ( RRS - FirstVNF_RAM ) * ( ACS / ACS ) ),MDR ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( MUC ,DS ) / RRSe )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( Max( ( PN - AMS ),( ARS * FirstVNF_RAM_Server ) ) - Max( ( ( BR / FirstVNF_RAM ) - Min( FirstVNF_CPU_Server ,DDR ) ),AMS ) )", "choosing": "( ( ( ( RMSe * MUM ) + MUC ) / ( MUR + RCSe ) ) / ( DS * MUR ) )", "obj1": 0.08713692946058091, "obj2": 0.7350260428033656}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6754040082089726}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.19294605809128632, "obj2": 0.6254595263098525}, {"determining": "Max( Max( AMS,( BR / ACS ) ),( MDR / ( CRS * ARS ) ) )", "choosing": "( Min( ( MLU + MUM ) ,Min( Max( MUR,MUR ) ,MUM ) ) - ( ( ( Min( MUM ,RMSe ) * RCSe ) * RMSe ) + CS ) )", "obj1": 0.1970954356846473, "obj2": 0.6233272827015807}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( FirstVNF_CPU_Server * ( CRS - Const ) ) ) ) - Max( ( MDR - FirstVNF_RAM ),AMS ) )", "choosing": "( Min( Min( MUM ,MLU ) ,Min( CS ,MUM ) ) - ( ( MUR / Min( MUR ,( MUR + RMSe ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC / MUM ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.7247093323672058}, {"determining": "( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( RMSe + MUR ) / ( CS * MUR ) )", "obj1": 0.24896265560165975, "obj2": 0.5831199640546552}, {"determining": "Max( ( ( DDR + CRS ) * ( ( ( Max( PN,MRS ) / ( Const * FirstVNF_CPU_Server ) ) / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Max( ( RMSe + ( ( RMSe + MUC ) + ( MUM - MUC ) ) ),Min( ( Min( Max( RRSe,Min( MLU ,RCSe ) ) ,( RCSe / MUR ) ) + ( ( RCSe / RCSe ) * MLU ) ) ,MUM ) ) )", "obj1": 0.10995850622406639, "obj2": 0.7165049877223097}, {"determining": "( ( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),( FirstVNF_Mem_Server * FirstVNF_CPU ) ) + FirstVNF_CPU ) - ( BR / ACS ) )", "choosing": "Max( ( ( Min( Max( RMSe,( ( RMSe / MUR ) * MUC ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ),MUR )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( FirstVNF_RAM * ACS ) - ( BR - ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),( ( RRSe * MUC ) + ( RMSe - RCSe ) ) ) + ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6526313583194292}, {"determining": "( ( ( ( FirstVNF_CPU_Server * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( CRS + FirstVNF_RAM ) - Min( CRS ,RRS ) ) ) / ( RRS + ARS ) )", "choosing": "( Max( Max( ( ( MLU / MUC ) * ( RMSe / CS ) ),RRSe ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "( ( ( Max( ( AMS + FirstVNF_RAM_Server ),( Max( FirstVNF_RAM_Server,FirstVNF_Mem_Server ) * FirstVNF_RAM ) ) - ACS ) / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Max( ( MUC / Max( RMSe,MLU ) ),MUM ) / Max( ( ( RCSe - CS ) / RCSe ),( ( DS * DS ) + DS ) ) )", "obj1": 0.2095435684647303, "obj2": 0.6065867774539762}, {"determining": "Max( ( ( ( FirstVNF_Mem / ( FirstVNF_Mem + MRS ) ) * CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * ( ( MLU - CS ) + Max( CS,Min( Max( MLU,Max( Min( MUR ,MUM ),Min( DS ,DS ) ) ) ,DS ) ) ) ) )", "obj1": 0.21991701244813278, "obj2": 0.5945381607122341}, {"determining": "( ( ( PN / BR ) + FirstVNF_RAM ) - ( BR / FirstVNF_CPU_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,RCSe ) ,( ( Min( RMSe ,RCSe ) * Min( Max( DS,MLU ) ,Min( CS ,RCSe ) ) ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18672199170124482, "obj2": 0.6438684364133281}, {"determining": "Max( ( ( CRS + DDR ) * ( ( Max( BR,ARS ) / MRS ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Max( ( ( ( MLU / DS ) / ( MUR + RCSe ) ) * RRSe ),( Min( ( Min( ( DS / RCSe ) ,MLU ) - ( MUC / ( RCSe / MUC ) ) ) ,DS ) + Min( ( ( ( ( RCSe / MUC ) / ( MUC * RMSe ) ) + DS ) - DS ) ,RMSe ) ) ) / ( CS * MUR ) )", "obj1": 0.14107883817427386, "obj2": 0.6736237733822524}, {"determining": "( Max( ( PN / DDR ),ACS ) / Min( Min( ( FirstVNF_RAM * PN ) ,AMS ) ,Max( PN,MDR ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.7221906102380786}, {"determining": "( Max( ( FirstVNF_Mem_Server * BR ),ACS ) / Min( Min( ( PN * FirstVNF_RAM ) ,AMS ) ,FirstVNF_Mem ) )", "choosing": "( Min( RMSe ,RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.722489949110308}, {"determining": "( DDR / ( BR / ( ( Const * AMS ) - DDR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( CS,( RMSe * ( MUC - RCSe ) ) ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.16182572614107885, "obj2": 0.6594968237750048}], "9": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( FirstVNF_Mem - AMS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( RMSe / RCSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( Const / Max( FirstVNF_CPU_Server,Const ) ) / ( DDR * FirstVNF_CPU ) ) + ( Min( CRS ,BR ) + ( PN * ( FirstVNF_RAM_Server + DDR ) ) ) ) / ( ( ARS * BR ) - ( ACS * BR ) ) )", "choosing": "( ( ( ( ( DS * MUR ) / ( MUR * Max( DS,MUR ) ) ) * RCSe ) + RMSe ) / ( CS * DS ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( Max( ( Max( PN,CRS ) * ( ACS / FirstVNF_Mem_Server ) ),Max( ( FirstVNF_RAM - FirstVNF_CPU ),( RRS + BR ) ) ) * ( BR + ( Min( MDR ,( CRS * ARS ) ) * PN ) ) )", "choosing": "Max( ( MLU - DS ),( ( ( ( MLU / ( Min( ( MUC + MUR ) ,Min( RMSe ,DS ) ) / MUM ) ) / MUC ) + ( ( ( RMSe / MLU ) + ( DS + Max( Max( RRSe,MUR ),RMSe ) ) ) + Max( MUM,MUR ) ) ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( DDR / Min( Max( ACS,CRS ) ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MLU / ( RRSe / RRSe ) ) / MLU ) / ( MUR + RCSe ) ) / Max( CS,DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6857169933358779}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( CRS,PN ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * Max( MRS,( DDR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( ( ACS / FirstVNF_RAM_Server ) * Max( ( ( ACS / FirstVNF_Mem_Server ) * ( DDR * BR ) ),Max( Max( PN,ARS ),Min( FirstVNF_RAM ,Min( BR ,( AMS / ( FirstVNF_CPU_Server - RRS ) ) ) ) ) ) )", "choosing": "( ( MUR + MUR ) / ( ( ( MUM - CS ) - ( Min( RCSe ,( Max( ( MUC - RCSe ),MUM ) - CS ) ) - CS ) ) * RRSe ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - ( FirstVNF_Mem - FirstVNF_CPU ) ) ),Max( AMS,AMS ) )", "choosing": "( ( ( Min( RCSe ,( ( MUC - MUC ) * ( Min( RRSe ,DS ) / ( CS * Min( MUC ,MLU ) ) ) ) ) + Min( RMSe ,( MUR - MUR ) ) ) + Min( MLU ,MUM ) ) - Min( ( CS / RRSe ) ,DS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( Max( Min( RRSe ,( ( MUR * RMSe ) + ( MUR + RCSe ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( ( CRS * CRS ) - ( BR - ( RRS / FirstVNF_CPU ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( ( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ) - ( ( RCSe - MUR ) / RCSe ) ) / Max( DS,Max( MUR,MLU ) ) )", "obj1": 0.23029045643153526, "obj2": 0.593299141408312}, {"determining": "( ( ( FirstVNF_CPU_Server * ( ( ( FirstVNF_RAM_Server - Min( ( FirstVNF_Mem_Server + FirstVNF_RAM ) ,MDR ) ) / MRS ) - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( Min( ( RCSe / ( RMSe + ( RCSe / ( RMSe * MLU ) ) ) ) ,( MUR * CS ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6857169933358779}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - ARS ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( BR - MDR ) )", "choosing": "( ( DS / RCSe ) - ( ( RMSe * CS ) - CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),RRS ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( ( RRS + CRS ) + Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) ) ) ) * Max( RRS,FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MLU ) ),( ( ( ( DS - Min( CS ,( MUC * RRSe ) ) ) + Min( CS ,DS ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( DS * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Max( MUM,MUC ) + MLU ) / ( ( MUM - RRSe ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( DDR + FirstVNF_RAM_Server ) * PN ) ) ) / ( Max( ( MDR - ( MRS + Min( MRS ,FirstVNF_Mem_Server ) ) ),MRS ) * ( ACS / BR ) ) )", "choosing": "( ( MUM + MUR ) / ( ( CS + RCSe ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( AMS - ( DDR * ( Max( FirstVNF_CPU,Max( ( ( RRS - FirstVNF_RAM ) * ( ACS / ACS ) ),MDR ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( MUC ,DS ) / RRSe )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6754040082089726}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( FirstVNF_CPU_Server * ( CRS - Const ) ) ) ) - Max( ( MDR - FirstVNF_RAM ),AMS ) )", "choosing": "( Min( Min( MUM ,MLU ) ,Min( CS ,MUM ) ) - ( ( MUR / Min( MUR ,( MUR + RMSe ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( FirstVNF_RAM * ACS ) - ( BR - ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),( ( RRSe * MUC ) + ( RMSe - RCSe ) ) ) + ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6526313583194292}, {"determining": "( ( ( Max( ( AMS + FirstVNF_RAM_Server ),( Max( FirstVNF_RAM_Server,FirstVNF_Mem_Server ) * FirstVNF_RAM ) ) - ACS ) / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Max( ( MUC / Max( RMSe,MLU ) ),MUM ) / Max( ( ( RCSe - CS ) / RCSe ),( ( DS * DS ) + DS ) ) )", "obj1": 0.2095435684647303, "obj2": 0.6065867774539762}, {"determining": "Max( ( ( ( FirstVNF_Mem / ( FirstVNF_Mem + MRS ) ) * CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * ( ( MLU - CS ) + Max( CS,Min( Max( MLU,Max( Min( MUR ,MUM ),Min( DS ,DS ) ) ) ,DS ) ) ) ) )", "obj1": 0.21991701244813278, "obj2": 0.5945381607122341}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Max( ( ( ( MLU / DS ) / ( MUR + RCSe ) ) * RRSe ),( Min( ( Min( ( DS / RCSe ) ,MLU ) - ( MUC / ( RCSe / MUC ) ) ) ,DS ) + Min( ( ( ( ( RCSe / MUC ) / ( MUC * RMSe ) ) + DS ) - DS ) ,RMSe ) ) ) / ( CS * MUR ) )", "obj1": 0.14107883817427386, "obj2": 0.6736237733822524}, {"determining": "( DDR / ( BR / ( ( Const * AMS ) - DDR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( CS,( RMSe * ( MUC - RCSe ) ) ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "Min( Max( ( Max( ( FirstVNF_CPU - MRS ),Max( ( ( Const - ( RRS - FirstVNF_Mem ) ) + BR ),Max( MDR,ARS ) ) ) / MRS ),FirstVNF_CPU_Server ) ,Max( FirstVNF_RAM_Server,BR ) )", "choosing": "( ( ( MUR + RCSe ) / ( ( MUC / MUM ) + MUC ) ) / ( ( RRSe - ( RRSe + ( MLU - ( MLU + MLU ) ) ) ) * RRSe ) )", "obj1": 0.0975103734439834, "obj2": 0.725754371434382}, {"determining": "Max( Max( ( FirstVNF_Mem_Server / FirstVNF_Mem_Server ),( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( MUC + MUR ) / ( CS * MUR ) ) / ( ( ( ( MUR + RMSe ) + MUM ) / ( CS * MUR ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.723964091740951}, {"determining": "( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6754040082089726}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) - ( ( FirstVNF_RAM + MRS ) * FirstVNF_RAM ) )", "choosing": "( ( MUR + MUM ) / ( RRSe * Min( RCSe ,( MLU * RRSe ) ) ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6754040082089726}, {"determining": "( Min( FirstVNF_CPU ,Max( PN,FirstVNF_RAM ) ) / DDR )", "choosing": "( ( ( RMSe / ( RRSe + RRSe ) ) / Min( MUM ,Max( RCSe,( ( RRSe + Min( MUC ,Min( MUC ,MLU ) ) ) + Max( MUM,MLU ) ) ) ) ) / ( CS * RCSe ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( CRS ,BR ) + ( ( Max( MDR,FirstVNF_CPU_Server ) + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( ( RCSe * ( Min( ( MUC / MUR ) ,MUR ) + Min( ( MUR + RCSe ) ,RMSe ) ) ) ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( FirstVNF_Mem - FirstVNF_CPU_Server ),( RRS / ( ARS * Min( ( MDR * ( Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) + BR ) ) ,ARS ) ) ) )", "choosing": "( ( ( ( MUR - CS ) + MUR ) / Max( ( MUR + RCSe ),MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1991701244813278, "obj2": 0.6171736262111006}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11410788381742738, "obj2": 0.699313440453163}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.16182572614107885, "obj2": 0.6549723600458968}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17427385892116182, "obj2": 0.6492820917522824}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.16390041493775934, "obj2": 0.6545882826003604}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6863613697956833}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( Max( ACS,Const ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( MUM - MUC ) - ( CS + ( RMSe * CS ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem + ( CRS * ( ( FirstVNF_Mem_Server - ( RRS + Max( DDR,FirstVNF_CPU_Server ) ) ) - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,Min( RCSe ,MLU ) ) ,Min( MLU ,MLU ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "Max( ( ( DDR + CRS ) * ( Max( PN,MDR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11410788381742738, "obj2": 0.699313440453163}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17634854771784234, "obj2": 0.6488159128182643}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( ( ( ( PN - Const ) / ( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ) * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( ( ( MUR + MUR ) / ( CS * MUR ) ) ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1950207468879668, "obj2": 0.6236460288185234}, {"determining": "Max( Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MUR ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1970954356846473, "obj2": 0.6233272827015804}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * Max( DS,Max( MUM,Max( MLU,MLU ) ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Const * ( PN * RRS ) )", "choosing": "Max( Min( RRSe ,( Min( Min( MUC ,RRSe ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) ),( ( RRSe - RMSe ) / RRSe ) )", "obj1": 0.18464730290456433, "obj2": 0.6355399244976907}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),RRS ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "( DDR / Min( AMS ,( ARS * BR ) ) )", "choosing": "Max( Min( RRSe ,( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) )", "choosing": "( RRSe / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "Min( ( Min( Min( BR ,Const ) ,( RRS + MRS ) ) - ( MDR + ( DDR - RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Min( Max( DDR,( FirstVNF_Mem / MRS ) ) ,( BR * ARS ) ) ) ) )", "choosing": "( Max( Max( MUM,RMSe ),MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7302238080759541}, {"determining": "( Max( ( ( ( ARS * FirstVNF_Mem ) * FirstVNF_RAM_Server ) * FirstVNF_RAM_Server ),Min( ( ( CRS + PN ) * ACS ) ,ACS ) ) / DDR )", "choosing": "( ( RRSe / RRSe ) / ( ( MLU / MUM ) * CS ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6065867774539762}, {"determining": "Max( ( RRS / ( ARS * CRS ) ),Max( MRS,Min( FirstVNF_RAM_Server ,Max( FirstVNF_RAM,ACS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( ( MUM * CS ) * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( FirstVNF_Mem / FirstVNF_Mem ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( Max( RRS,AMS ) + ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MUR + MUM ) / Max( MLU,Min( ( MUM * MLU ) ,RRSe ) ) ) * ( RCSe + Min( MUC ,MUC ) ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( Max( ( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( FirstVNF_Mem_Server / ACS ) ),( FirstVNF_RAM_Server * ARS ) ) - Max( FirstVNF_RAM,RRS ) )", "choosing": "( ( ( MUC * Min( ( RMSe - RRSe ) ,RCSe ) ) / RRSe ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.6983346278260916}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * CS ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6526313583194292}, {"determining": "( DDR / ( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( BR / ACS ) ) )", "choosing": "( ( ( ( MUR + MUC ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6983415357612758}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6857169933358779}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Max( ( ( ( MLU / DS ) / ( MUR + RCSe ) ) * RRSe ),( Min( ( Min( ( DS / RCSe ) ,MLU ) - ( MUC / ( RCSe / MUC ) ) ) ,DS ) + Min( ( ( ( ( RCSe / MUC ) / ( MUC * RMSe ) ) + DS ) - DS ) ,RMSe ) ) ) / ( CS * MUR ) )", "obj1": 0.14107883817427386, "obj2": 0.6736237733822524}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12240663900414937, "obj2": 0.6921128407607272}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + ( MRS / ( ( ( Const * DDR ) / MRS ) / ( ( ACS + MRS ) + FirstVNF_CPU_Server ) ) ) ) )", "choosing": "( ( ( MUR + DS ) / ( ( MUC / MUM ) + MLU ) ) / ( DS / ( MUC * Max( ( DS - ( MLU * ( Max( MUM,MUC ) * CS ) ) ),MUM ) ) ) )", "obj1": 0.11410788381742738, "obj2": 0.699313440453163}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( RRSe / ( CS * MUR ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11410788381742738, "obj2": 0.699313440453163}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Min( Max( CS,RMSe ) ,( RCSe * ( RMSe + ( MUM / Min( DS ,MUR ) ) ) ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "Max( Min( ( ( ( ( RRSe + MUM ) * ( DS * RRSe ) ) / ( ( MUM / DS ) / ( CS - RRSe ) ) ) / Max( Max( ( CS - MUC ),( MLU / MUR ) ),( ( MLU * MUM ) / ( MUM * RCSe ) ) ) ) ,( MUM + MUC ) ),( ( MUC / CS ) / RRSe ) )", "obj1": 0.19294605809128632, "obj2": 0.6239574037175756}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11410788381742738, "obj2": 0.699313440453163}, {"determining": "( ( ACS * FirstVNF_CPU ) / Min( ( Min( FirstVNF_RAM_Server ,FirstVNF_Mem_Server ) + BR ) ,AMS ) )", "choosing": "( ( RMSe / MUR ) / ( ( MUR + RCSe ) / Min( MUR ,Max( Max( Max( DS,( ( RCSe * MLU ) - ( RCSe / RCSe ) ) ),CS ),MUR ) ) ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem - FirstVNF_RAM_Server ) ) * ( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - PN ) ) )", "choosing": "( ( ( ( MLU - CS ) - Max( RCSe,RMSe ) ) / ( MUR + MUR ) ) + ( ( ( RCSe / RRSe ) / Max( ( ( DS / DS ) * RRSe ),MUR ) ) / ( ( MUC + DS ) / Max( MLU,MUR ) ) ) )", "obj1": 0.17012448132780084, "obj2": 0.6534239475994231}, {"determining": "( Max( FirstVNF_RAM,( FirstVNF_Mem - FirstVNF_RAM_Server ) ) * ( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2157676348547718, "obj2": 0.5992886568281897}, {"determining": "( Max( ( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),RRS ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6465395458876741}], "10": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( FirstVNF_Mem - AMS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( RMSe / RCSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( CRS,PN ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * Max( MRS,( DDR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - ( FirstVNF_Mem - FirstVNF_CPU ) ) ),Max( AMS,AMS ) )", "choosing": "( ( ( Min( RCSe ,( ( MUC - MUC ) * ( Min( RRSe ,DS ) / ( CS * Min( MUC ,MLU ) ) ) ) ) + Min( RMSe ,( MUR - MUR ) ) ) + Min( MLU ,MUM ) ) - Min( ( CS / RRSe ) ,DS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - ARS ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( BR - MDR ) )", "choosing": "( ( DS / RCSe ) - ( ( RMSe * CS ) - CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Max( MUM,MUC ) + MLU ) / ( ( MUM - RRSe ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( DDR + FirstVNF_RAM_Server ) * PN ) ) ) / ( Max( ( MDR - ( MRS + Min( MRS ,FirstVNF_Mem_Server ) ) ),MRS ) * ( ACS / BR ) ) )", "choosing": "( ( MUM + MUR ) / ( ( CS + RCSe ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( AMS - ( DDR * ( Max( FirstVNF_CPU,Max( ( ( RRS - FirstVNF_RAM ) * ( ACS / ACS ) ),MDR ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( MUC ,DS ) / RRSe )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( FirstVNF_CPU_Server * ( CRS - Const ) ) ) ) - Max( ( MDR - FirstVNF_RAM ),AMS ) )", "choosing": "( Min( Min( MUM ,MLU ) ,Min( CS ,MUM ) ) - ( ( MUR / Min( MUR ,( MUR + RMSe ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( Max( ( AMS + FirstVNF_RAM_Server ),( Max( FirstVNF_RAM_Server,FirstVNF_Mem_Server ) * FirstVNF_RAM ) ) - ACS ) / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Max( ( MUC / Max( RMSe,MLU ) ),MUM ) / Max( ( ( RCSe - CS ) / RCSe ),( ( DS * DS ) + DS ) ) )", "obj1": 0.2095435684647303, "obj2": 0.6065867774539762}, {"determining": "( DDR / ( BR / ( ( Const * AMS ) - DDR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( CS,( RMSe * ( MUC - RCSe ) ) ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) - ( ( FirstVNF_RAM + MRS ) * FirstVNF_RAM ) )", "choosing": "( ( MUR + MUM ) / ( RRSe * Min( RCSe ,( MLU * RRSe ) ) ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Min( FirstVNF_CPU ,Max( PN,FirstVNF_RAM ) ) / DDR )", "choosing": "( ( ( RMSe / ( RRSe + RRSe ) ) / Min( MUM ,Max( RCSe,( ( RRSe + Min( MUC ,Min( MUC ,MLU ) ) ) + Max( MUM,MLU ) ) ) ) ) / ( CS * RCSe ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( CRS ,BR ) + ( ( Max( MDR,FirstVNF_CPU_Server ) + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( ( RCSe * ( Min( ( MUC / MUR ) ,MUR ) + Min( ( MUR + RCSe ) ,RMSe ) ) ) ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( FirstVNF_Mem - FirstVNF_CPU_Server ),( RRS / ( ARS * Min( ( MDR * ( Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) + BR ) ) ,ARS ) ) ) )", "choosing": "( ( ( ( MUR - CS ) + MUR ) / Max( ( MUR + RCSe ),MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1991701244813278, "obj2": 0.6171736262111006}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.16182572614107885, "obj2": 0.6549723600458968}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17427385892116182, "obj2": 0.6492820917522824}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( FirstVNF_Mem / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.16390041493775934, "obj2": 0.6545882826003604}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( Max( ACS,Const ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( MUM - MUC ) - ( CS + ( RMSe * CS ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem + ( CRS * ( ( FirstVNF_Mem_Server - ( RRS + Max( DDR,FirstVNF_CPU_Server ) ) ) - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,Min( RCSe ,MLU ) ) ,Min( MLU ,MLU ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( FirstVNF_RAM + FirstVNF_CPU_Server ) - ( ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) / ACS ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17634854771784234, "obj2": 0.6488159128182643}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * Max( DS,Max( MUM,Max( MLU,MLU ) ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ),RRS ) * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) )", "choosing": "( RRSe / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "Min( ( Min( Min( BR ,Const ) ,( RRS + MRS ) ) - ( MDR + ( DDR - RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Min( Max( DDR,( FirstVNF_Mem / MRS ) ) ,( BR * ARS ) ) ) ) )", "choosing": "( Max( Max( MUM,RMSe ),MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( Max( ( ( ( ARS * FirstVNF_Mem ) * FirstVNF_RAM_Server ) * FirstVNF_RAM_Server ),Min( ( ( CRS + PN ) * ACS ) ,ACS ) ) / DDR )", "choosing": "( ( RRSe / RRSe ) / ( ( MLU / MUM ) * CS ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.2095435684647303, "obj2": 0.6065867774539762}, {"determining": "Max( ( RRS / ( ARS * CRS ) ),Max( MRS,Min( FirstVNF_RAM_Server ,Max( FirstVNF_RAM,ACS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( ( MUM * CS ) * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( FirstVNF_Mem / FirstVNF_Mem ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( Max( RRS,AMS ) + ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MUR + MUM ) / Max( MLU,Min( ( MUM * MLU ) ,RRSe ) ) ) * ( RCSe + Min( MUC ,MUC ) ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Min( Max( CS,RMSe ) ,( RCSe * ( RMSe + ( MUM / Min( DS ,MUR ) ) ) ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ACS * FirstVNF_CPU ) / Min( ( Min( FirstVNF_RAM_Server ,FirstVNF_Mem_Server ) + BR ) ,AMS ) )", "choosing": "( ( RMSe / MUR ) / ( ( MUR + RCSe ) / Min( MUR ,Max( Max( Max( DS,( ( RCSe * MLU ) - ( RCSe / RCSe ) ) ),CS ),MUR ) ) ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "( ( ( ( PN - Const ) / ( ( ( ACS / FirstVNF_Mem_Server ) * Max( Min( FirstVNF_Mem ,RRS ),CRS ) ) * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * ACS ) - ( ACS / BR ) ) )", "choosing": "( MUR / ( CS * ( MUC + DS ) ) )", "obj1": 0.1991701244813278, "obj2": 0.6171736262111006}, {"determining": "( DDR / ( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + AMS ) * PN ) ) ) / ( AMS / ( DDR * PN ) ) ) )", "choosing": "( ( ( ( CS * MLU ) / ( ( MUM / MUC ) + MUR ) ) / MUR ) / ( CS * DS ) )", "obj1": 0.14522821576763487, "obj2": 0.6680816963577727}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6807010297482414}, {"determining": "Max( ( ( DDR + CRS ) * ( DDR - FirstVNF_Mem_Server ) ),( CRS / Max( PN,( MDR * BR ) ) ) )", "choosing": "( Min( ( ( MLU * ( ( MUM * ( RCSe * MUC ) ) * ( MUC - RMSe ) ) ) / RCSe ) ,Min( MUM ,MLU ) ) - Min( ( Max( MUC,RRSe ) * RMSe ) ,MUR ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / ( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) ) ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( ( RMSe + MUR ) / ( RMSe * CS ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11203319502074689, "obj2": 0.6984127807751785}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( ( CRS / ( DDR * FirstVNF_CPU ) ) / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( RMSe,( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17427385892116182, "obj2": 0.6492820917522824}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17842323651452283, "obj2": 0.6405791496685224}, {"determining": "Max( ( ( DDR + AMS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( Min( MLU ,MUM ) ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( ARS + CRS ) * ( FirstVNF_RAM - ( FirstVNF_CPU_Server * ( FirstVNF_RAM_Server - ( MRS + ( MRS - ( FirstVNF_RAM - Const ) ) ) ) ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe + RCSe ) / RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( DDR / Min( AMS ,( ARS * BR ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.727007714770084}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.1970954356846473, "obj2": 0.6213119857673455}, {"determining": "( MDR * ( Min( ( ( ( FirstVNF_Mem + BR ) * ACS ) + ( Min( MRS ,MDR ) / Const ) ) ,CRS ) / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,( Min( MLU ,Min( ( MUM - MUR ) ,( RCSe / MLU ) ) ) / Min( MUR ,Max( CS,CS ) ) ) ),( ( Min( Max( RRSe,MUC ) ,( ( DS * MUC ) / Max( ( DS * MLU ),MUC ) ) ) / CS ) / RRSe ) )", "obj1": 0.16182572614107885, "obj2": 0.6549723600458968}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Max( Min( RRSe ,( MUM + Max( MUR,MUC ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.1970954356846473, "obj2": 0.6213119857673455}, {"determining": "( DDR / Min( AMS ,PN ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / Min( ( CS * RMSe ) ,( RCSe * ( RMSe + DS ) ) ) ) / RRSe ) / ( CS * DS ) )", "obj1": 0.14315352697095435, "obj2": 0.6713394716113469}, {"determining": "( DDR / Min( AMS ,( ACS * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "Max( ( ( PN + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * Min( ( MDR * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM ) + BR ) ) ,ARS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Max( FirstVNF_CPU_Server,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC * ( ( ( RRSe + MUM ) * DS ) + CS ) ) / ( CS * MUR ) ) / ( RCSe + MUR ) ) / ( RMSe * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) ) )", "choosing": "( Max( Min( RRSe ,( ( MUR * ( CS * MUR ) ) + ( MUR + RCSe ) ) ),( ( RCSe - MUR ) / RCSe ) ) / ( CS * MUR ) )", "obj1": 0.2053941908713693, "obj2": 0.6109041955139627}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( RRSe ,( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Min( Min( ( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) ) ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.19294605809128632, "obj2": 0.622820126705549}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,( CRS * ( FirstVNF_CPU * ACS ) ) ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + Min( MLU ,MUM ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0975103734439834, "obj2": 0.7209144515767484}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( Max( ( ( ACS / FirstVNF_Mem_Server ) * Max( CRS,PN ) ),Max( Max( PN,ARS ),( FirstVNF_RAM + BR ) ) ) * Max( MRS,( DDR * FirstVNF_CPU_Server ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.6602157873788999}, {"determining": "Max( ( RRS / ( ARS / CRS ) ),( FirstVNF_Mem / ( AMS / AMS ) ) )", "choosing": "( Max( RRSe,( ( ( Min( RMSe ,( ( RRSe + CS ) * ( DS - DS ) ) ) / RCSe ) + ( MLU / MUR ) ) + DS ) ) - ( ( MUM * RMSe ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( PN * BR ) - ( ACS / BR ) ),( DDR / FirstVNF_RAM ) )", "choosing": "( ( ( ( ( ( RMSe * MUC ) + ( MUM + ( ( RMSe - DS ) / ( MUC * RMSe ) ) ) ) + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.16597510373443983, "obj2": 0.6503209420092544}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( FirstVNF_Mem_Server - DDR ) / ( FirstVNF_CPU + PN ) ) / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR + ( CS * RRSe ) ) * ( MUC * ( DS / MUM ) ) ) / ( MUC / Max( MUM,( MUM + MUC ) ) ) ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( ( ( DS * MLU ) - MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( RRSe / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( Min( FirstVNF_Mem ,( BR * FirstVNF_CPU ) ) / ( MRS * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( CS * ( MUC - RRSe ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.2033195020746888, "obj2": 0.6111152263863816}, {"determining": "Max( ( ( DDR + ARS ) * ( FirstVNF_RAM - Max( AMS,FirstVNF_Mem_Server ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( RMSe + Max( CS,MLU ) ) * RRSe ) - Min( CS ,( RMSe * CS ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ) * FirstVNF_CPU ) ) + ( ( ( FirstVNF_RAM_Server + DDR ) * PN ) + Min( BR ,CRS ) ) ) / ( ( ARS * BR ) - Min( FirstVNF_CPU ,MRS ) ) )", "choosing": "( Min( MUM ,Max( ( MUM / RCSe ),MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ARS / ( DDR + Min( FirstVNF_CPU ,RRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( ( DS - RCSe ) * ( CS + ( RMSe * CS ) ) ) ) / ( RRSe + RCSe ) ) / Min( RRSe ,RCSe ) )", "obj1": 0.12033195020746888, "obj2": 0.6862918703260914}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( Min( ARS ,CRS ) / ( FirstVNF_Mem / FirstVNF_RAM ) ) )", "choosing": "( ( ( MUR + RCSe ) / Min( MUR ,( Max( MUM,( RCSe + MUC ) ) / Min( ( CS - MUR ) ,RMSe ) ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7266485966013259}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.21161825726141079, "obj2": 0.604725777081595}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.7185686935702836}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1908713692946058, "obj2": 0.6292357854630405}], "11": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( FirstVNF_Mem - AMS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( RMSe / RCSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - ( FirstVNF_Mem - FirstVNF_CPU ) ) ),Max( AMS,AMS ) )", "choosing": "( ( ( Min( RCSe ,( ( MUC - MUC ) * ( Min( RRSe ,DS ) / ( CS * Min( MUC ,MLU ) ) ) ) ) + Min( RMSe ,( MUR - MUR ) ) ) + Min( MLU ,MUM ) ) - Min( ( CS / RRSe ) ,DS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - ARS ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( BR - MDR ) )", "choosing": "( ( DS / RCSe ) - ( ( RMSe * CS ) - CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Max( MUM,MUC ) + MLU ) / ( ( MUM - RRSe ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( DDR + FirstVNF_RAM_Server ) * PN ) ) ) / ( Max( ( MDR - ( MRS + Min( MRS ,FirstVNF_Mem_Server ) ) ),MRS ) * ( ACS / BR ) ) )", "choosing": "( ( MUM + MUR ) / ( ( CS + RCSe ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( FirstVNF_CPU_Server * ( CRS - Const ) ) ) ) - Max( ( MDR - FirstVNF_RAM ),AMS ) )", "choosing": "( Min( Min( MUM ,MLU ) ,Min( CS ,MUM ) ) - ( ( MUR / Min( MUR ,( MUR + RMSe ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Min( FirstVNF_CPU ,Max( PN,FirstVNF_RAM ) ) / DDR )", "choosing": "( ( ( RMSe / ( RRSe + RRSe ) ) / Min( MUM ,Max( RCSe,( ( RRSe + Min( MUC ,Min( MUC ,MLU ) ) ) + Max( MUM,MLU ) ) ) ) ) / ( CS * RCSe ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( CRS ,BR ) + ( ( Max( MDR,FirstVNF_CPU_Server ) + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( ( RCSe * ( Min( ( MUC / MUR ) ,MUR ) + Min( ( MUR + RCSe ) ,RMSe ) ) ) ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( FirstVNF_Mem - FirstVNF_CPU_Server ),( RRS / ( ARS * Min( ( MDR * ( Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) + BR ) ) ,ARS ) ) ) )", "choosing": "( ( ( ( MUR - CS ) + MUR ) / Max( ( MUR + RCSe ),MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( Max( ACS,Const ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( MUM - MUC ) - ( CS + ( RMSe * CS ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem + ( CRS * ( ( FirstVNF_Mem_Server - ( RRS + Max( DDR,FirstVNF_CPU_Server ) ) ) - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,Min( RCSe ,MLU ) ) ,Min( MLU ,MLU ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * Max( DS,Max( MUM,Max( MLU,MLU ) ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Min( ( Min( Min( BR ,Const ) ,( RRS + MRS ) ) - ( MDR + ( DDR - RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Min( Max( DDR,( FirstVNF_Mem / MRS ) ) ,( BR * ARS ) ) ) ) )", "choosing": "( Max( Max( MUM,RMSe ),MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( RRS / ( ARS * CRS ) ),Max( MRS,Min( FirstVNF_RAM_Server ,Max( FirstVNF_RAM,ACS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( ( MUM * CS ) * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( FirstVNF_Mem / FirstVNF_Mem ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( Max( RRS,AMS ) + ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MUR + MUM ) / Max( MLU,Min( ( MUM * MLU ) ,RRSe ) ) ) * ( RCSe + Min( MUC ,MUC ) ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - Min( Max( CS,RMSe ) ,( RCSe * ( RMSe + ( MUM / Min( DS ,MUR ) ) ) ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( DDR / ( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + AMS ) * PN ) ) ) / ( AMS / ( DDR * PN ) ) ) )", "choosing": "( ( ( ( CS * MLU ) / ( ( MUM / MUC ) + MUR ) ) / MUR ) / ( CS * DS ) )", "obj1": 0.14522821576763487, "obj2": 0.6680816963577727}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6807010297482414}, {"determining": "Max( ( ( DDR + CRS ) * ( DDR - FirstVNF_Mem_Server ) ),( CRS / Max( PN,( MDR * BR ) ) ) )", "choosing": "( Min( ( ( MLU * ( ( MUM * ( RCSe * MUC ) ) * ( MUC - RMSe ) ) ) / RCSe ) ,Min( MUM ,MLU ) ) - Min( ( Max( MUC,RRSe ) * RMSe ) ,MUR ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / ( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) ) ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( ( RMSe + MUR ) / ( RMSe * CS ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11203319502074689, "obj2": 0.6984127807751785}, {"determining": "Max( ( ( DDR + AMS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( Min( MLU ,MUM ) ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( ARS + CRS ) * ( FirstVNF_RAM - ( FirstVNF_CPU_Server * ( FirstVNF_RAM_Server - ( MRS + ( MRS - ( FirstVNF_RAM - Const ) ) ) ) ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe + RCSe ) / RMSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( DDR / Min( AMS ,PN ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / Min( ( CS * RMSe ) ,( RCSe * ( RMSe + DS ) ) ) ) / RRSe ) / ( CS * DS ) )", "obj1": 0.14315352697095435, "obj2": 0.6713394716113469}, {"determining": "( DDR / Min( AMS ,( ACS * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "Max( ( ( PN + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * Min( ( MDR * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM ) + BR ) ) ,ARS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Min( Const ,FirstVNF_Mem ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Max( FirstVNF_CPU_Server,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC * ( ( ( RRSe + MUM ) * DS ) + CS ) ) / ( CS * MUR ) ) / ( RCSe + MUR ) ) / ( RMSe * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( RRSe ,( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.6602157873788999}, {"determining": "Max( ( RRS / ( ARS / CRS ) ),( FirstVNF_Mem / ( AMS / AMS ) ) )", "choosing": "( Max( RRSe,( ( ( Min( RMSe ,( ( RRSe + CS ) * ( DS - DS ) ) ) / RCSe ) + ( MLU / MUR ) ) + DS ) ) - ( ( MUM * RMSe ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( PN * BR ) - ( ACS / BR ) ),( DDR / FirstVNF_RAM ) )", "choosing": "( ( ( ( ( ( RMSe * MUC ) + ( MUM + ( ( RMSe - DS ) / ( MUC * RMSe ) ) ) ) + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.16597510373443983, "obj2": 0.6503209420092544}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( FirstVNF_Mem_Server - DDR ) / ( FirstVNF_CPU + PN ) ) / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR + ( CS * RRSe ) ) * ( MUC * ( DS / MUM ) ) ) / ( MUC / Max( MUM,( MUM + MUC ) ) ) ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( ( ( DS * MLU ) - MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( Min( FirstVNF_Mem ,( BR * FirstVNF_CPU ) ) / ( MRS * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( CS * ( MUC - RRSe ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ARS ) * ( FirstVNF_RAM - Max( AMS,FirstVNF_Mem_Server ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( RMSe + Max( CS,MLU ) ) * RRSe ) - Min( CS ,( RMSe * CS ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( ( ( ACS / FirstVNF_Mem_Server ) * Max( PN,CRS ) ) * FirstVNF_CPU ) ) + ( ( ( FirstVNF_RAM_Server + DDR ) * PN ) + Min( BR ,CRS ) ) ) / ( ( ARS * BR ) - Min( FirstVNF_CPU ,MRS ) ) )", "choosing": "( Min( MUM ,Max( ( MUM / RCSe ),MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ARS / ( DDR + Min( FirstVNF_CPU ,RRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( ( DS - RCSe ) * ( CS + ( RMSe * CS ) ) ) ) / ( RRSe + RCSe ) ) / Min( RRSe ,RCSe ) )", "obj1": 0.12033195020746888, "obj2": 0.6862918703260914}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( Max( ( Min( AMS ,PN ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.6602157873788999}, {"determining": "( DDR / Min( AMS ,PN ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.6602157873788999}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_RAM_Server ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / Min( ( CS * RMSe ) ,( RCSe * ( RMSe + DS ) ) ) ) / RRSe ) / ( CS * DS ) )", "obj1": 0.14315352697095435, "obj2": 0.6713394716113469}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Const - ( PN - ARS ) ) ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - Const ) )", "choosing": "( ( ( RCSe * Max( ( RRSe / ( MUC / ( ( CS - CS ) * DS ) ) ),Max( Min( RCSe ,RCSe ),RMSe ) ) ) - ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUR ) ) / ( CS * DS ) )", "obj1": 0.11825726141078838, "obj2": 0.6913214753697248}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( DDR / Max( ( ( FirstVNF_RAM_Server * FirstVNF_Mem_Server ) / FirstVNF_CPU_Server ),FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( MLU + MUR ) / ( ( ( ( Min( RMSe ,MUR ) - ( MUC + RRSe ) ) / MUM ) - MUC ) * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( ( FirstVNF_RAM_Server + ( DDR * MDR ) ) / Min( ( PN + FirstVNF_Mem_Server ) ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( ( Min( CS ,DS ) / ( ( ( RCSe * MUM ) / MUM ) / MUR ) ) / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13278008298755187, "obj2": 0.6787028467464881}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( RRS + FirstVNF_RAM ) ) ) / Min( MRS ,( ( ( MRS - FirstVNF_Mem_Server ) + FirstVNF_CPU_Server ) + Const ) ) )", "choosing": "( ( MUR / ( RRSe + ( ( CS / RMSe ) - Min( ( ( MUR - CS ) - MUR ) ,( ( RCSe / RCSe ) * MUC ) ) ) ) ) / Min( CS ,DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( Max( FirstVNF_CPU,( FirstVNF_CPU_Server + ( PN - AMS ) ) ) / Min( ( ( MRS + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ,AMS ) )", "choosing": "( ( ( ( ( ( ( Max( RCSe,MLU ) / RCSe ) / Min( Min( MLU ,MLU ) ,DS ) ) / RMSe ) / MLU ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ARS * FirstVNF_Mem ) / ( BR + Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) * ( CRS * ( FirstVNF_CPU - ACS ) ) )", "choosing": "( ( RRSe * ( CS - MLU ) ) - ( ( CS * RMSe ) + CS ) )", "obj1": 0.19294605809128632, "obj2": 0.6227004930234636}, {"determining": "Max( ( Min( Min( ( BR / BR ) ,Max( AMS,FirstVNF_RAM ) ) ,FirstVNF_Mem ) * ( AMS - FirstVNF_RAM ) ),Max( RRS,BR ) )", "choosing": "( ( Min( Min( Max( RCSe,( Max( ( RCSe + RMSe ),Max( DS,MLU ) ) + MLU ) ) ,( DS + MUR ) ) ,MUR ) / ( ( CS / Max( ( ( ( MUR - MUM ) + RRSe ) * MLU ),RMSe ) ) + RMSe ) ) / ( MLU * DS ) )", "obj1": 0.14522821576763487, "obj2": 0.6680816963577727}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / ( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) ) ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( ( RMSe + MUR ) / ( RMSe * CS ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11203319502074689, "obj2": 0.6984127807751785}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6405575817151562}, {"determining": "Max( ( ( ( ( MRS / FirstVNF_RAM ) - CRS ) + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / ( ( CRS / FirstVNF_RAM ) * Max( DDR,MDR ) ) ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( ( RMSe + ( MUC / MUM ) ) / ( CS * RCSe ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11203319502074689, "obj2": 0.6984127807751785}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),Max( ( RRS / MRS ),( PN + FirstVNF_RAM ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( ( RMSe + MUR ) / ( RMSe * CS ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11203319502074689, "obj2": 0.6984127807751785}, {"determining": "( DDR / ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / MUR ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1078838174273859, "obj2": 0.699175057547061}, {"determining": "( CRS / Min( AMS ,( ACS * ( Min( DDR ,AMS ) + FirstVNF_RAM ) ) ) )", "choosing": "( Min( ( MLU * MLU ) ,( MUR * ( Max( ( RRSe * RMSe ),MUM ) - DS ) ) ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( Min( ( FirstVNF_RAM_Server / FirstVNF_Mem ) ,( ACS * BR ) ) / DDR )", "choosing": "( Min( Min( MUM ,( ( ( ( ( MLU + RMSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) ) ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1825726141078838, "obj2": 0.6344982675137817}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ( Const * ( BR - PN ) ) * BR ) - Min( ACS ,BR ) ) )", "choosing": "( ( MUR + MUR ) / ( Min( DS ,CS ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( DDR / ( ( ( ( PN - Const ) / ( DDR * ( DDR + CRS ) ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / MUR ) / ( CS * DS ) )", "obj1": 0.16182572614107885, "obj2": 0.6537106286585534}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * DS ) ),MUC ) / ( DS * RMSe ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.6602157873788999}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.6602157873788999}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( Min( BR ,Const ) / ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( Min( ( CS / MLU ) ,( RRSe - CS ) ) - ( DS + ( RRSe * ( RCSe - MUM ) ) ) ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( ( ( FirstVNF_CPU_Server * ( FirstVNF_RAM - PN ) ) - Min( CRS ,ACS ) ) * ( RRS / ( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) ) ) ) ) ) )", "choosing": "( Min( Min( ( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) ) ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1908713692946058, "obj2": 0.6273378341201693}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( DDR / ( ( ARS - Min( ( FirstVNF_CPU_Server - MDR ) ,ARS ) ) * FirstVNF_CPU_Server ) )", "choosing": "( Max( MUM,CS ) / ( ( ( MUR + MUR ) * ( CS * Max( ( MUC - RRSe ),RCSe ) ) ) - ( MUR + RCSe ) ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( MUR + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "( BR * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1950207468879668, "obj2": 0.6156558519246444}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6390608488669072}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR / FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * DS ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.6602157873788999}, {"determining": "Max( ( ( ARS * BR ) - ( ACS / ( ( FirstVNF_RAM_Server + ARS ) - Max( AMS,FirstVNF_Mem ) ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + ( ( RMSe * CS ) + CS ) ) / ( CS * MUR ) ) / ( ( ( MUR + MUR ) / ( CS * MUR ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0912863070539419, "obj2": 0.7205305219816034}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) - Max( AMS,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + ( ( RMSe * CS ) + CS ) ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.16597510373443983, "obj2": 0.6503209420092544}], "12": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + ( PN * ( ( ARS * DDR ) - ( MRS - FirstVNF_RAM ) ) ) ) * ( FirstVNF_RAM - AMS ) ),Max( Max( FirstVNF_CPU_Server,FirstVNF_CPU_Server ),( ARS * CRS ) ) )", "choosing": "( ( Min( ( Min( ( ( MUC / Min( MUM ,MUM ) ) - ( ( MUC - RCSe ) * ( CS + MLU ) ) ) ,RMSe ) + ( MUR * CS ) ) ,DS ) + CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( FirstVNF_Mem - AMS ) ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( RMSe / RCSe ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - ( FirstVNF_Mem - FirstVNF_CPU ) ) ),Max( AMS,AMS ) )", "choosing": "( ( ( Min( RCSe ,( ( MUC - MUC ) * ( Min( RRSe ,DS ) / ( CS * Min( MUC ,MLU ) ) ) ) ) + Min( RMSe ,( MUR - MUR ) ) ) + Min( MLU ,MUM ) ) - Min( ( CS / RRSe ) ,DS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( ( ( PN - ARS ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( BR - MDR ) )", "choosing": "( ( DS / RCSe ) - ( ( RMSe * CS ) - CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Max( MUM,MUC ) + MLU ) / ( ( MUM - RRSe ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( DDR + FirstVNF_RAM_Server ) * PN ) ) ) / ( Max( ( MDR - ( MRS + Min( MRS ,FirstVNF_Mem_Server ) ) ),MRS ) * ( ACS / BR ) ) )", "choosing": "( ( MUM + MUR ) / ( ( CS + RCSe ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( FirstVNF_CPU_Server * ( CRS - Const ) ) ) ) - Max( ( MDR - FirstVNF_RAM ),AMS ) )", "choosing": "( Min( Min( MUM ,MLU ) ,Min( CS ,MUM ) ) - ( ( MUR / Min( MUR ,( MUR + RMSe ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( CRS / FirstVNF_RAM ) * Max( PN,MDR ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "( Min( FirstVNF_CPU ,Max( PN,FirstVNF_RAM ) ) / DDR )", "choosing": "( ( ( RMSe / ( RRSe + RRSe ) ) / Min( MUM ,Max( RCSe,( ( RRSe + Min( MUC ,Min( MUC ,MLU ) ) ) + Max( MUM,MLU ) ) ) ) ) / ( CS * RCSe ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( CRS ,BR ) + ( ( Max( MDR,FirstVNF_CPU_Server ) + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( ( RCSe * ( Min( ( MUC / MUR ) ,MUR ) + Min( ( MUR + RCSe ) ,RMSe ) ) ) ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( FirstVNF_Mem - FirstVNF_CPU_Server ),( RRS / ( ARS * Min( ( MDR * ( Min( FirstVNF_Mem_Server ,FirstVNF_RAM ) + BR ) ) ,ARS ) ) ) )", "choosing": "( ( ( ( MUR - CS ) + MUR ) / Max( ( MUR + RCSe ),MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( Max( ACS,Const ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( MUM - MUC ) - ( CS + ( RMSe * CS ) ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem + ( CRS * ( ( FirstVNF_Mem_Server - ( RRS + Max( DDR,FirstVNF_CPU_Server ) ) ) - Const ) ) ) ) )", "choosing": "( Min( Min( MLU ,Min( RCSe ,MLU ) ) ,Min( MLU ,MLU ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * Max( DS,Max( MUM,Max( MLU,MLU ) ) ) ) + CS ) )", "obj1": 0.2012448132780083, "obj2": 0.615616436999408}, {"determining": "Min( ( Min( Min( BR ,Const ) ,( RRS + MRS ) ) - ( MDR + ( DDR - RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Min( Max( DDR,( FirstVNF_Mem / MRS ) ) ,( BR * ARS ) ) ) ) )", "choosing": "( Max( Max( MUM,RMSe ),MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( FirstVNF_Mem / FirstVNF_Mem ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( Max( RRS,AMS ) + ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MUR + MUM ) / Max( MLU,Min( ( MUM * MLU ) ,RRSe ) ) ) * ( RCSe + Min( MUC ,MUC ) ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "( DDR / Min( AMS ,( ACS * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( Max( FirstVNF_CPU_Server,MRS ) / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUC * ( ( ( RRSe + MUM ) * DS ) + CS ) ) / ( CS * MUR ) ) / ( RCSe + MUR ) ) / ( RMSe * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( RRSe ,( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( ( PN * BR ) - ( ACS / BR ) ),( DDR / FirstVNF_RAM ) )", "choosing": "( ( ( ( ( ( RMSe * MUC ) + ( MUM + ( ( RMSe - DS ) / ( MUC * RMSe ) ) ) ) + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.16597510373443983, "obj2": 0.6503209420092544}, {"determining": "( ( ( FirstVNF_Mem_Server - DDR ) / ( FirstVNF_CPU + PN ) ) / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR + ( CS * RRSe ) ) * ( MUC * ( DS / MUM ) ) ) / ( MUC / Max( MUM,( MUM + MUC ) ) ) ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( ( ( DS * MLU ) - MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / ( Const - ( PN - ARS ) ) ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - Const ) )", "choosing": "( ( ( RCSe * Max( ( RRSe / ( MUC / ( ( CS - CS ) * DS ) ) ),Max( Min( RCSe ,RCSe ),RMSe ) ) ) - ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUR ) ) / ( CS * DS ) )", "obj1": 0.11825726141078838, "obj2": 0.6913214753697248}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( DDR / Max( ( ( FirstVNF_RAM_Server * FirstVNF_Mem_Server ) / FirstVNF_CPU_Server ),FirstVNF_CPU_Server ) )", "choosing": "( ( ( ( MLU + MUR ) / ( ( ( ( Min( RMSe ,MUR ) - ( MUC + RRSe ) ) / MUM ) - MUC ) * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( RRS + FirstVNF_RAM ) ) ) / Min( MRS ,( ( ( MRS - FirstVNF_Mem_Server ) + FirstVNF_CPU_Server ) + Const ) ) )", "choosing": "( ( MUR / ( RRSe + ( ( CS / RMSe ) - Min( ( ( MUR - CS ) - MUR ) ,( ( RCSe / RCSe ) * MUC ) ) ) ) ) / Min( CS ,DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( Max( FirstVNF_CPU,( FirstVNF_CPU_Server + ( PN - AMS ) ) ) / Min( ( ( MRS + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ,AMS ) )", "choosing": "( ( ( ( ( ( ( Max( RCSe,MLU ) / RCSe ) / Min( Min( MLU ,MLU ) ,DS ) ) / RMSe ) / MLU ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ARS * FirstVNF_Mem ) / ( BR + Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) * ( CRS * ( FirstVNF_CPU - ACS ) ) )", "choosing": "( ( RRSe * ( CS - MLU ) ) - ( ( CS * RMSe ) + CS ) )", "obj1": 0.19294605809128632, "obj2": 0.6227004930234636}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6405575817151562}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( CRS / Min( AMS ,( ACS * ( Min( DDR ,AMS ) + FirstVNF_RAM ) ) ) )", "choosing": "( Min( ( MLU * MLU ) ,( MUR * ( Max( ( RRSe * RMSe ),MUM ) - DS ) ) ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1016597510373444, "obj2": 0.708491687710572}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( Min( ( FirstVNF_RAM_Server / FirstVNF_Mem ) ,( ACS * BR ) ) / DDR )", "choosing": "( Min( Min( MUM ,( ( ( ( ( MLU + RMSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) ) ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1825726141078838, "obj2": 0.6344982675137817}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ( Const * ( BR - PN ) ) * BR ) - Min( ACS ,BR ) ) )", "choosing": "( ( MUR + MUR ) / ( Min( DS ,CS ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( DDR / ( ( ( ( PN - Const ) / ( DDR * ( DDR + CRS ) ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / MUR ) / ( CS * DS ) )", "obj1": 0.16182572614107885, "obj2": 0.6537106286585534}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( Min( BR ,Const ) / ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( Min( ( CS / MLU ) ,( RRSe - CS ) ) - ( DS + ( RRSe * ( RCSe - MUM ) ) ) ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( DDR / ( ( ARS - Min( ( FirstVNF_CPU_Server - MDR ) ,ARS ) ) * FirstVNF_CPU_Server ) )", "choosing": "( Max( MUM,CS ) / ( ( ( MUR + MUR ) * ( CS * Max( ( MUC - RRSe ),RCSe ) ) ) - ( MUR + RCSe ) ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( MUR + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "( BR * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1950207468879668, "obj2": 0.6156558519246444}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.18049792531120332, "obj2": 0.6390608488669072}, {"determining": "Max( ( ( ARS * BR ) - ( ACS / ( ( FirstVNF_RAM_Server + ARS ) - Max( AMS,FirstVNF_Mem ) ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + ( ( RMSe * CS ) + CS ) ) / ( CS * MUR ) ) / ( ( ( MUR + MUR ) / ( CS * MUR ) ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0912863070539419, "obj2": 0.7205305219816034}, {"determining": "( ( FirstVNF_RAM_Server + ARS ) - Max( AMS,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + ( ( RMSe * CS ) + CS ) ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.16597510373443983, "obj2": 0.6503209420092544}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Max( RRS,RRS ) ) ) ,( Max( Min( FirstVNF_CPU_Server ,FirstVNF_CPU_Server ),DDR ) + ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) ) )", "choosing": "Max( Min( CS ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MUR * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / MUR ) )", "obj1": 0.18049792531120332, "obj2": 0.6390608488669072}, {"determining": "Min( ( Min( Min( Const ,BR ) ,( RRS + MRS ) ) - Min( Max( ( MDR * MRS ),( Max( DDR,DDR ) + FirstVNF_Mem ) ) ,Min( RRS ,RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Max( Max( DDR,( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) / MRS ) ),( BR * ARS ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.15767634854771784, "obj2": 0.6613366744101794}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ( CRS / FirstVNF_RAM ) * CRS ) ) )", "choosing": "( Min( Min( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( ( RMSe + MUR ) / ( RMSe * CS ) ) + RCSe ) ) ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1908713692946058, "obj2": 0.6265539425015308}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6846547300607609}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "Max( ( ( DDR / ( ( ( DDR * FirstVNF_CPU ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( ( DS * ( MUR / RCSe ) ) * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.14315352697095435, "obj2": 0.6693244431429073}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.14522821576763487, "obj2": 0.6680178092782607}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + ACS ) ) ) / Max( ( ( FirstVNF_Mem + ( ( Min( FirstVNF_Mem_Server ,CRS ) + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( Min( CS ,MUC ) * MUR ) ) / ( RCSe + MUR ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( Min( PN ,MDR ) * ( FirstVNF_Mem_Server + ( FirstVNF_CPU_Server * PN ) ) )", "choosing": "Max( Max( ( ( RRSe + ( RMSe * RMSe ) ) / Max( Max( RMSe,( ( ( RCSe + MUC ) - ( MUM * MUC ) ) + RCSe ) ),MLU ) ),MLU ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6405575817151562}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( MUR + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / CS ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( Min( FirstVNF_Mem_Server ,( ( ( PN * Max( Const,FirstVNF_CPU_Server ) ) * Min( Max( ( ( BR + MRS ) - ( FirstVNF_CPU_Server - MRS ) ),MRS ) ,PN ) ) - BR ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( ( DS - DS ) ,( Max( ( DS * Min( MUR ,RCSe ) ),RCSe ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR - FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,( FirstVNF_RAM_Server / FirstVNF_RAM_Server ) ) / FirstVNF_RAM_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6817711111558838}, {"determining": "( BR / ( Max( DDR,MRS ) + DDR ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / MUR ) / ( RRSe * Min( ( MUM - ( MUR + ( MUR * Max( Max( RRSe,MLU ),MUC ) ) ) ) ,MUC ) ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "( DDR / ( DDR + CRS ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( DDR / Min( ( ARS / ( Max( ( PN * FirstVNF_CPU_Server ),Max( ACS,( DDR + RRS ) ) ) * RRS ) ) ,( CRS * BR ) ) )", "choosing": "( ( ( Max( ( Min( Max( RCSe,( RCSe + MUR ) ) ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUM ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "Max( ( FirstVNF_Mem / ( AMS / FirstVNF_Mem ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) - ( CRS + FirstVNF_RAM ) ) ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( RRSe ,( ( MUR * Max( ( MUC * ( MLU * DS ) ),MUC ) ) + ( MUR + RCSe ) ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( DDR / ( DDR + CRS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( AMS - ( DDR * Max( ( FirstVNF_RAM / AMS ),( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( RRSe - CS ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MLU + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( Max( AMS,( FirstVNF_Mem * ( CRS * ( Max( ARS,FirstVNF_RAM_Server ) - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( RMSe / ( RRSe + MUC ) ) / ( ( RCSe * Max( RMSe,RCSe ) ) * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( Min( Const ,Max( Const,Max( Const,FirstVNF_RAM ) ) ) ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( Min( ( ( MLU + ( RMSe - Min( ( MLU - MUR ) ,( MUC - CS ) ) ) ) * Max( Max( ( MUC / MUC ),Min( Min( RMSe ,RMSe ) ,( MUC / MUM ) ) ),RCSe ) ) ,Max( Min( ( ( MUR * MUM ) - ( DS * Max( RRSe,RRSe ) ) ) ,CS ),MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11825726141078838, "obj2": 0.6913214753697248}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.16390041493775934, "obj2": 0.6521690890460698}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6949216061462076}, {"determining": "( BR * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1950207468879668, "obj2": 0.6156558519246444}, {"determining": "( ( RRS / FirstVNF_RAM_Server ) * ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_RAM_Server ) )", "choosing": "Max( Min( RRSe ,Min( MUM ,MUC ) ),( ( Min( ( Max( ( MUC * ( MLU * MUR ) ),MUC ) / ( DS * MUR ) ) ,Max( RRSe,MUC ) ) / CS ) / RRSe ) )", "obj1": 0.15975103734439833, "obj2": 0.659828917535598}, {"determining": "( BR * ( RRS / FirstVNF_RAM_Server ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1950207468879668, "obj2": 0.6156558519246444}], "13": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Max( MUM,MUC ) + MLU ) / ( ( MUM - RRSe ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( DDR + FirstVNF_RAM_Server ) * PN ) ) ) / ( Max( ( MDR - ( MRS + Min( MRS ,FirstVNF_Mem_Server ) ) ),MRS ) * ( ACS / BR ) ) )", "choosing": "( ( MUM + MUR ) / ( ( CS + RCSe ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "Min( ( Min( Min( BR ,Const ) ,( RRS + MRS ) ) - ( MDR + ( DDR - RRS ) ) ) ,( ( ( ARS * FirstVNF_Mem_Server ) / Max( BR,RRS ) ) + ( ( FirstVNF_CPU_Server * CRS ) + Min( Max( DDR,( FirstVNF_Mem / MRS ) ) ,( BR * ARS ) ) ) ) )", "choosing": "( Max( Max( MUM,RMSe ),MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( FirstVNF_Mem / FirstVNF_Mem ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( Max( RRS,AMS ) + ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MUR + MUM ) / Max( MLU,Min( ( MUM * MLU ) ,RRSe ) ) ) * ( RCSe + Min( MUC ,MUC ) ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * Min( RRSe ,( ( MUR * RMSe ) + ( MUR + RCSe ) ) ) ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( FirstVNF_Mem_Server - DDR ) / ( FirstVNF_CPU + PN ) ) / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR + ( CS * RRSe ) ) * ( MUC * ( DS / MUM ) ) ) / ( MUC / Max( MUM,( MUM + MUC ) ) ) ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( ( ( DS * MLU ) - MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ),( FirstVNF_Mem - FirstVNF_CPU ) )", "choosing": "( MUR / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( RRS + FirstVNF_RAM ) ) ) / Min( MRS ,( ( ( MRS - FirstVNF_Mem_Server ) + FirstVNF_CPU_Server ) + Const ) ) )", "choosing": "( ( MUR / ( RRSe + ( ( CS / RMSe ) - Min( ( ( MUR - CS ) - MUR ) ,( ( RCSe / RCSe ) * MUC ) ) ) ) ) / Min( CS ,DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( Max( FirstVNF_CPU,( FirstVNF_CPU_Server + ( PN - AMS ) ) ) / Min( ( ( MRS + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ,AMS ) )", "choosing": "( ( ( ( ( ( ( Max( RCSe,MLU ) / RCSe ) / Min( Min( MLU ,MLU ) ,DS ) ) / RMSe ) / MLU ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6405575817151562}, {"determining": "( CRS / Min( AMS ,( ACS * ( Min( DDR ,AMS ) + FirstVNF_RAM ) ) ) )", "choosing": "( Min( ( MLU * MLU ) ,( MUR * ( Max( ( RRSe * RMSe ),MUM ) - DS ) ) ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( Min( ( FirstVNF_RAM_Server / FirstVNF_Mem ) ,( ACS * BR ) ) / DDR )", "choosing": "( Min( Min( MUM ,( ( ( ( ( MLU + RMSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + RCSe ) ) / ( CS * DS ) ) ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1825726141078838, "obj2": 0.6344982675137817}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ( Const * ( BR - PN ) ) * BR ) - Min( ACS ,BR ) ) )", "choosing": "( ( MUR + MUR ) / ( Min( DS ,CS ) * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( Min( BR ,Const ) / ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( Min( ( CS / MLU ) ,( RRSe - CS ) ) - ( DS + ( RRSe * ( RCSe - MUM ) ) ) ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( MUR + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6846547300607609}, {"determining": "( ( ( ( PN - Const ) / ( DDR * FirstVNF_CPU ) ) + ( Min( BR ,CRS ) + ( ( FirstVNF_RAM_Server + DDR ) * PN ) ) ) / ( ( ARS * BR ) - ( ACS / BR ) ) )", "choosing": "( ( MUR + MUR ) / ( CS * MUR ) )", "obj1": 0.1887966804979253, "obj2": 0.6306020541082724}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + ACS ) ) ) / Max( ( ( FirstVNF_Mem + ( ( Min( FirstVNF_Mem_Server ,CRS ) + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( Min( CS ,MUC ) * MUR ) ) / ( RCSe + MUR ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( Min( PN ,MDR ) * ( FirstVNF_Mem_Server + ( FirstVNF_CPU_Server * PN ) ) )", "choosing": "Max( Max( ( ( RRSe + ( RMSe * RMSe ) ) / Max( Max( RMSe,( ( ( RCSe + MUC ) - ( MUM * MUC ) ) + RCSe ) ),MLU ) ),MLU ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6405575817151562}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( MUR + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / CS ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( Min( FirstVNF_Mem_Server ,( ( ( PN * Max( Const,FirstVNF_CPU_Server ) ) * Min( Max( ( ( BR + MRS ) - ( FirstVNF_CPU_Server - MRS ) ),MRS ) ,PN ) ) - BR ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( ( DS - DS ) ,( Max( ( DS * Min( MUR ,RCSe ) ),RCSe ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR - FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,( FirstVNF_RAM_Server / FirstVNF_RAM_Server ) ) / FirstVNF_RAM_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( BR / ( Max( DDR,MRS ) + DDR ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / MUR ) / ( RRSe * Min( ( MUM - ( MUR + ( MUR * Max( Max( RRSe,MLU ),MUC ) ) ) ) ,MUC ) ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( ( ARS / ( Max( ( PN * FirstVNF_CPU_Server ),Max( ACS,( DDR + RRS ) ) ) * RRS ) ) ,( CRS * BR ) ) )", "choosing": "( ( ( Max( ( Min( Max( RCSe,( RCSe + MUR ) ) ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUM ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "( DDR / ( DDR + CRS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( AMS - ( DDR * Max( ( FirstVNF_RAM / AMS ),( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( RRSe - CS ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MLU + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( Max( AMS,( FirstVNF_Mem * ( CRS * ( Max( ARS,FirstVNF_RAM_Server ) - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( RMSe / ( RRSe + MUC ) ) / ( ( RCSe * Max( RMSe,RCSe ) ) * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( Min( Const ,Max( Const,Max( Const,FirstVNF_RAM ) ) ) ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( Min( ( ( MLU + ( RMSe - Min( ( MLU - MUR ) ,( MUC - CS ) ) ) ) * Max( Max( ( MUC / MUC ),Min( Min( RMSe ,RMSe ) ,( MUC / MUM ) ) ),RCSe ) ) ,Max( Min( ( ( MUR * MUM ) - ( DS * Max( RRSe,RRSe ) ) ) ,CS ),MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( AMS ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) * ( FirstVNF_Mem_Server - BR ) ) ) )", "choosing": "( ( ( MLU + ( ( CS * MUC ) / MUM ) ) / ( MUR + RCSe ) ) / Max( CS,DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( RRS / FirstVNF_RAM_Server ) ) )", "choosing": "( ( ( MUR + ( ( ( DS * MUR ) + MUR ) / ( CS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.14315352697095435, "obj2": 0.6673709195122658}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.15560165975103735, "obj2": 0.6614132785925818}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.15560165975103735, "obj2": 0.6614132785925818}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.15560165975103735, "obj2": 0.6614132785925818}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + Min( DS ,RMSe ) ) )", "obj1": 0.15560165975103735, "obj2": 0.6614132785925818}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( Max( ARS,FirstVNF_RAM_Server ) * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / Max( CS,MUR ) ) / ( MUR + ( ( MLU + RCSe ) - RMSe ) ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * ( FirstVNF_Mem - AMS ) ) ) ) ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUM + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14522821576763487, "obj2": 0.6651118701927418}, {"determining": "Max( ( ( DDR + CRS ) * ( Min( ( MRS + RRS ) ,FirstVNF_RAM ) - FirstVNF_CPU ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe + CS ) + CS ) ) ) / ( MUR + Min( RRSe ,( ( ( MLU / MUR ) * RRSe ) * MUC ) ) ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( AMS * ( AMS / RRS ) ) ) * BR ) ) )", "choosing": "( ( ( ( Max( MUC,RRSe ) * ( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( ( ( MUC / RCSe ) + MUC ) * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( AMS ,( ( ( FirstVNF_Mem + FirstVNF_RAM_Server ) * ( DDR / CRS ) ) * BR ) ) )", "choosing": "( Min( ( Min( Max( RRSe,MUC ) ,( Max( ( Max( MUM,RRSe ) * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) ,RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "Max( ( ( DDR + ( ( BR - FirstVNF_CPU_Server ) * PN ) ) * ( AMS - FirstVNF_RAM ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( RMSe * CS ) - ( ( ( Max( Max( Max( Max( MUC,MUR ),MUR ),MLU ),MUR ) + RRSe ) * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "( Min( ( Const / AMS ) ,FirstVNF_Mem ) / AMS )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( ( MUC - Min( MUR ,MUC ) ) - RCSe ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) ) ) / ( MUR + RCSe ) ) / ( DS * DS ) )", "obj1": 0.0912863070539419, "obj2": 0.7157089333743145}, {"determining": "( ( ( ARS - DDR ) + MRS ) / ( ( MRS - MDR ) * MRS ) )", "choosing": "( ( MUR / ( RCSe * ( ( Max( ( ( RRSe * MUM ) / ( RRSe + RCSe ) ),RCSe ) * RMSe ) * MUM ) ) ) / ( CS * DS ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17012448132780084, "obj2": 0.6434259072108837}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( Min( Min( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( ( RMSe + MUR ) / ( RMSe * CS ) ) + RCSe ) ) ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18672199170124482, "obj2": 0.6316404058880175}, {"determining": "Max( ( DDR * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11410788381742738, "obj2": 0.6944419102299811}, {"determining": "Max( ( ( ( DDR / Min( RRS ,AMS ) ) - RRS ) * ( DDR / ( ( Max( ( ACS * Const ),FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( MUR + ( ( MUC + RCSe ) - ( CS * DS ) ) ) / ( ( MUR + ( ( ( MUR - ( DS + MUR ) ) * MUM ) * RMSe ) ) / ( CS * CS ) ) ) / Min( DS ,CS ) )", "obj1": 0.12863070539419086, "obj2": 0.6802535055178583}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6846547300607609}, {"determining": "( ( CRS / ( BR + Max( PN,MDR ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * CS ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / CS ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( MUR - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.15975103734439833, "obj2": 0.6504252646507137}, {"determining": "( Max( MDR,MDR ) / Min( AMS ,( BR * ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) ) )", "choosing": "( Max( ( MUR + ( ( MUR + MUR ) / ( CS * MUR ) ) ),Min( Max( CS,CS ) ,MUR ) ) / ( MLU * MUR ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "( Min( PN ,MDR ) * ( Min( Const ,MRS ) + FirstVNF_Mem_Server ) )", "choosing": "Max( Min( RRSe ,( MUC + DS ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( Max( RRSe,( MLU * RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.16597510373443983, "obj2": 0.6475921787726842}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6405575817151562}, {"determining": "( ( PN * MDR ) * ( Const + FirstVNF_Mem_Server ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17219917012448133, "obj2": 0.6405575817151562}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( Min( AMS ,FirstVNF_Mem ) * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.15767634854771784, "obj2": 0.652762119927684}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6846547300607609}, {"determining": "( ( AMS - ( ACS * ( CRS * ( AMS * PN ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( ( MUM - RCSe ) / Max( CS,CS ) ) + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) ) ) * ( CRS * ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ) ) )", "choosing": "( Min( Min( MLU ,( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.17842323651452283, "obj2": 0.637101903810743}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( Min( Min( MLU ,MUM ) ,Min( MLU ,MUM ) ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.1825726141078838, "obj2": 0.6344982675137817}, {"determining": "Max( ( ( DDR / ( ( ( FirstVNF_Mem_Server / FirstVNF_RAM_Server ) / ( MDR / ARS ) ) + FirstVNF_Mem ) ) * ( RRS - ( DDR / BR ) ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( Max( ( MUM / MUC ),RMSe ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( DS * CS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( ( FirstVNF_CPU * ACS ) / ( DDR + CRS ) )", "choosing": "( ( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) ) / ( CS * DS ) )", "obj1": 0.1016597510373444, "obj2": 0.7083283591288873}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_Mem_Server ) / BR )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUM + RCSe ) + CS ) ) ) / MUR ) / ( DS * MUM ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / MUR ) )", "obj1": 0.17012448132780084, "obj2": 0.6434259072108837}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "Max( Min( RRSe ,( MUM + MUC ) ),( ( Min( Max( RRSe,( MLU * RCSe ) ) ,( Max( ( DS * ( MUR / RCSe ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) )", "obj1": 0.17012448132780084, "obj2": 0.6434259072108837}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( ( DDR + FirstVNF_RAM_Server ) * PN ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * Max( BR,ACS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUC / Max( Max( ( ( MUM / ( CS / MUM ) ) - MUC ),( Max( MLU,Min( RCSe ,DS ) ) / MUR ) ),Min( Max( RCSe,RRSe ) ,( MUM + MLU ) ) ) ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( BR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( CS * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( PN ,FirstVNF_Mem ) )", "choosing": "( ( ( MUR + RCSe ) * ( ( MLU - CS ) / ( CS * MUR ) ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( RMSe * CS ) - ( ( RMSe * CS ) + CS ) )", "obj1": 0.18464730290456433, "obj2": 0.6332498442852322}, {"determining": "( DDR / Min( Min( ( PN / Const ) ,FirstVNF_Mem ) ,( ( DDR + CRS ) * ( Min( ( FirstVNF_Mem + MDR ) ,FirstVNF_RAM ) - AMS ) ) ) )", "choosing": "( ( ( ( ( RMSe + RRSe ) - ( ( ( MUC * MUC ) / ( MUM / RCSe ) ) - Min( Max( MUC,MLU ) ,RMSe ) ) ) - RMSe ) + RRSe ) / ( CS * MLU ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( MUR + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( MUR ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.0954356846473029, "obj2": 0.7113022232113926}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,Max( ( ( DDR + FirstVNF_Mem ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( ( MUR + MUR ) / ( CS * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( ( CRS / ( BR + Max( FirstVNF_Mem_Server,Max( ( ( CRS + DDR ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) ) ) ) * ( Max( FirstVNF_CPU,FirstVNF_CPU ) * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( Max( Min( MUM ,DS ),Max( Min( ( DS - MLU ) ,Min( MUM ,RCSe ) ),MUR ) ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7046182251758484}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}], "14": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Max( MUM,MUC ) + MLU ) / ( ( MUM - RRSe ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( FirstVNF_Mem / FirstVNF_Mem ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( Max( RRS,AMS ) + ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MUR + MUM ) / Max( MLU,Min( ( MUM * MLU ) ,RRSe ) ) ) * ( RCSe + Min( MUC ,MUC ) ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( ( FirstVNF_Mem_Server - DDR ) / ( FirstVNF_CPU + PN ) ) / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR + ( CS * RRSe ) ) * ( MUC * ( DS / MUM ) ) ) / ( MUC / Max( MUM,( MUM + MUC ) ) ) ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( ( ( DS * MLU ) - MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( RRS + FirstVNF_RAM ) ) ) / Min( MRS ,( ( ( MRS - FirstVNF_Mem_Server ) + FirstVNF_CPU_Server ) + Const ) ) )", "choosing": "( ( MUR / ( RRSe + ( ( CS / RMSe ) - Min( ( ( MUR - CS ) - MUR ) ,( ( RCSe / RCSe ) * MUC ) ) ) ) ) / Min( CS ,DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( Max( FirstVNF_CPU,( FirstVNF_CPU_Server + ( PN - AMS ) ) ) / Min( ( ( MRS + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ,AMS ) )", "choosing": "( ( ( ( ( ( ( Max( RCSe,MLU ) / RCSe ) / Min( Min( MLU ,MLU ) ,DS ) ) / RMSe ) / MLU ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( Min( BR ,Const ) / ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( Min( ( CS / MLU ) ,( RRSe - CS ) ) - ( DS + ( RRSe * ( RCSe - MUM ) ) ) ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + ACS ) ) ) / Max( ( ( FirstVNF_Mem + ( ( Min( FirstVNF_Mem_Server ,CRS ) + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( ( MLU + MUR ) / ( Min( CS ,MUC ) * MUR ) ) / ( RCSe + MUR ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( Max( ( Max( PN,CRS ) * ( RRS / FirstVNF_Mem_Server ) ),( MDR - FirstVNF_CPU ) ) * ( Max( FirstVNF_Mem_Server,( FirstVNF_RAM_Server / FirstVNF_RAM_Server ) ) / FirstVNF_RAM_Server ) )", "choosing": "( ( ( Min( RCSe ,RRSe ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( BR / ( Max( DDR,MRS ) + DDR ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / MUR ) / ( RRSe * Min( ( MUM - ( MUR + ( MUR * Max( Max( RRSe,MLU ),MUC ) ) ) ) ,MUC ) ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / ( DDR + CRS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( AMS - ( DDR * Max( ( FirstVNF_RAM / AMS ),( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( RRSe - CS ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MLU + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( Max( AMS,( FirstVNF_Mem * ( CRS * ( Max( ARS,FirstVNF_RAM_Server ) - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( RMSe / ( RRSe + MUC ) ) / ( ( RCSe * Max( RMSe,RCSe ) ) * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( Min( Const ,Max( Const,Max( Const,FirstVNF_RAM ) ) ) ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( Min( ( ( MLU + ( RMSe - Min( ( MLU - MUR ) ,( MUC - CS ) ) ) ) * Max( Max( ( MUC / MUC ),Min( Min( RMSe ,RMSe ) ,( MUC / MUM ) ) ),RCSe ) ) ,Max( Min( ( ( MUR * MUM ) - ( DS * Max( RRSe,RRSe ) ) ) ,CS ),MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( AMS ,( ( FirstVNF_RAM * FirstVNF_Mem_Server ) * ( FirstVNF_Mem_Server - BR ) ) ) )", "choosing": "( ( ( MLU + ( ( CS * MUC ) / MUM ) ) / ( MUR + RCSe ) ) / Max( CS,DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( Max( ARS,FirstVNF_RAM_Server ) * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / Max( CS,MUR ) ) / ( MUR + ( ( MLU + RCSe ) - RMSe ) ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR + CRS ) * ( Min( ( MRS + RRS ) ,FirstVNF_RAM ) - FirstVNF_CPU ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe + CS ) + CS ) ) ) / ( MUR + Min( RRSe ,( ( ( MLU / MUR ) * RRSe ) * MUC ) ) ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( AMS * ( AMS / RRS ) ) ) * BR ) ) )", "choosing": "( ( ( ( Max( MUC,RRSe ) * ( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( ( ( MUC / RCSe ) + MUC ) * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( AMS ,( ( ( FirstVNF_Mem + FirstVNF_RAM_Server ) * ( DDR / CRS ) ) * BR ) ) )", "choosing": "( Min( ( Min( Max( RRSe,MUC ) ,( Max( ( Max( MUM,RRSe ) * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) ,RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( Min( ( Const / AMS ) ,FirstVNF_Mem ) / AMS )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( ( MUC - Min( MUR ,MUC ) ) - RCSe ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) ) ) / ( MUR + RCSe ) ) / ( DS * DS ) )", "obj1": 0.0912863070539419, "obj2": 0.7157089333743145}, {"determining": "( ( ( ARS - DDR ) + MRS ) / ( ( MRS - MDR ) * MRS ) )", "choosing": "( ( MUR / ( RCSe * ( ( Max( ( ( RRSe * MUM ) / ( RRSe + RCSe ) ),RCSe ) * RMSe ) * MUM ) ) ) / ( CS * DS ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "Max( ( ( ( DDR / Min( RRS ,AMS ) ) - RRS ) * ( DDR / ( ( Max( ( ACS * Const ),FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( MUR + ( ( MUC + RCSe ) - ( CS * DS ) ) ) / ( ( MUR + ( ( ( MUR - ( DS + MUR ) ) * MUM ) * RMSe ) ) / ( CS * CS ) ) ) / Min( DS ,CS ) )", "obj1": 0.12863070539419086, "obj2": 0.6802535055178583}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( AMS - ( ACS * ( CRS * ( AMS * PN ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( ( MUM - RCSe ) / Max( CS,CS ) ) + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR / ( ( ( FirstVNF_Mem_Server / FirstVNF_RAM_Server ) / ( MDR / ARS ) ) + FirstVNF_Mem ) ) * ( RRS - ( DDR / BR ) ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( Max( ( MUM / MUC ),RMSe ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( DS * CS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_Mem_Server ) / BR )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUM + RCSe ) + CS ) ) ) / MUR ) / ( DS * MUM ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUC / MUM ) + MLU ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( ( DDR + FirstVNF_RAM_Server ) * PN ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * Max( BR,ACS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUC / Max( Max( ( ( MUM / ( CS / MUM ) ) - MUC ),( Max( MLU,Min( RCSe ,DS ) ) / MUR ) ),Min( Max( RCSe,RRSe ) ,( MUM + MLU ) ) ) ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( BR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( CS * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( PN ,FirstVNF_Mem ) )", "choosing": "( ( ( MUR + RCSe ) * ( ( MLU - CS ) / ( CS * MUR ) ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( Min( ( PN / Const ) ,FirstVNF_Mem ) ,( ( DDR + CRS ) * ( Min( ( FirstVNF_Mem + MDR ) ,FirstVNF_RAM ) - AMS ) ) ) )", "choosing": "( ( ( ( ( RMSe + RRSe ) - ( ( ( MUC * MUC ) / ( MUM / RCSe ) ) - Min( Max( MUC,MLU ) ,RMSe ) ) ) - RMSe ) + RRSe ) / ( CS * MLU ) )", "obj1": 0.14730290456431536, "obj2": 0.6615352963939726}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( MUR * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( BR * FirstVNF_Mem_Server ) - ( RRS * AMS ) )", "choosing": "( ( ( ( MUR + ( ( RMSe * MUC ) - RCSe ) ) / Max( CS,( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - ( MRS * PN ) )", "choosing": "( ( ( Min( MUC ,( MUM + ( MUR / MUM ) ) ) + MUC ) / MUR ) / ( DS * CS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * Max( ( BR / DDR ),RRS ) ),( ( FirstVNF_RAM_Server + FirstVNF_CPU_Server ) - FirstVNF_CPU ) )", "choosing": "( ( CS * DS ) / ( ( ( RRSe - CS ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) )", "obj1": 0.12863070539419086, "obj2": 0.6802535055178583}, {"determining": "( FirstVNF_Mem_Server / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( AMS / FirstVNF_CPU ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( MUR + ( ( MUR + MUR ) / ( CS * RRSe ) ) ) ) ) / ( MUR + RCSe ) ) / ( CS * ( ( CS * Max( MUM,MUC ) ) + DS ) ) )", "obj1": 0.0912863070539419, "obj2": 0.7157089333743145}, {"determining": "( AMS / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( CS * MUR ) ) / ( CS * DS ) )", "obj1": 0.11203319502074689, "obj2": 0.6942401610022728}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( ( CRS * ( FirstVNF_CPU * ACS ) ) / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( ( FirstVNF_RAM / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - Const ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6802535055178583}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * ( ACS + Min( FirstVNF_Mem_Server ,RRS ) ) ) ) ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUR - MLU ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0912863070539419, "obj2": 0.7157089333743145}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( ( ARS / ( Max( ( PN * FirstVNF_CPU_Server ),MDR ) * RRS ) ) ,( CRS * BR ) ) )", "choosing": "( ( ( Max( ( Min( DS ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.08091286307053942, "obj2": 0.7524451401984472}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( BR / ( DDR + CRS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / MUR ) / ( CS * DS ) )", "obj1": 0.1037344398340249, "obj2": 0.7026475984173463}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( Min( PN ,MDR ) * ( FirstVNF_Mem_Server + ( FirstVNF_CPU_Server * PN ) ) )", "choosing": "( ( ( Max( ( Min( DS ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.08091286307053942, "obj2": 0.7524451401984472}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( CRS / ( DDR + Max( FirstVNF_Mem_Server,Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) ) ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / CS ) ),RRSe ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.7085933897253706}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.6802535055178583}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( Max( ( FirstVNF_RAM_Server / MDR ),( Max( MRS,( ACS * Max( DDR,FirstVNF_RAM_Server ) ) ) - RRS ) ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) / FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / Min( ( RCSe - Max( MUR,MUC ) ) ,( ( Max( MUR,( DS - MUC ) ) + ( ( DS / MUR ) / RMSe ) ) * ( Min( ( MLU - RCSe ) ,( MUR - RCSe ) ) - RRSe ) ) ) ) / ( MUR + ( ( MUC + MUR ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( AMS - ( DDR * ( Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUC * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14315352697095435, "obj2": 0.6630841764056021}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,Max( FirstVNF_CPU,( PN + ARS ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( Max( RCSe,( Max( RCSe,RCSe ) - Min( ( ( MLU * Min( MUM ,MUM ) ) * ( ( MLU * MUR ) / DS ) ) ,( DS * CS ) ) ) ) * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / CS ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7088860840043131}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.6726631431587768}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( ( FirstVNF_CPU / ( ( CRS * AMS ) + ( ( CRS / FirstVNF_CPU ) + FirstVNF_CPU ) ) ) * ( CRS * ( FirstVNF_CPU / ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / Max( CS,MUR ) ) / ( DS * CS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( ( DDR + FirstVNF_RAM_Server ) * PN ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "Max( ( ( FirstVNF_CPU_Server + ( ( BR - FirstVNF_CPU_Server ) * PN ) ) * ( AMS - FirstVNF_RAM ) ),( RRS / ( ARS * Max( Min( ( ( Min( FirstVNF_RAM ,BR ) - FirstVNF_Mem_Server ) - ( ( FirstVNF_CPU_Server / MRS ) * FirstVNF_RAM_Server ) ) ,MDR ),FirstVNF_Mem ) ) ) )", "choosing": "( ( RCSe * CS ) / ( DS * CS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( Max( ARS,( FirstVNF_RAM * ( RRS + Const ) ) ) * ( ( AMS * ACS ) * CRS ) )", "choosing": "( ( ( ( RCSe + Min( ( MLU + MUR ) ,CS ) ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( DS * CS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( DDR / Min( Min( ( ( RRS / FirstVNF_CPU ) * ( Min( FirstVNF_RAM ,FirstVNF_CPU ) - RRS ) ) ,( ACS * Max( ARS,ARS ) ) ) ,BR ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUR + ( ( MUR * MUR ) / ( CS * MUR ) ) ) + CS ) ) ) / ( Max( MLU,MUC ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.1016597510373444, "obj2": 0.7067028494064861}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( ( CRS * ( FirstVNF_CPU * ACS ) ) * ( CRS / ( BR + ( ( CRS - RRS ) / FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( ( ( RCSe - RCSe ) - RRSe ) + MUR ) / ( CS * MUR ) ) + ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6820806330366417}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6820806330366417}, {"determining": "( DDR / Min( Min( FirstVNF_Mem ,( PN / Const ) ) ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6718156564095418}], "15": [{"determining": "( ( ( Const / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - ( Min( ACS ,( AMS - AMS ) ) / Const ) ) )", "choosing": "( ( MUR * MUR ) / Min( MUM ,RCSe ) )", "obj1": 1.0, "obj2": 0.0}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( ( FirstVNF_Mem / FirstVNF_Mem ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( Max( RRS,AMS ) + ( ( FirstVNF_CPU_Server + FirstVNF_Mem_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( DDR,FirstVNF_Mem_Server ) ) ) )", "choosing": "( ( ( ( MUR + MUM ) / Max( MLU,Min( ( MUM * MLU ) ,RRSe ) ) ) * ( RCSe + Min( MUC ,MUC ) ) ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( ( FirstVNF_Mem_Server - DDR ) / ( FirstVNF_CPU + PN ) ) / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( CS - ( ( ( MUR + ( CS * RRSe ) ) * ( MUC * ( DS / MUM ) ) ) / ( MUC / Max( MUM,( MUM + MUC ) ) ) ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( ( ( DS * MLU ) - MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( CRS + FirstVNF_RAM ) ) ) / Max( ( ( FirstVNF_Mem + ( ( MDR + FirstVNF_CPU_Server ) + FirstVNF_RAM_Server ) ) - ( PN + FirstVNF_Mem_Server ) ),( Min( FirstVNF_CPU ,CRS ) / Max( FirstVNF_Mem_Server,DDR ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( RRS + FirstVNF_RAM ) ) ) / Min( MRS ,( ( ( MRS - FirstVNF_Mem_Server ) + FirstVNF_CPU_Server ) + Const ) ) )", "choosing": "( ( MUR / ( RRSe + ( ( CS / RMSe ) - Min( ( ( MUR - CS ) - MUR ) ,( ( RCSe / RCSe ) * MUC ) ) ) ) ) / Min( CS ,DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( BR / ( Max( DDR,MRS ) + DDR ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / MUR ) / ( RRSe * Min( ( MUM - ( MUR + ( MUR * Max( Max( RRSe,MLU ),MUC ) ) ) ) ,MUC ) ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / ( DDR + CRS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( AMS - ( DDR * Max( ( FirstVNF_RAM / AMS ),( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( RRSe - CS ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MLU + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( Max( AMS,( FirstVNF_Mem * ( CRS * ( Max( ARS,FirstVNF_RAM_Server ) - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( RMSe / ( RRSe + MUC ) ) / ( ( RCSe * Max( RMSe,RCSe ) ) * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR + CRS ) * ( Min( ( MRS + RRS ) ,FirstVNF_RAM ) - FirstVNF_CPU ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe + CS ) + CS ) ) ) / ( MUR + Min( RRSe ,( ( ( MLU / MUR ) * RRSe ) * MUC ) ) ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( ( ( ARS - DDR ) + MRS ) / ( ( MRS - MDR ) * MRS ) )", "choosing": "( ( MUR / ( RCSe * ( ( Max( ( ( RRSe * MUM ) / ( RRSe + RCSe ) ),RCSe ) * RMSe ) * MUM ) ) ) / ( CS * DS ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( AMS - ( ACS * ( CRS * ( AMS * PN ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( ( MUM - RCSe ) / Max( CS,CS ) ) + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR / ( ( ( FirstVNF_Mem_Server / FirstVNF_RAM_Server ) / ( MDR / ARS ) ) + FirstVNF_Mem ) ) * ( RRS - ( DDR / BR ) ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( Max( ( MUM / MUC ),RMSe ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( DS * CS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_Mem_Server ) / BR )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUM + RCSe ) + CS ) ) ) / MUR ) / ( DS * MUM ) )", "obj1": 0.10995850622406639, "obj2": 0.6954607656311237}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( PN ,FirstVNF_Mem ) )", "choosing": "( ( ( MUR + RCSe ) * ( ( MLU - CS ) / ( CS * MUR ) ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( MUR * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "Max( ( FirstVNF_RAM_Server / FirstVNF_CPU_Server ),( RRS / Max( ARS,CRS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( BR * FirstVNF_Mem_Server ) - ( RRS * AMS ) )", "choosing": "( ( ( ( MUR + ( ( RMSe * MUC ) - RCSe ) ) / Max( CS,( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - ( MRS * PN ) )", "choosing": "( ( ( Min( MUC ,( MUM + ( MUR / MUM ) ) ) + MUC ) / MUR ) / ( DS * CS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( ( CRS * ( FirstVNF_CPU * ACS ) ) / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( ( ARS / ( Max( ( PN * FirstVNF_CPU_Server ),MDR ) * RRS ) ) ,( CRS * BR ) ) )", "choosing": "( ( ( Max( ( Min( DS ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.08091286307053942, "obj2": 0.7524451401984472}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( Min( PN ,MDR ) * ( FirstVNF_Mem_Server + ( FirstVNF_CPU_Server * PN ) ) )", "choosing": "( ( ( Max( ( Min( DS ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.08091286307053942, "obj2": 0.7524451401984472}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( Max( ( FirstVNF_RAM_Server / MDR ),( Max( MRS,( ACS * Max( DDR,FirstVNF_RAM_Server ) ) ) - RRS ) ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) / FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / Min( ( RCSe - Max( MUR,MUC ) ) ,( ( Max( MUR,( DS - MUC ) ) + ( ( DS / MUR ) / RMSe ) ) * ( Min( ( MLU - RCSe ) ,( MUR - RCSe ) ) - RRSe ) ) ) ) / ( MUR + ( ( MUC + MUR ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "( ( AMS - ( DDR * ( Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( MUC * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14315352697095435, "obj2": 0.6630841764056021}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,Max( FirstVNF_CPU,( PN + ARS ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( Max( RCSe,( Max( RCSe,RCSe ) - Min( ( ( MLU * Min( MUM ,MUM ) ) * ( ( MLU * MUR ) / DS ) ) ,( DS * CS ) ) ) ) * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / CS ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7088860840043131}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( ( FirstVNF_CPU / ( ( CRS * AMS ) + ( ( CRS / FirstVNF_CPU ) + FirstVNF_CPU ) ) ) * ( CRS * ( FirstVNF_CPU / ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / Max( CS,MUR ) ) / ( DS * CS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( AMS - ( DDR * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( ARS * BR ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6820806330366417}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6820806330366417}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6820806330366417}, {"determining": "( ( AMS - ( ( DDR + CRS ) * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( RMSe * CS ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "( DDR / Min( Min( FirstVNF_Mem ,( PN / Const ) ) ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( CRS / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( ( FirstVNF_CPU - Min( MDR ,FirstVNF_RAM ) ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( ( CS * DS ) + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12863070539419086, "obj2": 0.678893149107141}, {"determining": "( ( ( FirstVNF_RAM / ( MDR / ( Max( BR,FirstVNF_CPU_Server ) - ( ( MDR / ACS ) * FirstVNF_RAM ) ) ) ) + FirstVNF_RAM_Server ) - ( FirstVNF_Mem_Server - Const ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.13692946058091288, "obj2": 0.6717156043174921}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11203319502074689, "obj2": 0.6937225602734016}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "( DDR / Min( AMS ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUC / MUM ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.13070539419087138, "obj2": 0.672393693153292}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( Max( ( Min( DS ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.08091286307053942, "obj2": 0.7524451401984472}, {"determining": "( Min( PN ,MDR ) * ( FirstVNF_Mem_Server + ( FirstVNF_CPU_Server * PN ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( ( ( RRS * MRS ) / ( FirstVNF_CPU_Server * DDR ) ) - ( Min( CRS ,RRS ) - ( RRS + FirstVNF_RAM ) ) ) / Min( MRS ,( ( ( MRS - FirstVNF_Mem_Server ) + FirstVNF_CPU_Server ) + Const ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( AMS * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "Max( ( ( DDR + CRS ) * ( ( DDR / BR ) - AMS ) ),( AMS - ( FirstVNF_Mem * ( CRS * ( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ) - Const ) ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) ) ) ) )", "choosing": "( ( ( ( MUR + ( RRSe + MUC ) ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.14107883817427386, "obj2": 0.6686141257250129}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "Max( ( ( DDR / ( ( Max( FirstVNF_Mem_Server,FirstVNF_RAM_Server ) / FirstVNF_CPU ) + FirstVNF_Mem ) ) * ( ( DDR / BR ) - RRS ) ),( ( Min( AMS ,FirstVNF_Mem ) / BR ) - FirstVNF_CPU ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( DDR / Min( Min( FirstVNF_Mem ,( PN / Const ) ) ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0995850622406639, "obj2": 0.702504566332229}, {"determining": "Max( ( ( DDR + CRS ) * ( FirstVNF_RAM - AMS ) ),( RRS / ( ARS * CRS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( AMS - ( FirstVNF_Mem * ( CRS * ( CRS - Const ) ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( FirstVNF_CPU_Server / Min( AMS ,( ( ( MDR - ARS ) + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.10580912863070539, "obj2": 0.6975435366807999}, {"determining": "( Max( FirstVNF_Mem_Server,FirstVNF_Mem_Server ) / BR )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + ( RRS / FirstVNF_RAM_Server ) ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MUC ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.12448132780082988, "obj2": 0.6820806330366417}, {"determining": "( DDR / Min( DDR ,( ( ( ARS * CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * Min( MLU ,MUM ) ),MUC ) / ( CS * DS ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.08921161825726141, "obj2": 0.7163956503246007}, {"determining": "( DDR / Min( DDR ,( ( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) * BR ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * MUR ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12655601659751037, "obj2": 0.6820648338285591}, {"determining": "( BR / ( Max( DDR,MRS ) + DDR ) )", "choosing": "( ( ( Min( Max( RRSe,MUC ) ,( Max( ( DS * ( MUR / CS ) ),MUC ) / ( MUM * MUR ) ) ) / CS ) / RRSe ) / ( CS * DS ) )", "obj1": 0.09336099585062241, "obj2": 0.7088860840043131}, {"determining": "( ( AMS - ( ( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) ) * ( ( CRS - ( ARS / ( FirstVNF_RAM * RRS ) ) ) * CRS ) ) ) - Max( RRS,AMS ) )", "choosing": "( ( ( ( MUR + Max( ( DS * Min( MLU ,MUM ) ),MUC ) ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.11825726141078838, "obj2": 0.6888182010131908}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - AMS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,FirstVNF_Mem ) * ( FirstVNF_Mem_Server - ( ( CRS * ( FirstVNF_CPU * ACS ) ) / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( MUR * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( DDR / Min( ( ARS / ( FirstVNF_RAM * RRS ) ) ,( CRS * ( FirstVNF_CPU * ACS ) ) ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( MUR + ( MUR / ( CS * MUR ) ) ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.0912863070539419, "obj2": 0.7134949390079851}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( ( CRS * ( FirstVNF_CPU * ACS ) ) / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( DS * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( ( DDR + FirstVNF_RAM_Server ) * PN ) )", "choosing": "( ( ( Max( ( Min( DS ,( ( MUR / MUM ) - MUR ) ) / RMSe ),Max( ( MUM + MLU ),MUR ) ) + ( ( MUR + MUR ) / ( CS * MUR ) ) ) / Min( DS ,Max( CS,CS ) ) ) / ( CS * DS ) )", "obj1": 0.08091286307053942, "obj2": 0.7524451401984472}, {"determining": "( DDR / Min( AMS ,Min( AMS ,FirstVNF_Mem ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),( MUR + MUR ) ) / ( MUR * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( DDR / Min( AMS ,FirstVNF_Mem ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( DDR / Min( AMS ,( ( DDR + CRS ) * ( FirstVNF_Mem_Server - ( RRS / FirstVNF_RAM_Server ) ) ) ) )", "choosing": "( ( ( ( ( MUC + RCSe ) - ( RMSe * DS ) ) + MUC ) / ( MUR + ( Min( Max( RRSe,MUC ) ,( Max( ( DS * MLU ),MUC ) / ( MUR * MUR ) ) ) / CS ) ) ) / ( CS * DS ) )", "obj1": 0.08298755186721991, "obj2": 0.7466566951049399}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}, {"determining": "( DDR / Min( AMS ,BR ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * CS ) ) / ( MUR + ( ( MUC + RCSe ) - ( RMSe * DS ) ) ) ) / ( CS * DS ) )", "obj1": 0.11618257261410789, "obj2": 0.6905874165339381}, {"determining": "( DDR / ( DDR + CRS ) )", "choosing": "( ( ( ( MUR + MUR ) / ( CS * ( ( RMSe * CS ) + CS ) ) ) / ( MUR + RCSe ) ) / ( CS * DS ) )", "obj1": 0.12033195020746888, "obj2": 0.684952344954992}, {"determining": "( ( CRS / ( BR + FirstVNF_CPU_Server ) ) * ( CRS * ( FirstVNF_CPU * ACS ) ) )", "choosing": "( ( ( RRSe + MUC ) / MUR ) / ( CS * DS ) )", "obj1": 0.08713692946058091, "obj2": 0.7307899851583749}]}